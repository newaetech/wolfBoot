
wolfboot.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <IV>:
 8000000:	00 80 00 20 c1 07 00 08 bf 07 00 08 bd 07 00 08     ... ............
 8000010:	bd 07 00 08 bd 07 00 08 bd 07 00 08 00 00 00 00     ................
	...
 800002c:	bf 07 00 08 bf 07 00 08 00 00 00 00 bf 07 00 08     ................
 800003c:	bf 07 00 08                                         ....

08000040 <boot_jump>:
};
#endif

__attribute__((section(".boot_jmp")))
void boot_jump(void)
{
 8000040:	b508      	push	{r3, lr}
    uint32_t x = (uint32_t)(&END_STACK);
 8000042:	4b02      	ldr	r3, [pc, #8]	; (800004c <boot_jump+0xc>)
    asm volatile ("mov r13,%0" :: "r" (x));
 8000044:	469d      	mov	sp, r3
    isr_reset();
 8000046:	4b02      	ldr	r3, [pc, #8]	; (8000050 <boot_jump+0x10>)
 8000048:	4798      	blx	r3
}
 800004a:	bd08      	pop	{r3, pc}
 800004c:	20008000 	.word	0x20008000
 8000050:	080007c1 	.word	0x080007c1

08000054 <trigger_high>:
volatile uint32_t *GPIOA_IDR = (uint32_t *)(GPIOA + 0x10);


void trigger_high(void)
{
	*GPIOA_ODR |= 1 << 12;
 8000054:	4b03      	ldr	r3, [pc, #12]	; (8000064 <trigger_high+0x10>)
 8000056:	681a      	ldr	r2, [r3, #0]
 8000058:	6813      	ldr	r3, [r2, #0]
 800005a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800005e:	6013      	str	r3, [r2, #0]
}
 8000060:	4770      	bx	lr
 8000062:	bf00      	nop
 8000064:	2000000c 	.word	0x2000000c

08000068 <trigger_low>:

void trigger_low(void)
{
    *GPIOA_ODR &= ~(1 << 12);
 8000068:	4b03      	ldr	r3, [pc, #12]	; (8000078 <trigger_low+0x10>)
 800006a:	681a      	ldr	r2, [r3, #0]
 800006c:	6813      	ldr	r3, [r2, #0]
 800006e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000072:	6013      	str	r3, [r2, #0]
}
 8000074:	4770      	bx	lr
 8000076:	bf00      	nop
 8000078:	2000000c 	.word	0x2000000c

0800007c <trigger_setup>:

void trigger_setup(void)
{
 800007c:	b500      	push	{lr}
 800007e:	b083      	sub	sp, #12
	*AHB_ENABLE_REG |= (1 << 17);
 8000080:	4b0a      	ldr	r3, [pc, #40]	; (80000ac <trigger_setup+0x30>)
 8000082:	681a      	ldr	r2, [r3, #0]
 8000084:	6813      	ldr	r3, [r2, #0]
 8000086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800008a:	6013      	str	r3, [r2, #0]
    volatile uint32_t x = 0;
 800008c:	2300      	movs	r3, #0
 800008e:	9301      	str	r3, [sp, #4]
    x = 0;
 8000090:	9301      	str	r3, [sp, #4]
    x = 0;
 8000092:	9301      	str	r3, [sp, #4]
    trigger_low();
 8000094:	4b06      	ldr	r3, [pc, #24]	; (80000b0 <trigger_setup+0x34>)
 8000096:	4798      	blx	r3
	*GPIOA_MODER |= (0b01) << (12*2);
 8000098:	4b06      	ldr	r3, [pc, #24]	; (80000b4 <trigger_setup+0x38>)
 800009a:	681a      	ldr	r2, [r3, #0]
 800009c:	6813      	ldr	r3, [r2, #0]
 800009e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80000a2:	6013      	str	r3, [r2, #0]
}
 80000a4:	b003      	add	sp, #12
 80000a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80000aa:	bf00      	nop
 80000ac:	20000000 	.word	0x20000000
 80000b0:	08000069 	.word	0x08000069
 80000b4:	20000008 	.word	0x20000008

080000b8 <clock_pll_off>:

void clock_pll_off(void)
{
    uint32_t reg32;
    /* Enable internal high-speed oscillator. */
    RCC_CR |= RCC_CR_HSION;
 80000b8:	4a0d      	ldr	r2, [pc, #52]	; (80000f0 <clock_pll_off+0x38>)
 80000ba:	6813      	ldr	r3, [r2, #0]
 80000bc:	f043 0301 	orr.w	r3, r3, #1
 80000c0:	6013      	str	r3, [r2, #0]
    DMB();
 80000c2:	f3bf 8f5f 	dmb	sy
    while ((RCC_CR & RCC_CR_HSIRDY) == 0) {};
 80000c6:	4b0a      	ldr	r3, [pc, #40]	; (80000f0 <clock_pll_off+0x38>)
 80000c8:	681b      	ldr	r3, [r3, #0]
 80000ca:	f013 0f02 	tst.w	r3, #2
 80000ce:	d0fa      	beq.n	80000c6 <clock_pll_off+0xe>

    /* Select HSI as SYSCLK source. */
    reg32 = RCC_CFGR;
 80000d0:	4a08      	ldr	r2, [pc, #32]	; (80000f4 <clock_pll_off+0x3c>)
 80000d2:	6813      	ldr	r3, [r2, #0]
    reg32 &= ~((1 << 1) | (1 << 0));
 80000d4:	f023 0303 	bic.w	r3, r3, #3
    RCC_CFGR = (reg32 | RCC_CFGR_SW_HSI);
 80000d8:	6013      	str	r3, [r2, #0]
    DMB();
 80000da:	f3bf 8f5f 	dmb	sy

    /* Turn off PLL */
    RCC_CR &= ~RCC_CR_PLLON;
 80000de:	3a04      	subs	r2, #4
 80000e0:	6813      	ldr	r3, [r2, #0]
 80000e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80000e6:	6013      	str	r3, [r2, #0]
    DMB();
 80000e8:	f3bf 8f5f 	dmb	sy
}
 80000ec:	4770      	bx	lr
 80000ee:	bf00      	nop
 80000f0:	40021000 	.word	0x40021000
 80000f4:	40021004 	.word	0x40021004

080000f8 <hal_init>:
}

void hal_init(void)
{
    //clock_pll_on(0);
}
 80000f8:	4770      	bx	lr
	...

080000fc <hal_prepare_boot>:

void hal_prepare_boot(void)
{
 80000fc:	b508      	push	{r3, lr}
#ifdef SPI_FLASH
    spi_release();
#endif

    clock_pll_off();
 80000fe:	4b01      	ldr	r3, [pc, #4]	; (8000104 <hal_prepare_boot+0x8>)
 8000100:	4798      	blx	r3
}
 8000102:	bd08      	pop	{r3, pc}
 8000104:	080000b9 	.word	0x080000b9

08000108 <main>:
extern void (** const IV_RAM)(void);
#endif

void trigger_setup(void);
int main(void)
{
 8000108:	b508      	push	{r3, lr}
    hal_init();
 800010a:	4b03      	ldr	r3, [pc, #12]	; (8000118 <main+0x10>)
 800010c:	4798      	blx	r3
    //     }
    // }
    #ifdef GLITCH_VER
    wolfBoot_update_trigger();
    #endif
    trigger_setup();
 800010e:	4b03      	ldr	r3, [pc, #12]	; (800011c <main+0x14>)
 8000110:	4798      	blx	r3
#endif
#ifdef WOLFBOOT_TPM
    wolfBoot_tpm2_init();
#endif

    wolfBoot_start();
 8000112:	4b03      	ldr	r3, [pc, #12]	; (8000120 <main+0x18>)
 8000114:	4798      	blx	r3

    /* wolfBoot_start should never return. */
    // wolfBoot_panic();
    while(1);
 8000116:	e7fe      	b.n	8000116 <main+0xe>
 8000118:	080000f9 	.word	0x080000f9
 800011c:	0800007d 	.word	0x0800007d
 8000120:	20000709 	.word	0x20000709

08000124 <memset>:
    return (isupper(c) || islower(c));
}

#if !defined(__IAR_SYSTEMS_ICC__) && !defined(PLATFORM_X86_64_EFI)
void *memset(void *s, int c, size_t n)
{
 8000124:	b410      	push	{r4}
	unsigned char *d = (unsigned char *)s;
 8000126:	4603      	mov	r3, r0

	while (n--) {
 8000128:	1e54      	subs	r4, r2, #1
 800012a:	b11a      	cbz	r2, 8000134 <memset+0x10>
		*d++ = (unsigned char)c;
 800012c:	f803 1b01 	strb.w	r1, [r3], #1
	while (n--) {
 8000130:	4622      	mov	r2, r4
 8000132:	e7f9      	b.n	8000128 <memset+0x4>
	}

	return s;
}
 8000134:	bc10      	pop	{r4}
 8000136:	4770      	bx	lr

08000138 <strlen>:
    }
	return diff;
}

size_t strlen(const char *s)
{
 8000138:	4602      	mov	r2, r0
    size_t i = 0;
 800013a:	2000      	movs	r0, #0

    while (s[i] != 0)
 800013c:	5c13      	ldrb	r3, [r2, r0]
 800013e:	b10b      	cbz	r3, 8000144 <strlen+0xc>
        i++;
 8000140:	3001      	adds	r0, #1
 8000142:	e7fb      	b.n	800013c <strlen+0x4>

    return i;
}
 8000144:	4770      	bx	lr

08000146 <memcpy>:
{
    size_t i;
    const char *s = (const char *)src;
    char *d = (char *)dst;

    for (i = 0; i < n; i++) {
 8000146:	2300      	movs	r3, #0
 8000148:	4293      	cmp	r3, r2
 800014a:	d207      	bcs.n	800015c <memcpy+0x16>
{
 800014c:	b410      	push	{r4}
        d[i] = s[i];
 800014e:	5ccc      	ldrb	r4, [r1, r3]
 8000150:	54c4      	strb	r4, [r0, r3]
    for (i = 0; i < n; i++) {
 8000152:	3301      	adds	r3, #1
 8000154:	4293      	cmp	r3, r2
 8000156:	d3fa      	bcc.n	800014e <memcpy+0x8>
    }

    return dst;
}
 8000158:	bc10      	pop	{r4}
 800015a:	4770      	bx	lr
 800015c:	4770      	bx	lr

0800015e <memcmp>:
    return dst;
}


int memcmp(const void *_s1, const void *_s2, size_t n)
{
 800015e:	4603      	mov	r3, r0
    int diff = 0;
 8000160:	2000      	movs	r0, #0
    const unsigned char *s1 = (const unsigned char *)_s1;
    const unsigned char *s2 = (const unsigned char *)_s2;

    while (!diff && n) {
 8000162:	b970      	cbnz	r0, 8000182 <memcmp+0x24>
 8000164:	b162      	cbz	r2, 8000180 <memcmp+0x22>
{
 8000166:	b410      	push	{r4}
 8000168:	e000      	b.n	800016c <memcmp+0xe>
    while (!diff && n) {
 800016a:	b13a      	cbz	r2, 800017c <memcmp+0x1e>
        diff = (int)*s1 - (int)*s2;
 800016c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8000170:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000174:	1b00      	subs	r0, r0, r4
        s1++;
        s2++;
        n--;
 8000176:	3a01      	subs	r2, #1
    while (!diff && n) {
 8000178:	2800      	cmp	r0, #0
 800017a:	d0f6      	beq.n	800016a <memcmp+0xc>
    }

	return diff;
}
 800017c:	bc10      	pop	{r4}
 800017e:	4770      	bx	lr
 8000180:	4770      	bx	lr
 8000182:	4770      	bx	lr

08000184 <wolfBoot_image_confirm_signature_ok>:
    uint8_t sha_ok : 1;
};

static void wolfBoot_image_confirm_signature_ok(struct wolfBoot_image *img)
{
    img->signature_ok = 1;
 8000184:	7d43      	ldrb	r3, [r0, #21]
 8000186:	f043 0302 	orr.w	r3, r3, #2
 800018a:	7543      	strb	r3, [r0, #21]
}
 800018c:	4770      	bx	lr

0800018e <get_sha_block>:
static uint8_t ext_hash_block[WOLFBOOT_SHA_BLOCK_SIZE];
#endif
static uint8_t digest[WOLFBOOT_SHA_DIGEST_SIZE];
static uint8_t *get_sha_block(struct wolfBoot_image *img, uint32_t offset)
{
    if (offset > img->fw_size)
 800018e:	6903      	ldr	r3, [r0, #16]
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <get_sha_block+0xc>
    if (PART_IS_EXT(img)) {
        ext_flash_check_read((uintptr_t)(img->fw_base) + offset, ext_hash_block, WOLFBOOT_SHA_BLOCK_SIZE);
        return ext_hash_block;
    } else
#endif
        return (uint8_t *)(img->fw_base + offset);
 8000194:	68c0      	ldr	r0, [r0, #12]
 8000196:	4408      	add	r0, r1
 8000198:	4770      	bx	lr
        return NULL;
 800019a:	2000      	movs	r0, #0
}
 800019c:	4770      	bx	lr

0800019e <get_img_hdr>:
{
    if (PART_IS_EXT(img))
        return fetch_hdr_cpy(img);
    else
        return (uint8_t *)(img->hdr);
}
 800019e:	6800      	ldr	r0, [r0, #0]
 80001a0:	4770      	bx	lr
	...

080001a4 <get_header>:
{
 80001a4:	b508      	push	{r3, lr}
        return wolfBoot_find_header(img->hdr + IMAGE_HEADER_OFFSET, type, ptr);
 80001a6:	6800      	ldr	r0, [r0, #0]
 80001a8:	3008      	adds	r0, #8
 80001aa:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <get_header+0xc>)
 80001ac:	4798      	blx	r3
}
 80001ae:	bd08      	pop	{r3, pc}
 80001b0:	08000575 	.word	0x08000575

080001b4 <image_sha256>:
    uint16_t stored_sha_len;
    uint8_t *p;
    int blksz;
    uint32_t position = 0;
    wc_Sha256 sha256_ctx;
    if (!img)
 80001b4:	2800      	cmp	r0, #0
 80001b6:	d045      	beq.n	8000244 <image_sha256+0x90>
{
 80001b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001bc:	b09e      	sub	sp, #120	; 0x78
 80001be:	460f      	mov	r7, r1
 80001c0:	4606      	mov	r6, r0
        return -1;
    p = get_img_hdr(img);
 80001c2:	4b23      	ldr	r3, [pc, #140]	; (8000250 <image_sha256+0x9c>)
 80001c4:	4798      	blx	r3
 80001c6:	4604      	mov	r4, r0
    stored_sha_len = get_header(img, HDR_SHA256, &stored_sha);
 80001c8:	aa1d      	add	r2, sp, #116	; 0x74
 80001ca:	2103      	movs	r1, #3
 80001cc:	4630      	mov	r0, r6
 80001ce:	4b21      	ldr	r3, [pc, #132]	; (8000254 <image_sha256+0xa0>)
 80001d0:	4798      	blx	r3
    if (stored_sha_len != WOLFBOOT_SHA_DIGEST_SIZE)
 80001d2:	2820      	cmp	r0, #32
 80001d4:	d139      	bne.n	800024a <image_sha256+0x96>
        return -1;
    wc_InitSha256(&sha256_ctx);
 80001d6:	a801      	add	r0, sp, #4
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <image_sha256+0xa4>)
 80001da:	4798      	blx	r3
    end_sha = stored_sha - (2 * sizeof(uint16_t)); /* Subtract 2 Type + 2 Len */
 80001dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80001de:	f1a3 0804 	sub.w	r8, r3, #4
    while (p < end_sha) {
 80001e2:	e005      	b.n	80001f0 <image_sha256+0x3c>
        blksz = WOLFBOOT_SHA_BLOCK_SIZE;
        if (end_sha - p < blksz)
            blksz = end_sha - p;
        wc_Sha256Update(&sha256_ctx, p, blksz);
 80001e4:	462a      	mov	r2, r5
 80001e6:	4621      	mov	r1, r4
 80001e8:	a801      	add	r0, sp, #4
 80001ea:	4b1c      	ldr	r3, [pc, #112]	; (800025c <image_sha256+0xa8>)
 80001ec:	4798      	blx	r3
        p += blksz;
 80001ee:	442c      	add	r4, r5
    while (p < end_sha) {
 80001f0:	4544      	cmp	r4, r8
 80001f2:	d206      	bcs.n	8000202 <image_sha256+0x4e>
        if (end_sha - p < blksz)
 80001f4:	eba8 0504 	sub.w	r5, r8, r4
 80001f8:	2dff      	cmp	r5, #255	; 0xff
 80001fa:	ddf3      	ble.n	80001e4 <image_sha256+0x30>
        blksz = WOLFBOOT_SHA_BLOCK_SIZE;
 80001fc:	f44f 7580 	mov.w	r5, #256	; 0x100
 8000200:	e7f0      	b.n	80001e4 <image_sha256+0x30>
    uint32_t position = 0;
 8000202:	2400      	movs	r4, #0
 8000204:	e009      	b.n	800021a <image_sha256+0x66>
    }
    do {
        p = get_sha_block(img, position);
        if (p == NULL)
            break;
        blksz = WOLFBOOT_SHA_BLOCK_SIZE;
 8000206:	f44f 7580 	mov.w	r5, #256	; 0x100
        if (position + blksz > img->fw_size)
            blksz = img->fw_size - position;
        wc_Sha256Update(&sha256_ctx, p, blksz);
 800020a:	462a      	mov	r2, r5
 800020c:	a801      	add	r0, sp, #4
 800020e:	4b13      	ldr	r3, [pc, #76]	; (800025c <image_sha256+0xa8>)
 8000210:	4798      	blx	r3
        position += blksz;
 8000212:	442c      	add	r4, r5
    } while(position < img->fw_size);
 8000214:	6933      	ldr	r3, [r6, #16]
 8000216:	42a3      	cmp	r3, r4
 8000218:	d90c      	bls.n	8000234 <image_sha256+0x80>
        p = get_sha_block(img, position);
 800021a:	4621      	mov	r1, r4
 800021c:	4630      	mov	r0, r6
 800021e:	4b10      	ldr	r3, [pc, #64]	; (8000260 <image_sha256+0xac>)
 8000220:	4798      	blx	r3
        if (p == NULL)
 8000222:	4601      	mov	r1, r0
 8000224:	b130      	cbz	r0, 8000234 <image_sha256+0x80>
        if (position + blksz > img->fw_size)
 8000226:	f504 7380 	add.w	r3, r4, #256	; 0x100
 800022a:	6935      	ldr	r5, [r6, #16]
 800022c:	42ab      	cmp	r3, r5
 800022e:	d9ea      	bls.n	8000206 <image_sha256+0x52>
            blksz = img->fw_size - position;
 8000230:	1b2d      	subs	r5, r5, r4
 8000232:	e7ea      	b.n	800020a <image_sha256+0x56>

    wc_Sha256Final(&sha256_ctx, hash);
 8000234:	4639      	mov	r1, r7
 8000236:	a801      	add	r0, sp, #4
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <image_sha256+0xb0>)
 800023a:	4798      	blx	r3
    return 0;
 800023c:	2000      	movs	r0, #0
#endif /* WOLFBOOT_TPM && WOLFBOOT_HASH_TPM */
}
 800023e:	b01e      	add	sp, #120	; 0x78
 8000240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
 8000244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8000248:	4770      	bx	lr
        return -1;
 800024a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800024e:	e7f6      	b.n	800023e <image_sha256+0x8a>
 8000250:	0800019f 	.word	0x0800019f
 8000254:	080001a5 	.word	0x080001a5
 8000258:	08000df9 	.word	0x08000df9
 800025c:	08000c3d 	.word	0x08000c3d
 8000260:	0800018f 	.word	0x0800018f
 8000264:	08000ced 	.word	0x08000ced

08000268 <key_sha256>:

#ifndef WOLFBOOT_NO_SIGN
static void key_sha256(uint8_t *hash)
{
 8000268:	b570      	push	{r4, r5, r6, lr}
 800026a:	b09c      	sub	sp, #112	; 0x70
 800026c:	4606      	mov	r6, r0
    wolfTPM2_HashFinish(&wolftpm_dev, &tpmHash, hash, (word32*)&hashSz);
#else
    int blksz;
    unsigned int i = 0;
    wc_Sha256 sha256_ctx;
    wc_InitSha256(&sha256_ctx);
 800026e:	4668      	mov	r0, sp
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <key_sha256+0x44>)
 8000272:	4798      	blx	r3
    unsigned int i = 0;
 8000274:	2500      	movs	r5, #0
    while(i < KEY_LEN)
 8000276:	e008      	b.n	800028a <key_sha256+0x22>
    {
        blksz = WOLFBOOT_SHA_BLOCK_SIZE;
 8000278:	f44f 7480 	mov.w	r4, #256	; 0x100
        if ((i + blksz) > KEY_LEN)
            blksz = KEY_LEN - i;
        wc_Sha256Update(&sha256_ctx, (KEY_BUFFER + i), blksz);
 800027c:	4622      	mov	r2, r4
 800027e:	490c      	ldr	r1, [pc, #48]	; (80002b0 <key_sha256+0x48>)
 8000280:	4429      	add	r1, r5
 8000282:	4668      	mov	r0, sp
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <key_sha256+0x4c>)
 8000286:	4798      	blx	r3
        i += blksz;
 8000288:	4425      	add	r5, r4
    while(i < KEY_LEN)
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <key_sha256+0x50>)
 800028c:	681c      	ldr	r4, [r3, #0]
 800028e:	42ac      	cmp	r4, r5
 8000290:	d905      	bls.n	800029e <key_sha256+0x36>
        if ((i + blksz) > KEY_LEN)
 8000292:	f505 7380 	add.w	r3, r5, #256	; 0x100
 8000296:	42a3      	cmp	r3, r4
 8000298:	d9ee      	bls.n	8000278 <key_sha256+0x10>
            blksz = KEY_LEN - i;
 800029a:	1b64      	subs	r4, r4, r5
 800029c:	e7ee      	b.n	800027c <key_sha256+0x14>
    }
    wc_Sha256Final(&sha256_ctx, hash);
 800029e:	4631      	mov	r1, r6
 80002a0:	4668      	mov	r0, sp
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <key_sha256+0x54>)
 80002a4:	4798      	blx	r3
#endif /* WOLFBOOT_TPM && WOLFBOOT_HASH_TPM */
}
 80002a6:	b01c      	add	sp, #112	; 0x70
 80002a8:	bd70      	pop	{r4, r5, r6, pc}
 80002aa:	bf00      	nop
 80002ac:	08000df9 	.word	0x08000df9
 80002b0:	08004e5c 	.word	0x08004e5c
 80002b4:	08000c3d 	.word	0x08000c3d
 80002b8:	08004e9c 	.word	0x08004e9c
 80002bc:	08000ced 	.word	0x08000ced

080002c0 <wolfBoot_verify_signature>:
{
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80002c6:	4605      	mov	r5, r0
 80002c8:	460c      	mov	r4, r1
    int ret, verify_res = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	9381      	str	r3, [sp, #516]	; 0x204
    ret = wc_ecc_init(&ecc);
 80002ce:	a802      	add	r0, sp, #8
 80002d0:	4b1a      	ldr	r3, [pc, #104]	; (800033c <wolfBoot_verify_signature+0x7c>)
 80002d2:	4798      	blx	r3
    if (ret < 0) {
 80002d4:	2800      	cmp	r0, #0
 80002d6:	db0d      	blt.n	80002f4 <wolfBoot_verify_signature+0x34>
    ret = wc_ecc_import_unsigned(&ecc, (byte*)KEY_BUFFER,
 80002d8:	4a19      	ldr	r2, [pc, #100]	; (8000340 <wolfBoot_verify_signature+0x80>)
 80002da:	2307      	movs	r3, #7
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2300      	movs	r3, #0
 80002e0:	f1a2 0120 	sub.w	r1, r2, #32
 80002e4:	a802      	add	r0, sp, #8
 80002e6:	4e17      	ldr	r6, [pc, #92]	; (8000344 <wolfBoot_verify_signature+0x84>)
 80002e8:	47b0      	blx	r6
    if ((ret < 0) || ecc.type != ECC_PUBLICKEY) {
 80002ea:	2800      	cmp	r0, #0
 80002ec:	db02      	blt.n	80002f4 <wolfBoot_verify_signature+0x34>
 80002ee:	9b02      	ldr	r3, [sp, #8]
 80002f0:	2b01      	cmp	r3, #1
 80002f2:	d002      	beq.n	80002fa <wolfBoot_verify_signature+0x3a>
}
 80002f4:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 80002f8:	bd70      	pop	{r4, r5, r6, pc}
    mp_init(&r);
 80002fa:	a86d      	add	r0, sp, #436	; 0x1b4
 80002fc:	4e12      	ldr	r6, [pc, #72]	; (8000348 <wolfBoot_verify_signature+0x88>)
 80002fe:	47b0      	blx	r6
    mp_init(&s);
 8000300:	a859      	add	r0, sp, #356	; 0x164
 8000302:	47b0      	blx	r6
    mp_read_unsigned_bin(&r, sig, ECC_KEY_SIZE);
 8000304:	2220      	movs	r2, #32
 8000306:	4621      	mov	r1, r4
 8000308:	a86d      	add	r0, sp, #436	; 0x1b4
 800030a:	4e10      	ldr	r6, [pc, #64]	; (800034c <wolfBoot_verify_signature+0x8c>)
 800030c:	47b0      	blx	r6
    mp_read_unsigned_bin(&s, sig + ECC_KEY_SIZE, ECC_KEY_SIZE);
 800030e:	2220      	movs	r2, #32
 8000310:	18a1      	adds	r1, r4, r2
 8000312:	a859      	add	r0, sp, #356	; 0x164
 8000314:	47b0      	blx	r6
    VERIFY_FN(img, &verify_res, wc_ecc_verify_hash_ex, &r, &s, img->sha_hash,
 8000316:	ab02      	add	r3, sp, #8
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	ab81      	add	r3, sp, #516	; 0x204
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	2320      	movs	r3, #32
 8000320:	68aa      	ldr	r2, [r5, #8]
 8000322:	a959      	add	r1, sp, #356	; 0x164
 8000324:	a86d      	add	r0, sp, #436	; 0x1b4
 8000326:	4c0a      	ldr	r4, [pc, #40]	; (8000350 <wolfBoot_verify_signature+0x90>)
 8000328:	47a0      	blx	r4
 800032a:	2800      	cmp	r0, #0
 800032c:	d1e2      	bne.n	80002f4 <wolfBoot_verify_signature+0x34>
 800032e:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8000330:	2b01      	cmp	r3, #1
 8000332:	d1df      	bne.n	80002f4 <wolfBoot_verify_signature+0x34>
 8000334:	4628      	mov	r0, r5
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <wolfBoot_verify_signature+0x94>)
 8000338:	4798      	blx	r3
            WOLFBOOT_SHA_DIGEST_SIZE, &verify_res, &ecc);
 800033a:	e7db      	b.n	80002f4 <wolfBoot_verify_signature+0x34>
 800033c:	08004d39 	.word	0x08004d39
 8000340:	08004e7c 	.word	0x08004e7c
 8000344:	08004e41 	.word	0x08004e41
 8000348:	08000f05 	.word	0x08000f05
 800034c:	08001043 	.word	0x08001043
 8000350:	08004d4d 	.word	0x08004d4d
 8000354:	08000185 	.word	0x08000185

08000358 <wolfBoot_image_size>:

uint32_t wolfBoot_image_size(uint8_t *image)
{
    uint32_t *size = (uint32_t *)(image + sizeof (uint32_t));
    return im2n(*size);
}
 8000358:	6840      	ldr	r0, [r0, #4]
 800035a:	4770      	bx	lr

0800035c <wolfBoot_open_image>:
int wolfBoot_open_image(struct wolfBoot_image *img, uint8_t part)
{
    uint32_t *magic;
    uint32_t *size;
    uint8_t *image;
    if (!img)
 800035c:	2800      	cmp	r0, #0
 800035e:	d03a      	beq.n	80003d6 <wolfBoot_open_image+0x7a>
{
 8000360:	b538      	push	{r3, r4, r5, lr}
 8000362:	460d      	mov	r5, r1
 8000364:	4604      	mov	r4, r0

#ifdef EXT_FLASH
    hdr_cpy_done = 0; /* reset hdr "open" flag */
#endif

    memset(img, 0, sizeof(struct wolfBoot_image));
 8000366:	2218      	movs	r2, #24
 8000368:	2100      	movs	r1, #0
 800036a:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <wolfBoot_open_image+0x8c>)
 800036c:	4798      	blx	r3
    img->part = part;
 800036e:	7525      	strb	r5, [r4, #20]
    if (part == PART_SWAP) {
 8000370:	2d02      	cmp	r5, #2
 8000372:	d01a      	beq.n	80003aa <wolfBoot_open_image+0x4e>
                        ((*size & 0x00FF0000) >>  8) |
                        ((*size & 0xFF000000) >> 24));
        return 0;
    }
#endif
    if (part == PART_BOOT) {
 8000374:	bb2d      	cbnz	r5, 80003c2 <wolfBoot_open_image+0x66>
        img->hdr = (void*)WOLFBOOT_PARTITION_BOOT_ADDRESS;
 8000376:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <wolfBoot_open_image+0x90>)
 8000378:	6023      	str	r3, [r4, #0]
     * (or copy from external device to a local buffer via fetch_hdr_cpy)
     */
    if (PART_IS_EXT(img))
        image = fetch_hdr_cpy(img);
    else
        image = (uint8_t *)img->hdr;
 800037a:	6825      	ldr	r5, [r4, #0]

    magic = (uint32_t *)(image);
    if (*magic != WOLFBOOT_MAGIC)
 800037c:	682a      	ldr	r2, [r5, #0]
 800037e:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <wolfBoot_open_image+0x94>)
 8000380:	429a      	cmp	r2, r3
 8000382:	d12e      	bne.n	80003e2 <wolfBoot_open_image+0x86>
        return -1;
    img->fw_size = wolfBoot_image_size(image);
 8000384:	4628      	mov	r0, r5
 8000386:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <wolfBoot_open_image+0x98>)
 8000388:	4798      	blx	r3
 800038a:	6120      	str	r0, [r4, #16]
    if (img->fw_size > (WOLFBOOT_PARTITION_SIZE - IMAGE_HEADER_SIZE)) {
 800038c:	f5b0 4ffe 	cmp.w	r0, #32512	; 0x7f00
 8000390:	d81c      	bhi.n	80003cc <wolfBoot_open_image+0x70>
        img->fw_size = 0;
        return -1;
    }
    img->hdr_ok = 1;
 8000392:	7d63      	ldrb	r3, [r4, #21]
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	7563      	strb	r3, [r4, #21]
    img->fw_base = img->hdr + IMAGE_HEADER_SIZE;
 800039a:	f505 7380 	add.w	r3, r5, #256	; 0x100
 800039e:	60e3      	str	r3, [r4, #12]
    img->trailer = img->hdr + WOLFBOOT_PARTITION_SIZE;
 80003a0:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 80003a4:	6065      	str	r5, [r4, #4]
    return 0;
 80003a6:	2000      	movs	r0, #0
}
 80003a8:	bd38      	pop	{r3, r4, r5, pc}
        img->hdr_ok = 1;
 80003aa:	7d63      	ldrb	r3, [r4, #21]
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	7563      	strb	r3, [r4, #21]
        img->hdr = (void*)WOLFBOOT_PARTITION_SWAP_ADDRESS;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <wolfBoot_open_image+0x9c>)
 80003b4:	6023      	str	r3, [r4, #0]
        img->fw_base = img->hdr;
 80003b6:	60e3      	str	r3, [r4, #12]
        img->fw_size = WOLFBOOT_SECTOR_SIZE;
 80003b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003bc:	6123      	str	r3, [r4, #16]
        return 0;
 80003be:	2000      	movs	r0, #0
 80003c0:	e7f2      	b.n	80003a8 <wolfBoot_open_image+0x4c>
    } else if (part == PART_UPDATE) {
 80003c2:	2d01      	cmp	r5, #1
 80003c4:	d10a      	bne.n	80003dc <wolfBoot_open_image+0x80>
        img->hdr = (void*)WOLFBOOT_PARTITION_UPDATE_ADDRESS;
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <wolfBoot_open_image+0xa0>)
 80003c8:	6023      	str	r3, [r4, #0]
 80003ca:	e7d6      	b.n	800037a <wolfBoot_open_image+0x1e>
        img->fw_size = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	6123      	str	r3, [r4, #16]
        return -1;
 80003d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003d4:	e7e8      	b.n	80003a8 <wolfBoot_open_image+0x4c>
        return -1;
 80003d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80003da:	4770      	bx	lr
        return -1;
 80003dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003e0:	e7e2      	b.n	80003a8 <wolfBoot_open_image+0x4c>
        return -1;
 80003e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003e6:	e7df      	b.n	80003a8 <wolfBoot_open_image+0x4c>
 80003e8:	08000125 	.word	0x08000125
 80003ec:	08008000 	.word	0x08008000
 80003f0:	464c4f57 	.word	0x464c4f57
 80003f4:	08000359 	.word	0x08000359
 80003f8:	08018000 	.word	0x08018000
 80003fc:	08010000 	.word	0x08010000

08000400 <wolfBoot_verify_integrity>:

int wolfBoot_verify_integrity(struct wolfBoot_image *img)
{
 8000400:	b530      	push	{r4, r5, lr}
 8000402:	b083      	sub	sp, #12
 8000404:	4604      	mov	r4, r0
    uint8_t *stored_sha;
    uint16_t stored_sha_len;
    stored_sha_len = get_header(img, WOLFBOOT_SHA_HDR, &stored_sha);
 8000406:	aa01      	add	r2, sp, #4
 8000408:	2103      	movs	r1, #3
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <wolfBoot_verify_integrity+0x54>)
 800040c:	4798      	blx	r3
    if (stored_sha_len != WOLFBOOT_SHA_DIGEST_SIZE)
 800040e:	2820      	cmp	r0, #32
 8000410:	d117      	bne.n	8000442 <wolfBoot_verify_integrity+0x42>
 8000412:	4605      	mov	r5, r0
        return -1;
    if (image_hash(img, digest) != 0)
 8000414:	4910      	ldr	r1, [pc, #64]	; (8000458 <wolfBoot_verify_integrity+0x58>)
 8000416:	4620      	mov	r0, r4
 8000418:	4b10      	ldr	r3, [pc, #64]	; (800045c <wolfBoot_verify_integrity+0x5c>)
 800041a:	4798      	blx	r3
 800041c:	b9a0      	cbnz	r0, 8000448 <wolfBoot_verify_integrity+0x48>
     * of a Measured Boot is to record the current boot state
     */
    if (measure_boot(digest) != 0)
        return -1;
#endif
    if (memcmp(digest, stored_sha, stored_sha_len) != 0)
 800041e:	462a      	mov	r2, r5
 8000420:	9901      	ldr	r1, [sp, #4]
 8000422:	480d      	ldr	r0, [pc, #52]	; (8000458 <wolfBoot_verify_integrity+0x58>)
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <wolfBoot_verify_integrity+0x60>)
 8000426:	4798      	blx	r3
 8000428:	4605      	mov	r5, r0
 800042a:	b980      	cbnz	r0, 800044e <wolfBoot_verify_integrity+0x4e>
        return -1;
    img->sha_ok = 1;
 800042c:	7d63      	ldrb	r3, [r4, #21]
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	7563      	strb	r3, [r4, #21]
    img->sha_hash = stored_sha;
 8000434:	9b01      	ldr	r3, [sp, #4]
 8000436:	60a3      	str	r3, [r4, #8]
#ifdef GLITCH_AUTH
    trigger_high();
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <wolfBoot_verify_integrity+0x64>)
 800043a:	4798      	blx	r3
#endif
    return 0;
}
 800043c:	4628      	mov	r0, r5
 800043e:	b003      	add	sp, #12
 8000440:	bd30      	pop	{r4, r5, pc}
        return -1;
 8000442:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000446:	e7f9      	b.n	800043c <wolfBoot_verify_integrity+0x3c>
        return -1;
 8000448:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800044c:	e7f6      	b.n	800043c <wolfBoot_verify_integrity+0x3c>
        return -1;
 800044e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000452:	e7f3      	b.n	800043c <wolfBoot_verify_integrity+0x3c>
 8000454:	080001a5 	.word	0x080001a5
 8000458:	200007dc 	.word	0x200007dc
 800045c:	080001b5 	.word	0x080001b5
 8000460:	0800015f 	.word	0x0800015f
 8000464:	08000055 	.word	0x08000055

08000468 <wolfBoot_verify_authenticity>:
{
    return 0;
}
#else
int wolfBoot_verify_authenticity(struct wolfBoot_image *img)
{
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	b085      	sub	sp, #20
 800046c:	4604      	mov	r4, r0
    uint16_t pubkey_hint_size;
    uint8_t *image_type_buf;
    uint16_t image_type;
    uint16_t image_type_size;

    stored_signature_size = get_header(img, HDR_SIGNATURE, &stored_signature);
 800046e:	aa03      	add	r2, sp, #12
 8000470:	2120      	movs	r1, #32
 8000472:	4b27      	ldr	r3, [pc, #156]	; (8000510 <wolfBoot_verify_authenticity+0xa8>)
 8000474:	4798      	blx	r3
    if (stored_signature_size != IMAGE_SIGNATURE_SIZE)
 8000476:	2840      	cmp	r0, #64	; 0x40
 8000478:	d13d      	bne.n	80004f6 <wolfBoot_verify_authenticity+0x8e>
       return -1;
    pubkey_hint_size = get_header(img, HDR_PUBKEY, &pubkey_hint);
 800047a:	aa02      	add	r2, sp, #8
 800047c:	2110      	movs	r1, #16
 800047e:	4620      	mov	r0, r4
 8000480:	4b23      	ldr	r3, [pc, #140]	; (8000510 <wolfBoot_verify_authenticity+0xa8>)
 8000482:	4798      	blx	r3
    if (pubkey_hint_size == WOLFBOOT_SHA_DIGEST_SIZE) {
 8000484:	2820      	cmp	r0, #32
 8000486:	d01d      	beq.n	80004c4 <wolfBoot_verify_authenticity+0x5c>
        key_hash(digest);
        if (memcmp(digest, pubkey_hint, WOLFBOOT_SHA_DIGEST_SIZE) != 0)
            return -1;
    }
    image_type_size = get_header(img, HDR_IMG_TYPE, &image_type_buf);
 8000488:	aa01      	add	r2, sp, #4
 800048a:	2104      	movs	r1, #4
 800048c:	4620      	mov	r0, r4
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <wolfBoot_verify_authenticity+0xa8>)
 8000490:	4798      	blx	r3
    if (image_type_size != sizeof(uint16_t))
 8000492:	2802      	cmp	r0, #2
 8000494:	d132      	bne.n	80004fc <wolfBoot_verify_authenticity+0x94>
            return -1;
    image_type = (uint16_t)(image_type_buf[0] + (image_type_buf[1] << 8));
 8000496:	9a01      	ldr	r2, [sp, #4]
 8000498:	7813      	ldrb	r3, [r2, #0]
 800049a:	7852      	ldrb	r2, [r2, #1]
 800049c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    if ((image_type & 0xFF00) != HDR_IMG_TYPE_AUTH)
 80004a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80004a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004a8:	d12b      	bne.n	8000502 <wolfBoot_verify_authenticity+0x9a>
        return -1;
    if (img->sha_hash == NULL) {
 80004aa:	68a3      	ldr	r3, [r4, #8]
 80004ac:	b1c3      	cbz	r3, 80004e0 <wolfBoot_verify_authenticity+0x78>
     *
     * only a call to wolfBoot_image_confirm_signature_ok() sets
     * img->signature_ok to 1.
     *
     */
    wolfBoot_verify_signature(img, stored_signature);
 80004ae:	9903      	ldr	r1, [sp, #12]
 80004b0:	4620      	mov	r0, r4
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <wolfBoot_verify_authenticity+0xac>)
 80004b4:	4798      	blx	r3
    // trigger_low();
    if (img->signature_ok == 1)
 80004b6:	7d63      	ldrb	r3, [r4, #21]
 80004b8:	f013 0f02 	tst.w	r3, #2
 80004bc:	d018      	beq.n	80004f0 <wolfBoot_verify_authenticity+0x88>
        return 0;
 80004be:	2000      	movs	r0, #0
    return -2;
}
 80004c0:	b005      	add	sp, #20
 80004c2:	bd30      	pop	{r4, r5, pc}
        key_hash(digest);
 80004c4:	4d14      	ldr	r5, [pc, #80]	; (8000518 <wolfBoot_verify_authenticity+0xb0>)
 80004c6:	4628      	mov	r0, r5
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <wolfBoot_verify_authenticity+0xb4>)
 80004ca:	4798      	blx	r3
        if (memcmp(digest, pubkey_hint, WOLFBOOT_SHA_DIGEST_SIZE) != 0)
 80004cc:	2220      	movs	r2, #32
 80004ce:	9902      	ldr	r1, [sp, #8]
 80004d0:	4628      	mov	r0, r5
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <wolfBoot_verify_authenticity+0xb8>)
 80004d4:	4798      	blx	r3
 80004d6:	2800      	cmp	r0, #0
 80004d8:	d0d6      	beq.n	8000488 <wolfBoot_verify_authenticity+0x20>
            return -1;
 80004da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004de:	e7ef      	b.n	80004c0 <wolfBoot_verify_authenticity+0x58>
        if (image_hash(img, digest) != 0)
 80004e0:	490d      	ldr	r1, [pc, #52]	; (8000518 <wolfBoot_verify_authenticity+0xb0>)
 80004e2:	4620      	mov	r0, r4
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <wolfBoot_verify_authenticity+0xbc>)
 80004e6:	4798      	blx	r3
 80004e8:	b970      	cbnz	r0, 8000508 <wolfBoot_verify_authenticity+0xa0>
        img->sha_hash = digest;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <wolfBoot_verify_authenticity+0xb0>)
 80004ec:	60a3      	str	r3, [r4, #8]
 80004ee:	e7de      	b.n	80004ae <wolfBoot_verify_authenticity+0x46>
    return -2;
 80004f0:	f06f 0001 	mvn.w	r0, #1
 80004f4:	e7e4      	b.n	80004c0 <wolfBoot_verify_authenticity+0x58>
       return -1;
 80004f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004fa:	e7e1      	b.n	80004c0 <wolfBoot_verify_authenticity+0x58>
            return -1;
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000500:	e7de      	b.n	80004c0 <wolfBoot_verify_authenticity+0x58>
        return -1;
 8000502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000506:	e7db      	b.n	80004c0 <wolfBoot_verify_authenticity+0x58>
            return -1;
 8000508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800050c:	e7d8      	b.n	80004c0 <wolfBoot_verify_authenticity+0x58>
 800050e:	bf00      	nop
 8000510:	080001a5 	.word	0x080001a5
 8000514:	080002c1 	.word	0x080002c1
 8000518:	200007dc 	.word	0x200007dc
 800051c:	08000269 	.word	0x08000269
 8000520:	0800015f 	.word	0x0800015f
 8000524:	080001b5 	.word	0x080001b5

08000528 <wolfBoot_get_update_sector_flag>:
    *st = *state;
    return 0;
}

int wolfBoot_get_update_sector_flag(uint16_t sector, uint8_t *flag)
{
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	4604      	mov	r4, r0
 800052c:	460d      	mov	r5, r1
    uint32_t *magic;
    uint8_t *flags;
    uint8_t pos = sector >> 1;
 800052e:	f3c0 0647 	ubfx	r6, r0, #1, #8
    magic = get_partition_magic(PART_UPDATE);
 8000532:	2001      	movs	r0, #1
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <wolfBoot_get_update_sector_flag+0x40>)
 8000536:	4798      	blx	r3
    if (*magic != WOLFBOOT_MAGIC_TRAIL)
 8000538:	6802      	ldr	r2, [r0, #0]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <wolfBoot_get_update_sector_flag+0x44>)
 800053c:	429a      	cmp	r2, r3
 800053e:	d110      	bne.n	8000562 <wolfBoot_get_update_sector_flag+0x3a>
        return -1;
    flags = get_update_sector_flags(pos);
 8000540:	4630      	mov	r0, r6
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <wolfBoot_get_update_sector_flag+0x48>)
 8000544:	4798      	blx	r3
    if (sector == (pos << 1))
 8000546:	ebb4 0f46 	cmp.w	r4, r6, lsl #1
 800054a:	d004      	beq.n	8000556 <wolfBoot_get_update_sector_flag+0x2e>
        *flag = *flags & 0x0F;
    else
        *flag = (*flags & 0xF0) >> 4;
 800054c:	7803      	ldrb	r3, [r0, #0]
 800054e:	091b      	lsrs	r3, r3, #4
 8000550:	702b      	strb	r3, [r5, #0]
    return 0;
 8000552:	2000      	movs	r0, #0
}
 8000554:	bd70      	pop	{r4, r5, r6, pc}
        *flag = *flags & 0x0F;
 8000556:	7803      	ldrb	r3, [r0, #0]
 8000558:	f003 030f 	and.w	r3, r3, #15
 800055c:	702b      	strb	r3, [r5, #0]
    return 0;
 800055e:	2000      	movs	r0, #0
 8000560:	e7f8      	b.n	8000554 <wolfBoot_get_update_sector_flag+0x2c>
        return -1;
 8000562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000566:	e7f5      	b.n	8000554 <wolfBoot_get_update_sector_flag+0x2c>
 8000568:	20000291 	.word	0x20000291
 800056c:	544f4f42 	.word	0x544f4f42
 8000570:	200002bf 	.word	0x200002bf

08000574 <wolfBoot_find_header>:
    wolfBoot_erase_encrypt_key();
#endif
}

uint16_t wolfBoot_find_header(uint8_t *haystack, uint16_t type, uint8_t **ptr)
{
 8000574:	b4f0      	push	{r4, r5, r6, r7}
 8000576:	4603      	mov	r3, r0
    uint8_t *p = haystack;
    uint16_t len;
    const volatile uint8_t *max_p = (haystack - IMAGE_HEADER_OFFSET) + IMAGE_HEADER_SIZE;
 8000578:	f100 07f8 	add.w	r7, r0, #248	; 0xf8
    *ptr = NULL;
 800057c:	2000      	movs	r0, #0
 800057e:	6010      	str	r0, [r2, #0]
    if (p > max_p) {
 8000580:	e015      	b.n	80005ae <wolfBoot_find_header+0x3a>
    while ((p + 4) < max_p) {
        if ((p[0] == 0) && (p[1] == 0)) {
            unit_dbg("Explicit end of options reached\n");
            break;
        }
        if (*p == HDR_PADDING) {
 8000582:	2cff      	cmp	r4, #255	; 0xff
 8000584:	d01e      	beq.n	80005c4 <wolfBoot_find_header+0x50>
            /* Padding byte (skip one position) */
            p++;
            continue;
        }
        /* Sanity check to prevent dereferencing unaligned half-words */
        if ((((unsigned long)p) & 0x01) != 0) {
 8000586:	f013 0f01 	tst.w	r3, #1
 800058a:	d11d      	bne.n	80005c8 <wolfBoot_find_header+0x54>
            p++;
            continue;
        }
        len = p[2] | (p[3] << 8);
 800058c:	7898      	ldrb	r0, [r3, #2]
 800058e:	78dd      	ldrb	r5, [r3, #3]
 8000590:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
        if ((4 + len) > (uint16_t)(IMAGE_HEADER_SIZE - IMAGE_HEADER_OFFSET)) {
 8000594:	28f4      	cmp	r0, #244	; 0xf4
 8000596:	d81e      	bhi.n	80005d6 <wolfBoot_find_header+0x62>
            unit_dbg("This field is too large (bigger than the space available in the current header)\n");
            break;
        }
        if (p + 4 + len > max_p) {
 8000598:	1d05      	adds	r5, r0, #4
 800059a:	441d      	add	r5, r3
 800059c:	42bd      	cmp	r5, r7
 800059e:	d81c      	bhi.n	80005da <wolfBoot_find_header+0x66>
            unit_dbg("This field is too large and would overflow the image header\n");
            break;
        }
        if ((p[0] | (p[1] << 8)) == type) {
 80005a0:	785d      	ldrb	r5, [r3, #1]
 80005a2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80005a6:	428c      	cmp	r4, r1
 80005a8:	d010      	beq.n	80005cc <wolfBoot_find_header+0x58>
            *ptr = (p + 4);
            return len;
        }
        p += 4 + len;
 80005aa:	3004      	adds	r0, #4
 80005ac:	4403      	add	r3, r0
    while ((p + 4) < max_p) {
 80005ae:	1d1e      	adds	r6, r3, #4
 80005b0:	42be      	cmp	r6, r7
 80005b2:	d20d      	bcs.n	80005d0 <wolfBoot_find_header+0x5c>
        if ((p[0] == 0) && (p[1] == 0)) {
 80005b4:	781c      	ldrb	r4, [r3, #0]
 80005b6:	2c00      	cmp	r4, #0
 80005b8:	d1e3      	bne.n	8000582 <wolfBoot_find_header+0xe>
 80005ba:	7858      	ldrb	r0, [r3, #1]
 80005bc:	2800      	cmp	r0, #0
 80005be:	d1e0      	bne.n	8000582 <wolfBoot_find_header+0xe>
    }
    return 0;
 80005c0:	2000      	movs	r0, #0
 80005c2:	e006      	b.n	80005d2 <wolfBoot_find_header+0x5e>
            p++;
 80005c4:	3301      	adds	r3, #1
            continue;
 80005c6:	e7f2      	b.n	80005ae <wolfBoot_find_header+0x3a>
            p++;
 80005c8:	3301      	adds	r3, #1
            continue;
 80005ca:	e7f0      	b.n	80005ae <wolfBoot_find_header+0x3a>
            *ptr = (p + 4);
 80005cc:	6016      	str	r6, [r2, #0]
            return len;
 80005ce:	e000      	b.n	80005d2 <wolfBoot_find_header+0x5e>
    return 0;
 80005d0:	2000      	movs	r0, #0
}
 80005d2:	bcf0      	pop	{r4, r5, r6, r7}
 80005d4:	4770      	bx	lr
    return 0;
 80005d6:	2000      	movs	r0, #0
 80005d8:	e7fb      	b.n	80005d2 <wolfBoot_find_header+0x5e>
 80005da:	2000      	movs	r0, #0
 80005dc:	e7f9      	b.n	80005d2 <wolfBoot_find_header+0x5e>
	...

080005e0 <wolfBoot_get_blob_version>:
    return 0;
}
#endif

uint32_t wolfBoot_get_blob_version(uint8_t *blob)
{
 80005e0:	b500      	push	{lr}
 80005e2:	b083      	sub	sp, #12
    uint32_t *version_field = NULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	9301      	str	r3, [sp, #4]
    uint32_t *magic = NULL;
    magic = (uint32_t *)blob;
    if (*magic != WOLFBOOT_MAGIC)
 80005e8:	6802      	ldr	r2, [r0, #0]
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <wolfBoot_get_blob_version+0x34>)
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d003      	beq.n	80005f8 <wolfBoot_get_blob_version+0x18>
        return 0;
 80005f0:	2000      	movs	r0, #0
    if (wolfBoot_find_header(blob + IMAGE_HEADER_OFFSET, HDR_VERSION, (void *)&version_field) == 0)
        return 0;
    if (version_field)
        return im2n(*version_field);
    return 0;
}
 80005f2:	b003      	add	sp, #12
 80005f4:	f85d fb04 	ldr.w	pc, [sp], #4
    if (wolfBoot_find_header(blob + IMAGE_HEADER_OFFSET, HDR_VERSION, (void *)&version_field) == 0)
 80005f8:	aa01      	add	r2, sp, #4
 80005fa:	2101      	movs	r1, #1
 80005fc:	3008      	adds	r0, #8
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <wolfBoot_get_blob_version+0x38>)
 8000600:	4798      	blx	r3
 8000602:	b118      	cbz	r0, 800060c <wolfBoot_get_blob_version+0x2c>
    if (version_field)
 8000604:	9b01      	ldr	r3, [sp, #4]
 8000606:	b11b      	cbz	r3, 8000610 <wolfBoot_get_blob_version+0x30>
        return im2n(*version_field);
 8000608:	6818      	ldr	r0, [r3, #0]
 800060a:	e7f2      	b.n	80005f2 <wolfBoot_get_blob_version+0x12>
        return 0;
 800060c:	2000      	movs	r0, #0
 800060e:	e7f0      	b.n	80005f2 <wolfBoot_get_blob_version+0x12>
    return 0;
 8000610:	2000      	movs	r0, #0
 8000612:	e7ee      	b.n	80005f2 <wolfBoot_get_blob_version+0x12>
 8000614:	464c4f57 	.word	0x464c4f57
 8000618:	08000575 	.word	0x08000575

0800061c <wolfBoot_get_image_version>:


uint32_t wolfBoot_get_image_version(uint8_t part)
{
 800061c:	b508      	push	{r3, lr}
    uint8_t *image = (uint8_t *)0x00000000;
    if(part == PART_UPDATE) {
 800061e:	2801      	cmp	r0, #1
 8000620:	d002      	beq.n	8000628 <wolfBoot_get_image_version+0xc>
            image = hdr_cpy;
    #endif
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_UPDATE_ADDRESS;
        }
    } else if (part == PART_BOOT) {
 8000622:	b128      	cbz	r0, 8000630 <wolfBoot_get_image_version+0x14>
    uint8_t *image = (uint8_t *)0x00000000;
 8000624:	2000      	movs	r0, #0
 8000626:	e000      	b.n	800062a <wolfBoot_get_image_version+0xe>
            image = (uint8_t *)WOLFBOOT_PARTITION_UPDATE_ADDRESS;
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <wolfBoot_get_image_version+0x18>)
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_BOOT_ADDRESS;
        }
    }
    /* Don't check image against NULL to allow using address 0x00000000 */
    return wolfBoot_get_blob_version(image);
 800062a:	4b03      	ldr	r3, [pc, #12]	; (8000638 <wolfBoot_get_image_version+0x1c>)
 800062c:	4798      	blx	r3
}
 800062e:	bd08      	pop	{r3, pc}
            image = (uint8_t *)WOLFBOOT_PARTITION_BOOT_ADDRESS;
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <wolfBoot_get_image_version+0x20>)
 8000632:	e7fa      	b.n	800062a <wolfBoot_get_image_version+0xe>
 8000634:	08010000 	.word	0x08010000
 8000638:	080005e1 	.word	0x080005e1
 800063c:	08008000 	.word	0x08008000

08000640 <wolfBoot_get_image_type>:
    /* Don't check image against NULL to allow using address 0x00000000 */
    return wolfBoot_get_blob_diffbase_version(image);
}

uint16_t wolfBoot_get_image_type(uint8_t part)
{
 8000640:	b500      	push	{lr}
 8000642:	b083      	sub	sp, #12
    uint16_t *type_field = NULL;
 8000644:	2300      	movs	r3, #0
 8000646:	9301      	str	r3, [sp, #4]
    uint8_t *image = NULL;
    uint32_t *magic = NULL;
    if(part == PART_UPDATE) {
 8000648:	2801      	cmp	r0, #1
 800064a:	d002      	beq.n	8000652 <wolfBoot_get_image_type+0x12>
            image = hdr_cpy;
    #endif
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_UPDATE_ADDRESS;
        }
    } else if (part == PART_BOOT) {
 800064c:	b9a8      	cbnz	r0, 800067a <wolfBoot_get_image_type+0x3a>
            ext_flash_check_read((uintptr_t)WOLFBOOT_PARTITION_BOOT_ADDRESS, hdr_cpy, IMAGE_HEADER_SIZE);
            hdr_cpy_done = 1;
            image = hdr_cpy;
    #endif
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_BOOT_ADDRESS;
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <wolfBoot_get_image_type+0x44>)
 8000650:	e000      	b.n	8000654 <wolfBoot_get_image_type+0x14>
            image = (uint8_t *)WOLFBOOT_PARTITION_UPDATE_ADDRESS;
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <wolfBoot_get_image_type+0x48>)
        }
    }

    if (image) {
        magic = (uint32_t *)image;
        if (*magic != WOLFBOOT_MAGIC)
 8000654:	6802      	ldr	r2, [r0, #0]
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <wolfBoot_get_image_type+0x4c>)
 8000658:	429a      	cmp	r2, r3
 800065a:	d003      	beq.n	8000664 <wolfBoot_get_image_type+0x24>
            return 0;
 800065c:	2000      	movs	r0, #0
        if (type_field)
            return im2ns(*type_field);
    }

    return 0;
}
 800065e:	b003      	add	sp, #12
 8000660:	f85d fb04 	ldr.w	pc, [sp], #4
        if (wolfBoot_find_header(image + IMAGE_HEADER_OFFSET, HDR_IMG_TYPE, (void *)&type_field) == 0)
 8000664:	aa01      	add	r2, sp, #4
 8000666:	2104      	movs	r1, #4
 8000668:	3008      	adds	r0, #8
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <wolfBoot_get_image_type+0x50>)
 800066c:	4798      	blx	r3
 800066e:	2800      	cmp	r0, #0
 8000670:	d0f5      	beq.n	800065e <wolfBoot_get_image_type+0x1e>
        if (type_field)
 8000672:	9b01      	ldr	r3, [sp, #4]
 8000674:	b11b      	cbz	r3, 800067e <wolfBoot_get_image_type+0x3e>
            return im2ns(*type_field);
 8000676:	8818      	ldrh	r0, [r3, #0]
 8000678:	e7f1      	b.n	800065e <wolfBoot_get_image_type+0x1e>
    return 0;
 800067a:	2000      	movs	r0, #0
 800067c:	e7ef      	b.n	800065e <wolfBoot_get_image_type+0x1e>
 800067e:	2000      	movs	r0, #0
 8000680:	e7ed      	b.n	800065e <wolfBoot_get_image_type+0x1e>
 8000682:	bf00      	nop
 8000684:	08008000 	.word	0x08008000
 8000688:	08010000 	.word	0x08010000
 800068c:	464c4f57 	.word	0x464c4f57
 8000690:	08000575 	.word	0x08000575

08000694 <mpu_setaddr>:
    MPU_RNR = region;
 8000694:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <mpu_setaddr+0xc>)
 8000696:	6018      	str	r0, [r3, #0]
    MPU_RBAR = addr;
 8000698:	3304      	adds	r3, #4
 800069a:	6019      	str	r1, [r3, #0]
}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000ed98 	.word	0xe000ed98

080006a4 <mpu_setattr>:
    MPU_RNR = region;
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <mpu_setattr+0xc>)
 80006a6:	6018      	str	r0, [r3, #0]
    MPU_RASR = attr;
 80006a8:	3308      	adds	r3, #8
 80006aa:	6019      	str	r1, [r3, #0]
}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000ed98 	.word	0xe000ed98

080006b4 <mpu_on>:
    if (mpu_is_on)
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <mpu_on+0x18>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	b93b      	cbnz	r3, 80006ca <mpu_on+0x16>
    if (MPU_TYPE == 0)
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <mpu_on+0x1c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	b123      	cbz	r3, 80006ca <mpu_on+0x16>
    MPU_CTRL = 1;
 80006c0:	2301      	movs	r3, #1
 80006c2:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <mpu_on+0x20>)
 80006c4:	6013      	str	r3, [r2, #0]
    mpu_is_on = 1;
 80006c6:	4a01      	ldr	r2, [pc, #4]	; (80006cc <mpu_on+0x18>)
 80006c8:	6013      	str	r3, [r2, #0]
}
 80006ca:	4770      	bx	lr
 80006cc:	20000800 	.word	0x20000800
 80006d0:	e000ed90 	.word	0xe000ed90
 80006d4:	e000ed94 	.word	0xe000ed94

080006d8 <mpusize>:
    if (size <= (8 * 1024))
 80006d8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80006dc:	d90b      	bls.n	80006f6 <mpusize+0x1e>
    if (size <= (16 * 1024))
 80006de:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80006e2:	d90a      	bls.n	80006fa <mpusize+0x22>
    if (size <= (32 * 1024))
 80006e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80006e8:	d909      	bls.n	80006fe <mpusize+0x26>
    if (size <= (64 * 1024))
 80006ea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80006ee:	d908      	bls.n	8000702 <mpusize+0x2a>
    return MPUSIZE_ERR;
 80006f0:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 80006f4:	4770      	bx	lr
        return MPUSIZE_8K;
 80006f6:	2018      	movs	r0, #24
 80006f8:	4770      	bx	lr
        return MPUSIZE_16K;
 80006fa:	201a      	movs	r0, #26
 80006fc:	4770      	bx	lr
        return MPUSIZE_32K;
 80006fe:	201c      	movs	r0, #28
 8000700:	4770      	bx	lr
        return MPUSIZE_64K;
 8000702:	201e      	movs	r0, #30
}
 8000704:	4770      	bx	lr
	...

08000708 <mpu_init>:
{
 8000708:	b538      	push	{r3, r4, r5, lr}
                                   (uint32_t)&_start_text;
 800070a:	4d1f      	ldr	r5, [pc, #124]	; (8000788 <mpu_init+0x80>)
    uint32_t wolfboot_flash_size = (uint32_t)&_stored_data -
 800070c:	4c1f      	ldr	r4, [pc, #124]	; (800078c <mpu_init+0x84>)
 800070e:	1b64      	subs	r4, r4, r5
    if (MPU_TYPE == 0)
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <mpu_init+0x88>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	b903      	cbnz	r3, 8000718 <mpu_init+0x10>
}
 8000716:	bd38      	pop	{r3, r4, r5, pc}
    mpu_setaddr(0, 0);
 8000718:	2100      	movs	r1, #0
 800071a:	4608      	mov	r0, r1
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <mpu_init+0x8c>)
 800071e:	4798      	blx	r3
    mpu_setattr(0, MPUSIZE_4G | MPU_RASR_ENABLE | MPU_RASR_ATTR_SCB |
 8000720:	491d      	ldr	r1, [pc, #116]	; (8000798 <mpu_init+0x90>)
 8000722:	2000      	movs	r0, #0
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <mpu_init+0x94>)
 8000726:	4798      	blx	r3
    wolfboot_mpusize = mpusize(wolfboot_flash_size);
 8000728:	4620      	mov	r0, r4
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <mpu_init+0x98>)
 800072c:	4798      	blx	r3
 800072e:	4604      	mov	r4, r0
    if (wolfboot_mpusize == MPUSIZE_ERR)
 8000730:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 8000734:	d0ef      	beq.n	8000716 <mpu_init+0xe>
    mpu_setaddr(1, flash_base);
 8000736:	4629      	mov	r1, r5
 8000738:	2001      	movs	r0, #1
 800073a:	4d16      	ldr	r5, [pc, #88]	; (8000794 <mpu_init+0x8c>)
 800073c:	47a8      	blx	r5
    mpu_setattr(1, wolfboot_mpusize | MPU_RASR_ENABLE | MPU_RASR_ATTR_SCB |
 800073e:	f044 7183 	orr.w	r1, r4, #17170432	; 0x1060000
 8000742:	f041 1101 	orr.w	r1, r1, #65537	; 0x10001
 8000746:	2001      	movs	r0, #1
 8000748:	4c14      	ldr	r4, [pc, #80]	; (800079c <mpu_init+0x94>)
 800074a:	47a0      	blx	r4
    mpu_setaddr(2, ram_base);
 800074c:	4915      	ldr	r1, [pc, #84]	; (80007a4 <mpu_init+0x9c>)
 800074e:	2002      	movs	r0, #2
 8000750:	47a8      	blx	r5
    mpu_setattr(2, MPUSIZE_64K | MPU_RASR_ENABLE | MPU_RASR_ATTR_SCB |
 8000752:	4915      	ldr	r1, [pc, #84]	; (80007a8 <mpu_init+0xa0>)
 8000754:	2002      	movs	r0, #2
 8000756:	47a0      	blx	r4
    mpu_setaddr(5, 0x40000000);
 8000758:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800075c:	2005      	movs	r0, #5
 800075e:	47a8      	blx	r5
    mpu_setattr(5, MPUSIZE_512M | MPU_RASR_ENABLE | MPU_RASR_ATTR_S |
 8000760:	4912      	ldr	r1, [pc, #72]	; (80007ac <mpu_init+0xa4>)
 8000762:	2005      	movs	r0, #5
 8000764:	47a0      	blx	r4
    mpu_setaddr(6, 0xA0000000);
 8000766:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800076a:	2006      	movs	r0, #6
 800076c:	47a8      	blx	r5
    mpu_setattr(6, MPUSIZE_1G | MPU_RASR_ENABLE | MPU_RASR_ATTR_S |
 800076e:	4910      	ldr	r1, [pc, #64]	; (80007b0 <mpu_init+0xa8>)
 8000770:	2006      	movs	r0, #6
 8000772:	47a0      	blx	r4
    mpu_setaddr(7, 0xE0000000);
 8000774:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 8000778:	2007      	movs	r0, #7
 800077a:	47a8      	blx	r5
    mpu_setattr(7, MPUSIZE_256M | MPU_RASR_ENABLE | MPU_RASR_ATTR_S |
 800077c:	490d      	ldr	r1, [pc, #52]	; (80007b4 <mpu_init+0xac>)
 800077e:	2007      	movs	r0, #7
 8000780:	47a0      	blx	r4
    mpu_on();
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <mpu_init+0xb0>)
 8000784:	4798      	blx	r3
 8000786:	e7c6      	b.n	8000716 <mpu_init+0xe>
 8000788:	08000000 	.word	0x08000000
 800078c:	08005738 	.word	0x08005738
 8000790:	e000ed90 	.word	0xe000ed90
 8000794:	08000695 	.word	0x08000695
 8000798:	1107003f 	.word	0x1107003f
 800079c:	080006a5 	.word	0x080006a5
 80007a0:	080006d9 	.word	0x080006d9
 80007a4:	20000000 	.word	0x20000000
 80007a8:	0107001f 	.word	0x0107001f
 80007ac:	11050039 	.word	0x11050039
 80007b0:	1105003b 	.word	0x1105003b
 80007b4:	11050037 	.word	0x11050037
 80007b8:	080006b5 	.word	0x080006b5

080007bc <isr_fault>:
    while(1);
 80007bc:	e7fe      	b.n	80007bc <isr_fault>

080007be <isr_empty>:
}
 80007be:	4770      	bx	lr

080007c0 <isr_reset>:
void isr_reset(void) {
 80007c0:	b508      	push	{r3, lr}
    dst = (unsigned int *) &_start_data;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <isr_reset+0x30>)
    src = (unsigned int *) &_stored_data;
 80007c4:	490b      	ldr	r1, [pc, #44]	; (80007f4 <isr_reset+0x34>)
    while (dst < (unsigned int *)&_end_data) {
 80007c6:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <isr_reset+0x38>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d204      	bcs.n	80007d6 <isr_reset+0x16>
        *dst = *src;
 80007cc:	f851 2b04 	ldr.w	r2, [r1], #4
 80007d0:	f843 2b04 	str.w	r2, [r3], #4
        src++;
 80007d4:	e7f7      	b.n	80007c6 <isr_reset+0x6>
    dst = &_start_bss;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <isr_reset+0x3c>)
 80007d8:	e002      	b.n	80007e0 <isr_reset+0x20>
        *dst = 0U;
 80007da:	2200      	movs	r2, #0
 80007dc:	f843 2b04 	str.w	r2, [r3], #4
    while (dst < (unsigned int *)&_end_bss) {
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <isr_reset+0x40>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d3f9      	bcc.n	80007da <isr_reset+0x1a>
    mpu_init();
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <isr_reset+0x44>)
 80007e8:	4798      	blx	r3
    main();
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <isr_reset+0x48>)
 80007ec:	4798      	blx	r3
}
 80007ee:	bd08      	pop	{r3, pc}
 80007f0:	20000000 	.word	0x20000000
 80007f4:	08005738 	.word	0x08005738
 80007f8:	200007dc 	.word	0x200007dc
 80007fc:	200007dc 	.word	0x200007dc
 8000800:	20000804 	.word	0x20000804
 8000804:	08000709 	.word	0x08000709
 8000808:	08000109 	.word	0x08000109

0800080c <wolfBoot_check_self_update>:
    hal_flash_lock();
    arch_reboot();
}

void wolfBoot_check_self_update(void)
{
 800080c:	b500      	push	{lr}
 800080e:	b089      	sub	sp, #36	; 0x24
    uint8_t st;
    struct wolfBoot_image update;

    /* Check for self update in the UPDATE partition */
    if ((wolfBoot_get_partition_state(PART_UPDATE, &st) == 0) && (st == IMG_STATE_UPDATING) &&
 8000810:	f10d 011f 	add.w	r1, sp, #31
 8000814:	2001      	movs	r0, #1
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <wolfBoot_check_self_update+0x70>)
 8000818:	4798      	blx	r3
 800081a:	b918      	cbnz	r0, 8000824 <wolfBoot_check_self_update+0x18>
 800081c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8000820:	2b70      	cmp	r3, #112	; 0x70
 8000822:	d002      	beq.n	800082a <wolfBoot_check_self_update+0x1e>
        if (wolfBoot_verify_authenticity(&update) < 0)
            return;
        // PART_SANITY_CHECK(&update);
        wolfBoot_self_update(&update);
    }
}
 8000824:	b009      	add	sp, #36	; 0x24
 8000826:	f85d fb04 	ldr.w	pc, [sp], #4
            (wolfBoot_open_image(&update, PART_UPDATE) == 0) &&
 800082a:	2101      	movs	r1, #1
 800082c:	a801      	add	r0, sp, #4
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <wolfBoot_check_self_update+0x74>)
 8000830:	4798      	blx	r3
    if ((wolfBoot_get_partition_state(PART_UPDATE, &st) == 0) && (st == IMG_STATE_UPDATING) &&
 8000832:	2800      	cmp	r0, #0
 8000834:	d1f6      	bne.n	8000824 <wolfBoot_check_self_update+0x18>
            wolfBoot_get_image_type(PART_UPDATE) == (HDR_IMG_TYPE_WOLFBOOT | HDR_IMG_TYPE_AUTH)) {
 8000836:	2001      	movs	r0, #1
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <wolfBoot_check_self_update+0x78>)
 800083a:	4798      	blx	r3
            (wolfBoot_open_image(&update, PART_UPDATE) == 0) &&
 800083c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000840:	d1f0      	bne.n	8000824 <wolfBoot_check_self_update+0x18>
        uint32_t update_version = wolfBoot_update_firmware_version();
 8000842:	2001      	movs	r0, #1
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <wolfBoot_check_self_update+0x7c>)
 8000846:	4798      	blx	r3
        if (update_version <= wolfboot_version) {
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <wolfBoot_check_self_update+0x80>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4283      	cmp	r3, r0
 800084e:	d20d      	bcs.n	800086c <wolfBoot_check_self_update+0x60>
        if (wolfBoot_verify_integrity(&update) < 0)
 8000850:	a801      	add	r0, sp, #4
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <wolfBoot_check_self_update+0x84>)
 8000854:	4798      	blx	r3
 8000856:	2800      	cmp	r0, #0
 8000858:	dbe4      	blt.n	8000824 <wolfBoot_check_self_update+0x18>
        if (wolfBoot_verify_authenticity(&update) < 0)
 800085a:	a801      	add	r0, sp, #4
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <wolfBoot_check_self_update+0x88>)
 800085e:	4798      	blx	r3
 8000860:	2800      	cmp	r0, #0
 8000862:	dbdf      	blt.n	8000824 <wolfBoot_check_self_update+0x18>
        wolfBoot_self_update(&update);
 8000864:	a801      	add	r0, sp, #4
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <wolfBoot_check_self_update+0x8c>)
 8000868:	4798      	blx	r3
 800086a:	e7db      	b.n	8000824 <wolfBoot_check_self_update+0x18>
            hal_flash_unlock();
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <wolfBoot_check_self_update+0x90>)
 800086e:	4798      	blx	r3
            wolfBoot_erase_partition(PART_UPDATE);
 8000870:	2001      	movs	r0, #1
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <wolfBoot_check_self_update+0x94>)
 8000874:	4798      	blx	r3
            hal_flash_lock();
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <wolfBoot_check_self_update+0x98>)
 8000878:	4798      	blx	r3
            return;
 800087a:	e7d3      	b.n	8000824 <wolfBoot_check_self_update+0x18>
 800087c:	20000369 	.word	0x20000369
 8000880:	0800035d 	.word	0x0800035d
 8000884:	08000641 	.word	0x08000641
 8000888:	0800061d 	.word	0x0800061d
 800088c:	20000018 	.word	0x20000018
 8000890:	08000401 	.word	0x08000401
 8000894:	08000469 	.word	0x08000469
 8000898:	2000047d 	.word	0x2000047d
 800089c:	200000f5 	.word	0x200000f5
 80008a0:	20000395 	.word	0x20000395
 80008a4:	20000119 	.word	0x20000119

080008a8 <ByteReverseWords>:
 80008a8:	2300      	movs	r3, #0
 80008aa:	b510      	push	{r4, lr}
 80008ac:	0892      	lsrs	r2, r2, #2
 80008ae:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80008b2:	ba24      	rev	r4, r4
 80008b4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80008b8:	3301      	adds	r3, #1
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d1f7      	bne.n	80008ae <ByteReverseWords+0x6>
 80008be:	bd10      	pop	{r4, pc}

080008c0 <Transform_Sha256>:
 80008c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008c4:	1f03      	subs	r3, r0, #4
 80008c6:	b0cd      	sub	sp, #308	; 0x134
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	ab04      	add	r3, sp, #16
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	f100 031c 	add.w	r3, r0, #28
 80008d2:	9303      	str	r3, [sp, #12]
 80008d4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80008d8:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80008dc:	f842 0b04 	str.w	r0, [r2], #4
 80008e0:	9803      	ldr	r0, [sp, #12]
 80008e2:	4298      	cmp	r0, r3
 80008e4:	d1f8      	bne.n	80008d8 <Transform_Sha256+0x18>
 80008e6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80008ea:	4662      	mov	r2, ip
 80008ec:	1f0b      	subs	r3, r1, #4
 80008ee:	313c      	adds	r1, #60	; 0x3c
 80008f0:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80008f4:	4299      	cmp	r1, r3
 80008f6:	f842 0b04 	str.w	r0, [r2], #4
 80008fa:	d1f9      	bne.n	80008f0 <Transform_Sha256+0x30>
 80008fc:	4662      	mov	r2, ip
 80008fe:	2010      	movs	r0, #16
 8000900:	4615      	mov	r5, r2
 8000902:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000904:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8000908:	ea4f 43f1 	mov.w	r3, r1, ror #19
 800090c:	ea83 4371 	eor.w	r3, r3, r1, ror #17
 8000910:	ea83 2391 	eor.w	r3, r3, r1, lsr #10
 8000914:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000916:	682d      	ldr	r5, [r5, #0]
 8000918:	3001      	adds	r0, #1
 800091a:	4429      	add	r1, r5
 800091c:	440b      	add	r3, r1
 800091e:	ea4f 41b4 	mov.w	r1, r4, ror #18
 8000922:	ea81 11f4 	eor.w	r1, r1, r4, ror #7
 8000926:	ea81 01d4 	eor.w	r1, r1, r4, lsr #3
 800092a:	440b      	add	r3, r1
 800092c:	2840      	cmp	r0, #64	; 0x40
 800092e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000930:	d1e6      	bne.n	8000900 <Transform_Sha256+0x40>
 8000932:	9b01      	ldr	r3, [sp, #4]
 8000934:	9801      	ldr	r0, [sp, #4]
 8000936:	9e01      	ldr	r6, [sp, #4]
 8000938:	f8d3 e01c 	ldr.w	lr, [r3, #28]
 800093c:	6919      	ldr	r1, [r3, #16]
 800093e:	699a      	ldr	r2, [r3, #24]
 8000940:	9c01      	ldr	r4, [sp, #4]
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	6800      	ldr	r0, [r0, #0]
 8000946:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800094a:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8000bd0 <Transform_Sha256+0x310>
 800094e:	e9d4 5401 	ldrd	r5, r4, [r4, #4]
 8000952:	f8d9 6000 	ldr.w	r6, [r9]
 8000956:	f8dc 7000 	ldr.w	r7, [ip]
 800095a:	ea4f 2af1 	mov.w	sl, r1, ror #11
 800095e:	ea8a 1ab1 	eor.w	sl, sl, r1, ror #6
 8000962:	443e      	add	r6, r7
 8000964:	ea8a 6a71 	eor.w	sl, sl, r1, ror #25
 8000968:	44b2      	add	sl, r6
 800096a:	ea82 0603 	eor.w	r6, r2, r3
 800096e:	400e      	ands	r6, r1
 8000970:	4056      	eors	r6, r2
 8000972:	44b2      	add	sl, r6
 8000974:	ea40 0705 	orr.w	r7, r0, r5
 8000978:	ea4f 06b0 	mov.w	r6, r0, ror #2
 800097c:	44d6      	add	lr, sl
 800097e:	ea86 3670 	eor.w	r6, r6, r0, ror #13
 8000982:	ea00 0a05 	and.w	sl, r0, r5
 8000986:	4027      	ands	r7, r4
 8000988:	ea86 56b0 	eor.w	r6, r6, r0, ror #22
 800098c:	ea47 070a 	orr.w	r7, r7, sl
 8000990:	4437      	add	r7, r6
 8000992:	44f0      	add	r8, lr
 8000994:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000998:	44be      	add	lr, r7
 800099a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800099e:	ea81 0a03 	eor.w	sl, r1, r3
 80009a2:	443e      	add	r6, r7
 80009a4:	4432      	add	r2, r6
 80009a6:	ea0a 0a08 	and.w	sl, sl, r8
 80009aa:	ea4f 26f8 	mov.w	r6, r8, ror #11
 80009ae:	ea8a 0a03 	eor.w	sl, sl, r3
 80009b2:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
 80009b6:	4452      	add	r2, sl
 80009b8:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 80009bc:	4416      	add	r6, r2
 80009be:	eb04 0a06 	add.w	sl, r4, r6
 80009c2:	ea4f 327e 	mov.w	r2, lr, ror #13
 80009c6:	ea4e 0400 	orr.w	r4, lr, r0
 80009ca:	ea0e 0700 	and.w	r7, lr, r0
 80009ce:	ea82 02be 	eor.w	r2, r2, lr, ror #2
 80009d2:	402c      	ands	r4, r5
 80009d4:	433c      	orrs	r4, r7
 80009d6:	ea82 52be 	eor.w	r2, r2, lr, ror #22
 80009da:	4422      	add	r2, r4
 80009dc:	4432      	add	r2, r6
 80009de:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80009e2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80009e6:	f109 0920 	add.w	r9, r9, #32
 80009ea:	4434      	add	r4, r6
 80009ec:	441c      	add	r4, r3
 80009ee:	ea81 0308 	eor.w	r3, r1, r8
 80009f2:	ea03 030a 	and.w	r3, r3, sl
 80009f6:	ea83 0701 	eor.w	r7, r3, r1
 80009fa:	19e3      	adds	r3, r4, r7
 80009fc:	ea4f 24fa 	mov.w	r4, sl, ror #11
 8000a00:	ea84 14ba 	eor.w	r4, r4, sl, ror #6
 8000a04:	ea84 647a 	eor.w	r4, r4, sl, ror #25
 8000a08:	441c      	add	r4, r3
 8000a0a:	192f      	adds	r7, r5, r4
 8000a0c:	ea4f 3372 	mov.w	r3, r2, ror #13
 8000a10:	ea4e 0502 	orr.w	r5, lr, r2
 8000a14:	ea0e 0602 	and.w	r6, lr, r2
 8000a18:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
 8000a1c:	4005      	ands	r5, r0
 8000a1e:	4335      	orrs	r5, r6
 8000a20:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
 8000a24:	442b      	add	r3, r5
 8000a26:	4423      	add	r3, r4
 8000a28:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8000a2c:	f859 4c14 	ldr.w	r4, [r9, #-20]
 8000a30:	f10c 0c20 	add.w	ip, ip, #32
 8000a34:	442c      	add	r4, r5
 8000a36:	440c      	add	r4, r1
 8000a38:	ea88 010a 	eor.w	r1, r8, sl
 8000a3c:	4039      	ands	r1, r7
 8000a3e:	ea81 0608 	eor.w	r6, r1, r8
 8000a42:	19a1      	adds	r1, r4, r6
 8000a44:	ea4f 24f7 	mov.w	r4, r7, ror #11
 8000a48:	ea84 14b7 	eor.w	r4, r4, r7, ror #6
 8000a4c:	ea84 6477 	eor.w	r4, r4, r7, ror #25
 8000a50:	440c      	add	r4, r1
 8000a52:	eb00 0b04 	add.w	fp, r0, r4
 8000a56:	ea4f 3173 	mov.w	r1, r3, ror #13
 8000a5a:	ea42 0003 	orr.w	r0, r2, r3
 8000a5e:	ea02 0503 	and.w	r5, r2, r3
 8000a62:	ea81 01b3 	eor.w	r1, r1, r3, ror #2
 8000a66:	ea00 000e 	and.w	r0, r0, lr
 8000a6a:	4328      	orrs	r0, r5
 8000a6c:	ea81 51b3 	eor.w	r1, r1, r3, ror #22
 8000a70:	4401      	add	r1, r0
 8000a72:	4421      	add	r1, r4
 8000a74:	f859 0c10 	ldr.w	r0, [r9, #-16]
 8000a78:	f85c 4c10 	ldr.w	r4, [ip, #-16]
 8000a7c:	ea8a 0507 	eor.w	r5, sl, r7
 8000a80:	4420      	add	r0, r4
 8000a82:	4480      	add	r8, r0
 8000a84:	ea05 050b 	and.w	r5, r5, fp
 8000a88:	ea4f 20fb 	mov.w	r0, fp, ror #11
 8000a8c:	ea85 050a 	eor.w	r5, r5, sl
 8000a90:	ea80 10bb 	eor.w	r0, r0, fp, ror #6
 8000a94:	44a8      	add	r8, r5
 8000a96:	ea80 607b 	eor.w	r0, r0, fp, ror #25
 8000a9a:	4440      	add	r0, r8
 8000a9c:	ea43 0401 	orr.w	r4, r3, r1
 8000aa0:	ea4f 3871 	mov.w	r8, r1, ror #13
 8000aa4:	ea03 0501 	and.w	r5, r3, r1
 8000aa8:	ea88 08b1 	eor.w	r8, r8, r1, ror #2
 8000aac:	4014      	ands	r4, r2
 8000aae:	432c      	orrs	r4, r5
 8000ab0:	ea88 58b1 	eor.w	r8, r8, r1, ror #22
 8000ab4:	44a0      	add	r8, r4
 8000ab6:	4480      	add	r8, r0
 8000ab8:	4486      	add	lr, r0
 8000aba:	f859 4c0c 	ldr.w	r4, [r9, #-12]
 8000abe:	f85c 0c0c 	ldr.w	r0, [ip, #-12]
 8000ac2:	4404      	add	r4, r0
 8000ac4:	44a2      	add	sl, r4
 8000ac6:	ea87 040b 	eor.w	r4, r7, fp
 8000aca:	ea04 040e 	and.w	r4, r4, lr
 8000ace:	ea84 0507 	eor.w	r5, r4, r7
 8000ad2:	eb0a 0405 	add.w	r4, sl, r5
 8000ad6:	ea4f 2afe 	mov.w	sl, lr, ror #11
 8000ada:	ea8a 1abe 	eor.w	sl, sl, lr, ror #6
 8000ade:	ea8a 6a7e 	eor.w	sl, sl, lr, ror #25
 8000ae2:	44a2      	add	sl, r4
 8000ae4:	ea41 0008 	orr.w	r0, r1, r8
 8000ae8:	ea4f 3478 	mov.w	r4, r8, ror #13
 8000aec:	ea01 0508 	and.w	r5, r1, r8
 8000af0:	4018      	ands	r0, r3
 8000af2:	ea84 04b8 	eor.w	r4, r4, r8, ror #2
 8000af6:	4328      	orrs	r0, r5
 8000af8:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
 8000afc:	f859 5c08 	ldr.w	r5, [r9, #-8]
 8000b00:	4404      	add	r4, r0
 8000b02:	f85c 0c08 	ldr.w	r0, [ip, #-8]
 8000b06:	4452      	add	r2, sl
 8000b08:	4405      	add	r5, r0
 8000b0a:	442f      	add	r7, r5
 8000b0c:	ea8b 050e 	eor.w	r5, fp, lr
 8000b10:	4015      	ands	r5, r2
 8000b12:	ea85 060b 	eor.w	r6, r5, fp
 8000b16:	19bd      	adds	r5, r7, r6
 8000b18:	ea4f 27f2 	mov.w	r7, r2, ror #11
 8000b1c:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 8000b20:	4454      	add	r4, sl
 8000b22:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 8000b26:	442f      	add	r7, r5
 8000b28:	ea48 0004 	orr.w	r0, r8, r4
 8000b2c:	ea4f 3574 	mov.w	r5, r4, ror #13
 8000b30:	4008      	ands	r0, r1
 8000b32:	ea08 0604 	and.w	r6, r8, r4
 8000b36:	ea85 05b4 	eor.w	r5, r5, r4, ror #2
 8000b3a:	4330      	orrs	r0, r6
 8000b3c:	ea85 55b4 	eor.w	r5, r5, r4, ror #22
 8000b40:	f85c 6c04 	ldr.w	r6, [ip, #-4]
 8000b44:	4405      	add	r5, r0
 8000b46:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8000b4a:	443b      	add	r3, r7
 8000b4c:	4430      	add	r0, r6
 8000b4e:	4483      	add	fp, r0
 8000b50:	ea8e 0002 	eor.w	r0, lr, r2
 8000b54:	4018      	ands	r0, r3
 8000b56:	443d      	add	r5, r7
 8000b58:	ea80 070e 	eor.w	r7, r0, lr
 8000b5c:	eb0b 0007 	add.w	r0, fp, r7
 8000b60:	ea4f 2bf3 	mov.w	fp, r3, ror #11
 8000b64:	ea8b 1bb3 	eor.w	fp, fp, r3, ror #6
 8000b68:	ea8b 6b73 	eor.w	fp, fp, r3, ror #25
 8000b6c:	4483      	add	fp, r0
 8000b6e:	ea44 0605 	orr.w	r6, r4, r5
 8000b72:	ea4f 3075 	mov.w	r0, r5, ror #13
 8000b76:	ea80 00b5 	eor.w	r0, r0, r5, ror #2
 8000b7a:	ea06 0608 	and.w	r6, r6, r8
 8000b7e:	ea04 0705 	and.w	r7, r4, r5
 8000b82:	433e      	orrs	r6, r7
 8000b84:	ea80 50b5 	eor.w	r0, r0, r5, ror #22
 8000b88:	4430      	add	r0, r6
 8000b8a:	4e10      	ldr	r6, [pc, #64]	; (8000bcc <Transform_Sha256+0x30c>)
 8000b8c:	4459      	add	r1, fp
 8000b8e:	454e      	cmp	r6, r9
 8000b90:	4458      	add	r0, fp
 8000b92:	f47f aede 	bne.w	8000952 <Transform_Sha256+0x92>
 8000b96:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8000b9a:	e9cd 0504 	strd	r0, r5, [sp, #16]
 8000b9e:	e9cd 4806 	strd	r4, r8, [sp, #24]
 8000ba2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8000ba6:	9108      	str	r1, [sp, #32]
 8000ba8:	9b01      	ldr	r3, [sp, #4]
 8000baa:	9902      	ldr	r1, [sp, #8]
 8000bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bb0:	9301      	str	r3, [sp, #4]
 8000bb2:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8000bb6:	4413      	add	r3, r2
 8000bb8:	600b      	str	r3, [r1, #0]
 8000bba:	9b03      	ldr	r3, [sp, #12]
 8000bbc:	9102      	str	r1, [sp, #8]
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d1f2      	bne.n	8000ba8 <Transform_Sha256+0x2e8>
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	b04d      	add	sp, #308	; 0x134
 8000bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bca:	bf00      	nop
 8000bcc:	08004fa0 	.word	0x08004fa0
 8000bd0:	08004ea0 	.word	0x08004ea0

08000bd4 <wc_InitSha256_ex>:
 8000bd4:	b510      	push	{r4, lr}
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	b1f0      	cbz	r0, 8000c18 <wc_InitSha256_ex+0x44>
 8000bda:	2220      	movs	r2, #32
 8000bdc:	66c1      	str	r1, [r0, #108]	; 0x6c
 8000bde:	2100      	movs	r1, #0
 8000be0:	f7ff faa0 	bl	8000124 <memset>
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <wc_InitSha256_ex+0x4c>)
 8000be6:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <wc_InitSha256_ex+0x50>)
 8000be8:	490f      	ldr	r1, [pc, #60]	; (8000c28 <wc_InitSha256_ex+0x54>)
 8000bea:	e9c4 2300 	strd	r2, r3, [r4]
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <wc_InitSha256_ex+0x58>)
 8000bf0:	480f      	ldr	r0, [pc, #60]	; (8000c30 <wc_InitSha256_ex+0x5c>)
 8000bf2:	e9c4 1302 	strd	r1, r3, [r4, #8]
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <wc_InitSha256_ex+0x60>)
 8000bf8:	e9c4 0304 	strd	r0, r3, [r4, #16]
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <wc_InitSha256_ex+0x64>)
 8000c00:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 8000c04:	61a3      	str	r3, [r4, #24]
 8000c06:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8000c0a:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8000c0e:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8000c12:	61e3      	str	r3, [r4, #28]
 8000c14:	66a0      	str	r0, [r4, #104]	; 0x68
 8000c16:	bd10      	pop	{r4, pc}
 8000c18:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8000c1c:	e7fb      	b.n	8000c16 <wc_InitSha256_ex+0x42>
 8000c1e:	bf00      	nop
 8000c20:	bb67ae85 	.word	0xbb67ae85
 8000c24:	6a09e667 	.word	0x6a09e667
 8000c28:	3c6ef372 	.word	0x3c6ef372
 8000c2c:	a54ff53a 	.word	0xa54ff53a
 8000c30:	510e527f 	.word	0x510e527f
 8000c34:	9b05688c 	.word	0x9b05688c
 8000c38:	1f83d9ab 	.word	0x1f83d9ab

08000c3c <wc_Sha256Update>:
 8000c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c40:	460f      	mov	r7, r1
 8000c42:	4614      	mov	r4, r2
 8000c44:	4605      	mov	r5, r0
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d049      	beq.n	8000cde <wc_Sha256Update+0xa2>
 8000c4a:	b919      	cbnz	r1, 8000c54 <wc_Sha256Update+0x18>
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d146      	bne.n	8000cde <wc_Sha256Update+0xa2>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e042      	b.n	8000cda <wc_Sha256Update+0x9e>
 8000c54:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8000c56:	283f      	cmp	r0, #63	; 0x3f
 8000c58:	d844      	bhi.n	8000ce4 <wc_Sha256Update+0xa8>
 8000c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c5c:	f105 0620 	add.w	r6, r5, #32
 8000c60:	18d3      	adds	r3, r2, r3
 8000c62:	666b      	str	r3, [r5, #100]	; 0x64
 8000c64:	bf22      	ittt	cs
 8000c66:	6eab      	ldrcs	r3, [r5, #104]	; 0x68
 8000c68:	3301      	addcs	r3, #1
 8000c6a:	66ab      	strcs	r3, [r5, #104]	; 0x68
 8000c6c:	b1c8      	cbz	r0, 8000ca2 <wc_Sha256Update+0x66>
 8000c6e:	f1c0 0840 	rsb	r8, r0, #64	; 0x40
 8000c72:	4590      	cmp	r8, r2
 8000c74:	bf28      	it	cs
 8000c76:	4690      	movcs	r8, r2
 8000c78:	4430      	add	r0, r6
 8000c7a:	4642      	mov	r2, r8
 8000c7c:	f7ff fa63 	bl	8000146 <memcpy>
 8000c80:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8000c82:	4447      	add	r7, r8
 8000c84:	4442      	add	r2, r8
 8000c86:	2a40      	cmp	r2, #64	; 0x40
 8000c88:	662a      	str	r2, [r5, #96]	; 0x60
 8000c8a:	eba4 0408 	sub.w	r4, r4, r8
 8000c8e:	d108      	bne.n	8000ca2 <wc_Sha256Update+0x66>
 8000c90:	4630      	mov	r0, r6
 8000c92:	4631      	mov	r1, r6
 8000c94:	f7ff fe08 	bl	80008a8 <ByteReverseWords>
 8000c98:	4628      	mov	r0, r5
 8000c9a:	f7ff fe11 	bl	80008c0 <Transform_Sha256>
 8000c9e:	b9e0      	cbnz	r0, 8000cda <wc_Sha256Update+0x9e>
 8000ca0:	6628      	str	r0, [r5, #96]	; 0x60
 8000ca2:	4427      	add	r7, r4
 8000ca4:	2c3f      	cmp	r4, #63	; 0x3f
 8000ca6:	eba7 0104 	sub.w	r1, r7, r4
 8000caa:	d807      	bhi.n	8000cbc <wc_Sha256Update+0x80>
 8000cac:	2c00      	cmp	r4, #0
 8000cae:	d0cf      	beq.n	8000c50 <wc_Sha256Update+0x14>
 8000cb0:	4622      	mov	r2, r4
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	f7ff fa47 	bl	8000146 <memcpy>
 8000cb8:	662c      	str	r4, [r5, #96]	; 0x60
 8000cba:	e7c9      	b.n	8000c50 <wc_Sha256Update+0x14>
 8000cbc:	2240      	movs	r2, #64	; 0x40
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f7ff fa41 	bl	8000146 <memcpy>
 8000cc4:	4630      	mov	r0, r6
 8000cc6:	2240      	movs	r2, #64	; 0x40
 8000cc8:	4631      	mov	r1, r6
 8000cca:	f7ff fded 	bl	80008a8 <ByteReverseWords>
 8000cce:	4628      	mov	r0, r5
 8000cd0:	3c40      	subs	r4, #64	; 0x40
 8000cd2:	f7ff fdf5 	bl	80008c0 <Transform_Sha256>
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	d0e4      	beq.n	8000ca4 <wc_Sha256Update+0x68>
 8000cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cde:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8000ce2:	e7fa      	b.n	8000cda <wc_Sha256Update+0x9e>
 8000ce4:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8000ce8:	e7f7      	b.n	8000cda <wc_Sha256Update+0x9e>
	...

08000cec <wc_Sha256Final>:
 8000cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cee:	460f      	mov	r7, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d06e      	beq.n	8000dd4 <wc_Sha256Final+0xe8>
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d06c      	beq.n	8000dd4 <wc_Sha256Final+0xe8>
 8000cfa:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8000cfc:	f100 0620 	add.w	r6, r0, #32
 8000d00:	1c5a      	adds	r2, r3, #1
 8000d02:	6602      	str	r2, [r0, #96]	; 0x60
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	54f2      	strb	r2, [r6, r3]
 8000d08:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8000d0a:	2838      	cmp	r0, #56	; 0x38
 8000d0c:	d912      	bls.n	8000d34 <wc_Sha256Final+0x48>
 8000d0e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8000d12:	2100      	movs	r1, #0
 8000d14:	4430      	add	r0, r6
 8000d16:	f7ff fa05 	bl	8000124 <memset>
 8000d1a:	2240      	movs	r2, #64	; 0x40
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	4630      	mov	r0, r6
 8000d20:	6622      	str	r2, [r4, #96]	; 0x60
 8000d22:	f7ff fdc1 	bl	80008a8 <ByteReverseWords>
 8000d26:	4620      	mov	r0, r4
 8000d28:	f7ff fdca 	bl	80008c0 <Transform_Sha256>
 8000d2c:	4605      	mov	r5, r0
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d14e      	bne.n	8000dd0 <wc_Sha256Final+0xe4>
 8000d32:	6620      	str	r0, [r4, #96]	; 0x60
 8000d34:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8000d36:	2100      	movs	r1, #0
 8000d38:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8000d3c:	4430      	add	r0, r6
 8000d3e:	f7ff f9f1 	bl	8000124 <memset>
 8000d42:	e9d4 3119 	ldrd	r3, r1, [r4, #100]	; 0x64
 8000d46:	0f5a      	lsrs	r2, r3, #29
 8000d48:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	6663      	str	r3, [r4, #100]	; 0x64
 8000d50:	4631      	mov	r1, r6
 8000d52:	4630      	mov	r0, r6
 8000d54:	66a2      	str	r2, [r4, #104]	; 0x68
 8000d56:	2240      	movs	r2, #64	; 0x40
 8000d58:	f7ff fda6 	bl	80008a8 <ByteReverseWords>
 8000d5c:	2204      	movs	r2, #4
 8000d5e:	f104 0168 	add.w	r1, r4, #104	; 0x68
 8000d62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d66:	f7ff f9ee 	bl	8000146 <memcpy>
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8000d70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d74:	f7ff f9e7 	bl	8000146 <memcpy>
 8000d78:	4631      	mov	r1, r6
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f7ff fda0 	bl	80008c0 <Transform_Sha256>
 8000d80:	4605      	mov	r5, r0
 8000d82:	bb28      	cbnz	r0, 8000dd0 <wc_Sha256Final+0xe4>
 8000d84:	4621      	mov	r1, r4
 8000d86:	2220      	movs	r2, #32
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f7ff fd8d 	bl	80008a8 <ByteReverseWords>
 8000d8e:	2220      	movs	r2, #32
 8000d90:	4638      	mov	r0, r7
 8000d92:	f7ff f9d8 	bl	8000146 <memcpy>
 8000d96:	2220      	movs	r2, #32
 8000d98:	4629      	mov	r1, r5
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f7ff f9c2 	bl	8000124 <memset>
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <wc_Sha256Final+0xf0>)
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <wc_Sha256Final+0xf4>)
 8000da4:	490f      	ldr	r1, [pc, #60]	; (8000de4 <wc_Sha256Final+0xf8>)
 8000da6:	e9c4 2300 	strd	r2, r3, [r4]
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <wc_Sha256Final+0xfc>)
 8000dac:	480f      	ldr	r0, [pc, #60]	; (8000dec <wc_Sha256Final+0x100>)
 8000dae:	e9c4 1302 	strd	r1, r3, [r4, #8]
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <wc_Sha256Final+0x104>)
 8000db4:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
 8000db8:	e9c4 0304 	strd	r0, r3, [r4, #16]
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <wc_Sha256Final+0x108>)
 8000dbe:	66a5      	str	r5, [r4, #104]	; 0x68
 8000dc0:	61a3      	str	r3, [r4, #24]
 8000dc2:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8000dc6:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8000dca:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8000dce:	61e3      	str	r3, [r4, #28]
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dd4:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8000dd8:	e7fa      	b.n	8000dd0 <wc_Sha256Final+0xe4>
 8000dda:	bf00      	nop
 8000ddc:	bb67ae85 	.word	0xbb67ae85
 8000de0:	6a09e667 	.word	0x6a09e667
 8000de4:	3c6ef372 	.word	0x3c6ef372
 8000de8:	a54ff53a 	.word	0xa54ff53a
 8000dec:	510e527f 	.word	0x510e527f
 8000df0:	9b05688c 	.word	0x9b05688c
 8000df4:	1f83d9ab 	.word	0x1f83d9ab

08000df8 <wc_InitSha256>:
 8000df8:	f06f 0201 	mvn.w	r2, #1
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	f7ff bee9 	b.w	8000bd4 <wc_InitSha256_ex>

08000e02 <_sp_zero>:
 *
 * @param  [out]  a  SP integer to set to zero.
 */
static void _sp_zero(sp_int* a)
{
    a->used = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	6003      	str	r3, [r0, #0]
#ifdef WOLFSSL_SP_INT_NEGATIVE
    a->sign = MP_ZPOS;
#endif
}
 8000e06:	4770      	bx	lr

08000e08 <_sp_cmp_abs>:
 */
static int _sp_cmp_abs(sp_int* a, sp_int* b)
{
    int ret = MP_EQ;

    if (a->used > b->used) {
 8000e08:	6803      	ldr	r3, [r0, #0]
 8000e0a:	680a      	ldr	r2, [r1, #0]
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	dc12      	bgt.n	8000e36 <_sp_cmp_abs+0x2e>
        ret = MP_GT;
    }
    else if (a->used < b->used) {
 8000e10:	db13      	blt.n	8000e3a <_sp_cmp_abs+0x32>
        ret = MP_LT;
    }
    else {
        int i;

        for (i = a->used - 1; i >= 0; i--) {
 8000e12:	3b01      	subs	r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db18      	blt.n	8000e4a <_sp_cmp_abs+0x42>
{
 8000e18:	b410      	push	{r4}
            if (a->dp[i] > b->dp[i]) {
 8000e1a:	1c9a      	adds	r2, r3, #2
 8000e1c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8000e20:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e24:	4294      	cmp	r4, r2
 8000e26:	d80b      	bhi.n	8000e40 <_sp_cmp_abs+0x38>
                ret = MP_GT;
                break;
            }
            else if (a->dp[i] < b->dp[i]) {
 8000e28:	d30c      	bcc.n	8000e44 <_sp_cmp_abs+0x3c>
        for (i = a->used - 1; i >= 0; i--) {
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	daf4      	bge.n	8000e1a <_sp_cmp_abs+0x12>
    int ret = MP_EQ;
 8000e30:	2000      	movs	r0, #0
            }
        }
    }

    return ret;
}
 8000e32:	bc10      	pop	{r4}
 8000e34:	4770      	bx	lr
        ret = MP_GT;
 8000e36:	2001      	movs	r0, #1
 8000e38:	4770      	bx	lr
        ret = MP_LT;
 8000e3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e3e:	4770      	bx	lr
                ret = MP_GT;
 8000e40:	2001      	movs	r0, #1
 8000e42:	e7f6      	b.n	8000e32 <_sp_cmp_abs+0x2a>
                ret = MP_LT;
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ret;
 8000e48:	e7f3      	b.n	8000e32 <_sp_cmp_abs+0x2a>
    int ret = MP_EQ;
 8000e4a:	2000      	movs	r0, #0
}
 8000e4c:	4770      	bx	lr
	...

08000e50 <_sp_cmp>:
 * @return  MP_GT when a is greater than b.
 * @return  MP_LT when a is less than b.
 * @return  MP_EQ when a is equals b.
 */
static int _sp_cmp(sp_int* a, sp_int* b)
{
 8000e50:	b508      	push	{r3, lr}
    int ret;

#ifdef WOLFSSL_SP_INT_NEGATIVE
    if (a->sign == b->sign) {
#endif
        ret = _sp_cmp_abs(a, b);
 8000e52:	4b01      	ldr	r3, [pc, #4]	; (8000e58 <_sp_cmp+0x8>)
 8000e54:	4798      	blx	r3
        ret = MP_GT;
    }
#endif

    return ret;
}
 8000e56:	bd08      	pop	{r3, pc}
 8000e58:	08000e09 	.word	0x08000e09

08000e5c <_sp_read_radix_16>:
 * @return  MP_OKAY on success.
 * @return  MP_VAL when radix not supported, value is negative, or a character
 *          is not valid.
 */
static int _sp_read_radix_16(sp_int* a, const char* in)
{
 8000e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5e:	4605      	mov	r5, r0
 8000e60:	460e      	mov	r6, r1
        a->sign = MP_NEG;
        in++;
    }
#endif

    while (*in == '0') {
 8000e62:	7833      	ldrb	r3, [r6, #0]
 8000e64:	2b30      	cmp	r3, #48	; 0x30
 8000e66:	d101      	bne.n	8000e6c <_sp_read_radix_16+0x10>
        in++;
 8000e68:	3601      	adds	r6, #1
 8000e6a:	e7fa      	b.n	8000e62 <_sp_read_radix_16+0x6>
    }

    a->dp[0] = 0;
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	60ac      	str	r4, [r5, #8]
    for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 8000e70:	4630      	mov	r0, r6
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <_sp_read_radix_16+0xa4>)
 8000e74:	4798      	blx	r3
 8000e76:	3801      	subs	r0, #1
    int  j = 0;
 8000e78:	4627      	mov	r7, r4
    int  s = 0;
 8000e7a:	4622      	mov	r2, r4
    for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 8000e7c:	e012      	b.n	8000ea4 <_sp_read_radix_16+0x48>
            ch -= '0';
        }
        else if ((ch >= 'A') && (ch <= 'F')) {
            ch -= 'A' - 10;
        }
        else if ((ch >= 'a') && (ch <= 'f')) {
 8000e7e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	d82a      	bhi.n	8000ede <_sp_read_radix_16+0x82>
            ch -= 'a' - 10;
 8000e88:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 8000e8c:	b2db      	uxtb	r3, r3
        else {
            err = MP_VAL;
            break;
        }

        if (s == SP_WORD_SIZE) {
 8000e8e:	2a20      	cmp	r2, #32
 8000e90:	d019      	beq.n	8000ec6 <_sp_read_radix_16+0x6a>
            }
            s = 0;
            a->dp[j] = 0;
        }

        a->dp[j] |= ((sp_int_digit)ch) << s;
 8000e92:	4093      	lsls	r3, r2
 8000e94:	1cbc      	adds	r4, r7, #2
 8000e96:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 8000e9a:	430b      	orrs	r3, r1
 8000e9c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
        s += 4;
 8000ea0:	3204      	adds	r2, #4
    for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	db17      	blt.n	8000ed8 <_sp_read_radix_16+0x7c>
        char ch = in[i];
 8000ea8:	5c34      	ldrb	r4, [r6, r0]
        if ((ch >= '0') && (ch <= '9')) {
 8000eaa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b09      	cmp	r3, #9
 8000eb2:	d9ec      	bls.n	8000e8e <_sp_read_radix_16+0x32>
        else if ((ch >= 'A') && (ch <= 'F')) {
 8000eb4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b05      	cmp	r3, #5
 8000ebc:	d8df      	bhi.n	8000e7e <_sp_read_radix_16+0x22>
            ch -= 'A' - 10;
 8000ebe:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	e7e3      	b.n	8000e8e <_sp_read_radix_16+0x32>
            j++;
 8000ec6:	3701      	adds	r7, #1
            if (j >= a->size) {
 8000ec8:	686a      	ldr	r2, [r5, #4]
 8000eca:	42ba      	cmp	r2, r7
 8000ecc:	dd0a      	ble.n	8000ee4 <_sp_read_radix_16+0x88>
            a->dp[j] = 0;
 8000ece:	1cb9      	adds	r1, r7, #2
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
 8000ed6:	e7dc      	b.n	8000e92 <_sp_read_radix_16+0x36>
    int  err = MP_OKAY;
 8000ed8:	2000      	movs	r0, #0
    }

    if (err == MP_OKAY) {
 8000eda:	b130      	cbz	r0, 8000eea <_sp_read_radix_16+0x8e>
            a->sign = MP_ZPOS;
        }
    #endif
    }
    return err;
}
 8000edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            err = MP_VAL;
 8000ede:	f06f 0002 	mvn.w	r0, #2
 8000ee2:	e7fa      	b.n	8000eda <_sp_read_radix_16+0x7e>
                err = MP_VAL;
 8000ee4:	f06f 0002 	mvn.w	r0, #2
 8000ee8:	e7f7      	b.n	8000eda <_sp_read_radix_16+0x7e>
        sp_clamp(a);
 8000eea:	2f00      	cmp	r7, #0
 8000eec:	db05      	blt.n	8000efa <_sp_read_radix_16+0x9e>
 8000eee:	1cbb      	adds	r3, r7, #2
 8000ef0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000ef4:	b90b      	cbnz	r3, 8000efa <_sp_read_radix_16+0x9e>
 8000ef6:	3f01      	subs	r7, #1
 8000ef8:	e7f7      	b.n	8000eea <_sp_read_radix_16+0x8e>
 8000efa:	3701      	adds	r7, #1
 8000efc:	602f      	str	r7, [r5, #0]
    return err;
 8000efe:	e7ed      	b.n	8000edc <_sp_read_radix_16+0x80>
 8000f00:	08000139 	.word	0x08000139

08000f04 <sp_init>:
    if (a == NULL) {
 8000f04:	b138      	cbz	r0, 8000f16 <sp_init+0x12>
{
 8000f06:	b510      	push	{r4, lr}
 8000f08:	4604      	mov	r4, r0
        _sp_zero(a);
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <sp_init+0x18>)
 8000f0c:	4798      	blx	r3
        a->size = SP_INT_DIGITS;
 8000f0e:	2312      	movs	r3, #18
 8000f10:	6063      	str	r3, [r4, #4]
    int err = MP_OKAY;
 8000f12:	2000      	movs	r0, #0
}
 8000f14:	bd10      	pop	{r4, pc}
        err = MP_VAL;
 8000f16:	f06f 0002 	mvn.w	r0, #2
}
 8000f1a:	4770      	bx	lr
 8000f1c:	08000e03 	.word	0x08000e03

08000f20 <sp_init_multi>:
{
 8000f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f24:	460f      	mov	r7, r1
 8000f26:	4615      	mov	r5, r2
 8000f28:	461c      	mov	r4, r3
 8000f2a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f2e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    if (n1 != NULL) {
 8000f32:	b130      	cbz	r0, 8000f42 <sp_init_multi+0x22>
 8000f34:	4606      	mov	r6, r0
        _sp_zero(n1);
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <sp_init_multi+0x88>)
 8000f38:	4798      	blx	r3
        n1->dp[0] = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60b3      	str	r3, [r6, #8]
        n1->size = SP_INT_DIGITS;
 8000f3e:	2312      	movs	r3, #18
 8000f40:	6073      	str	r3, [r6, #4]
    if (n2 != NULL) {
 8000f42:	b137      	cbz	r7, 8000f52 <sp_init_multi+0x32>
        _sp_zero(n2);
 8000f44:	4638      	mov	r0, r7
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <sp_init_multi+0x88>)
 8000f48:	4798      	blx	r3
        n2->dp[0] = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
        n2->size = SP_INT_DIGITS;
 8000f4e:	2312      	movs	r3, #18
 8000f50:	607b      	str	r3, [r7, #4]
    if (n3 != NULL) {
 8000f52:	b135      	cbz	r5, 8000f62 <sp_init_multi+0x42>
        _sp_zero(n3);
 8000f54:	4628      	mov	r0, r5
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <sp_init_multi+0x88>)
 8000f58:	4798      	blx	r3
        n3->dp[0] = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60ab      	str	r3, [r5, #8]
        n3->size = SP_INT_DIGITS;
 8000f5e:	2312      	movs	r3, #18
 8000f60:	606b      	str	r3, [r5, #4]
    if (n4 != NULL) {
 8000f62:	b134      	cbz	r4, 8000f72 <sp_init_multi+0x52>
        _sp_zero(n4);
 8000f64:	4620      	mov	r0, r4
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <sp_init_multi+0x88>)
 8000f68:	4798      	blx	r3
        n4->dp[0] = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60a3      	str	r3, [r4, #8]
        n4->size = SP_INT_DIGITS;
 8000f6e:	2312      	movs	r3, #18
 8000f70:	6063      	str	r3, [r4, #4]
    if (n5 != NULL) {
 8000f72:	f1b9 0f00 	cmp.w	r9, #0
 8000f76:	d008      	beq.n	8000f8a <sp_init_multi+0x6a>
        _sp_zero(n5);
 8000f78:	4648      	mov	r0, r9
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <sp_init_multi+0x88>)
 8000f7c:	4798      	blx	r3
        n5->dp[0] = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c9 3008 	str.w	r3, [r9, #8]
        n5->size = SP_INT_DIGITS;
 8000f84:	2312      	movs	r3, #18
 8000f86:	f8c9 3004 	str.w	r3, [r9, #4]
    if (n6 != NULL) {
 8000f8a:	f1b8 0f00 	cmp.w	r8, #0
 8000f8e:	d008      	beq.n	8000fa2 <sp_init_multi+0x82>
        _sp_zero(n6);
 8000f90:	4640      	mov	r0, r8
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <sp_init_multi+0x88>)
 8000f94:	4798      	blx	r3
        n6->dp[0] = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c8 3008 	str.w	r3, [r8, #8]
        n6->size = SP_INT_DIGITS;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	f8c8 3004 	str.w	r3, [r8, #4]
}
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fa8:	08000e03 	.word	0x08000e03

08000fac <sp_grow>:
{
 8000fac:	b430      	push	{r4, r5}
    if (a == NULL) {
 8000fae:	4605      	mov	r5, r0
 8000fb0:	b130      	cbz	r0, 8000fc0 <sp_grow+0x14>
    if ((err == MP_OKAY) && (l > a->size)) {
 8000fb2:	6843      	ldr	r3, [r0, #4]
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	db0f      	blt.n	8000fd8 <sp_grow+0x2c>
    int err = MP_OKAY;
 8000fb8:	2000      	movs	r0, #0
    if (err == MP_OKAY) {
 8000fba:	b958      	cbnz	r0, 8000fd4 <sp_grow+0x28>
        for (i = a->used; i < l; i++) {
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	e007      	b.n	8000fd0 <sp_grow+0x24>
        err = MP_VAL;
 8000fc0:	f06f 0002 	mvn.w	r0, #2
 8000fc4:	e7f9      	b.n	8000fba <sp_grow+0xe>
            a->dp[i] = 0;
 8000fc6:	1c9a      	adds	r2, r3, #2
 8000fc8:	2400      	movs	r4, #0
 8000fca:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
        for (i = a->used; i < l; i++) {
 8000fce:	3301      	adds	r3, #1
 8000fd0:	428b      	cmp	r3, r1
 8000fd2:	dbf8      	blt.n	8000fc6 <sp_grow+0x1a>
}
 8000fd4:	bc30      	pop	{r4, r5}
 8000fd6:	4770      	bx	lr
        err = MP_MEM;
 8000fd8:	f06f 0001 	mvn.w	r0, #1
    return err;
 8000fdc:	e7fa      	b.n	8000fd4 <sp_grow+0x28>
	...

08000fe0 <sp_clear>:
    if (a != NULL) {
 8000fe0:	b118      	cbz	r0, 8000fea <sp_clear+0xa>
{
 8000fe2:	b508      	push	{r3, lr}
 8000fe4:	4602      	mov	r2, r0
        for (i = 0; i < a->used; i++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e005      	b.n	8000ff6 <sp_clear+0x16>
 8000fea:	4770      	bx	lr
            a->dp[i] = 0;
 8000fec:	1c99      	adds	r1, r3, #2
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        for (i = 0; i < a->used; i++) {
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	6811      	ldr	r1, [r2, #0]
 8000ff8:	4299      	cmp	r1, r3
 8000ffa:	dcf7      	bgt.n	8000fec <sp_clear+0xc>
        _sp_zero(a);
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4b01      	ldr	r3, [pc, #4]	; (8001004 <sp_clear+0x24>)
 8001000:	4798      	blx	r3
}
 8001002:	bd08      	pop	{r3, pc}
 8001004:	08000e03 	.word	0x08000e03

08001008 <sp_cmp>:
    if (a == b) {
 8001008:	4288      	cmp	r0, r1
 800100a:	d005      	beq.n	8001018 <sp_cmp+0x10>
    else if (a == NULL) {
 800100c:	b130      	cbz	r0, 800101c <sp_cmp+0x14>
    else if (b == NULL) {
 800100e:	b141      	cbz	r1, 8001022 <sp_cmp+0x1a>
{
 8001010:	b508      	push	{r3, lr}
        ret = _sp_cmp(a, b);
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <sp_cmp+0x20>)
 8001014:	4798      	blx	r3
}
 8001016:	bd08      	pop	{r3, pc}
        ret = MP_EQ;
 8001018:	2000      	movs	r0, #0
 800101a:	4770      	bx	lr
        ret = MP_LT;
 800101c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001020:	4770      	bx	lr
        ret = MP_GT;
 8001022:	2001      	movs	r0, #1
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	08000e51 	.word	0x08000e51

0800102c <sp_set>:
    if (a == NULL) {
 800102c:	b130      	cbz	r0, 800103c <sp_set+0x10>
        a->dp[0] = d;
 800102e:	6081      	str	r1, [r0, #8]
        a->used = d > 0;
 8001030:	3900      	subs	r1, #0
 8001032:	bf18      	it	ne
 8001034:	2101      	movne	r1, #1
 8001036:	6001      	str	r1, [r0, #0]
    int err = MP_OKAY;
 8001038:	2000      	movs	r0, #0
 800103a:	4770      	bx	lr
        err = MP_VAL;
 800103c:	f06f 0002 	mvn.w	r0, #2
}
 8001040:	4770      	bx	lr

08001042 <sp_read_unsigned_bin>:
{
 8001042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((a == NULL) || ((in == NULL) && (inSz > 0))) {
 8001046:	4606      	mov	r6, r0
 8001048:	b1c0      	cbz	r0, 800107c <sp_read_unsigned_bin+0x3a>
 800104a:	b191      	cbz	r1, 8001072 <sp_read_unsigned_bin+0x30>
    if ((err == MP_OKAY) && (inSz > ((word32)a->size - 1) * SP_WORD_SIZEOF)) {
 800104c:	6873      	ldr	r3, [r6, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8001054:	d86a      	bhi.n	800112c <sp_read_unsigned_bin+0xea>
 8001056:	2000      	movs	r0, #0
    if (err == MP_OKAY) {
 8001058:	2800      	cmp	r0, #0
 800105a:	d165      	bne.n	8001128 <sp_read_unsigned_bin+0xe6>
        a->used = (inSz + SP_WORD_SIZEOF - 1) / SP_WORD_SIZEOF;
 800105c:	f102 0e03 	add.w	lr, r2, #3
 8001060:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8001064:	f8c6 e000 	str.w	lr, [r6]
        for (i = inSz-1, j = 0; i >= SP_WORD_SIZEOF - 1; i -= SP_WORD_SIZEOF) {
 8001068:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 800106c:	4645      	mov	r5, r8
 800106e:	4684      	mov	ip, r0
 8001070:	e021      	b.n	80010b6 <sp_read_unsigned_bin+0x74>
    if ((a == NULL) || ((in == NULL) && (inSz > 0))) {
 8001072:	2a00      	cmp	r2, #0
 8001074:	d0ea      	beq.n	800104c <sp_read_unsigned_bin+0xa>
        err = MP_VAL;
 8001076:	f06f 0002 	mvn.w	r0, #2
 800107a:	e7ed      	b.n	8001058 <sp_read_unsigned_bin+0x16>
 800107c:	f06f 0002 	mvn.w	r0, #2
 8001080:	e7ea      	b.n	8001058 <sp_read_unsigned_bin+0x16>
            a->dp[j]  = ((sp_int_digit)in[i - 0] <<  0);
 8001082:	5d4b      	ldrb	r3, [r1, r5]
 8001084:	f10c 0702 	add.w	r7, ip, #2
 8001088:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
            a->dp[j] |= ((sp_int_digit)in[i - 1] <<  8);
 800108c:	eb01 0905 	add.w	r9, r1, r5
 8001090:	f819 4c01 	ldrb.w	r4, [r9, #-1]
 8001094:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001098:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
            a->dp[j] |= ((sp_int_digit)in[i - 2] << 16) |
 800109c:	f819 ac02 	ldrb.w	sl, [r9, #-2]
                        ((sp_int_digit)in[i - 3] << 24);
 80010a0:	f819 4c03 	ldrb.w	r4, [r9, #-3]
 80010a4:	0624      	lsls	r4, r4, #24
            a->dp[j] |= ((sp_int_digit)in[i - 2] << 16) |
 80010a6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010aa:	4323      	orrs	r3, r4
 80010ac:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
            j++;
 80010b0:	f10c 0c01 	add.w	ip, ip, #1
        for (i = inSz-1, j = 0; i >= SP_WORD_SIZEOF - 1; i -= SP_WORD_SIZEOF) {
 80010b4:	3d04      	subs	r5, #4
 80010b6:	2d02      	cmp	r5, #2
 80010b8:	dce3      	bgt.n	8001082 <sp_read_unsigned_bin+0x40>
        a->dp[j] = 0;
 80010ba:	f10c 0c02 	add.w	ip, ip, #2
 80010be:	2300      	movs	r3, #0
 80010c0:	f846 302c 	str.w	r3, [r6, ip, lsl #2]
        if (i >= 0) {
 80010c4:	429d      	cmp	r5, r3
 80010c6:	db23      	blt.n	8001110 <sp_read_unsigned_bin+0xce>
            byte *d = (byte*)a->dp;
 80010c8:	f106 0308 	add.w	r3, r6, #8
            a->dp[a->used - 1] = 0;
 80010cc:	f10e 0e01 	add.w	lr, lr, #1
 80010d0:	2400      	movs	r4, #0
 80010d2:	f846 402e 	str.w	r4, [r6, lr, lsl #2]
            switch (i) {
 80010d6:	2d06      	cmp	r5, #6
 80010d8:	d81a      	bhi.n	8001110 <sp_read_unsigned_bin+0xce>
 80010da:	e8df f005 	tbb	[pc, r5]
 80010de:	1316      	.short	0x1316
 80010e0:	070a0d10 	.word	0x070a0d10
 80010e4:	04          	.byte	0x04
 80010e5:	00          	.byte	0x00
                case 6: d[inSz - 1 - 6] = in[6]; FALL_THROUGH;
 80010e6:	1fd4      	subs	r4, r2, #7
 80010e8:	798d      	ldrb	r5, [r1, #6]
 80010ea:	551d      	strb	r5, [r3, r4]
                case 5: d[inSz - 1 - 5] = in[5]; FALL_THROUGH;
 80010ec:	1f94      	subs	r4, r2, #6
 80010ee:	794d      	ldrb	r5, [r1, #5]
 80010f0:	551d      	strb	r5, [r3, r4]
                case 4: d[inSz - 1 - 4] = in[4]; FALL_THROUGH;
 80010f2:	1f54      	subs	r4, r2, #5
 80010f4:	790d      	ldrb	r5, [r1, #4]
 80010f6:	551d      	strb	r5, [r3, r4]
                case 3: d[inSz - 1 - 3] = in[3]; FALL_THROUGH;
 80010f8:	1f14      	subs	r4, r2, #4
 80010fa:	78cd      	ldrb	r5, [r1, #3]
 80010fc:	551d      	strb	r5, [r3, r4]
                case 2: d[inSz - 1 - 2] = in[2]; FALL_THROUGH;
 80010fe:	1ed4      	subs	r4, r2, #3
 8001100:	788d      	ldrb	r5, [r1, #2]
 8001102:	551d      	strb	r5, [r3, r4]
                case 1: d[inSz - 1 - 1] = in[1]; FALL_THROUGH;
 8001104:	3a02      	subs	r2, #2
 8001106:	784c      	ldrb	r4, [r1, #1]
 8001108:	549c      	strb	r4, [r3, r2]
                case 0: d[inSz - 1 - 0] = in[0];
 800110a:	780a      	ldrb	r2, [r1, #0]
 800110c:	f803 2008 	strb.w	r2, [r3, r8]
        sp_clamp(a);
 8001110:	6833      	ldr	r3, [r6, #0]
 8001112:	3b01      	subs	r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	db05      	blt.n	8001124 <sp_read_unsigned_bin+0xe2>
 8001118:	1c9a      	adds	r2, r3, #2
 800111a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800111e:	b90a      	cbnz	r2, 8001124 <sp_read_unsigned_bin+0xe2>
 8001120:	3b01      	subs	r3, #1
 8001122:	e7f7      	b.n	8001114 <sp_read_unsigned_bin+0xd2>
 8001124:	3301      	adds	r3, #1
 8001126:	6033      	str	r3, [r6, #0]
}
 8001128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        err = MP_VAL;
 800112c:	f06f 0002 	mvn.w	r0, #2
    return err;
 8001130:	e7fa      	b.n	8001128 <sp_read_unsigned_bin+0xe6>
	...

08001134 <sp_read_radix>:
 */
int sp_read_radix(sp_int* a, const char* in, int radix)
{
    int err = MP_OKAY;

    if ((a == NULL) || (in == NULL)) {
 8001134:	b148      	cbz	r0, 800114a <sp_read_radix+0x16>
{
 8001136:	b510      	push	{r4, lr}
    if ((a == NULL) || (in == NULL)) {
 8001138:	b151      	cbz	r1, 8001150 <sp_read_radix+0x1c>
        err = MP_VAL;
    }

    if (err == MP_OKAY) {
    #ifndef WOLFSSL_SP_INT_NEGATIVE
        if (*in == '-') {
 800113a:	780b      	ldrb	r3, [r1, #0]
 800113c:	2b2d      	cmp	r3, #45	; 0x2d
 800113e:	d00a      	beq.n	8001156 <sp_read_radix+0x22>
            err = MP_VAL;
        }
        else
    #endif
        if (radix == 16) {
 8001140:	2a10      	cmp	r2, #16
 8001142:	d10b      	bne.n	800115c <sp_read_radix+0x28>
            err = _sp_read_radix_16(a, in);
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <sp_read_radix+0x30>)
 8001146:	4798      	blx	r3
            err = MP_VAL;
        }
    }

    return err;
}
 8001148:	bd10      	pop	{r4, pc}
        err = MP_VAL;
 800114a:	f06f 0002 	mvn.w	r0, #2
}
 800114e:	4770      	bx	lr
        err = MP_VAL;
 8001150:	f06f 0002 	mvn.w	r0, #2
 8001154:	e7f8      	b.n	8001148 <sp_read_radix+0x14>
            err = MP_VAL;
 8001156:	f06f 0002 	mvn.w	r0, #2
 800115a:	e7f5      	b.n	8001148 <sp_read_radix+0x14>
            err = MP_VAL;
 800115c:	f06f 0002 	mvn.w	r0, #2
    return err;
 8001160:	e7f2      	b.n	8001148 <sp_read_radix+0x14>
 8001162:	bf00      	nop
 8001164:	08000e5d 	.word	0x08000e5d

08001168 <sp_256_mul_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static void sp_256_mul_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8001168:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800116c:	b089      	sub	sp, #36	; 0x24
    sp_digit tmp_arr[8];
    sp_digit* tmp = tmp_arr;

    __asm__ __volatile__ (
 800116e:	466f      	mov	r7, sp
 8001170:	680e      	ldr	r6, [r1, #0]
 8001172:	f8d2 8000 	ldr.w	r8, [r2]
 8001176:	fba6 3408 	umull	r3, r4, r6, r8
 800117a:	f04f 0500 	mov.w	r5, #0
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001188:	fba6 6808 	umull	r6, r8, r6, r8
 800118c:	19a4      	adds	r4, r4, r6
 800118e:	eb45 0508 	adc.w	r5, r5, r8
 8001192:	684e      	ldr	r6, [r1, #4]
 8001194:	f8d2 8000 	ldr.w	r8, [r2]
 8001198:	fba6 6808 	umull	r6, r8, r6, r8
 800119c:	19a4      	adds	r4, r4, r6
 800119e:	eb55 0508 	adcs.w	r5, r5, r8
 80011a2:	f143 0300 	adc.w	r3, r3, #0
 80011a6:	607c      	str	r4, [r7, #4]
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	680e      	ldr	r6, [r1, #0]
 80011ae:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80011b2:	fba6 6808 	umull	r6, r8, r6, r8
 80011b6:	19ad      	adds	r5, r5, r6
 80011b8:	eb53 0308 	adcs.w	r3, r3, r8
 80011bc:	f144 0400 	adc.w	r4, r4, #0
 80011c0:	684e      	ldr	r6, [r1, #4]
 80011c2:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80011c6:	fba6 6808 	umull	r6, r8, r6, r8
 80011ca:	19ad      	adds	r5, r5, r6
 80011cc:	eb53 0308 	adcs.w	r3, r3, r8
 80011d0:	f144 0400 	adc.w	r4, r4, #0
 80011d4:	688e      	ldr	r6, [r1, #8]
 80011d6:	f8d2 8000 	ldr.w	r8, [r2]
 80011da:	fba6 6808 	umull	r6, r8, r6, r8
 80011de:	19ad      	adds	r5, r5, r6
 80011e0:	eb53 0308 	adcs.w	r3, r3, r8
 80011e4:	f144 0400 	adc.w	r4, r4, #0
 80011e8:	60bd      	str	r5, [r7, #8]
 80011ea:	f04f 0500 	mov.w	r5, #0
 80011ee:	680e      	ldr	r6, [r1, #0]
 80011f0:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80011f4:	fba6 6808 	umull	r6, r8, r6, r8
 80011f8:	199b      	adds	r3, r3, r6
 80011fa:	eb54 0408 	adcs.w	r4, r4, r8
 80011fe:	f145 0500 	adc.w	r5, r5, #0
 8001202:	684e      	ldr	r6, [r1, #4]
 8001204:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001208:	fba6 6808 	umull	r6, r8, r6, r8
 800120c:	199b      	adds	r3, r3, r6
 800120e:	eb54 0408 	adcs.w	r4, r4, r8
 8001212:	f145 0500 	adc.w	r5, r5, #0
 8001216:	688e      	ldr	r6, [r1, #8]
 8001218:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800121c:	fba6 6808 	umull	r6, r8, r6, r8
 8001220:	199b      	adds	r3, r3, r6
 8001222:	eb54 0408 	adcs.w	r4, r4, r8
 8001226:	f145 0500 	adc.w	r5, r5, #0
 800122a:	68ce      	ldr	r6, [r1, #12]
 800122c:	f8d2 8000 	ldr.w	r8, [r2]
 8001230:	fba6 6808 	umull	r6, r8, r6, r8
 8001234:	199b      	adds	r3, r3, r6
 8001236:	eb54 0408 	adcs.w	r4, r4, r8
 800123a:	f145 0500 	adc.w	r5, r5, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	680e      	ldr	r6, [r1, #0]
 8001246:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800124a:	fba6 6808 	umull	r6, r8, r6, r8
 800124e:	19a4      	adds	r4, r4, r6
 8001250:	eb55 0508 	adcs.w	r5, r5, r8
 8001254:	f143 0300 	adc.w	r3, r3, #0
 8001258:	684e      	ldr	r6, [r1, #4]
 800125a:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800125e:	fba6 6808 	umull	r6, r8, r6, r8
 8001262:	19a4      	adds	r4, r4, r6
 8001264:	eb55 0508 	adcs.w	r5, r5, r8
 8001268:	f143 0300 	adc.w	r3, r3, #0
 800126c:	688e      	ldr	r6, [r1, #8]
 800126e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001272:	fba6 6808 	umull	r6, r8, r6, r8
 8001276:	19a4      	adds	r4, r4, r6
 8001278:	eb55 0508 	adcs.w	r5, r5, r8
 800127c:	f143 0300 	adc.w	r3, r3, #0
 8001280:	68ce      	ldr	r6, [r1, #12]
 8001282:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001286:	fba6 6808 	umull	r6, r8, r6, r8
 800128a:	19a4      	adds	r4, r4, r6
 800128c:	eb55 0508 	adcs.w	r5, r5, r8
 8001290:	f143 0300 	adc.w	r3, r3, #0
 8001294:	690e      	ldr	r6, [r1, #16]
 8001296:	f8d2 8000 	ldr.w	r8, [r2]
 800129a:	fba6 6808 	umull	r6, r8, r6, r8
 800129e:	19a4      	adds	r4, r4, r6
 80012a0:	eb55 0508 	adcs.w	r5, r5, r8
 80012a4:	f143 0300 	adc.w	r3, r3, #0
 80012a8:	613c      	str	r4, [r7, #16]
 80012aa:	f04f 0400 	mov.w	r4, #0
 80012ae:	680e      	ldr	r6, [r1, #0]
 80012b0:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80012b4:	fba6 6808 	umull	r6, r8, r6, r8
 80012b8:	19ad      	adds	r5, r5, r6
 80012ba:	eb53 0308 	adcs.w	r3, r3, r8
 80012be:	f144 0400 	adc.w	r4, r4, #0
 80012c2:	684e      	ldr	r6, [r1, #4]
 80012c4:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80012c8:	fba6 6808 	umull	r6, r8, r6, r8
 80012cc:	19ad      	adds	r5, r5, r6
 80012ce:	eb53 0308 	adcs.w	r3, r3, r8
 80012d2:	f144 0400 	adc.w	r4, r4, #0
 80012d6:	688e      	ldr	r6, [r1, #8]
 80012d8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80012dc:	fba6 6808 	umull	r6, r8, r6, r8
 80012e0:	19ad      	adds	r5, r5, r6
 80012e2:	eb53 0308 	adcs.w	r3, r3, r8
 80012e6:	f144 0400 	adc.w	r4, r4, #0
 80012ea:	68ce      	ldr	r6, [r1, #12]
 80012ec:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80012f0:	fba6 6808 	umull	r6, r8, r6, r8
 80012f4:	19ad      	adds	r5, r5, r6
 80012f6:	eb53 0308 	adcs.w	r3, r3, r8
 80012fa:	f144 0400 	adc.w	r4, r4, #0
 80012fe:	690e      	ldr	r6, [r1, #16]
 8001300:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001304:	fba6 6808 	umull	r6, r8, r6, r8
 8001308:	19ad      	adds	r5, r5, r6
 800130a:	eb53 0308 	adcs.w	r3, r3, r8
 800130e:	f144 0400 	adc.w	r4, r4, #0
 8001312:	694e      	ldr	r6, [r1, #20]
 8001314:	f8d2 8000 	ldr.w	r8, [r2]
 8001318:	fba6 6808 	umull	r6, r8, r6, r8
 800131c:	19ad      	adds	r5, r5, r6
 800131e:	eb53 0308 	adcs.w	r3, r3, r8
 8001322:	f144 0400 	adc.w	r4, r4, #0
 8001326:	617d      	str	r5, [r7, #20]
 8001328:	f04f 0500 	mov.w	r5, #0
 800132c:	680e      	ldr	r6, [r1, #0]
 800132e:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001332:	fba6 6808 	umull	r6, r8, r6, r8
 8001336:	199b      	adds	r3, r3, r6
 8001338:	eb54 0408 	adcs.w	r4, r4, r8
 800133c:	f145 0500 	adc.w	r5, r5, #0
 8001340:	684e      	ldr	r6, [r1, #4]
 8001342:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001346:	fba6 6808 	umull	r6, r8, r6, r8
 800134a:	199b      	adds	r3, r3, r6
 800134c:	eb54 0408 	adcs.w	r4, r4, r8
 8001350:	f145 0500 	adc.w	r5, r5, #0
 8001354:	688e      	ldr	r6, [r1, #8]
 8001356:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800135a:	fba6 6808 	umull	r6, r8, r6, r8
 800135e:	199b      	adds	r3, r3, r6
 8001360:	eb54 0408 	adcs.w	r4, r4, r8
 8001364:	f145 0500 	adc.w	r5, r5, #0
 8001368:	68ce      	ldr	r6, [r1, #12]
 800136a:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800136e:	fba6 6808 	umull	r6, r8, r6, r8
 8001372:	199b      	adds	r3, r3, r6
 8001374:	eb54 0408 	adcs.w	r4, r4, r8
 8001378:	f145 0500 	adc.w	r5, r5, #0
 800137c:	690e      	ldr	r6, [r1, #16]
 800137e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001382:	fba6 6808 	umull	r6, r8, r6, r8
 8001386:	199b      	adds	r3, r3, r6
 8001388:	eb54 0408 	adcs.w	r4, r4, r8
 800138c:	f145 0500 	adc.w	r5, r5, #0
 8001390:	694e      	ldr	r6, [r1, #20]
 8001392:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001396:	fba6 6808 	umull	r6, r8, r6, r8
 800139a:	199b      	adds	r3, r3, r6
 800139c:	eb54 0408 	adcs.w	r4, r4, r8
 80013a0:	f145 0500 	adc.w	r5, r5, #0
 80013a4:	698e      	ldr	r6, [r1, #24]
 80013a6:	f8d2 8000 	ldr.w	r8, [r2]
 80013aa:	fba6 6808 	umull	r6, r8, r6, r8
 80013ae:	199b      	adds	r3, r3, r6
 80013b0:	eb54 0408 	adcs.w	r4, r4, r8
 80013b4:	f145 0500 	adc.w	r5, r5, #0
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	680e      	ldr	r6, [r1, #0]
 80013c0:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80013c4:	fba6 6808 	umull	r6, r8, r6, r8
 80013c8:	19a4      	adds	r4, r4, r6
 80013ca:	eb55 0508 	adcs.w	r5, r5, r8
 80013ce:	f143 0300 	adc.w	r3, r3, #0
 80013d2:	684e      	ldr	r6, [r1, #4]
 80013d4:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80013d8:	fba6 6808 	umull	r6, r8, r6, r8
 80013dc:	19a4      	adds	r4, r4, r6
 80013de:	eb55 0508 	adcs.w	r5, r5, r8
 80013e2:	f143 0300 	adc.w	r3, r3, #0
 80013e6:	688e      	ldr	r6, [r1, #8]
 80013e8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80013ec:	fba6 6808 	umull	r6, r8, r6, r8
 80013f0:	19a4      	adds	r4, r4, r6
 80013f2:	eb55 0508 	adcs.w	r5, r5, r8
 80013f6:	f143 0300 	adc.w	r3, r3, #0
 80013fa:	68ce      	ldr	r6, [r1, #12]
 80013fc:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001400:	fba6 6808 	umull	r6, r8, r6, r8
 8001404:	19a4      	adds	r4, r4, r6
 8001406:	eb55 0508 	adcs.w	r5, r5, r8
 800140a:	f143 0300 	adc.w	r3, r3, #0
 800140e:	690e      	ldr	r6, [r1, #16]
 8001410:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8001414:	fba6 6808 	umull	r6, r8, r6, r8
 8001418:	19a4      	adds	r4, r4, r6
 800141a:	eb55 0508 	adcs.w	r5, r5, r8
 800141e:	f143 0300 	adc.w	r3, r3, #0
 8001422:	694e      	ldr	r6, [r1, #20]
 8001424:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001428:	fba6 6808 	umull	r6, r8, r6, r8
 800142c:	19a4      	adds	r4, r4, r6
 800142e:	eb55 0508 	adcs.w	r5, r5, r8
 8001432:	f143 0300 	adc.w	r3, r3, #0
 8001436:	698e      	ldr	r6, [r1, #24]
 8001438:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800143c:	fba6 6808 	umull	r6, r8, r6, r8
 8001440:	19a4      	adds	r4, r4, r6
 8001442:	eb55 0508 	adcs.w	r5, r5, r8
 8001446:	f143 0300 	adc.w	r3, r3, #0
 800144a:	69ce      	ldr	r6, [r1, #28]
 800144c:	f8d2 8000 	ldr.w	r8, [r2]
 8001450:	fba6 6808 	umull	r6, r8, r6, r8
 8001454:	19a4      	adds	r4, r4, r6
 8001456:	eb55 0508 	adcs.w	r5, r5, r8
 800145a:	f143 0300 	adc.w	r3, r3, #0
 800145e:	61fc      	str	r4, [r7, #28]
 8001460:	f04f 0400 	mov.w	r4, #0
 8001464:	684e      	ldr	r6, [r1, #4]
 8001466:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800146a:	fba6 6808 	umull	r6, r8, r6, r8
 800146e:	19ad      	adds	r5, r5, r6
 8001470:	eb53 0308 	adcs.w	r3, r3, r8
 8001474:	f144 0400 	adc.w	r4, r4, #0
 8001478:	688e      	ldr	r6, [r1, #8]
 800147a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800147e:	fba6 6808 	umull	r6, r8, r6, r8
 8001482:	19ad      	adds	r5, r5, r6
 8001484:	eb53 0308 	adcs.w	r3, r3, r8
 8001488:	f144 0400 	adc.w	r4, r4, #0
 800148c:	68ce      	ldr	r6, [r1, #12]
 800148e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001492:	fba6 6808 	umull	r6, r8, r6, r8
 8001496:	19ad      	adds	r5, r5, r6
 8001498:	eb53 0308 	adcs.w	r3, r3, r8
 800149c:	f144 0400 	adc.w	r4, r4, #0
 80014a0:	690e      	ldr	r6, [r1, #16]
 80014a2:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80014a6:	fba6 6808 	umull	r6, r8, r6, r8
 80014aa:	19ad      	adds	r5, r5, r6
 80014ac:	eb53 0308 	adcs.w	r3, r3, r8
 80014b0:	f144 0400 	adc.w	r4, r4, #0
 80014b4:	694e      	ldr	r6, [r1, #20]
 80014b6:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80014ba:	fba6 6808 	umull	r6, r8, r6, r8
 80014be:	19ad      	adds	r5, r5, r6
 80014c0:	eb53 0308 	adcs.w	r3, r3, r8
 80014c4:	f144 0400 	adc.w	r4, r4, #0
 80014c8:	698e      	ldr	r6, [r1, #24]
 80014ca:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80014ce:	fba6 6808 	umull	r6, r8, r6, r8
 80014d2:	19ad      	adds	r5, r5, r6
 80014d4:	eb53 0308 	adcs.w	r3, r3, r8
 80014d8:	f144 0400 	adc.w	r4, r4, #0
 80014dc:	69ce      	ldr	r6, [r1, #28]
 80014de:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80014e2:	fba6 6808 	umull	r6, r8, r6, r8
 80014e6:	19ad      	adds	r5, r5, r6
 80014e8:	eb53 0308 	adcs.w	r3, r3, r8
 80014ec:	f144 0400 	adc.w	r4, r4, #0
 80014f0:	6205      	str	r5, [r0, #32]
 80014f2:	f04f 0500 	mov.w	r5, #0
 80014f6:	688e      	ldr	r6, [r1, #8]
 80014f8:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80014fc:	fba6 6808 	umull	r6, r8, r6, r8
 8001500:	199b      	adds	r3, r3, r6
 8001502:	eb54 0408 	adcs.w	r4, r4, r8
 8001506:	f145 0500 	adc.w	r5, r5, #0
 800150a:	68ce      	ldr	r6, [r1, #12]
 800150c:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001510:	fba6 6808 	umull	r6, r8, r6, r8
 8001514:	199b      	adds	r3, r3, r6
 8001516:	eb54 0408 	adcs.w	r4, r4, r8
 800151a:	f145 0500 	adc.w	r5, r5, #0
 800151e:	690e      	ldr	r6, [r1, #16]
 8001520:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001524:	fba6 6808 	umull	r6, r8, r6, r8
 8001528:	199b      	adds	r3, r3, r6
 800152a:	eb54 0408 	adcs.w	r4, r4, r8
 800152e:	f145 0500 	adc.w	r5, r5, #0
 8001532:	694e      	ldr	r6, [r1, #20]
 8001534:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001538:	fba6 6808 	umull	r6, r8, r6, r8
 800153c:	199b      	adds	r3, r3, r6
 800153e:	eb54 0408 	adcs.w	r4, r4, r8
 8001542:	f145 0500 	adc.w	r5, r5, #0
 8001546:	698e      	ldr	r6, [r1, #24]
 8001548:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800154c:	fba6 6808 	umull	r6, r8, r6, r8
 8001550:	199b      	adds	r3, r3, r6
 8001552:	eb54 0408 	adcs.w	r4, r4, r8
 8001556:	f145 0500 	adc.w	r5, r5, #0
 800155a:	69ce      	ldr	r6, [r1, #28]
 800155c:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001560:	fba6 6808 	umull	r6, r8, r6, r8
 8001564:	199b      	adds	r3, r3, r6
 8001566:	eb54 0408 	adcs.w	r4, r4, r8
 800156a:	f145 0500 	adc.w	r5, r5, #0
 800156e:	6243      	str	r3, [r0, #36]	; 0x24
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	68ce      	ldr	r6, [r1, #12]
 8001576:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800157a:	fba6 6808 	umull	r6, r8, r6, r8
 800157e:	19a4      	adds	r4, r4, r6
 8001580:	eb55 0508 	adcs.w	r5, r5, r8
 8001584:	f143 0300 	adc.w	r3, r3, #0
 8001588:	690e      	ldr	r6, [r1, #16]
 800158a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800158e:	fba6 6808 	umull	r6, r8, r6, r8
 8001592:	19a4      	adds	r4, r4, r6
 8001594:	eb55 0508 	adcs.w	r5, r5, r8
 8001598:	f143 0300 	adc.w	r3, r3, #0
 800159c:	694e      	ldr	r6, [r1, #20]
 800159e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80015a2:	fba6 6808 	umull	r6, r8, r6, r8
 80015a6:	19a4      	adds	r4, r4, r6
 80015a8:	eb55 0508 	adcs.w	r5, r5, r8
 80015ac:	f143 0300 	adc.w	r3, r3, #0
 80015b0:	698e      	ldr	r6, [r1, #24]
 80015b2:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80015b6:	fba6 6808 	umull	r6, r8, r6, r8
 80015ba:	19a4      	adds	r4, r4, r6
 80015bc:	eb55 0508 	adcs.w	r5, r5, r8
 80015c0:	f143 0300 	adc.w	r3, r3, #0
 80015c4:	69ce      	ldr	r6, [r1, #28]
 80015c6:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80015ca:	fba6 6808 	umull	r6, r8, r6, r8
 80015ce:	19a4      	adds	r4, r4, r6
 80015d0:	eb55 0508 	adcs.w	r5, r5, r8
 80015d4:	f143 0300 	adc.w	r3, r3, #0
 80015d8:	6284      	str	r4, [r0, #40]	; 0x28
 80015da:	f04f 0400 	mov.w	r4, #0
 80015de:	690e      	ldr	r6, [r1, #16]
 80015e0:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80015e4:	fba6 6808 	umull	r6, r8, r6, r8
 80015e8:	19ad      	adds	r5, r5, r6
 80015ea:	eb53 0308 	adcs.w	r3, r3, r8
 80015ee:	f144 0400 	adc.w	r4, r4, #0
 80015f2:	694e      	ldr	r6, [r1, #20]
 80015f4:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80015f8:	fba6 6808 	umull	r6, r8, r6, r8
 80015fc:	19ad      	adds	r5, r5, r6
 80015fe:	eb53 0308 	adcs.w	r3, r3, r8
 8001602:	f144 0400 	adc.w	r4, r4, #0
 8001606:	698e      	ldr	r6, [r1, #24]
 8001608:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800160c:	fba6 6808 	umull	r6, r8, r6, r8
 8001610:	19ad      	adds	r5, r5, r6
 8001612:	eb53 0308 	adcs.w	r3, r3, r8
 8001616:	f144 0400 	adc.w	r4, r4, #0
 800161a:	69ce      	ldr	r6, [r1, #28]
 800161c:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001620:	fba6 6808 	umull	r6, r8, r6, r8
 8001624:	19ad      	adds	r5, r5, r6
 8001626:	eb53 0308 	adcs.w	r3, r3, r8
 800162a:	f144 0400 	adc.w	r4, r4, #0
 800162e:	62c5      	str	r5, [r0, #44]	; 0x2c
 8001630:	f04f 0500 	mov.w	r5, #0
 8001634:	694e      	ldr	r6, [r1, #20]
 8001636:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800163a:	fba6 6808 	umull	r6, r8, r6, r8
 800163e:	199b      	adds	r3, r3, r6
 8001640:	eb54 0408 	adcs.w	r4, r4, r8
 8001644:	f145 0500 	adc.w	r5, r5, #0
 8001648:	698e      	ldr	r6, [r1, #24]
 800164a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800164e:	fba6 6808 	umull	r6, r8, r6, r8
 8001652:	199b      	adds	r3, r3, r6
 8001654:	eb54 0408 	adcs.w	r4, r4, r8
 8001658:	f145 0500 	adc.w	r5, r5, #0
 800165c:	69ce      	ldr	r6, [r1, #28]
 800165e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001662:	fba6 6808 	umull	r6, r8, r6, r8
 8001666:	199b      	adds	r3, r3, r6
 8001668:	eb54 0408 	adcs.w	r4, r4, r8
 800166c:	f145 0500 	adc.w	r5, r5, #0
 8001670:	6303      	str	r3, [r0, #48]	; 0x30
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	698e      	ldr	r6, [r1, #24]
 8001678:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800167c:	fba6 6808 	umull	r6, r8, r6, r8
 8001680:	19a4      	adds	r4, r4, r6
 8001682:	eb55 0508 	adcs.w	r5, r5, r8
 8001686:	f143 0300 	adc.w	r3, r3, #0
 800168a:	69ce      	ldr	r6, [r1, #28]
 800168c:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001690:	fba6 6808 	umull	r6, r8, r6, r8
 8001694:	19a4      	adds	r4, r4, r6
 8001696:	eb55 0508 	adcs.w	r5, r5, r8
 800169a:	f143 0300 	adc.w	r3, r3, #0
 800169e:	6344      	str	r4, [r0, #52]	; 0x34
 80016a0:	f04f 0400 	mov.w	r4, #0
 80016a4:	69ce      	ldr	r6, [r1, #28]
 80016a6:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80016aa:	fba6 6808 	umull	r6, r8, r6, r8
 80016ae:	19ad      	adds	r5, r5, r6
 80016b0:	eb43 0308 	adc.w	r3, r3, r8
 80016b4:	6385      	str	r5, [r0, #56]	; 0x38
 80016b6:	63c3      	str	r3, [r0, #60]	; 0x3c
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	687c      	ldr	r4, [r7, #4]
 80016bc:	68bd      	ldr	r5, [r7, #8]
 80016be:	68fe      	ldr	r6, [r7, #12]
 80016c0:	6003      	str	r3, [r0, #0]
 80016c2:	6044      	str	r4, [r0, #4]
 80016c4:	6085      	str	r5, [r0, #8]
 80016c6:	60c6      	str	r6, [r0, #12]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	697c      	ldr	r4, [r7, #20]
 80016cc:	69bd      	ldr	r5, [r7, #24]
 80016ce:	69fe      	ldr	r6, [r7, #28]
 80016d0:	6103      	str	r3, [r0, #16]
 80016d2:	6144      	str	r4, [r0, #20]
 80016d4:	6185      	str	r5, [r0, #24]
 80016d6:	61c6      	str	r6, [r0, #28]
        "str	r6, [%[r], #28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [tmp] "r" (tmp)
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );
}
 80016d8:	b009      	add	sp, #36	; 0x24
 80016da:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80016de:	4770      	bx	lr

080016e0 <sp_256_sqr_8>:
 *
 * r  A single precision integer.
 * a  A single precision integer.
 */
SP_NOINLINE static void sp_256_sqr_8(sp_digit* r, const sp_digit* a)
{
 80016e0:	e92d 0f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp}
 80016e4:	b089      	sub	sp, #36	; 0x24
    sp_digit tmp_arr[8];
    sp_digit* tmp = tmp_arr;
    __asm__ __volatile__ (
 80016e6:	466a      	mov	r2, sp
 80016e8:	680e      	ldr	r6, [r1, #0]
 80016ea:	fba6 3406 	umull	r3, r4, r6, r6
 80016ee:	f04f 0500 	mov.w	r5, #0
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80016fc:	fba6 6808 	umull	r6, r8, r6, r8
 8001700:	19a4      	adds	r4, r4, r6
 8001702:	eb45 0508 	adc.w	r5, r5, r8
 8001706:	19a4      	adds	r4, r4, r6
 8001708:	eb55 0508 	adcs.w	r5, r5, r8
 800170c:	f143 0300 	adc.w	r3, r3, #0
 8001710:	6054      	str	r4, [r2, #4]
 8001712:	f04f 0400 	mov.w	r4, #0
 8001716:	680e      	ldr	r6, [r1, #0]
 8001718:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800171c:	fba6 6808 	umull	r6, r8, r6, r8
 8001720:	19ad      	adds	r5, r5, r6
 8001722:	eb43 0308 	adc.w	r3, r3, r8
 8001726:	19ad      	adds	r5, r5, r6
 8001728:	eb53 0308 	adcs.w	r3, r3, r8
 800172c:	f144 0400 	adc.w	r4, r4, #0
 8001730:	684e      	ldr	r6, [r1, #4]
 8001732:	fba6 6806 	umull	r6, r8, r6, r6
 8001736:	19ad      	adds	r5, r5, r6
 8001738:	eb53 0308 	adcs.w	r3, r3, r8
 800173c:	f144 0400 	adc.w	r4, r4, #0
 8001740:	6095      	str	r5, [r2, #8]
 8001742:	f04f 0500 	mov.w	r5, #0
 8001746:	680e      	ldr	r6, [r1, #0]
 8001748:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800174c:	fba6 9a08 	umull	r9, sl, r6, r8
 8001750:	f04f 0b00 	mov.w	fp, #0
 8001754:	684e      	ldr	r6, [r1, #4]
 8001756:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800175a:	fba6 6808 	umull	r6, r8, r6, r8
 800175e:	eb19 0906 	adds.w	r9, r9, r6
 8001762:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001766:	f14b 0b00 	adc.w	fp, fp, #0
 800176a:	eb19 0909 	adds.w	r9, r9, r9
 800176e:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001772:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001776:	eb13 0309 	adds.w	r3, r3, r9
 800177a:	eb54 040a 	adcs.w	r4, r4, sl
 800177e:	eb45 050b 	adc.w	r5, r5, fp
 8001782:	60d3      	str	r3, [r2, #12]
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	680e      	ldr	r6, [r1, #0]
 800178a:	f8d1 8010 	ldr.w	r8, [r1, #16]
 800178e:	fba6 9a08 	umull	r9, sl, r6, r8
 8001792:	f04f 0b00 	mov.w	fp, #0
 8001796:	684e      	ldr	r6, [r1, #4]
 8001798:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800179c:	fba6 6808 	umull	r6, r8, r6, r8
 80017a0:	eb19 0906 	adds.w	r9, r9, r6
 80017a4:	eb5a 0a08 	adcs.w	sl, sl, r8
 80017a8:	f14b 0b00 	adc.w	fp, fp, #0
 80017ac:	688e      	ldr	r6, [r1, #8]
 80017ae:	fba6 6806 	umull	r6, r8, r6, r6
 80017b2:	19a4      	adds	r4, r4, r6
 80017b4:	eb55 0508 	adcs.w	r5, r5, r8
 80017b8:	f143 0300 	adc.w	r3, r3, #0
 80017bc:	eb19 0909 	adds.w	r9, r9, r9
 80017c0:	eb5a 0a0a 	adcs.w	sl, sl, sl
 80017c4:	eb4b 0b0b 	adc.w	fp, fp, fp
 80017c8:	eb14 0409 	adds.w	r4, r4, r9
 80017cc:	eb55 050a 	adcs.w	r5, r5, sl
 80017d0:	eb43 030b 	adc.w	r3, r3, fp
 80017d4:	6114      	str	r4, [r2, #16]
 80017d6:	f04f 0400 	mov.w	r4, #0
 80017da:	680e      	ldr	r6, [r1, #0]
 80017dc:	f8d1 8014 	ldr.w	r8, [r1, #20]
 80017e0:	fba6 9a08 	umull	r9, sl, r6, r8
 80017e4:	f04f 0b00 	mov.w	fp, #0
 80017e8:	684e      	ldr	r6, [r1, #4]
 80017ea:	f8d1 8010 	ldr.w	r8, [r1, #16]
 80017ee:	fba6 6808 	umull	r6, r8, r6, r8
 80017f2:	eb19 0906 	adds.w	r9, r9, r6
 80017f6:	eb5a 0a08 	adcs.w	sl, sl, r8
 80017fa:	f14b 0b00 	adc.w	fp, fp, #0
 80017fe:	688e      	ldr	r6, [r1, #8]
 8001800:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8001804:	fba6 6808 	umull	r6, r8, r6, r8
 8001808:	eb19 0906 	adds.w	r9, r9, r6
 800180c:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001810:	f14b 0b00 	adc.w	fp, fp, #0
 8001814:	eb19 0909 	adds.w	r9, r9, r9
 8001818:	eb5a 0a0a 	adcs.w	sl, sl, sl
 800181c:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001820:	eb15 0509 	adds.w	r5, r5, r9
 8001824:	eb53 030a 	adcs.w	r3, r3, sl
 8001828:	eb44 040b 	adc.w	r4, r4, fp
 800182c:	6155      	str	r5, [r2, #20]
 800182e:	f04f 0500 	mov.w	r5, #0
 8001832:	680e      	ldr	r6, [r1, #0]
 8001834:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001838:	fba6 9a08 	umull	r9, sl, r6, r8
 800183c:	f04f 0b00 	mov.w	fp, #0
 8001840:	684e      	ldr	r6, [r1, #4]
 8001842:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001846:	fba6 6808 	umull	r6, r8, r6, r8
 800184a:	eb19 0906 	adds.w	r9, r9, r6
 800184e:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001852:	f14b 0b00 	adc.w	fp, fp, #0
 8001856:	688e      	ldr	r6, [r1, #8]
 8001858:	f8d1 8010 	ldr.w	r8, [r1, #16]
 800185c:	fba6 6808 	umull	r6, r8, r6, r8
 8001860:	eb19 0906 	adds.w	r9, r9, r6
 8001864:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001868:	f14b 0b00 	adc.w	fp, fp, #0
 800186c:	68ce      	ldr	r6, [r1, #12]
 800186e:	fba6 6806 	umull	r6, r8, r6, r6
 8001872:	199b      	adds	r3, r3, r6
 8001874:	eb54 0408 	adcs.w	r4, r4, r8
 8001878:	f145 0500 	adc.w	r5, r5, #0
 800187c:	eb19 0909 	adds.w	r9, r9, r9
 8001880:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001884:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001888:	eb13 0309 	adds.w	r3, r3, r9
 800188c:	eb54 040a 	adcs.w	r4, r4, sl
 8001890:	eb45 050b 	adc.w	r5, r5, fp
 8001894:	6193      	str	r3, [r2, #24]
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	680e      	ldr	r6, [r1, #0]
 800189c:	f8d1 801c 	ldr.w	r8, [r1, #28]
 80018a0:	fba6 9a08 	umull	r9, sl, r6, r8
 80018a4:	f04f 0b00 	mov.w	fp, #0
 80018a8:	684e      	ldr	r6, [r1, #4]
 80018aa:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80018ae:	fba6 6808 	umull	r6, r8, r6, r8
 80018b2:	eb19 0906 	adds.w	r9, r9, r6
 80018b6:	eb5a 0a08 	adcs.w	sl, sl, r8
 80018ba:	f14b 0b00 	adc.w	fp, fp, #0
 80018be:	688e      	ldr	r6, [r1, #8]
 80018c0:	f8d1 8014 	ldr.w	r8, [r1, #20]
 80018c4:	fba6 6808 	umull	r6, r8, r6, r8
 80018c8:	eb19 0906 	adds.w	r9, r9, r6
 80018cc:	eb5a 0a08 	adcs.w	sl, sl, r8
 80018d0:	f14b 0b00 	adc.w	fp, fp, #0
 80018d4:	68ce      	ldr	r6, [r1, #12]
 80018d6:	f8d1 8010 	ldr.w	r8, [r1, #16]
 80018da:	fba6 6808 	umull	r6, r8, r6, r8
 80018de:	eb19 0906 	adds.w	r9, r9, r6
 80018e2:	eb5a 0a08 	adcs.w	sl, sl, r8
 80018e6:	f14b 0b00 	adc.w	fp, fp, #0
 80018ea:	eb19 0909 	adds.w	r9, r9, r9
 80018ee:	eb5a 0a0a 	adcs.w	sl, sl, sl
 80018f2:	eb4b 0b0b 	adc.w	fp, fp, fp
 80018f6:	eb14 0409 	adds.w	r4, r4, r9
 80018fa:	eb55 050a 	adcs.w	r5, r5, sl
 80018fe:	eb43 030b 	adc.w	r3, r3, fp
 8001902:	61d4      	str	r4, [r2, #28]
 8001904:	f04f 0400 	mov.w	r4, #0
 8001908:	684e      	ldr	r6, [r1, #4]
 800190a:	f8d1 801c 	ldr.w	r8, [r1, #28]
 800190e:	fba6 9a08 	umull	r9, sl, r6, r8
 8001912:	f04f 0b00 	mov.w	fp, #0
 8001916:	688e      	ldr	r6, [r1, #8]
 8001918:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800191c:	fba6 6808 	umull	r6, r8, r6, r8
 8001920:	eb19 0906 	adds.w	r9, r9, r6
 8001924:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001928:	f14b 0b00 	adc.w	fp, fp, #0
 800192c:	68ce      	ldr	r6, [r1, #12]
 800192e:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001932:	fba6 6808 	umull	r6, r8, r6, r8
 8001936:	eb19 0906 	adds.w	r9, r9, r6
 800193a:	eb5a 0a08 	adcs.w	sl, sl, r8
 800193e:	f14b 0b00 	adc.w	fp, fp, #0
 8001942:	690e      	ldr	r6, [r1, #16]
 8001944:	fba6 6806 	umull	r6, r8, r6, r6
 8001948:	19ad      	adds	r5, r5, r6
 800194a:	eb53 0308 	adcs.w	r3, r3, r8
 800194e:	f144 0400 	adc.w	r4, r4, #0
 8001952:	eb19 0909 	adds.w	r9, r9, r9
 8001956:	eb5a 0a0a 	adcs.w	sl, sl, sl
 800195a:	eb4b 0b0b 	adc.w	fp, fp, fp
 800195e:	eb15 0509 	adds.w	r5, r5, r9
 8001962:	eb53 030a 	adcs.w	r3, r3, sl
 8001966:	eb44 040b 	adc.w	r4, r4, fp
 800196a:	6205      	str	r5, [r0, #32]
 800196c:	f04f 0500 	mov.w	r5, #0
 8001970:	688e      	ldr	r6, [r1, #8]
 8001972:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001976:	fba6 9a08 	umull	r9, sl, r6, r8
 800197a:	f04f 0b00 	mov.w	fp, #0
 800197e:	68ce      	ldr	r6, [r1, #12]
 8001980:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001984:	fba6 6808 	umull	r6, r8, r6, r8
 8001988:	eb19 0906 	adds.w	r9, r9, r6
 800198c:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001990:	f14b 0b00 	adc.w	fp, fp, #0
 8001994:	690e      	ldr	r6, [r1, #16]
 8001996:	f8d1 8014 	ldr.w	r8, [r1, #20]
 800199a:	fba6 6808 	umull	r6, r8, r6, r8
 800199e:	eb19 0906 	adds.w	r9, r9, r6
 80019a2:	eb5a 0a08 	adcs.w	sl, sl, r8
 80019a6:	f14b 0b00 	adc.w	fp, fp, #0
 80019aa:	eb19 0909 	adds.w	r9, r9, r9
 80019ae:	eb5a 0a0a 	adcs.w	sl, sl, sl
 80019b2:	eb4b 0b0b 	adc.w	fp, fp, fp
 80019b6:	eb13 0309 	adds.w	r3, r3, r9
 80019ba:	eb54 040a 	adcs.w	r4, r4, sl
 80019be:	eb45 050b 	adc.w	r5, r5, fp
 80019c2:	6243      	str	r3, [r0, #36]	; 0x24
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	68ce      	ldr	r6, [r1, #12]
 80019ca:	f8d1 801c 	ldr.w	r8, [r1, #28]
 80019ce:	fba6 9a08 	umull	r9, sl, r6, r8
 80019d2:	f04f 0b00 	mov.w	fp, #0
 80019d6:	690e      	ldr	r6, [r1, #16]
 80019d8:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80019dc:	fba6 6808 	umull	r6, r8, r6, r8
 80019e0:	eb19 0906 	adds.w	r9, r9, r6
 80019e4:	eb5a 0a08 	adcs.w	sl, sl, r8
 80019e8:	f14b 0b00 	adc.w	fp, fp, #0
 80019ec:	694e      	ldr	r6, [r1, #20]
 80019ee:	fba6 6806 	umull	r6, r8, r6, r6
 80019f2:	19a4      	adds	r4, r4, r6
 80019f4:	eb55 0508 	adcs.w	r5, r5, r8
 80019f8:	f143 0300 	adc.w	r3, r3, #0
 80019fc:	eb19 0909 	adds.w	r9, r9, r9
 8001a00:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001a04:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001a08:	eb14 0409 	adds.w	r4, r4, r9
 8001a0c:	eb55 050a 	adcs.w	r5, r5, sl
 8001a10:	eb43 030b 	adc.w	r3, r3, fp
 8001a14:	6284      	str	r4, [r0, #40]	; 0x28
 8001a16:	f04f 0400 	mov.w	r4, #0
 8001a1a:	690e      	ldr	r6, [r1, #16]
 8001a1c:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001a20:	fba6 6808 	umull	r6, r8, r6, r8
 8001a24:	19ad      	adds	r5, r5, r6
 8001a26:	eb53 0308 	adcs.w	r3, r3, r8
 8001a2a:	f144 0400 	adc.w	r4, r4, #0
 8001a2e:	19ad      	adds	r5, r5, r6
 8001a30:	eb53 0308 	adcs.w	r3, r3, r8
 8001a34:	f144 0400 	adc.w	r4, r4, #0
 8001a38:	694e      	ldr	r6, [r1, #20]
 8001a3a:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001a3e:	fba6 6808 	umull	r6, r8, r6, r8
 8001a42:	19ad      	adds	r5, r5, r6
 8001a44:	eb53 0308 	adcs.w	r3, r3, r8
 8001a48:	f144 0400 	adc.w	r4, r4, #0
 8001a4c:	19ad      	adds	r5, r5, r6
 8001a4e:	eb53 0308 	adcs.w	r3, r3, r8
 8001a52:	f144 0400 	adc.w	r4, r4, #0
 8001a56:	62c5      	str	r5, [r0, #44]	; 0x2c
 8001a58:	f04f 0500 	mov.w	r5, #0
 8001a5c:	694e      	ldr	r6, [r1, #20]
 8001a5e:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001a62:	fba6 6808 	umull	r6, r8, r6, r8
 8001a66:	199b      	adds	r3, r3, r6
 8001a68:	eb54 0408 	adcs.w	r4, r4, r8
 8001a6c:	f145 0500 	adc.w	r5, r5, #0
 8001a70:	199b      	adds	r3, r3, r6
 8001a72:	eb54 0408 	adcs.w	r4, r4, r8
 8001a76:	f145 0500 	adc.w	r5, r5, #0
 8001a7a:	698e      	ldr	r6, [r1, #24]
 8001a7c:	fba6 6806 	umull	r6, r8, r6, r6
 8001a80:	199b      	adds	r3, r3, r6
 8001a82:	eb54 0408 	adcs.w	r4, r4, r8
 8001a86:	f145 0500 	adc.w	r5, r5, #0
 8001a8a:	6303      	str	r3, [r0, #48]	; 0x30
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	698e      	ldr	r6, [r1, #24]
 8001a92:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001a96:	fba6 6808 	umull	r6, r8, r6, r8
 8001a9a:	19a4      	adds	r4, r4, r6
 8001a9c:	eb55 0508 	adcs.w	r5, r5, r8
 8001aa0:	f143 0300 	adc.w	r3, r3, #0
 8001aa4:	19a4      	adds	r4, r4, r6
 8001aa6:	eb55 0508 	adcs.w	r5, r5, r8
 8001aaa:	f143 0300 	adc.w	r3, r3, #0
 8001aae:	6344      	str	r4, [r0, #52]	; 0x34
 8001ab0:	f04f 0400 	mov.w	r4, #0
 8001ab4:	69ce      	ldr	r6, [r1, #28]
 8001ab6:	fba6 6806 	umull	r6, r8, r6, r6
 8001aba:	19ad      	adds	r5, r5, r6
 8001abc:	eb43 0308 	adc.w	r3, r3, r8
 8001ac0:	6385      	str	r5, [r0, #56]	; 0x38
 8001ac2:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001ac4:	6813      	ldr	r3, [r2, #0]
 8001ac6:	6854      	ldr	r4, [r2, #4]
 8001ac8:	6895      	ldr	r5, [r2, #8]
 8001aca:	68d6      	ldr	r6, [r2, #12]
 8001acc:	6003      	str	r3, [r0, #0]
 8001ace:	6044      	str	r4, [r0, #4]
 8001ad0:	6085      	str	r5, [r0, #8]
 8001ad2:	60c6      	str	r6, [r0, #12]
 8001ad4:	6913      	ldr	r3, [r2, #16]
 8001ad6:	6954      	ldr	r4, [r2, #20]
 8001ad8:	6995      	ldr	r5, [r2, #24]
 8001ada:	69d6      	ldr	r6, [r2, #28]
 8001adc:	6103      	str	r3, [r0, #16]
 8001ade:	6144      	str	r4, [r0, #20]
 8001ae0:	6185      	str	r5, [r0, #24]
 8001ae2:	61c6      	str	r6, [r0, #28]
        "str	r6, [%[r], #28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [tmp] "r" (tmp)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11"
    );
}
 8001ae4:	b009      	add	sp, #36	; 0x24
 8001ae6:	e8bd 0f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp}
 8001aea:	4770      	bx	lr

08001aec <sp_256_add_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_add_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8001aec:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
 8001af0:	4603      	mov	r3, r0
    sp_digit c = 0;

    __asm__ __volatile__ (
 8001af2:	2000      	movs	r0, #0
 8001af4:	460e      	mov	r6, r1
 8001af6:	f04f 0800 	mov.w	r8, #0
 8001afa:	f106 0620 	add.w	r6, r6, #32
 8001afe:	f1a8 0801 	sub.w	r8, r8, #1
 8001b02:	eb10 0008 	adds.w	r0, r0, r8
 8001b06:	680c      	ldr	r4, [r1, #0]
 8001b08:	6815      	ldr	r5, [r2, #0]
 8001b0a:	416c      	adcs	r4, r5
 8001b0c:	601c      	str	r4, [r3, #0]
 8001b0e:	f04f 0000 	mov.w	r0, #0
 8001b12:	eb40 0000 	adc.w	r0, r0, r0
 8001b16:	f101 0104 	add.w	r1, r1, #4
 8001b1a:	f102 0204 	add.w	r2, r2, #4
 8001b1e:	f103 0304 	add.w	r3, r3, #4
 8001b22:	42b1      	cmp	r1, r6
 8001b24:	d1ed      	bne.n	8001b02 <sp_256_add_8+0x16>
        :
        : "memory", "r4", "r5", "r6", "r8"
    );

    return c;
}
 8001b26:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8001b2a:	4770      	bx	lr

08001b2c <sp_256_sub_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_sub_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8001b2c:	b470      	push	{r4, r5, r6}
 8001b2e:	4603      	mov	r3, r0
    sp_digit c = 0;

    __asm__ __volatile__ (
 8001b30:	2000      	movs	r0, #0
 8001b32:	460e      	mov	r6, r1
 8001b34:	f106 0620 	add.w	r6, r6, #32
 8001b38:	f04f 0500 	mov.w	r5, #0
 8001b3c:	1a2d      	subs	r5, r5, r0
 8001b3e:	680c      	ldr	r4, [r1, #0]
 8001b40:	6815      	ldr	r5, [r2, #0]
 8001b42:	41ac      	sbcs	r4, r5
 8001b44:	601c      	str	r4, [r3, #0]
 8001b46:	eb60 0000 	sbc.w	r0, r0, r0
 8001b4a:	f101 0104 	add.w	r1, r1, #4
 8001b4e:	f102 0204 	add.w	r2, r2, #4
 8001b52:	f103 0304 	add.w	r3, r3, #4
 8001b56:	42b1      	cmp	r1, r6
 8001b58:	d1ee      	bne.n	8001b38 <sp_256_sub_8+0xc>
        :
        : "memory", "r4", "r5", "r6"
    );

    return c;
}
 8001b5a:	bc70      	pop	{r4, r5, r6}
 8001b5c:	4770      	bx	lr

08001b5e <sp_256_mod_mul_norm_8>:
 * r  The resulting Montgomery form number.
 * a  The number to convert.
 * m  The modulus (prime).
 */
static int sp_256_mod_mul_norm_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8001b5e:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   (void)m;

    __asm__ __volatile__ (
 8001b62:	b086      	sub	sp, #24
 8001b64:	680a      	ldr	r2, [r1, #0]
 8001b66:	684b      	ldr	r3, [r1, #4]
 8001b68:	688c      	ldr	r4, [r1, #8]
 8001b6a:	68cd      	ldr	r5, [r1, #12]
 8001b6c:	690e      	ldr	r6, [r1, #16]
 8001b6e:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001b72:	f8d1 9018 	ldr.w	r9, [r1, #24]
 8001b76:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 8001b7a:	f04f 0e00 	mov.w	lr, #0
 8001b7e:	f04f 0c00 	mov.w	ip, #0
 8001b82:	eb12 0b03 	adds.w	fp, r2, r3
 8001b86:	f14e 0e00 	adc.w	lr, lr, #0
 8001b8a:	ebbb 0b05 	subs.w	fp, fp, r5
 8001b8e:	f16c 0c00 	sbc.w	ip, ip, #0
 8001b92:	ebbb 0b06 	subs.w	fp, fp, r6
 8001b96:	f16c 0c00 	sbc.w	ip, ip, #0
 8001b9a:	ebbb 0b08 	subs.w	fp, fp, r8
 8001b9e:	f16c 0c00 	sbc.w	ip, ip, #0
 8001ba2:	ebbb 0b09 	subs.w	fp, fp, r9
 8001ba6:	f16c 0c00 	sbc.w	ip, ip, #0
 8001baa:	f8cd b000 	str.w	fp, [sp]
 8001bae:	f1cc 0c00 	rsb	ip, ip, #0
 8001bb2:	f04f 0b00 	mov.w	fp, #0
 8001bb6:	eb1e 0e03 	adds.w	lr, lr, r3
 8001bba:	f14b 0b00 	adc.w	fp, fp, #0
 8001bbe:	eb1e 0e04 	adds.w	lr, lr, r4
 8001bc2:	f14b 0b00 	adc.w	fp, fp, #0
 8001bc6:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001bca:	f04f 0c00 	mov.w	ip, #0
 8001bce:	f16c 0c00 	sbc.w	ip, ip, #0
 8001bd2:	ebbe 0e06 	subs.w	lr, lr, r6
 8001bd6:	f16c 0c00 	sbc.w	ip, ip, #0
 8001bda:	ebbe 0e08 	subs.w	lr, lr, r8
 8001bde:	f16c 0c00 	sbc.w	ip, ip, #0
 8001be2:	ebbe 0e09 	subs.w	lr, lr, r9
 8001be6:	f16c 0c00 	sbc.w	ip, ip, #0
 8001bea:	ebbe 0e0a 	subs.w	lr, lr, sl
 8001bee:	f16c 0c00 	sbc.w	ip, ip, #0
 8001bf2:	f8cd e004 	str.w	lr, [sp, #4]
 8001bf6:	f1cc 0c00 	rsb	ip, ip, #0
 8001bfa:	f04f 0e00 	mov.w	lr, #0
 8001bfe:	eb1b 0b04 	adds.w	fp, fp, r4
 8001c02:	f14e 0e00 	adc.w	lr, lr, #0
 8001c06:	eb1b 0b05 	adds.w	fp, fp, r5
 8001c0a:	f14e 0e00 	adc.w	lr, lr, #0
 8001c0e:	ebbb 0b0c 	subs.w	fp, fp, ip
 8001c12:	f04f 0c00 	mov.w	ip, #0
 8001c16:	f16c 0c00 	sbc.w	ip, ip, #0
 8001c1a:	ebbb 0b08 	subs.w	fp, fp, r8
 8001c1e:	f16c 0c00 	sbc.w	ip, ip, #0
 8001c22:	ebbb 0b09 	subs.w	fp, fp, r9
 8001c26:	f16c 0c00 	sbc.w	ip, ip, #0
 8001c2a:	ebbb 0b0a 	subs.w	fp, fp, sl
 8001c2e:	f16c 0c00 	sbc.w	ip, ip, #0
 8001c32:	f8cd b008 	str.w	fp, [sp, #8]
 8001c36:	f1cc 0c00 	rsb	ip, ip, #0
 8001c3a:	f04f 0b00 	mov.w	fp, #0
 8001c3e:	eb1e 0e05 	adds.w	lr, lr, r5
 8001c42:	f14b 0b00 	adc.w	fp, fp, #0
 8001c46:	eb1e 0e05 	adds.w	lr, lr, r5
 8001c4a:	f14b 0b00 	adc.w	fp, fp, #0
 8001c4e:	eb1e 0e06 	adds.w	lr, lr, r6
 8001c52:	f14b 0b00 	adc.w	fp, fp, #0
 8001c56:	eb1e 0e06 	adds.w	lr, lr, r6
 8001c5a:	f14b 0b00 	adc.w	fp, fp, #0
 8001c5e:	eb1e 0e08 	adds.w	lr, lr, r8
 8001c62:	f14b 0b00 	adc.w	fp, fp, #0
 8001c66:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001c6a:	f04f 0c00 	mov.w	ip, #0
 8001c6e:	f16c 0c00 	sbc.w	ip, ip, #0
 8001c72:	ebbe 0e02 	subs.w	lr, lr, r2
 8001c76:	f16c 0c00 	sbc.w	ip, ip, #0
 8001c7a:	ebbe 0e03 	subs.w	lr, lr, r3
 8001c7e:	f16c 0c00 	sbc.w	ip, ip, #0
 8001c82:	ebbe 0e0a 	subs.w	lr, lr, sl
 8001c86:	f16c 0c00 	sbc.w	ip, ip, #0
 8001c8a:	f8cd e00c 	str.w	lr, [sp, #12]
 8001c8e:	f1cc 0c00 	rsb	ip, ip, #0
 8001c92:	f04f 0e00 	mov.w	lr, #0
 8001c96:	eb1b 0b06 	adds.w	fp, fp, r6
 8001c9a:	f14e 0e00 	adc.w	lr, lr, #0
 8001c9e:	eb1b 0b06 	adds.w	fp, fp, r6
 8001ca2:	f14e 0e00 	adc.w	lr, lr, #0
 8001ca6:	eb1b 0b08 	adds.w	fp, fp, r8
 8001caa:	f14e 0e00 	adc.w	lr, lr, #0
 8001cae:	eb1b 0b08 	adds.w	fp, fp, r8
 8001cb2:	f14e 0e00 	adc.w	lr, lr, #0
 8001cb6:	eb1b 0b09 	adds.w	fp, fp, r9
 8001cba:	f14e 0e00 	adc.w	lr, lr, #0
 8001cbe:	ebbb 0b0c 	subs.w	fp, fp, ip
 8001cc2:	f04f 0c00 	mov.w	ip, #0
 8001cc6:	f16c 0c00 	sbc.w	ip, ip, #0
 8001cca:	ebbb 0b03 	subs.w	fp, fp, r3
 8001cce:	f16c 0c00 	sbc.w	ip, ip, #0
 8001cd2:	ebbb 0b04 	subs.w	fp, fp, r4
 8001cd6:	f16c 0c00 	sbc.w	ip, ip, #0
 8001cda:	f8cd b010 	str.w	fp, [sp, #16]
 8001cde:	f1cc 0c00 	rsb	ip, ip, #0
 8001ce2:	f04f 0b00 	mov.w	fp, #0
 8001ce6:	eb1e 0e08 	adds.w	lr, lr, r8
 8001cea:	f14b 0b00 	adc.w	fp, fp, #0
 8001cee:	eb1e 0e08 	adds.w	lr, lr, r8
 8001cf2:	f14b 0b00 	adc.w	fp, fp, #0
 8001cf6:	eb1e 0e09 	adds.w	lr, lr, r9
 8001cfa:	f14b 0b00 	adc.w	fp, fp, #0
 8001cfe:	eb1e 0e09 	adds.w	lr, lr, r9
 8001d02:	f14b 0b00 	adc.w	fp, fp, #0
 8001d06:	eb1e 0e0a 	adds.w	lr, lr, sl
 8001d0a:	f14b 0b00 	adc.w	fp, fp, #0
 8001d0e:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001d12:	f04f 0c00 	mov.w	ip, #0
 8001d16:	f16c 0c00 	sbc.w	ip, ip, #0
 8001d1a:	ebbe 0e04 	subs.w	lr, lr, r4
 8001d1e:	f16c 0c00 	sbc.w	ip, ip, #0
 8001d22:	ebbe 0e05 	subs.w	lr, lr, r5
 8001d26:	f16c 0c00 	sbc.w	ip, ip, #0
 8001d2a:	f8cd e014 	str.w	lr, [sp, #20]
 8001d2e:	f1cc 0c00 	rsb	ip, ip, #0
 8001d32:	f04f 0e00 	mov.w	lr, #0
 8001d36:	eb1b 0b08 	adds.w	fp, fp, r8
 8001d3a:	f14e 0e00 	adc.w	lr, lr, #0
 8001d3e:	eb1b 0b09 	adds.w	fp, fp, r9
 8001d42:	f14e 0e00 	adc.w	lr, lr, #0
 8001d46:	eb1b 0b09 	adds.w	fp, fp, r9
 8001d4a:	f14e 0e00 	adc.w	lr, lr, #0
 8001d4e:	eb1b 0b09 	adds.w	fp, fp, r9
 8001d52:	f14e 0e00 	adc.w	lr, lr, #0
 8001d56:	eb1b 0b0a 	adds.w	fp, fp, sl
 8001d5a:	f14e 0e00 	adc.w	lr, lr, #0
 8001d5e:	eb1b 0b0a 	adds.w	fp, fp, sl
 8001d62:	f14e 0e00 	adc.w	lr, lr, #0
 8001d66:	ebbb 0b0c 	subs.w	fp, fp, ip
 8001d6a:	f04f 0c00 	mov.w	ip, #0
 8001d6e:	f16c 0c00 	sbc.w	ip, ip, #0
 8001d72:	ebbb 0b02 	subs.w	fp, fp, r2
 8001d76:	f16c 0c00 	sbc.w	ip, ip, #0
 8001d7a:	ebbb 0b03 	subs.w	fp, fp, r3
 8001d7e:	f16c 0c00 	sbc.w	ip, ip, #0
 8001d82:	46d9      	mov	r9, fp
 8001d84:	f1cc 0c00 	rsb	ip, ip, #0
 8001d88:	f04f 0b00 	mov.w	fp, #0
 8001d8c:	eb1e 0e02 	adds.w	lr, lr, r2
 8001d90:	f14b 0b00 	adc.w	fp, fp, #0
 8001d94:	eb1e 0e0a 	adds.w	lr, lr, sl
 8001d98:	f14b 0b00 	adc.w	fp, fp, #0
 8001d9c:	eb1e 0e0a 	adds.w	lr, lr, sl
 8001da0:	f14b 0b00 	adc.w	fp, fp, #0
 8001da4:	eb1e 0e0a 	adds.w	lr, lr, sl
 8001da8:	f14b 0b00 	adc.w	fp, fp, #0
 8001dac:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001db0:	f04f 0c00 	mov.w	ip, #0
 8001db4:	f16c 0c00 	sbc.w	ip, ip, #0
 8001db8:	ebbe 0e04 	subs.w	lr, lr, r4
 8001dbc:	f16c 0c00 	sbc.w	ip, ip, #0
 8001dc0:	ebbe 0e05 	subs.w	lr, lr, r5
 8001dc4:	f16c 0c00 	sbc.w	ip, ip, #0
 8001dc8:	ebbe 0e06 	subs.w	lr, lr, r6
 8001dcc:	f16c 0c00 	sbc.w	ip, ip, #0
 8001dd0:	ebbe 0e08 	subs.w	lr, lr, r8
 8001dd4:	f16c 0c00 	sbc.w	ip, ip, #0
 8001dd8:	9a00      	ldr	r2, [sp, #0]
 8001dda:	9b01      	ldr	r3, [sp, #4]
 8001ddc:	9c02      	ldr	r4, [sp, #8]
 8001dde:	9d03      	ldr	r5, [sp, #12]
 8001de0:	9e04      	ldr	r6, [sp, #16]
 8001de2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8001de6:	f1cc 0c00 	rsb	ip, ip, #0
 8001dea:	eb12 020b 	adds.w	r2, r2, fp
 8001dee:	f153 0300 	adcs.w	r3, r3, #0
 8001df2:	f154 0400 	adcs.w	r4, r4, #0
 8001df6:	eb15 050c 	adds.w	r5, r5, ip
 8001dfa:	f156 0600 	adcs.w	r6, r6, #0
 8001dfe:	f158 0800 	adcs.w	r8, r8, #0
 8001e02:	eb59 090c 	adcs.w	r9, r9, ip
 8001e06:	eb4e 0e0b 	adc.w	lr, lr, fp
 8001e0a:	ebb2 020c 	subs.w	r2, r2, ip
 8001e0e:	f173 0300 	sbcs.w	r3, r3, #0
 8001e12:	f174 0400 	sbcs.w	r4, r4, #0
 8001e16:	ebb5 050b 	subs.w	r5, r5, fp
 8001e1a:	f176 0600 	sbcs.w	r6, r6, #0
 8001e1e:	f178 0800 	sbcs.w	r8, r8, #0
 8001e22:	eb79 090b 	sbcs.w	r9, r9, fp
 8001e26:	eb6e 0e0c 	sbc.w	lr, lr, ip
 8001e2a:	6002      	str	r2, [r0, #0]
 8001e2c:	6043      	str	r3, [r0, #4]
 8001e2e:	6084      	str	r4, [r0, #8]
 8001e30:	60c5      	str	r5, [r0, #12]
 8001e32:	6106      	str	r6, [r0, #16]
 8001e34:	f8c0 8014 	str.w	r8, [r0, #20]
 8001e38:	f8c0 9018 	str.w	r9, [r0, #24]
 8001e3c:	f8c0 e01c 	str.w	lr, [r0, #28]
 8001e40:	b006      	add	sp, #24
        : [r] "r" (r), [a] "r" (a)
        : "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r12"
    );

    return MP_OKAY;
}
 8001e42:	2000      	movs	r0, #0
 8001e44:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08001e48 <sp_256_mont_mul_8>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
SP_NOINLINE static void sp_256_mont_mul_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m, sp_digit mp)
{
 8001e48:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 8001e4c:	b091      	sub	sp, #68	; 0x44
 8001e4e:	f04f 0500 	mov.w	r5, #0
 8001e52:	680e      	ldr	r6, [r1, #0]
 8001e54:	f8d2 8000 	ldr.w	r8, [r2]
 8001e58:	fba6 9a08 	umull	r9, sl, r6, r8
 8001e5c:	f8cd 9000 	str.w	r9, [sp]
 8001e60:	680e      	ldr	r6, [r1, #0]
 8001e62:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001e66:	fba6 3408 	umull	r3, r4, r6, r8
 8001e6a:	eb13 0a0a 	adds.w	sl, r3, sl
 8001e6e:	f144 0b00 	adc.w	fp, r4, #0
 8001e72:	684e      	ldr	r6, [r1, #4]
 8001e74:	f8d2 8000 	ldr.w	r8, [r2]
 8001e78:	fba6 3408 	umull	r3, r4, r6, r8
 8001e7c:	eb13 0a0a 	adds.w	sl, r3, sl
 8001e80:	eb54 0b0b 	adcs.w	fp, r4, fp
 8001e84:	f145 0e00 	adc.w	lr, r5, #0
 8001e88:	f8cd a004 	str.w	sl, [sp, #4]
 8001e8c:	680e      	ldr	r6, [r1, #0]
 8001e8e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001e92:	fba6 3408 	umull	r3, r4, r6, r8
 8001e96:	eb13 0b0b 	adds.w	fp, r3, fp
 8001e9a:	eb44 0e0e 	adc.w	lr, r4, lr
 8001e9e:	684e      	ldr	r6, [r1, #4]
 8001ea0:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001ea4:	fba6 3408 	umull	r3, r4, r6, r8
 8001ea8:	eb13 0b0b 	adds.w	fp, r3, fp
 8001eac:	eb54 0e0e 	adcs.w	lr, r4, lr
 8001eb0:	f145 0900 	adc.w	r9, r5, #0
 8001eb4:	688e      	ldr	r6, [r1, #8]
 8001eb6:	f8d2 8000 	ldr.w	r8, [r2]
 8001eba:	fba6 3408 	umull	r3, r4, r6, r8
 8001ebe:	eb13 0b0b 	adds.w	fp, r3, fp
 8001ec2:	eb54 0e0e 	adcs.w	lr, r4, lr
 8001ec6:	eb45 0909 	adc.w	r9, r5, r9
 8001eca:	f8cd b008 	str.w	fp, [sp, #8]
 8001ece:	680e      	ldr	r6, [r1, #0]
 8001ed0:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8001ed4:	fba6 3408 	umull	r3, r4, r6, r8
 8001ed8:	eb13 0e0e 	adds.w	lr, r3, lr
 8001edc:	eb54 0909 	adcs.w	r9, r4, r9
 8001ee0:	f145 0a00 	adc.w	sl, r5, #0
 8001ee4:	684e      	ldr	r6, [r1, #4]
 8001ee6:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001eea:	fba6 3408 	umull	r3, r4, r6, r8
 8001eee:	eb13 0e0e 	adds.w	lr, r3, lr
 8001ef2:	eb54 0909 	adcs.w	r9, r4, r9
 8001ef6:	eb45 0a0a 	adc.w	sl, r5, sl
 8001efa:	688e      	ldr	r6, [r1, #8]
 8001efc:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001f00:	fba6 3408 	umull	r3, r4, r6, r8
 8001f04:	eb13 0e0e 	adds.w	lr, r3, lr
 8001f08:	eb54 0909 	adcs.w	r9, r4, r9
 8001f0c:	eb45 0a0a 	adc.w	sl, r5, sl
 8001f10:	68ce      	ldr	r6, [r1, #12]
 8001f12:	f8d2 8000 	ldr.w	r8, [r2]
 8001f16:	fba6 3408 	umull	r3, r4, r6, r8
 8001f1a:	eb13 0e0e 	adds.w	lr, r3, lr
 8001f1e:	eb54 0909 	adcs.w	r9, r4, r9
 8001f22:	eb45 0a0a 	adc.w	sl, r5, sl
 8001f26:	f8cd e00c 	str.w	lr, [sp, #12]
 8001f2a:	680e      	ldr	r6, [r1, #0]
 8001f2c:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001f30:	fba6 3408 	umull	r3, r4, r6, r8
 8001f34:	eb13 0909 	adds.w	r9, r3, r9
 8001f38:	eb54 0a0a 	adcs.w	sl, r4, sl
 8001f3c:	f145 0b00 	adc.w	fp, r5, #0
 8001f40:	684e      	ldr	r6, [r1, #4]
 8001f42:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8001f46:	fba6 3408 	umull	r3, r4, r6, r8
 8001f4a:	eb13 0909 	adds.w	r9, r3, r9
 8001f4e:	eb54 0a0a 	adcs.w	sl, r4, sl
 8001f52:	eb45 0b0b 	adc.w	fp, r5, fp
 8001f56:	688e      	ldr	r6, [r1, #8]
 8001f58:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001f5c:	fba6 3408 	umull	r3, r4, r6, r8
 8001f60:	eb13 0909 	adds.w	r9, r3, r9
 8001f64:	eb54 0a0a 	adcs.w	sl, r4, sl
 8001f68:	eb45 0b0b 	adc.w	fp, r5, fp
 8001f6c:	68ce      	ldr	r6, [r1, #12]
 8001f6e:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001f72:	fba6 3408 	umull	r3, r4, r6, r8
 8001f76:	eb13 0909 	adds.w	r9, r3, r9
 8001f7a:	eb54 0a0a 	adcs.w	sl, r4, sl
 8001f7e:	eb45 0b0b 	adc.w	fp, r5, fp
 8001f82:	690e      	ldr	r6, [r1, #16]
 8001f84:	f8d2 8000 	ldr.w	r8, [r2]
 8001f88:	fba6 3408 	umull	r3, r4, r6, r8
 8001f8c:	eb13 0909 	adds.w	r9, r3, r9
 8001f90:	eb54 0a0a 	adcs.w	sl, r4, sl
 8001f94:	eb45 0b0b 	adc.w	fp, r5, fp
 8001f98:	f8cd 9010 	str.w	r9, [sp, #16]
 8001f9c:	680e      	ldr	r6, [r1, #0]
 8001f9e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001fa2:	fba6 3408 	umull	r3, r4, r6, r8
 8001fa6:	eb13 0a0a 	adds.w	sl, r3, sl
 8001faa:	eb54 0b0b 	adcs.w	fp, r4, fp
 8001fae:	f145 0e00 	adc.w	lr, r5, #0
 8001fb2:	684e      	ldr	r6, [r1, #4]
 8001fb4:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001fb8:	fba6 3408 	umull	r3, r4, r6, r8
 8001fbc:	eb13 0a0a 	adds.w	sl, r3, sl
 8001fc0:	eb54 0b0b 	adcs.w	fp, r4, fp
 8001fc4:	eb45 0e0e 	adc.w	lr, r5, lr
 8001fc8:	688e      	ldr	r6, [r1, #8]
 8001fca:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8001fce:	fba6 3408 	umull	r3, r4, r6, r8
 8001fd2:	eb13 0a0a 	adds.w	sl, r3, sl
 8001fd6:	eb54 0b0b 	adcs.w	fp, r4, fp
 8001fda:	eb45 0e0e 	adc.w	lr, r5, lr
 8001fde:	68ce      	ldr	r6, [r1, #12]
 8001fe0:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001fe4:	fba6 3408 	umull	r3, r4, r6, r8
 8001fe8:	eb13 0a0a 	adds.w	sl, r3, sl
 8001fec:	eb54 0b0b 	adcs.w	fp, r4, fp
 8001ff0:	eb45 0e0e 	adc.w	lr, r5, lr
 8001ff4:	690e      	ldr	r6, [r1, #16]
 8001ff6:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001ffa:	fba6 3408 	umull	r3, r4, r6, r8
 8001ffe:	eb13 0a0a 	adds.w	sl, r3, sl
 8002002:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002006:	eb45 0e0e 	adc.w	lr, r5, lr
 800200a:	694e      	ldr	r6, [r1, #20]
 800200c:	f8d2 8000 	ldr.w	r8, [r2]
 8002010:	fba6 3408 	umull	r3, r4, r6, r8
 8002014:	eb13 0a0a 	adds.w	sl, r3, sl
 8002018:	eb54 0b0b 	adcs.w	fp, r4, fp
 800201c:	eb45 0e0e 	adc.w	lr, r5, lr
 8002020:	f8cd a014 	str.w	sl, [sp, #20]
 8002024:	680e      	ldr	r6, [r1, #0]
 8002026:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800202a:	fba6 3408 	umull	r3, r4, r6, r8
 800202e:	eb13 0b0b 	adds.w	fp, r3, fp
 8002032:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002036:	f145 0900 	adc.w	r9, r5, #0
 800203a:	684e      	ldr	r6, [r1, #4]
 800203c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8002040:	fba6 3408 	umull	r3, r4, r6, r8
 8002044:	eb13 0b0b 	adds.w	fp, r3, fp
 8002048:	eb54 0e0e 	adcs.w	lr, r4, lr
 800204c:	eb45 0909 	adc.w	r9, r5, r9
 8002050:	688e      	ldr	r6, [r1, #8]
 8002052:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8002056:	fba6 3408 	umull	r3, r4, r6, r8
 800205a:	eb13 0b0b 	adds.w	fp, r3, fp
 800205e:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002062:	eb45 0909 	adc.w	r9, r5, r9
 8002066:	68ce      	ldr	r6, [r1, #12]
 8002068:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800206c:	fba6 3408 	umull	r3, r4, r6, r8
 8002070:	eb13 0b0b 	adds.w	fp, r3, fp
 8002074:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002078:	eb45 0909 	adc.w	r9, r5, r9
 800207c:	690e      	ldr	r6, [r1, #16]
 800207e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002082:	fba6 3408 	umull	r3, r4, r6, r8
 8002086:	eb13 0b0b 	adds.w	fp, r3, fp
 800208a:	eb54 0e0e 	adcs.w	lr, r4, lr
 800208e:	eb45 0909 	adc.w	r9, r5, r9
 8002092:	694e      	ldr	r6, [r1, #20]
 8002094:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8002098:	fba6 3408 	umull	r3, r4, r6, r8
 800209c:	eb13 0b0b 	adds.w	fp, r3, fp
 80020a0:	eb54 0e0e 	adcs.w	lr, r4, lr
 80020a4:	eb45 0909 	adc.w	r9, r5, r9
 80020a8:	698e      	ldr	r6, [r1, #24]
 80020aa:	f8d2 8000 	ldr.w	r8, [r2]
 80020ae:	fba6 3408 	umull	r3, r4, r6, r8
 80020b2:	eb13 0b0b 	adds.w	fp, r3, fp
 80020b6:	eb54 0e0e 	adcs.w	lr, r4, lr
 80020ba:	eb45 0909 	adc.w	r9, r5, r9
 80020be:	f8cd b018 	str.w	fp, [sp, #24]
 80020c2:	680e      	ldr	r6, [r1, #0]
 80020c4:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80020c8:	fba6 3408 	umull	r3, r4, r6, r8
 80020cc:	eb13 0e0e 	adds.w	lr, r3, lr
 80020d0:	eb54 0909 	adcs.w	r9, r4, r9
 80020d4:	f145 0a00 	adc.w	sl, r5, #0
 80020d8:	684e      	ldr	r6, [r1, #4]
 80020da:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80020de:	fba6 3408 	umull	r3, r4, r6, r8
 80020e2:	eb13 0e0e 	adds.w	lr, r3, lr
 80020e6:	eb54 0909 	adcs.w	r9, r4, r9
 80020ea:	eb45 0a0a 	adc.w	sl, r5, sl
 80020ee:	688e      	ldr	r6, [r1, #8]
 80020f0:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80020f4:	fba6 3408 	umull	r3, r4, r6, r8
 80020f8:	eb13 0e0e 	adds.w	lr, r3, lr
 80020fc:	eb54 0909 	adcs.w	r9, r4, r9
 8002100:	eb45 0a0a 	adc.w	sl, r5, sl
 8002104:	68ce      	ldr	r6, [r1, #12]
 8002106:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800210a:	fba6 3408 	umull	r3, r4, r6, r8
 800210e:	eb13 0e0e 	adds.w	lr, r3, lr
 8002112:	eb54 0909 	adcs.w	r9, r4, r9
 8002116:	eb45 0a0a 	adc.w	sl, r5, sl
 800211a:	690e      	ldr	r6, [r1, #16]
 800211c:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8002120:	fba6 3408 	umull	r3, r4, r6, r8
 8002124:	eb13 0e0e 	adds.w	lr, r3, lr
 8002128:	eb54 0909 	adcs.w	r9, r4, r9
 800212c:	eb45 0a0a 	adc.w	sl, r5, sl
 8002130:	694e      	ldr	r6, [r1, #20]
 8002132:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002136:	fba6 3408 	umull	r3, r4, r6, r8
 800213a:	eb13 0e0e 	adds.w	lr, r3, lr
 800213e:	eb54 0909 	adcs.w	r9, r4, r9
 8002142:	eb45 0a0a 	adc.w	sl, r5, sl
 8002146:	698e      	ldr	r6, [r1, #24]
 8002148:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800214c:	fba6 3408 	umull	r3, r4, r6, r8
 8002150:	eb13 0e0e 	adds.w	lr, r3, lr
 8002154:	eb54 0909 	adcs.w	r9, r4, r9
 8002158:	eb45 0a0a 	adc.w	sl, r5, sl
 800215c:	69ce      	ldr	r6, [r1, #28]
 800215e:	f8d2 8000 	ldr.w	r8, [r2]
 8002162:	fba6 3408 	umull	r3, r4, r6, r8
 8002166:	eb13 0e0e 	adds.w	lr, r3, lr
 800216a:	eb54 0909 	adcs.w	r9, r4, r9
 800216e:	eb45 0a0a 	adc.w	sl, r5, sl
 8002172:	f8cd e01c 	str.w	lr, [sp, #28]
 8002176:	684e      	ldr	r6, [r1, #4]
 8002178:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800217c:	fba6 3408 	umull	r3, r4, r6, r8
 8002180:	eb13 0909 	adds.w	r9, r3, r9
 8002184:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002188:	f145 0b00 	adc.w	fp, r5, #0
 800218c:	688e      	ldr	r6, [r1, #8]
 800218e:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8002192:	fba6 3408 	umull	r3, r4, r6, r8
 8002196:	eb13 0909 	adds.w	r9, r3, r9
 800219a:	eb54 0a0a 	adcs.w	sl, r4, sl
 800219e:	eb45 0b0b 	adc.w	fp, r5, fp
 80021a2:	68ce      	ldr	r6, [r1, #12]
 80021a4:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80021a8:	fba6 3408 	umull	r3, r4, r6, r8
 80021ac:	eb13 0909 	adds.w	r9, r3, r9
 80021b0:	eb54 0a0a 	adcs.w	sl, r4, sl
 80021b4:	eb45 0b0b 	adc.w	fp, r5, fp
 80021b8:	690e      	ldr	r6, [r1, #16]
 80021ba:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80021be:	fba6 3408 	umull	r3, r4, r6, r8
 80021c2:	eb13 0909 	adds.w	r9, r3, r9
 80021c6:	eb54 0a0a 	adcs.w	sl, r4, sl
 80021ca:	eb45 0b0b 	adc.w	fp, r5, fp
 80021ce:	694e      	ldr	r6, [r1, #20]
 80021d0:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80021d4:	fba6 3408 	umull	r3, r4, r6, r8
 80021d8:	eb13 0909 	adds.w	r9, r3, r9
 80021dc:	eb54 0a0a 	adcs.w	sl, r4, sl
 80021e0:	eb45 0b0b 	adc.w	fp, r5, fp
 80021e4:	698e      	ldr	r6, [r1, #24]
 80021e6:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80021ea:	fba6 3408 	umull	r3, r4, r6, r8
 80021ee:	eb13 0909 	adds.w	r9, r3, r9
 80021f2:	eb54 0a0a 	adcs.w	sl, r4, sl
 80021f6:	eb45 0b0b 	adc.w	fp, r5, fp
 80021fa:	69ce      	ldr	r6, [r1, #28]
 80021fc:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8002200:	fba6 3408 	umull	r3, r4, r6, r8
 8002204:	eb13 0909 	adds.w	r9, r3, r9
 8002208:	eb54 0a0a 	adcs.w	sl, r4, sl
 800220c:	eb45 0b0b 	adc.w	fp, r5, fp
 8002210:	f8cd 9020 	str.w	r9, [sp, #32]
 8002214:	688e      	ldr	r6, [r1, #8]
 8002216:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800221a:	fba6 3408 	umull	r3, r4, r6, r8
 800221e:	eb13 0a0a 	adds.w	sl, r3, sl
 8002222:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002226:	f145 0e00 	adc.w	lr, r5, #0
 800222a:	68ce      	ldr	r6, [r1, #12]
 800222c:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8002230:	fba6 3408 	umull	r3, r4, r6, r8
 8002234:	eb13 0a0a 	adds.w	sl, r3, sl
 8002238:	eb54 0b0b 	adcs.w	fp, r4, fp
 800223c:	eb45 0e0e 	adc.w	lr, r5, lr
 8002240:	690e      	ldr	r6, [r1, #16]
 8002242:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8002246:	fba6 3408 	umull	r3, r4, r6, r8
 800224a:	eb13 0a0a 	adds.w	sl, r3, sl
 800224e:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002252:	eb45 0e0e 	adc.w	lr, r5, lr
 8002256:	694e      	ldr	r6, [r1, #20]
 8002258:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800225c:	fba6 3408 	umull	r3, r4, r6, r8
 8002260:	eb13 0a0a 	adds.w	sl, r3, sl
 8002264:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002268:	eb45 0e0e 	adc.w	lr, r5, lr
 800226c:	698e      	ldr	r6, [r1, #24]
 800226e:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8002272:	fba6 3408 	umull	r3, r4, r6, r8
 8002276:	eb13 0a0a 	adds.w	sl, r3, sl
 800227a:	eb54 0b0b 	adcs.w	fp, r4, fp
 800227e:	eb45 0e0e 	adc.w	lr, r5, lr
 8002282:	69ce      	ldr	r6, [r1, #28]
 8002284:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002288:	fba6 3408 	umull	r3, r4, r6, r8
 800228c:	eb13 0a0a 	adds.w	sl, r3, sl
 8002290:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002294:	eb45 0e0e 	adc.w	lr, r5, lr
 8002298:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800229c:	68ce      	ldr	r6, [r1, #12]
 800229e:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80022a2:	fba6 3408 	umull	r3, r4, r6, r8
 80022a6:	eb13 0b0b 	adds.w	fp, r3, fp
 80022aa:	eb54 0e0e 	adcs.w	lr, r4, lr
 80022ae:	f145 0900 	adc.w	r9, r5, #0
 80022b2:	690e      	ldr	r6, [r1, #16]
 80022b4:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80022b8:	fba6 3408 	umull	r3, r4, r6, r8
 80022bc:	eb13 0b0b 	adds.w	fp, r3, fp
 80022c0:	eb54 0e0e 	adcs.w	lr, r4, lr
 80022c4:	eb45 0909 	adc.w	r9, r5, r9
 80022c8:	694e      	ldr	r6, [r1, #20]
 80022ca:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80022ce:	fba6 3408 	umull	r3, r4, r6, r8
 80022d2:	eb13 0b0b 	adds.w	fp, r3, fp
 80022d6:	eb54 0e0e 	adcs.w	lr, r4, lr
 80022da:	eb45 0909 	adc.w	r9, r5, r9
 80022de:	698e      	ldr	r6, [r1, #24]
 80022e0:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80022e4:	fba6 3408 	umull	r3, r4, r6, r8
 80022e8:	eb13 0b0b 	adds.w	fp, r3, fp
 80022ec:	eb54 0e0e 	adcs.w	lr, r4, lr
 80022f0:	eb45 0909 	adc.w	r9, r5, r9
 80022f4:	69ce      	ldr	r6, [r1, #28]
 80022f6:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80022fa:	fba6 3408 	umull	r3, r4, r6, r8
 80022fe:	eb13 0b0b 	adds.w	fp, r3, fp
 8002302:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002306:	eb45 0909 	adc.w	r9, r5, r9
 800230a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800230e:	690e      	ldr	r6, [r1, #16]
 8002310:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8002314:	fba6 3408 	umull	r3, r4, r6, r8
 8002318:	eb13 0e0e 	adds.w	lr, r3, lr
 800231c:	eb54 0909 	adcs.w	r9, r4, r9
 8002320:	f145 0a00 	adc.w	sl, r5, #0
 8002324:	694e      	ldr	r6, [r1, #20]
 8002326:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800232a:	fba6 3408 	umull	r3, r4, r6, r8
 800232e:	eb13 0e0e 	adds.w	lr, r3, lr
 8002332:	eb54 0909 	adcs.w	r9, r4, r9
 8002336:	eb45 0a0a 	adc.w	sl, r5, sl
 800233a:	698e      	ldr	r6, [r1, #24]
 800233c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8002340:	fba6 3408 	umull	r3, r4, r6, r8
 8002344:	eb13 0e0e 	adds.w	lr, r3, lr
 8002348:	eb54 0909 	adcs.w	r9, r4, r9
 800234c:	eb45 0a0a 	adc.w	sl, r5, sl
 8002350:	69ce      	ldr	r6, [r1, #28]
 8002352:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8002356:	fba6 3408 	umull	r3, r4, r6, r8
 800235a:	eb13 0e0e 	adds.w	lr, r3, lr
 800235e:	eb54 0909 	adcs.w	r9, r4, r9
 8002362:	eb45 0a0a 	adc.w	sl, r5, sl
 8002366:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800236a:	694e      	ldr	r6, [r1, #20]
 800236c:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8002370:	fba6 3408 	umull	r3, r4, r6, r8
 8002374:	eb13 0909 	adds.w	r9, r3, r9
 8002378:	eb54 0a0a 	adcs.w	sl, r4, sl
 800237c:	f145 0b00 	adc.w	fp, r5, #0
 8002380:	698e      	ldr	r6, [r1, #24]
 8002382:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8002386:	fba6 3408 	umull	r3, r4, r6, r8
 800238a:	eb13 0909 	adds.w	r9, r3, r9
 800238e:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002392:	eb45 0b0b 	adc.w	fp, r5, fp
 8002396:	69ce      	ldr	r6, [r1, #28]
 8002398:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800239c:	fba6 3408 	umull	r3, r4, r6, r8
 80023a0:	eb13 0909 	adds.w	r9, r3, r9
 80023a4:	eb54 0a0a 	adcs.w	sl, r4, sl
 80023a8:	eb45 0b0b 	adc.w	fp, r5, fp
 80023ac:	698e      	ldr	r6, [r1, #24]
 80023ae:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80023b2:	fba6 3408 	umull	r3, r4, r6, r8
 80023b6:	eb13 0a0a 	adds.w	sl, r3, sl
 80023ba:	eb54 0b0b 	adcs.w	fp, r4, fp
 80023be:	f145 0e00 	adc.w	lr, r5, #0
 80023c2:	69ce      	ldr	r6, [r1, #28]
 80023c4:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80023c8:	fba6 3408 	umull	r3, r4, r6, r8
 80023cc:	eb13 0a0a 	adds.w	sl, r3, sl
 80023d0:	eb54 0b0b 	adcs.w	fp, r4, fp
 80023d4:	eb45 0e0e 	adc.w	lr, r5, lr
 80023d8:	69ce      	ldr	r6, [r1, #28]
 80023da:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80023de:	fba6 3408 	umull	r3, r4, r6, r8
 80023e2:	eb13 0b0b 	adds.w	fp, r3, fp
 80023e6:	eb44 0e0e 	adc.w	lr, r4, lr
 80023ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80023ee:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80023f2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80023f6:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 80023fa:	9c00      	ldr	r4, [sp, #0]
 80023fc:	9d01      	ldr	r5, [sp, #4]
 80023fe:	9e02      	ldr	r6, [sp, #8]
 8002400:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002404:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002408:	f8dd a014 	ldr.w	sl, [sp, #20]
 800240c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002410:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002414:	eb1b 0b04 	adds.w	fp, fp, r4
 8002418:	eb4e 0e05 	adc.w	lr, lr, r5
 800241c:	eb1b 0b04 	adds.w	fp, fp, r4
 8002420:	eb4e 0e05 	adc.w	lr, lr, r5
 8002424:	ebae 0e04 	sub.w	lr, lr, r4
 8002428:	4641      	mov	r1, r8
 800242a:	464a      	mov	r2, r9
 800242c:	eb18 0804 	adds.w	r8, r8, r4
 8002430:	eb59 0905 	adcs.w	r9, r9, r5
 8002434:	eb5a 0a06 	adcs.w	sl, sl, r6
 8002438:	eb5b 0b01 	adcs.w	fp, fp, r1
 800243c:	eb4e 0e02 	adc.w	lr, lr, r2
 8002440:	9400      	str	r4, [sp, #0]
 8002442:	9501      	str	r5, [sp, #4]
 8002444:	9602      	str	r6, [sp, #8]
 8002446:	f8cd 800c 	str.w	r8, [sp, #12]
 800244a:	f8cd 9010 	str.w	r9, [sp, #16]
 800244e:	f8cd a014 	str.w	sl, [sp, #20]
 8002452:	f04f 0100 	mov.w	r1, #0
 8002456:	9b06      	ldr	r3, [sp, #24]
 8002458:	191b      	adds	r3, r3, r4
 800245a:	f141 0200 	adc.w	r2, r1, #0
 800245e:	eb13 0308 	adds.w	r3, r3, r8
 8002462:	f142 0200 	adc.w	r2, r2, #0
 8002466:	f8cd b018 	str.w	fp, [sp, #24]
 800246a:	9b07      	ldr	r3, [sp, #28]
 800246c:	189b      	adds	r3, r3, r2
 800246e:	f141 0200 	adc.w	r2, r1, #0
 8002472:	195b      	adds	r3, r3, r5
 8002474:	f142 0200 	adc.w	r2, r2, #0
 8002478:	eb13 0309 	adds.w	r3, r3, r9
 800247c:	f142 0200 	adc.w	r2, r2, #0
 8002480:	f8cd e01c 	str.w	lr, [sp, #28]
 8002484:	9310      	str	r3, [sp, #64]	; 0x40
 8002486:	9b08      	ldr	r3, [sp, #32]
 8002488:	189b      	adds	r3, r3, r2
 800248a:	f141 0200 	adc.w	r2, r1, #0
 800248e:	191b      	adds	r3, r3, r4
 8002490:	f142 0200 	adc.w	r2, r2, #0
 8002494:	199b      	adds	r3, r3, r6
 8002496:	f142 0200 	adc.w	r2, r2, #0
 800249a:	eb13 030a 	adds.w	r3, r3, sl
 800249e:	f142 0200 	adc.w	r2, r2, #0
 80024a2:	9308      	str	r3, [sp, #32]
 80024a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80024a8:	189b      	adds	r3, r3, r2
 80024aa:	f154 0400 	adcs.w	r4, r4, #0
 80024ae:	f141 0200 	adc.w	r2, r1, #0
 80024b2:	195b      	adds	r3, r3, r5
 80024b4:	4174      	adcs	r4, r6
 80024b6:	f142 0200 	adc.w	r2, r2, #0
 80024ba:	eb13 0308 	adds.w	r3, r3, r8
 80024be:	eb54 0409 	adcs.w	r4, r4, r9
 80024c2:	f142 0200 	adc.w	r2, r2, #0
 80024c6:	eb13 030b 	adds.w	r3, r3, fp
 80024ca:	eb54 040e 	adcs.w	r4, r4, lr
 80024ce:	f142 0200 	adc.w	r2, r2, #0
 80024d2:	9309      	str	r3, [sp, #36]	; 0x24
 80024d4:	940a      	str	r4, [sp, #40]	; 0x28
 80024d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80024d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80024da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80024dc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80024de:	189b      	adds	r3, r3, r2
 80024e0:	f154 0400 	adcs.w	r4, r4, #0
 80024e4:	f155 0500 	adcs.w	r5, r5, #0
 80024e8:	f156 0600 	adcs.w	r6, r6, #0
 80024ec:	f141 0200 	adc.w	r2, r1, #0
 80024f0:	eb13 0308 	adds.w	r3, r3, r8
 80024f4:	eb54 0409 	adcs.w	r4, r4, r9
 80024f8:	eb55 050a 	adcs.w	r5, r5, sl
 80024fc:	eb56 060b 	adcs.w	r6, r6, fp
 8002500:	f142 0200 	adc.w	r2, r2, #0
 8002504:	eb13 030a 	adds.w	r3, r3, sl
 8002508:	eb54 040b 	adcs.w	r4, r4, fp
 800250c:	eb55 050e 	adcs.w	r5, r5, lr
 8002510:	f156 0600 	adcs.w	r6, r6, #0
 8002514:	f142 0200 	adc.w	r2, r2, #0
 8002518:	930b      	str	r3, [sp, #44]	; 0x2c
 800251a:	940c      	str	r4, [sp, #48]	; 0x30
 800251c:	950d      	str	r5, [sp, #52]	; 0x34
 800251e:	960e      	str	r6, [sp, #56]	; 0x38
 8002520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002522:	189b      	adds	r3, r3, r2
 8002524:	f141 0200 	adc.w	r2, r1, #0
 8002528:	eb13 030e 	adds.w	r3, r3, lr
 800252c:	f142 0200 	adc.w	r2, r2, #0
 8002530:	930f      	str	r3, [sp, #60]	; 0x3c
 8002532:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002534:	9c08      	ldr	r4, [sp, #32]
 8002536:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002538:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800253a:	f8dd 9000 	ldr.w	r9, [sp]
 800253e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002542:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002546:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800254a:	ebb3 0309 	subs.w	r3, r3, r9
 800254e:	eb74 040a 	sbcs.w	r4, r4, sl
 8002552:	eb75 050b 	sbcs.w	r5, r5, fp
 8002556:	eb76 060e 	sbcs.w	r6, r6, lr
 800255a:	9408      	str	r4, [sp, #32]
 800255c:	9509      	str	r5, [sp, #36]	; 0x24
 800255e:	960a      	str	r6, [sp, #40]	; 0x28
 8002560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002562:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002564:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002566:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002568:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800256c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002570:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002574:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002578:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800257c:	eb73 0309 	sbcs.w	r3, r3, r9
 8002580:	eb74 040a 	sbcs.w	r4, r4, sl
 8002584:	eb75 050b 	sbcs.w	r5, r5, fp
 8002588:	eb76 060e 	sbcs.w	r6, r6, lr
 800258c:	f168 0800 	sbc.w	r8, r8, #0
 8002590:	930b      	str	r3, [sp, #44]	; 0x2c
 8002592:	940c      	str	r4, [sp, #48]	; 0x30
 8002594:	950d      	str	r5, [sp, #52]	; 0x34
 8002596:	960e      	str	r6, [sp, #56]	; 0x38
 8002598:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800259c:	eba1 0202 	sub.w	r2, r1, r2
 80025a0:	f002 0101 	and.w	r1, r2, #1
 80025a4:	9b08      	ldr	r3, [sp, #32]
 80025a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80025a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80025aa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80025ac:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80025b0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80025b4:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80025b8:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	4194      	sbcs	r4, r2
 80025c0:	4195      	sbcs	r5, r2
 80025c2:	f176 0600 	sbcs.w	r6, r6, #0
 80025c6:	f178 0800 	sbcs.w	r8, r8, #0
 80025ca:	f179 0900 	sbcs.w	r9, r9, #0
 80025ce:	eb7a 0a01 	sbcs.w	sl, sl, r1
 80025d2:	eb6b 0b02 	sbc.w	fp, fp, r2
 80025d6:	6003      	str	r3, [r0, #0]
 80025d8:	6044      	str	r4, [r0, #4]
 80025da:	6085      	str	r5, [r0, #8]
 80025dc:	60c6      	str	r6, [r0, #12]
 80025de:	f8c0 8010 	str.w	r8, [r0, #16]
 80025e2:	f8c0 9014 	str.w	r9, [r0, #20]
 80025e6:	f8c0 a018 	str.w	sl, [r0, #24]
 80025ea:	f8c0 b01c 	str.w	fp, [r0, #28]
 80025ee:	b011      	add	sp, #68	; 0x44
        "add   sp, sp, #68\n\t"
        : [a] "+r" (a), [b] "+r" (b)
        : [r] "r" (r)
        : "memory", "r9", "r10", "r11", "r14", "r3", "r4", "r5", "r6", "r8"
    );
}
 80025f0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

080025f4 <sp_256_mont_sqr_8>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
SP_NOINLINE static void sp_256_mont_sqr_8(sp_digit* r, const sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 80025f4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 80025f8:	b091      	sub	sp, #68	; 0x44
 80025fa:	f04f 0500 	mov.w	r5, #0
 80025fe:	680e      	ldr	r6, [r1, #0]
 8002600:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002604:	fba6 ab08 	umull	sl, fp, r6, r8
 8002608:	f8cd a004 	str.w	sl, [sp, #4]
 800260c:	680e      	ldr	r6, [r1, #0]
 800260e:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8002612:	fba6 3408 	umull	r3, r4, r6, r8
 8002616:	eb13 0b0b 	adds.w	fp, r3, fp
 800261a:	f144 0e00 	adc.w	lr, r4, #0
 800261e:	f8cd b008 	str.w	fp, [sp, #8]
 8002622:	680e      	ldr	r6, [r1, #0]
 8002624:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002628:	fba6 3408 	umull	r3, r4, r6, r8
 800262c:	eb13 0e0e 	adds.w	lr, r3, lr
 8002630:	f144 0900 	adc.w	r9, r4, #0
 8002634:	684e      	ldr	r6, [r1, #4]
 8002636:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800263a:	fba6 3408 	umull	r3, r4, r6, r8
 800263e:	eb13 0e0e 	adds.w	lr, r3, lr
 8002642:	eb54 0909 	adcs.w	r9, r4, r9
 8002646:	f145 0a00 	adc.w	sl, r5, #0
 800264a:	f8cd e00c 	str.w	lr, [sp, #12]
 800264e:	680e      	ldr	r6, [r1, #0]
 8002650:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8002654:	fba6 3408 	umull	r3, r4, r6, r8
 8002658:	eb13 0909 	adds.w	r9, r3, r9
 800265c:	eb44 0a0a 	adc.w	sl, r4, sl
 8002660:	684e      	ldr	r6, [r1, #4]
 8002662:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002666:	fba6 3408 	umull	r3, r4, r6, r8
 800266a:	eb13 0909 	adds.w	r9, r3, r9
 800266e:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002672:	f145 0b00 	adc.w	fp, r5, #0
 8002676:	f8cd 9010 	str.w	r9, [sp, #16]
 800267a:	680e      	ldr	r6, [r1, #0]
 800267c:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002680:	fba6 3408 	umull	r3, r4, r6, r8
 8002684:	eb13 0a0a 	adds.w	sl, r3, sl
 8002688:	eb44 0b0b 	adc.w	fp, r4, fp
 800268c:	684e      	ldr	r6, [r1, #4]
 800268e:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8002692:	fba6 3408 	umull	r3, r4, r6, r8
 8002696:	eb13 0a0a 	adds.w	sl, r3, sl
 800269a:	eb54 0b0b 	adcs.w	fp, r4, fp
 800269e:	f145 0e00 	adc.w	lr, r5, #0
 80026a2:	688e      	ldr	r6, [r1, #8]
 80026a4:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80026a8:	fba6 3408 	umull	r3, r4, r6, r8
 80026ac:	eb13 0a0a 	adds.w	sl, r3, sl
 80026b0:	eb54 0b0b 	adcs.w	fp, r4, fp
 80026b4:	eb45 0e0e 	adc.w	lr, r5, lr
 80026b8:	f8cd a014 	str.w	sl, [sp, #20]
 80026bc:	680e      	ldr	r6, [r1, #0]
 80026be:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80026c2:	fba6 3408 	umull	r3, r4, r6, r8
 80026c6:	eb13 0b0b 	adds.w	fp, r3, fp
 80026ca:	eb54 0e0e 	adcs.w	lr, r4, lr
 80026ce:	f145 0900 	adc.w	r9, r5, #0
 80026d2:	684e      	ldr	r6, [r1, #4]
 80026d4:	f8d1 8014 	ldr.w	r8, [r1, #20]
 80026d8:	fba6 3408 	umull	r3, r4, r6, r8
 80026dc:	eb13 0b0b 	adds.w	fp, r3, fp
 80026e0:	eb54 0e0e 	adcs.w	lr, r4, lr
 80026e4:	eb45 0909 	adc.w	r9, r5, r9
 80026e8:	688e      	ldr	r6, [r1, #8]
 80026ea:	f8d1 8010 	ldr.w	r8, [r1, #16]
 80026ee:	fba6 3408 	umull	r3, r4, r6, r8
 80026f2:	eb13 0b0b 	adds.w	fp, r3, fp
 80026f6:	eb54 0e0e 	adcs.w	lr, r4, lr
 80026fa:	eb45 0909 	adc.w	r9, r5, r9
 80026fe:	f8cd b018 	str.w	fp, [sp, #24]
 8002702:	680e      	ldr	r6, [r1, #0]
 8002704:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002708:	fba6 3408 	umull	r3, r4, r6, r8
 800270c:	eb13 0e0e 	adds.w	lr, r3, lr
 8002710:	eb54 0909 	adcs.w	r9, r4, r9
 8002714:	f145 0a00 	adc.w	sl, r5, #0
 8002718:	684e      	ldr	r6, [r1, #4]
 800271a:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800271e:	fba6 3408 	umull	r3, r4, r6, r8
 8002722:	eb13 0e0e 	adds.w	lr, r3, lr
 8002726:	eb54 0909 	adcs.w	r9, r4, r9
 800272a:	eb45 0a0a 	adc.w	sl, r5, sl
 800272e:	688e      	ldr	r6, [r1, #8]
 8002730:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002734:	fba6 3408 	umull	r3, r4, r6, r8
 8002738:	eb13 0e0e 	adds.w	lr, r3, lr
 800273c:	eb54 0909 	adcs.w	r9, r4, r9
 8002740:	eb45 0a0a 	adc.w	sl, r5, sl
 8002744:	68ce      	ldr	r6, [r1, #12]
 8002746:	f8d1 8010 	ldr.w	r8, [r1, #16]
 800274a:	fba6 3408 	umull	r3, r4, r6, r8
 800274e:	eb13 0e0e 	adds.w	lr, r3, lr
 8002752:	eb54 0909 	adcs.w	r9, r4, r9
 8002756:	eb45 0a0a 	adc.w	sl, r5, sl
 800275a:	f8cd e01c 	str.w	lr, [sp, #28]
 800275e:	684e      	ldr	r6, [r1, #4]
 8002760:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002764:	fba6 3408 	umull	r3, r4, r6, r8
 8002768:	eb13 0909 	adds.w	r9, r3, r9
 800276c:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002770:	f145 0b00 	adc.w	fp, r5, #0
 8002774:	688e      	ldr	r6, [r1, #8]
 8002776:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800277a:	fba6 3408 	umull	r3, r4, r6, r8
 800277e:	eb13 0909 	adds.w	r9, r3, r9
 8002782:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002786:	eb45 0b0b 	adc.w	fp, r5, fp
 800278a:	68ce      	ldr	r6, [r1, #12]
 800278c:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002790:	fba6 3408 	umull	r3, r4, r6, r8
 8002794:	eb13 0909 	adds.w	r9, r3, r9
 8002798:	eb54 0a0a 	adcs.w	sl, r4, sl
 800279c:	eb45 0b0b 	adc.w	fp, r5, fp
 80027a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80027a4:	688e      	ldr	r6, [r1, #8]
 80027a6:	f8d1 801c 	ldr.w	r8, [r1, #28]
 80027aa:	fba6 3408 	umull	r3, r4, r6, r8
 80027ae:	eb13 0a0a 	adds.w	sl, r3, sl
 80027b2:	eb54 0b0b 	adcs.w	fp, r4, fp
 80027b6:	f145 0e00 	adc.w	lr, r5, #0
 80027ba:	68ce      	ldr	r6, [r1, #12]
 80027bc:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80027c0:	fba6 3408 	umull	r3, r4, r6, r8
 80027c4:	eb13 0a0a 	adds.w	sl, r3, sl
 80027c8:	eb54 0b0b 	adcs.w	fp, r4, fp
 80027cc:	eb45 0e0e 	adc.w	lr, r5, lr
 80027d0:	690e      	ldr	r6, [r1, #16]
 80027d2:	f8d1 8014 	ldr.w	r8, [r1, #20]
 80027d6:	fba6 3408 	umull	r3, r4, r6, r8
 80027da:	eb13 0a0a 	adds.w	sl, r3, sl
 80027de:	eb54 0b0b 	adcs.w	fp, r4, fp
 80027e2:	eb45 0e0e 	adc.w	lr, r5, lr
 80027e6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80027ea:	68ce      	ldr	r6, [r1, #12]
 80027ec:	f8d1 801c 	ldr.w	r8, [r1, #28]
 80027f0:	fba6 3408 	umull	r3, r4, r6, r8
 80027f4:	eb13 0b0b 	adds.w	fp, r3, fp
 80027f8:	eb54 0e0e 	adcs.w	lr, r4, lr
 80027fc:	f145 0900 	adc.w	r9, r5, #0
 8002800:	690e      	ldr	r6, [r1, #16]
 8002802:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002806:	fba6 3408 	umull	r3, r4, r6, r8
 800280a:	eb13 0b0b 	adds.w	fp, r3, fp
 800280e:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002812:	eb45 0909 	adc.w	r9, r5, r9
 8002816:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800281a:	690e      	ldr	r6, [r1, #16]
 800281c:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002820:	fba6 3408 	umull	r3, r4, r6, r8
 8002824:	eb13 0e0e 	adds.w	lr, r3, lr
 8002828:	eb54 0909 	adcs.w	r9, r4, r9
 800282c:	f145 0a00 	adc.w	sl, r5, #0
 8002830:	694e      	ldr	r6, [r1, #20]
 8002832:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002836:	fba6 3408 	umull	r3, r4, r6, r8
 800283a:	eb13 0e0e 	adds.w	lr, r3, lr
 800283e:	eb54 0909 	adcs.w	r9, r4, r9
 8002842:	eb45 0a0a 	adc.w	sl, r5, sl
 8002846:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800284a:	694e      	ldr	r6, [r1, #20]
 800284c:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002850:	fba6 3408 	umull	r3, r4, r6, r8
 8002854:	eb13 0909 	adds.w	r9, r3, r9
 8002858:	eb54 0a0a 	adcs.w	sl, r4, sl
 800285c:	f145 0b00 	adc.w	fp, r5, #0
 8002860:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8002864:	698e      	ldr	r6, [r1, #24]
 8002866:	f8d1 801c 	ldr.w	r8, [r1, #28]
 800286a:	fba6 3408 	umull	r3, r4, r6, r8
 800286e:	eb13 0a0a 	adds.w	sl, r3, sl
 8002872:	eb44 0b0b 	adc.w	fp, r4, fp
 8002876:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800287a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800287e:	9c01      	ldr	r4, [sp, #4]
 8002880:	9e02      	ldr	r6, [sp, #8]
 8002882:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002886:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800288a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800288e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002892:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002896:	f8dd c020 	ldr.w	ip, [sp, #32]
 800289a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800289c:	1924      	adds	r4, r4, r4
 800289e:	4176      	adcs	r6, r6
 80028a0:	eb58 0808 	adcs.w	r8, r8, r8
 80028a4:	eb59 0909 	adcs.w	r9, r9, r9
 80028a8:	eb5a 0a0a 	adcs.w	sl, sl, sl
 80028ac:	eb5b 0b0b 	adcs.w	fp, fp, fp
 80028b0:	eb5e 0e0e 	adcs.w	lr, lr, lr
 80028b4:	eb5c 0c0c 	adcs.w	ip, ip, ip
 80028b8:	415b      	adcs	r3, r3
 80028ba:	9401      	str	r4, [sp, #4]
 80028bc:	9602      	str	r6, [sp, #8]
 80028be:	f8cd 800c 	str.w	r8, [sp, #12]
 80028c2:	f8cd 9010 	str.w	r9, [sp, #16]
 80028c6:	f8cd a014 	str.w	sl, [sp, #20]
 80028ca:	f8cd b018 	str.w	fp, [sp, #24]
 80028ce:	f8cd e01c 	str.w	lr, [sp, #28]
 80028d2:	f8cd c020 	str.w	ip, [sp, #32]
 80028d6:	9309      	str	r3, [sp, #36]	; 0x24
 80028d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80028da:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80028dc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80028e0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80028e4:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80028e8:	4164      	adcs	r4, r4
 80028ea:	4176      	adcs	r6, r6
 80028ec:	eb58 0808 	adcs.w	r8, r8, r8
 80028f0:	eb59 0909 	adcs.w	r9, r9, r9
 80028f4:	eb5a 0a0a 	adcs.w	sl, sl, sl
 80028f8:	940a      	str	r4, [sp, #40]	; 0x28
 80028fa:	960b      	str	r6, [sp, #44]	; 0x2c
 80028fc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8002900:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8002904:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8002908:	f145 0b00 	adc.w	fp, r5, #0
 800290c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8002910:	9c01      	ldr	r4, [sp, #4]
 8002912:	9d02      	ldr	r5, [sp, #8]
 8002914:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002918:	680e      	ldr	r6, [r1, #0]
 800291a:	fba6 9a06 	umull	r9, sl, r6, r6
 800291e:	684e      	ldr	r6, [r1, #4]
 8002920:	fba6 be06 	umull	fp, lr, r6, r6
 8002924:	eb1a 0a04 	adds.w	sl, sl, r4
 8002928:	eb5b 0b05 	adcs.w	fp, fp, r5
 800292c:	eb5e 0e0c 	adcs.w	lr, lr, ip
 8002930:	f8cd 9000 	str.w	r9, [sp]
 8002934:	f8cd a004 	str.w	sl, [sp, #4]
 8002938:	f8cd b008 	str.w	fp, [sp, #8]
 800293c:	f8cd e00c 	str.w	lr, [sp, #12]
 8002940:	9b04      	ldr	r3, [sp, #16]
 8002942:	9c05      	ldr	r4, [sp, #20]
 8002944:	9d06      	ldr	r5, [sp, #24]
 8002946:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800294a:	688e      	ldr	r6, [r1, #8]
 800294c:	fba6 9a06 	umull	r9, sl, r6, r6
 8002950:	68ce      	ldr	r6, [r1, #12]
 8002952:	fba6 be06 	umull	fp, lr, r6, r6
 8002956:	eb59 0903 	adcs.w	r9, r9, r3
 800295a:	eb5a 0a04 	adcs.w	sl, sl, r4
 800295e:	eb5b 0b05 	adcs.w	fp, fp, r5
 8002962:	eb5e 0e0c 	adcs.w	lr, lr, ip
 8002966:	f8cd 9010 	str.w	r9, [sp, #16]
 800296a:	f8cd a014 	str.w	sl, [sp, #20]
 800296e:	f8cd b018 	str.w	fp, [sp, #24]
 8002972:	f8cd e01c 	str.w	lr, [sp, #28]
 8002976:	9b08      	ldr	r3, [sp, #32]
 8002978:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800297a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800297c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002980:	690e      	ldr	r6, [r1, #16]
 8002982:	fba6 9a06 	umull	r9, sl, r6, r6
 8002986:	694e      	ldr	r6, [r1, #20]
 8002988:	fba6 be06 	umull	fp, lr, r6, r6
 800298c:	eb59 0903 	adcs.w	r9, r9, r3
 8002990:	eb5a 0a04 	adcs.w	sl, sl, r4
 8002994:	eb5b 0b05 	adcs.w	fp, fp, r5
 8002998:	eb5e 0e0c 	adcs.w	lr, lr, ip
 800299c:	f8cd 9020 	str.w	r9, [sp, #32]
 80029a0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80029a4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80029a8:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80029ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80029b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80029b2:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 80029b6:	698e      	ldr	r6, [r1, #24]
 80029b8:	fba6 9a06 	umull	r9, sl, r6, r6
 80029bc:	69ce      	ldr	r6, [r1, #28]
 80029be:	fba6 be06 	umull	fp, lr, r6, r6
 80029c2:	eb59 0903 	adcs.w	r9, r9, r3
 80029c6:	eb5a 0a04 	adcs.w	sl, sl, r4
 80029ca:	eb5b 0b05 	adcs.w	fp, fp, r5
 80029ce:	eb4e 0e0c 	adc.w	lr, lr, ip
 80029d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80029d6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80029da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80029de:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 80029e2:	9c00      	ldr	r4, [sp, #0]
 80029e4:	9d01      	ldr	r5, [sp, #4]
 80029e6:	9e02      	ldr	r6, [sp, #8]
 80029e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80029ec:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80029f0:	f8dd a014 	ldr.w	sl, [sp, #20]
 80029f4:	f8dd b018 	ldr.w	fp, [sp, #24]
 80029f8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80029fc:	eb1b 0b04 	adds.w	fp, fp, r4
 8002a00:	eb4e 0e05 	adc.w	lr, lr, r5
 8002a04:	eb1b 0b04 	adds.w	fp, fp, r4
 8002a08:	eb4e 0e05 	adc.w	lr, lr, r5
 8002a0c:	ebae 0e04 	sub.w	lr, lr, r4
 8002a10:	4641      	mov	r1, r8
 8002a12:	46cc      	mov	ip, r9
 8002a14:	eb18 0804 	adds.w	r8, r8, r4
 8002a18:	eb59 0905 	adcs.w	r9, r9, r5
 8002a1c:	eb5a 0a06 	adcs.w	sl, sl, r6
 8002a20:	eb5b 0b01 	adcs.w	fp, fp, r1
 8002a24:	eb4e 0e0c 	adc.w	lr, lr, ip
 8002a28:	9400      	str	r4, [sp, #0]
 8002a2a:	9501      	str	r5, [sp, #4]
 8002a2c:	9602      	str	r6, [sp, #8]
 8002a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a32:	f8cd 9010 	str.w	r9, [sp, #16]
 8002a36:	f8cd a014 	str.w	sl, [sp, #20]
 8002a3a:	f04f 0100 	mov.w	r1, #0
 8002a3e:	9b06      	ldr	r3, [sp, #24]
 8002a40:	191b      	adds	r3, r3, r4
 8002a42:	f141 0c00 	adc.w	ip, r1, #0
 8002a46:	eb13 0308 	adds.w	r3, r3, r8
 8002a4a:	f14c 0c00 	adc.w	ip, ip, #0
 8002a4e:	f8cd b018 	str.w	fp, [sp, #24]
 8002a52:	9b07      	ldr	r3, [sp, #28]
 8002a54:	eb13 030c 	adds.w	r3, r3, ip
 8002a58:	f141 0c00 	adc.w	ip, r1, #0
 8002a5c:	195b      	adds	r3, r3, r5
 8002a5e:	f14c 0c00 	adc.w	ip, ip, #0
 8002a62:	eb13 0309 	adds.w	r3, r3, r9
 8002a66:	f14c 0c00 	adc.w	ip, ip, #0
 8002a6a:	f8cd e01c 	str.w	lr, [sp, #28]
 8002a6e:	9310      	str	r3, [sp, #64]	; 0x40
 8002a70:	9b08      	ldr	r3, [sp, #32]
 8002a72:	eb13 030c 	adds.w	r3, r3, ip
 8002a76:	f141 0c00 	adc.w	ip, r1, #0
 8002a7a:	191b      	adds	r3, r3, r4
 8002a7c:	f14c 0c00 	adc.w	ip, ip, #0
 8002a80:	199b      	adds	r3, r3, r6
 8002a82:	f14c 0c00 	adc.w	ip, ip, #0
 8002a86:	eb13 030a 	adds.w	r3, r3, sl
 8002a8a:	f14c 0c00 	adc.w	ip, ip, #0
 8002a8e:	9308      	str	r3, [sp, #32]
 8002a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002a94:	eb13 030c 	adds.w	r3, r3, ip
 8002a98:	f154 0400 	adcs.w	r4, r4, #0
 8002a9c:	f141 0c00 	adc.w	ip, r1, #0
 8002aa0:	195b      	adds	r3, r3, r5
 8002aa2:	4174      	adcs	r4, r6
 8002aa4:	f14c 0c00 	adc.w	ip, ip, #0
 8002aa8:	eb13 0308 	adds.w	r3, r3, r8
 8002aac:	eb54 0409 	adcs.w	r4, r4, r9
 8002ab0:	f14c 0c00 	adc.w	ip, ip, #0
 8002ab4:	eb13 030b 	adds.w	r3, r3, fp
 8002ab8:	eb54 040e 	adcs.w	r4, r4, lr
 8002abc:	f14c 0c00 	adc.w	ip, ip, #0
 8002ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ac2:	940a      	str	r4, [sp, #40]	; 0x28
 8002ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ac6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002ac8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002aca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002acc:	eb13 030c 	adds.w	r3, r3, ip
 8002ad0:	f154 0400 	adcs.w	r4, r4, #0
 8002ad4:	f155 0500 	adcs.w	r5, r5, #0
 8002ad8:	f156 0600 	adcs.w	r6, r6, #0
 8002adc:	f141 0c00 	adc.w	ip, r1, #0
 8002ae0:	eb13 0308 	adds.w	r3, r3, r8
 8002ae4:	eb54 0409 	adcs.w	r4, r4, r9
 8002ae8:	eb55 050a 	adcs.w	r5, r5, sl
 8002aec:	eb56 060b 	adcs.w	r6, r6, fp
 8002af0:	f14c 0c00 	adc.w	ip, ip, #0
 8002af4:	eb13 030a 	adds.w	r3, r3, sl
 8002af8:	eb54 040b 	adcs.w	r4, r4, fp
 8002afc:	eb55 050e 	adcs.w	r5, r5, lr
 8002b00:	f156 0600 	adcs.w	r6, r6, #0
 8002b04:	f14c 0c00 	adc.w	ip, ip, #0
 8002b08:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b0a:	940c      	str	r4, [sp, #48]	; 0x30
 8002b0c:	950d      	str	r5, [sp, #52]	; 0x34
 8002b0e:	960e      	str	r6, [sp, #56]	; 0x38
 8002b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002b12:	eb13 030c 	adds.w	r3, r3, ip
 8002b16:	f141 0c00 	adc.w	ip, r1, #0
 8002b1a:	eb13 030e 	adds.w	r3, r3, lr
 8002b1e:	f14c 0c00 	adc.w	ip, ip, #0
 8002b22:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b26:	9c08      	ldr	r4, [sp, #32]
 8002b28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002b2a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002b2c:	f8dd 9000 	ldr.w	r9, [sp]
 8002b30:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002b34:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002b38:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8002b3c:	ebb3 0309 	subs.w	r3, r3, r9
 8002b40:	eb74 040a 	sbcs.w	r4, r4, sl
 8002b44:	eb75 050b 	sbcs.w	r5, r5, fp
 8002b48:	eb76 060e 	sbcs.w	r6, r6, lr
 8002b4c:	9408      	str	r4, [sp, #32]
 8002b4e:	9509      	str	r5, [sp, #36]	; 0x24
 8002b50:	960a      	str	r6, [sp, #40]	; 0x28
 8002b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002b56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002b58:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002b5a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002b5e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002b62:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002b66:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002b6a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002b6e:	eb73 0309 	sbcs.w	r3, r3, r9
 8002b72:	eb74 040a 	sbcs.w	r4, r4, sl
 8002b76:	eb75 050b 	sbcs.w	r5, r5, fp
 8002b7a:	eb76 060e 	sbcs.w	r6, r6, lr
 8002b7e:	f168 0800 	sbc.w	r8, r8, #0
 8002b82:	930b      	str	r3, [sp, #44]	; 0x2c
 8002b84:	940c      	str	r4, [sp, #48]	; 0x30
 8002b86:	950d      	str	r5, [sp, #52]	; 0x34
 8002b88:	960e      	str	r6, [sp, #56]	; 0x38
 8002b8a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8002b8e:	eba1 0c0c 	sub.w	ip, r1, ip
 8002b92:	f00c 0101 	and.w	r1, ip, #1
 8002b96:	9b08      	ldr	r3, [sp, #32]
 8002b98:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002b9a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002b9c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002b9e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002ba2:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8002ba6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8002baa:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8002bae:	ebb3 030c 	subs.w	r3, r3, ip
 8002bb2:	eb74 040c 	sbcs.w	r4, r4, ip
 8002bb6:	eb75 050c 	sbcs.w	r5, r5, ip
 8002bba:	f176 0600 	sbcs.w	r6, r6, #0
 8002bbe:	f178 0800 	sbcs.w	r8, r8, #0
 8002bc2:	f179 0900 	sbcs.w	r9, r9, #0
 8002bc6:	eb7a 0a01 	sbcs.w	sl, sl, r1
 8002bca:	eb6b 0b0c 	sbc.w	fp, fp, ip
 8002bce:	6003      	str	r3, [r0, #0]
 8002bd0:	6044      	str	r4, [r0, #4]
 8002bd2:	6085      	str	r5, [r0, #8]
 8002bd4:	60c6      	str	r6, [r0, #12]
 8002bd6:	f8c0 8010 	str.w	r8, [r0, #16]
 8002bda:	f8c0 9014 	str.w	r9, [r0, #20]
 8002bde:	f8c0 a018 	str.w	sl, [r0, #24]
 8002be2:	f8c0 b01c 	str.w	fp, [r0, #28]
 8002be6:	b011      	add	sp, #68	; 0x44
        "add   sp, sp, #68\n\t"
        : [a] "+r" (a)
        : [r] "r" (r)
        : "memory", "r9", "r10", "r11", "r14", "r3", "r4", "r5", "r6", "r8", "r12"
    );
}
 8002be8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08002bec <sp_256_cmp_8>:
 * b  A single precision integer.
 * return -ve, 0 or +ve if a is less than, equal to or greater than b
 * respectively.
 */
SP_NOINLINE static int32_t sp_256_cmp_8(const sp_digit* a, const sp_digit* b)
{
 8002bec:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
    sp_digit r = 0;


    __asm__ __volatile__ (
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	ea6f 0303 	mvn.w	r3, r3
 8002bfa:	f04f 061c 	mov.w	r6, #28
 8002bfe:	f850 8006 	ldr.w	r8, [r0, r6]
 8002c02:	598d      	ldr	r5, [r1, r6]
 8002c04:	ea08 0803 	and.w	r8, r8, r3
 8002c08:	ea05 0503 	and.w	r5, r5, r3
 8002c0c:	4644      	mov	r4, r8
 8002c0e:	ebb8 0805 	subs.w	r8, r8, r5
 8002c12:	eb68 0808 	sbc.w	r8, r8, r8
 8002c16:	4442      	add	r2, r8
 8002c18:	ea6f 0808 	mvn.w	r8, r8
 8002c1c:	ea03 0308 	and.w	r3, r3, r8
 8002c20:	1b2d      	subs	r5, r5, r4
 8002c22:	eb68 0808 	sbc.w	r8, r8, r8
 8002c26:	eba2 0208 	sub.w	r2, r2, r8
 8002c2a:	ea6f 0808 	mvn.w	r8, r8
 8002c2e:	ea03 0308 	and.w	r3, r3, r8
 8002c32:	f1a6 0604 	sub.w	r6, r6, #4
 8002c36:	2e00      	cmp	r6, #0
 8002c38:	dae1      	bge.n	8002bfe <sp_256_cmp_8+0x12>
        : [a] "r" (a), [b] "r" (b)
        : "r3", "r4", "r5", "r6", "r8"
    );

    return r;
}
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8002c40:	4770      	bx	lr

08002c42 <sp_256_cond_sub_8>:
 * b  A single precision number to subtract.
 * m  Mask value to apply.
 */
SP_NOINLINE static sp_digit sp_256_cond_sub_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b, sp_digit m)
{
 8002c42:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
 8002c46:	4604      	mov	r4, r0
    sp_digit c = 0;

    __asm__ __volatile__ (
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f04f 0520 	mov.w	r5, #32
 8002c4e:	46a9      	mov	r9, r5
 8002c50:	f04f 0800 	mov.w	r8, #0
 8002c54:	f852 6008 	ldr.w	r6, [r2, r8]
 8002c58:	ea06 0603 	and.w	r6, r6, r3
 8002c5c:	f04f 0500 	mov.w	r5, #0
 8002c60:	1a2d      	subs	r5, r5, r0
 8002c62:	f851 5008 	ldr.w	r5, [r1, r8]
 8002c66:	41b5      	sbcs	r5, r6
 8002c68:	4180      	sbcs	r0, r0
 8002c6a:	f844 5008 	str.w	r5, [r4, r8]
 8002c6e:	f108 0804 	add.w	r8, r8, #4
 8002c72:	45c8      	cmp	r8, r9
 8002c74:	dbee      	blt.n	8002c54 <sp_256_cond_sub_8+0x12>
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [m] "r" (m)
        : "memory", "r5", "r6", "r8", "r9"
    );

    return c;
}
 8002c76:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
 8002c7a:	4770      	bx	lr

08002c7c <sp_256_mont_reduce_8>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_256_mont_reduce_8(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 8002c7c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0100 	mov.w	r1, #0
 8002c88:	4691      	mov	r9, r2
 8002c8a:	f04f 0400 	mov.w	r4, #0
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	6846      	ldr	r6, [r0, #4]
 8002c92:	f04f 0500 	mov.w	r5, #0
 8002c96:	19a4      	adds	r4, r4, r6
 8002c98:	eb45 0502 	adc.w	r5, r5, r2
 8002c9c:	6044      	str	r4, [r0, #4]
 8002c9e:	6886      	ldr	r6, [r0, #8]
 8002ca0:	f04f 0400 	mov.w	r4, #0
 8002ca4:	19ad      	adds	r5, r5, r6
 8002ca6:	eb44 0402 	adc.w	r4, r4, r2
 8002caa:	6085      	str	r5, [r0, #8]
 8002cac:	68c6      	ldr	r6, [r0, #12]
 8002cae:	f04f 0500 	mov.w	r5, #0
 8002cb2:	18e4      	adds	r4, r4, r3
 8002cb4:	eb45 0502 	adc.w	r5, r5, r2
 8002cb8:	19a4      	adds	r4, r4, r6
 8002cba:	eb45 0502 	adc.w	r5, r5, r2
 8002cbe:	60c4      	str	r4, [r0, #12]
 8002cc0:	6906      	ldr	r6, [r0, #16]
 8002cc2:	f04f 0400 	mov.w	r4, #0
 8002cc6:	19ad      	adds	r5, r5, r6
 8002cc8:	eb44 0402 	adc.w	r4, r4, r2
 8002ccc:	6105      	str	r5, [r0, #16]
 8002cce:	6946      	ldr	r6, [r0, #20]
 8002cd0:	f04f 0500 	mov.w	r5, #0
 8002cd4:	19a4      	adds	r4, r4, r6
 8002cd6:	eb45 0502 	adc.w	r5, r5, r2
 8002cda:	6144      	str	r4, [r0, #20]
 8002cdc:	6986      	ldr	r6, [r0, #24]
 8002cde:	f04f 0400 	mov.w	r4, #0
 8002ce2:	18ed      	adds	r5, r5, r3
 8002ce4:	eb44 0402 	adc.w	r4, r4, r2
 8002ce8:	19ad      	adds	r5, r5, r6
 8002cea:	eb44 0402 	adc.w	r4, r4, r2
 8002cee:	6185      	str	r5, [r0, #24]
 8002cf0:	69c6      	ldr	r6, [r0, #28]
 8002cf2:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8002cf6:	18cd      	adds	r5, r1, r3
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	eb41 0102 	adc.w	r1, r1, r2
 8002d00:	1ae4      	subs	r4, r4, r3
 8002d02:	4195      	sbcs	r5, r2
 8002d04:	eb61 0102 	sbc.w	r1, r1, r2
 8002d08:	19a4      	adds	r4, r4, r6
 8002d0a:	eb55 0508 	adcs.w	r5, r5, r8
 8002d0e:	eb41 0102 	adc.w	r1, r1, r2
 8002d12:	61c4      	str	r4, [r0, #28]
 8002d14:	6205      	str	r5, [r0, #32]
 8002d16:	f109 0901 	add.w	r9, r9, #1
 8002d1a:	f100 0004 	add.w	r0, r0, #4
 8002d1e:	f04f 0608 	mov.w	r6, #8
 8002d22:	45b1      	cmp	r9, r6
 8002d24:	dbb1      	blt.n	8002c8a <sp_256_mont_reduce_8+0xe>
 8002d26:	f1a0 0020 	sub.w	r0, r0, #32
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	f1a1 0101 	sub.w	r1, r1, #1
 8002d30:	ea6f 0101 	mvn.w	r1, r1
 8002d34:	6a04      	ldr	r4, [r0, #32]
 8002d36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002d38:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8002d3a:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 8002d3e:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8002d42:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 8002d46:	f8d0 b038 	ldr.w	fp, [r0, #56]	; 0x38
 8002d4a:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8002d4e:	1a64      	subs	r4, r4, r1
 8002d50:	418d      	sbcs	r5, r1
 8002d52:	418e      	sbcs	r6, r1
 8002d54:	eb78 0802 	sbcs.w	r8, r8, r2
 8002d58:	eb79 0902 	sbcs.w	r9, r9, r2
 8002d5c:	eb7a 0a02 	sbcs.w	sl, sl, r2
 8002d60:	eb7b 0b03 	sbcs.w	fp, fp, r3
 8002d64:	eb6e 0e01 	sbc.w	lr, lr, r1
 8002d68:	6004      	str	r4, [r0, #0]
 8002d6a:	6045      	str	r5, [r0, #4]
 8002d6c:	6086      	str	r6, [r0, #8]
 8002d6e:	f8c0 800c 	str.w	r8, [r0, #12]
 8002d72:	f8c0 9010 	str.w	r9, [r0, #16]
 8002d76:	f8c0 a014 	str.w	sl, [r0, #20]
 8002d7a:	f8c0 b018 	str.w	fp, [r0, #24]
 8002d7e:	f8c0 e01c 	str.w	lr, [r0, #28]
    );


    (void)m;
    (void)mp;
}
 8002d82:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
	...

08002d88 <sp_256_mont_reduce_order_8>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_256_mont_reduce_order_8(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 8002d88:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    sp_digit ca = 0;

    __asm__ __volatile__ (
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	4691      	mov	r9, r2
 8002d90:	468c      	mov	ip, r1
 8002d92:	4682      	mov	sl, r0
 8002d94:	f04f 0400 	mov.w	r4, #0
 8002d98:	f10a 0b20 	add.w	fp, sl, #32
 8002d9c:	464a      	mov	r2, r9
 8002d9e:	f8da 0000 	ldr.w	r0, [sl]
 8002da2:	fb02 f200 	mul.w	r2, r2, r0
 8002da6:	4661      	mov	r1, ip
 8002da8:	f10a 0e18 	add.w	lr, sl, #24
 8002dac:	f8da 0000 	ldr.w	r0, [sl]
 8002db0:	f04f 0500 	mov.w	r5, #0
 8002db4:	f851 8b04 	ldr.w	r8, [r1], #4
 8002db8:	fba2 6808 	umull	r6, r8, r2, r8
 8002dbc:	1980      	adds	r0, r0, r6
 8002dbe:	eb45 0508 	adc.w	r5, r5, r8
 8002dc2:	1824      	adds	r4, r4, r0
 8002dc4:	f145 0500 	adc.w	r5, r5, #0
 8002dc8:	f84a 4b04 	str.w	r4, [sl], #4
 8002dcc:	f8da 0000 	ldr.w	r0, [sl]
 8002dd0:	f04f 0400 	mov.w	r4, #0
 8002dd4:	f851 8b04 	ldr.w	r8, [r1], #4
 8002dd8:	fba2 6808 	umull	r6, r8, r2, r8
 8002ddc:	1980      	adds	r0, r0, r6
 8002dde:	eb44 0408 	adc.w	r4, r4, r8
 8002de2:	182d      	adds	r5, r5, r0
 8002de4:	f144 0400 	adc.w	r4, r4, #0
 8002de8:	f84a 5b04 	str.w	r5, [sl], #4
 8002dec:	45f2      	cmp	sl, lr
 8002dee:	dbdd      	blt.n	8002dac <sp_256_mont_reduce_order_8+0x24>
 8002df0:	f8da 0000 	ldr.w	r0, [sl]
 8002df4:	f04f 0500 	mov.w	r5, #0
 8002df8:	f851 8b04 	ldr.w	r8, [r1], #4
 8002dfc:	fba2 6808 	umull	r6, r8, r2, r8
 8002e00:	1980      	adds	r0, r0, r6
 8002e02:	eb45 0508 	adc.w	r5, r5, r8
 8002e06:	1824      	adds	r4, r4, r0
 8002e08:	f145 0500 	adc.w	r5, r5, #0
 8002e0c:	f84a 4b04 	str.w	r4, [sl], #4
 8002e10:	461c      	mov	r4, r3
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	f8d1 8000 	ldr.w	r8, [r1]
 8002e1a:	fba2 6808 	umull	r6, r8, r2, r8
 8002e1e:	19ad      	adds	r5, r5, r6
 8002e20:	eb54 0408 	adcs.w	r4, r4, r8
 8002e24:	f143 0300 	adc.w	r3, r3, #0
 8002e28:	f8da 6000 	ldr.w	r6, [sl]
 8002e2c:	f8da 8004 	ldr.w	r8, [sl, #4]
 8002e30:	1976      	adds	r6, r6, r5
 8002e32:	eb58 0804 	adcs.w	r8, r8, r4
 8002e36:	f143 0300 	adc.w	r3, r3, #0
 8002e3a:	f8ca 6000 	str.w	r6, [sl]
 8002e3e:	f8ca 8004 	str.w	r8, [sl, #4]
 8002e42:	f1aa 0a18 	sub.w	sl, sl, #24
 8002e46:	45da      	cmp	sl, fp
 8002e48:	dba8      	blt.n	8002d9c <sp_256_mont_reduce_order_8+0x14>
 8002e4a:	4650      	mov	r0, sl
 8002e4c:	4661      	mov	r1, ip
        : [ca] "+r" (ca), [a] "+r" (a)
        : [m] "r" (m), [mp] "r" (mp)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    sp_256_cond_sub_8(a - 8, a, m, (sp_digit)0 - ca);
 8002e4e:	425b      	negs	r3, r3
 8002e50:	460a      	mov	r2, r1
 8002e52:	4601      	mov	r1, r0
 8002e54:	3820      	subs	r0, #32
 8002e56:	4c02      	ldr	r4, [pc, #8]	; (8002e60 <sp_256_mont_reduce_order_8+0xd8>)
 8002e58:	47a0      	blx	r4
}
 8002e5a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8002e5e:	bf00      	nop
 8002e60:	08002c43 	.word	0x08002c43

08002e64 <sp_256_mont_add_8>:
 * b   Second number to add in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_add_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m)
{
 8002e64:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 8002e68:	f04f 0c00 	mov.w	ip, #0
 8002e6c:	680c      	ldr	r4, [r1, #0]
 8002e6e:	684d      	ldr	r5, [r1, #4]
 8002e70:	688e      	ldr	r6, [r1, #8]
 8002e72:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002e76:	f8d2 9000 	ldr.w	r9, [r2]
 8002e7a:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8002e7e:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8002e82:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8002e86:	eb14 0409 	adds.w	r4, r4, r9
 8002e8a:	eb55 050a 	adcs.w	r5, r5, sl
 8002e8e:	eb56 060b 	adcs.w	r6, r6, fp
 8002e92:	eb58 080e 	adcs.w	r8, r8, lr
 8002e96:	6004      	str	r4, [r0, #0]
 8002e98:	6045      	str	r5, [r0, #4]
 8002e9a:	6086      	str	r6, [r0, #8]
 8002e9c:	f8c0 800c 	str.w	r8, [r0, #12]
 8002ea0:	690c      	ldr	r4, [r1, #16]
 8002ea2:	694d      	ldr	r5, [r1, #20]
 8002ea4:	698e      	ldr	r6, [r1, #24]
 8002ea6:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002eaa:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8002eae:	f8d2 a014 	ldr.w	sl, [r2, #20]
 8002eb2:	f8d2 b018 	ldr.w	fp, [r2, #24]
 8002eb6:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8002eba:	eb54 0409 	adcs.w	r4, r4, r9
 8002ebe:	eb55 050a 	adcs.w	r5, r5, sl
 8002ec2:	eb56 060b 	adcs.w	r6, r6, fp
 8002ec6:	eb58 080e 	adcs.w	r8, r8, lr
 8002eca:	f14c 0300 	adc.w	r3, ip, #0
 8002ece:	ebac 0303 	sub.w	r3, ip, r3
 8002ed2:	f003 0c01 	and.w	ip, r3, #1
 8002ed6:	f8d0 9000 	ldr.w	r9, [r0]
 8002eda:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8002ede:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8002ee2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8002ee6:	ebb9 0903 	subs.w	r9, r9, r3
 8002eea:	eb7a 0a03 	sbcs.w	sl, sl, r3
 8002eee:	eb7b 0b03 	sbcs.w	fp, fp, r3
 8002ef2:	f17e 0e00 	sbcs.w	lr, lr, #0
 8002ef6:	f174 0400 	sbcs.w	r4, r4, #0
 8002efa:	f175 0500 	sbcs.w	r5, r5, #0
 8002efe:	eb76 060c 	sbcs.w	r6, r6, ip
 8002f02:	eb68 0803 	sbc.w	r8, r8, r3
 8002f06:	f8c0 9000 	str.w	r9, [r0]
 8002f0a:	f8c0 a004 	str.w	sl, [r0, #4]
 8002f0e:	f8c0 b008 	str.w	fp, [r0, #8]
 8002f12:	f8c0 e00c 	str.w	lr, [r0, #12]
 8002f16:	6104      	str	r4, [r0, #16]
 8002f18:	6145      	str	r5, [r0, #20]
 8002f1a:	6186      	str	r6, [r0, #24]
 8002f1c:	f8c0 801c 	str.w	r8, [r0, #28]
        "str   r8, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 8002f20:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08002f24 <sp_256_mont_dbl_8>:
 * r   Result of doubling.
 * a   Number to double in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_dbl_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8002f24:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 8002f28:	f04f 0c00 	mov.w	ip, #0
 8002f2c:	680c      	ldr	r4, [r1, #0]
 8002f2e:	684d      	ldr	r5, [r1, #4]
 8002f30:	688e      	ldr	r6, [r1, #8]
 8002f32:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002f36:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8002f3a:	f8d1 a014 	ldr.w	sl, [r1, #20]
 8002f3e:	f8d1 b018 	ldr.w	fp, [r1, #24]
 8002f42:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8002f46:	1924      	adds	r4, r4, r4
 8002f48:	416d      	adcs	r5, r5
 8002f4a:	4176      	adcs	r6, r6
 8002f4c:	eb58 0808 	adcs.w	r8, r8, r8
 8002f50:	eb59 0909 	adcs.w	r9, r9, r9
 8002f54:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8002f58:	eb5b 0b0b 	adcs.w	fp, fp, fp
 8002f5c:	eb5e 0e0e 	adcs.w	lr, lr, lr
 8002f60:	f14c 0300 	adc.w	r3, ip, #0
 8002f64:	ebac 0303 	sub.w	r3, ip, r3
 8002f68:	f003 0c01 	and.w	ip, r3, #1
 8002f6c:	1ae4      	subs	r4, r4, r3
 8002f6e:	419d      	sbcs	r5, r3
 8002f70:	419e      	sbcs	r6, r3
 8002f72:	f178 0800 	sbcs.w	r8, r8, #0
 8002f76:	f179 0900 	sbcs.w	r9, r9, #0
 8002f7a:	f17a 0a00 	sbcs.w	sl, sl, #0
 8002f7e:	eb7b 0b0c 	sbcs.w	fp, fp, ip
 8002f82:	eb6e 0e03 	sbc.w	lr, lr, r3
 8002f86:	6004      	str	r4, [r0, #0]
 8002f88:	6045      	str	r5, [r0, #4]
 8002f8a:	6086      	str	r6, [r0, #8]
 8002f8c:	f8c0 800c 	str.w	r8, [r0, #12]
 8002f90:	f8c0 9010 	str.w	r9, [r0, #16]
 8002f94:	f8c0 a014 	str.w	sl, [r0, #20]
 8002f98:	f8c0 b018 	str.w	fp, [r0, #24]
 8002f9c:	f8c0 e01c 	str.w	lr, [r0, #28]
        "str   r14, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 8002fa0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08002fa4 <sp_256_mont_tpl_8>:
 * r   Result of Tripling.
 * a   Number to triple in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_tpl_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8002fa4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 8002fa8:	680a      	ldr	r2, [r1, #0]
 8002faa:	684b      	ldr	r3, [r1, #4]
 8002fac:	688c      	ldr	r4, [r1, #8]
 8002fae:	68cd      	ldr	r5, [r1, #12]
 8002fb0:	690e      	ldr	r6, [r1, #16]
 8002fb2:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002fb6:	f8d1 9018 	ldr.w	r9, [r1, #24]
 8002fba:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 8002fbe:	1892      	adds	r2, r2, r2
 8002fc0:	415b      	adcs	r3, r3
 8002fc2:	4164      	adcs	r4, r4
 8002fc4:	416d      	adcs	r5, r5
 8002fc6:	4176      	adcs	r6, r6
 8002fc8:	eb58 0808 	adcs.w	r8, r8, r8
 8002fcc:	eb59 0909 	adcs.w	r9, r9, r9
 8002fd0:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8002fd4:	f04f 0b00 	mov.w	fp, #0
 8002fd8:	f04f 0e00 	mov.w	lr, #0
 8002fdc:	eb4b 0b0b 	adc.w	fp, fp, fp
 8002fe0:	46dc      	mov	ip, fp
 8002fe2:	f1ab 0b01 	sub.w	fp, fp, #1
 8002fe6:	ea6f 0b0b 	mvn.w	fp, fp
 8002fea:	ebb2 020b 	subs.w	r2, r2, fp
 8002fee:	eb73 030b 	sbcs.w	r3, r3, fp
 8002ff2:	eb74 040b 	sbcs.w	r4, r4, fp
 8002ff6:	eb75 050e 	sbcs.w	r5, r5, lr
 8002ffa:	eb76 060e 	sbcs.w	r6, r6, lr
 8002ffe:	eb78 080e 	sbcs.w	r8, r8, lr
 8003002:	eb79 090c 	sbcs.w	r9, r9, ip
 8003006:	eb6a 0a0b 	sbc.w	sl, sl, fp
 800300a:	f8d1 c000 	ldr.w	ip, [r1]
 800300e:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8003012:	eb12 020c 	adds.w	r2, r2, ip
 8003016:	eb53 030e 	adcs.w	r3, r3, lr
 800301a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800301e:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8003022:	eb54 040c 	adcs.w	r4, r4, ip
 8003026:	eb55 050e 	adcs.w	r5, r5, lr
 800302a:	f8d1 c010 	ldr.w	ip, [r1, #16]
 800302e:	f8d1 e014 	ldr.w	lr, [r1, #20]
 8003032:	eb56 060c 	adcs.w	r6, r6, ip
 8003036:	eb58 080e 	adcs.w	r8, r8, lr
 800303a:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800303e:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8003042:	eb59 090c 	adcs.w	r9, r9, ip
 8003046:	eb5a 0a0e 	adcs.w	sl, sl, lr
 800304a:	f04f 0b00 	mov.w	fp, #0
 800304e:	f04f 0e00 	mov.w	lr, #0
 8003052:	eb4b 0b0b 	adc.w	fp, fp, fp
 8003056:	46dc      	mov	ip, fp
 8003058:	f1ab 0b01 	sub.w	fp, fp, #1
 800305c:	ea6f 0b0b 	mvn.w	fp, fp
 8003060:	ebb2 020b 	subs.w	r2, r2, fp
 8003064:	6002      	str	r2, [r0, #0]
 8003066:	eb73 030b 	sbcs.w	r3, r3, fp
 800306a:	6043      	str	r3, [r0, #4]
 800306c:	eb74 040b 	sbcs.w	r4, r4, fp
 8003070:	6084      	str	r4, [r0, #8]
 8003072:	eb75 050e 	sbcs.w	r5, r5, lr
 8003076:	60c5      	str	r5, [r0, #12]
 8003078:	eb76 060e 	sbcs.w	r6, r6, lr
 800307c:	6106      	str	r6, [r0, #16]
 800307e:	eb78 080e 	sbcs.w	r8, r8, lr
 8003082:	f8c0 8014 	str.w	r8, [r0, #20]
 8003086:	eb79 090c 	sbcs.w	r9, r9, ip
 800308a:	f8c0 9018 	str.w	r9, [r0, #24]
 800308e:	eb6a 0a0b 	sbc.w	sl, sl, fp
 8003092:	f8c0 a01c 	str.w	sl, [r0, #28]
        "str	r10, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r11", "r12", "r14", "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10"
    );
}
 8003096:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0800309a <sp_256_mont_sub_8>:
 * b   Number to subtract with in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_sub_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m)
{
 800309a:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 800309e:	f04f 0c00 	mov.w	ip, #0
 80030a2:	680c      	ldr	r4, [r1, #0]
 80030a4:	684d      	ldr	r5, [r1, #4]
 80030a6:	688e      	ldr	r6, [r1, #8]
 80030a8:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80030ac:	f8d2 9000 	ldr.w	r9, [r2]
 80030b0:	f8d2 a004 	ldr.w	sl, [r2, #4]
 80030b4:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80030b8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80030bc:	ebb4 0409 	subs.w	r4, r4, r9
 80030c0:	eb75 050a 	sbcs.w	r5, r5, sl
 80030c4:	eb76 060b 	sbcs.w	r6, r6, fp
 80030c8:	eb78 080e 	sbcs.w	r8, r8, lr
 80030cc:	6004      	str	r4, [r0, #0]
 80030ce:	6045      	str	r5, [r0, #4]
 80030d0:	6086      	str	r6, [r0, #8]
 80030d2:	f8c0 800c 	str.w	r8, [r0, #12]
 80030d6:	690c      	ldr	r4, [r1, #16]
 80030d8:	694d      	ldr	r5, [r1, #20]
 80030da:	698e      	ldr	r6, [r1, #24]
 80030dc:	f8d1 801c 	ldr.w	r8, [r1, #28]
 80030e0:	f8d2 9010 	ldr.w	r9, [r2, #16]
 80030e4:	f8d2 a014 	ldr.w	sl, [r2, #20]
 80030e8:	f8d2 b018 	ldr.w	fp, [r2, #24]
 80030ec:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 80030f0:	eb74 0409 	sbcs.w	r4, r4, r9
 80030f4:	eb75 050a 	sbcs.w	r5, r5, sl
 80030f8:	eb76 060b 	sbcs.w	r6, r6, fp
 80030fc:	eb78 080e 	sbcs.w	r8, r8, lr
 8003100:	f16c 0300 	sbc.w	r3, ip, #0
 8003104:	f003 0c01 	and.w	ip, r3, #1
 8003108:	f8d0 9000 	ldr.w	r9, [r0]
 800310c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8003110:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8003114:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8003118:	eb19 0903 	adds.w	r9, r9, r3
 800311c:	eb5a 0a03 	adcs.w	sl, sl, r3
 8003120:	eb5b 0b03 	adcs.w	fp, fp, r3
 8003124:	f15e 0e00 	adcs.w	lr, lr, #0
 8003128:	f154 0400 	adcs.w	r4, r4, #0
 800312c:	f155 0500 	adcs.w	r5, r5, #0
 8003130:	eb56 060c 	adcs.w	r6, r6, ip
 8003134:	eb48 0803 	adc.w	r8, r8, r3
 8003138:	f8c0 9000 	str.w	r9, [r0]
 800313c:	f8c0 a004 	str.w	sl, [r0, #4]
 8003140:	f8c0 b008 	str.w	fp, [r0, #8]
 8003144:	f8c0 e00c 	str.w	lr, [r0, #12]
 8003148:	6104      	str	r4, [r0, #16]
 800314a:	6145      	str	r5, [r0, #20]
 800314c:	6186      	str	r6, [r0, #24]
 800314e:	f8c0 801c 	str.w	r8, [r0, #28]
        "str   r8, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 8003152:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003156 <sp_256_div2_8>:
 * r  Result of division by 2.
 * a  Number to divide.
 * m  Modulus (prime).
 */
SP_NOINLINE static void sp_256_div2_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8003156:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
    __asm__ __volatile__ (
 800315a:	f8d1 8000 	ldr.w	r8, [r1]
 800315e:	ea4f 78c8 	mov.w	r8, r8, lsl #31
 8003162:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8003166:	f04f 0500 	mov.w	r5, #0
 800316a:	eba5 0508 	sub.w	r5, r5, r8
 800316e:	f04f 0800 	mov.w	r8, #0
 8003172:	ea4f 76c5 	mov.w	r6, r5, lsl #31
 8003176:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800317a:	680b      	ldr	r3, [r1, #0]
 800317c:	684c      	ldr	r4, [r1, #4]
 800317e:	195b      	adds	r3, r3, r5
 8003180:	416c      	adcs	r4, r5
 8003182:	6003      	str	r3, [r0, #0]
 8003184:	6044      	str	r4, [r0, #4]
 8003186:	688b      	ldr	r3, [r1, #8]
 8003188:	68cc      	ldr	r4, [r1, #12]
 800318a:	416b      	adcs	r3, r5
 800318c:	eb54 0408 	adcs.w	r4, r4, r8
 8003190:	6083      	str	r3, [r0, #8]
 8003192:	60c4      	str	r4, [r0, #12]
 8003194:	690b      	ldr	r3, [r1, #16]
 8003196:	694c      	ldr	r4, [r1, #20]
 8003198:	eb53 0308 	adcs.w	r3, r3, r8
 800319c:	eb54 0408 	adcs.w	r4, r4, r8
 80031a0:	6103      	str	r3, [r0, #16]
 80031a2:	6144      	str	r4, [r0, #20]
 80031a4:	698b      	ldr	r3, [r1, #24]
 80031a6:	69cc      	ldr	r4, [r1, #28]
 80031a8:	4173      	adcs	r3, r6
 80031aa:	416c      	adcs	r4, r5
 80031ac:	eb48 0808 	adc.w	r8, r8, r8
 80031b0:	ea4f 78c8 	mov.w	r8, r8, lsl #31
 80031b4:	ea4f 0553 	mov.w	r5, r3, lsr #1
 80031b8:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 80031bc:	ea4f 0654 	mov.w	r6, r4, lsr #1
 80031c0:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 80031c4:	ea45 0504 	orr.w	r5, r5, r4
 80031c8:	ea46 0608 	orr.w	r6, r6, r8
 80031cc:	4698      	mov	r8, r3
 80031ce:	6185      	str	r5, [r0, #24]
 80031d0:	61c6      	str	r6, [r0, #28]
 80031d2:	690b      	ldr	r3, [r1, #16]
 80031d4:	694c      	ldr	r4, [r1, #20]
 80031d6:	ea4f 0553 	mov.w	r5, r3, lsr #1
 80031da:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 80031de:	ea4f 0654 	mov.w	r6, r4, lsr #1
 80031e2:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 80031e6:	ea45 0504 	orr.w	r5, r5, r4
 80031ea:	ea46 0608 	orr.w	r6, r6, r8
 80031ee:	4698      	mov	r8, r3
 80031f0:	6105      	str	r5, [r0, #16]
 80031f2:	6146      	str	r6, [r0, #20]
 80031f4:	688b      	ldr	r3, [r1, #8]
 80031f6:	68cc      	ldr	r4, [r1, #12]
 80031f8:	ea4f 0553 	mov.w	r5, r3, lsr #1
 80031fc:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 8003200:	ea4f 0654 	mov.w	r6, r4, lsr #1
 8003204:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 8003208:	ea45 0504 	orr.w	r5, r5, r4
 800320c:	ea46 0608 	orr.w	r6, r6, r8
 8003210:	4698      	mov	r8, r3
 8003212:	6085      	str	r5, [r0, #8]
 8003214:	60c6      	str	r6, [r0, #12]
 8003216:	6803      	ldr	r3, [r0, #0]
 8003218:	6844      	ldr	r4, [r0, #4]
 800321a:	ea4f 0553 	mov.w	r5, r3, lsr #1
 800321e:	ea4f 0654 	mov.w	r6, r4, lsr #1
 8003222:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 8003226:	ea45 0504 	orr.w	r5, r5, r4
 800322a:	ea46 0608 	orr.w	r6, r6, r8
 800322e:	6005      	str	r5, [r0, #0]
 8003230:	6046      	str	r6, [r0, #4]
        "str	r6, [%[r], #4]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [m] "r" (m)
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );
}
 8003232:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8003236:	4770      	bx	lr

08003238 <sp_256_proj_point_dbl_8>:
    return err;
}
#endif /* WOLFSSL_SP_NONBLOCK */

static void sp_256_proj_point_dbl_8(sp_point_256* r, const sp_point_256* p, sp_digit* t)
{
 8003238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800323c:	b085      	sub	sp, #20
 800323e:	4606      	mov	r6, r0
 8003240:	4688      	mov	r8, r1
 8003242:	9202      	str	r2, [sp, #8]
    sp_digit* t1 = t;
    sp_digit* t2 = t + 2*8;
 8003244:	f102 0940 	add.w	r9, r2, #64	; 0x40
    sp_digit* x;
    sp_digit* y;
    sp_digit* z;

    x = r->x;
    y = r->y;
 8003248:	f100 0540 	add.w	r5, r0, #64	; 0x40
    z = r->z;
 800324c:	f100 0b80 	add.w	fp, r0, #128	; 0x80
    /* Put infinity into result. */
    if (r != p) {
 8003250:	4288      	cmp	r0, r1
 8003252:	d003      	beq.n	800325c <sp_256_proj_point_dbl_8+0x24>
        r->infinity = p->infinity;
 8003254:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 8003258:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    }

    /* T1 = Z * Z */
    sp_256_mont_sqr_8(t1, p->z, p256_mod, p256_mp_mod);
 800325c:	f108 0380 	add.w	r3, r8, #128	; 0x80
 8003260:	4619      	mov	r1, r3
 8003262:	4c3d      	ldr	r4, [pc, #244]	; (8003358 <sp_256_proj_point_dbl_8+0x120>)
 8003264:	2301      	movs	r3, #1
 8003266:	4622      	mov	r2, r4
 8003268:	9103      	str	r1, [sp, #12]
 800326a:	9802      	ldr	r0, [sp, #8]
 800326c:	4f3b      	ldr	r7, [pc, #236]	; (800335c <sp_256_proj_point_dbl_8+0x124>)
 800326e:	47b8      	blx	r7
    /* Z = Y * Z */
    sp_256_mont_mul_8(z, p->y, p->z, p256_mod, p256_mp_mod);
 8003270:	f108 0340 	add.w	r3, r8, #64	; 0x40
 8003274:	4618      	mov	r0, r3
 8003276:	f04f 0a01 	mov.w	sl, #1
 800327a:	f8cd a000 	str.w	sl, [sp]
 800327e:	4623      	mov	r3, r4
 8003280:	9a03      	ldr	r2, [sp, #12]
 8003282:	9003      	str	r0, [sp, #12]
 8003284:	4601      	mov	r1, r0
 8003286:	4658      	mov	r0, fp
 8003288:	4f35      	ldr	r7, [pc, #212]	; (8003360 <sp_256_proj_point_dbl_8+0x128>)
 800328a:	47b8      	blx	r7
    /* Z = 2Z */
    sp_256_mont_dbl_8(z, z, p256_mod);
 800328c:	4622      	mov	r2, r4
 800328e:	4659      	mov	r1, fp
 8003290:	4658      	mov	r0, fp
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <sp_256_proj_point_dbl_8+0x12c>)
 8003294:	4798      	blx	r3
    /* T2 = X - T1 */
    sp_256_mont_sub_8(t2, p->x, t1, p256_mod);
 8003296:	4623      	mov	r3, r4
 8003298:	9f02      	ldr	r7, [sp, #8]
 800329a:	463a      	mov	r2, r7
 800329c:	4641      	mov	r1, r8
 800329e:	4648      	mov	r0, r9
 80032a0:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8003374 <sp_256_proj_point_dbl_8+0x13c>
 80032a4:	47d8      	blx	fp
    /* T1 = X + T1 */
    sp_256_mont_add_8(t1, p->x, t1, p256_mod);
 80032a6:	4623      	mov	r3, r4
 80032a8:	463a      	mov	r2, r7
 80032aa:	4641      	mov	r1, r8
 80032ac:	9702      	str	r7, [sp, #8]
 80032ae:	4638      	mov	r0, r7
 80032b0:	4f2d      	ldr	r7, [pc, #180]	; (8003368 <sp_256_proj_point_dbl_8+0x130>)
 80032b2:	47b8      	blx	r7
    /* T2 = T1 * T2 */
    sp_256_mont_mul_8(t2, t1, t2, p256_mod, p256_mp_mod);
 80032b4:	f8cd a000 	str.w	sl, [sp]
 80032b8:	4623      	mov	r3, r4
 80032ba:	464a      	mov	r2, r9
 80032bc:	9902      	ldr	r1, [sp, #8]
 80032be:	4648      	mov	r0, r9
 80032c0:	4f27      	ldr	r7, [pc, #156]	; (8003360 <sp_256_proj_point_dbl_8+0x128>)
 80032c2:	47b8      	blx	r7
    /* T1 = 3T2 */
    sp_256_mont_tpl_8(t1, t2, p256_mod);
 80032c4:	4622      	mov	r2, r4
 80032c6:	4649      	mov	r1, r9
 80032c8:	9802      	ldr	r0, [sp, #8]
 80032ca:	4b28      	ldr	r3, [pc, #160]	; (800336c <sp_256_proj_point_dbl_8+0x134>)
 80032cc:	4798      	blx	r3
    /* Y = 2Y */
    sp_256_mont_dbl_8(y, p->y, p256_mod);
 80032ce:	4622      	mov	r2, r4
 80032d0:	9903      	ldr	r1, [sp, #12]
 80032d2:	4628      	mov	r0, r5
 80032d4:	4b23      	ldr	r3, [pc, #140]	; (8003364 <sp_256_proj_point_dbl_8+0x12c>)
 80032d6:	4798      	blx	r3
    /* Y = Y * Y */
    sp_256_mont_sqr_8(y, y, p256_mod, p256_mp_mod);
 80032d8:	4653      	mov	r3, sl
 80032da:	4622      	mov	r2, r4
 80032dc:	4629      	mov	r1, r5
 80032de:	4628      	mov	r0, r5
 80032e0:	4f1e      	ldr	r7, [pc, #120]	; (800335c <sp_256_proj_point_dbl_8+0x124>)
 80032e2:	47b8      	blx	r7
    /* T2 = Y * Y */
    sp_256_mont_sqr_8(t2, y, p256_mod, p256_mp_mod);
 80032e4:	4653      	mov	r3, sl
 80032e6:	4622      	mov	r2, r4
 80032e8:	4629      	mov	r1, r5
 80032ea:	4648      	mov	r0, r9
 80032ec:	47b8      	blx	r7
    /* T2 = T2/2 */
    sp_256_div2_8(t2, t2, p256_mod);
 80032ee:	4622      	mov	r2, r4
 80032f0:	4649      	mov	r1, r9
 80032f2:	4648      	mov	r0, r9
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <sp_256_proj_point_dbl_8+0x138>)
 80032f6:	4798      	blx	r3
    /* Y = Y * X */
    sp_256_mont_mul_8(y, y, p->x, p256_mod, p256_mp_mod);
 80032f8:	f8cd a000 	str.w	sl, [sp]
 80032fc:	4623      	mov	r3, r4
 80032fe:	4642      	mov	r2, r8
 8003300:	4629      	mov	r1, r5
 8003302:	4628      	mov	r0, r5
 8003304:	4f16      	ldr	r7, [pc, #88]	; (8003360 <sp_256_proj_point_dbl_8+0x128>)
 8003306:	47b8      	blx	r7
    /* X = T1 * T1 */
    sp_256_mont_sqr_8(x, t1, p256_mod, p256_mp_mod);
 8003308:	4653      	mov	r3, sl
 800330a:	4622      	mov	r2, r4
 800330c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003310:	4641      	mov	r1, r8
 8003312:	4630      	mov	r0, r6
 8003314:	4f11      	ldr	r7, [pc, #68]	; (800335c <sp_256_proj_point_dbl_8+0x124>)
 8003316:	47b8      	blx	r7
    /* X = X - Y */
    sp_256_mont_sub_8(x, x, y, p256_mod);
 8003318:	4623      	mov	r3, r4
 800331a:	462a      	mov	r2, r5
 800331c:	4631      	mov	r1, r6
 800331e:	4630      	mov	r0, r6
 8003320:	47d8      	blx	fp
    /* X = X - Y */
    sp_256_mont_sub_8(x, x, y, p256_mod);
 8003322:	4623      	mov	r3, r4
 8003324:	462a      	mov	r2, r5
 8003326:	4631      	mov	r1, r6
 8003328:	4630      	mov	r0, r6
 800332a:	47d8      	blx	fp
    /* Y = Y - X */
    sp_256_mont_sub_8(y, y, x, p256_mod);
 800332c:	4623      	mov	r3, r4
 800332e:	4632      	mov	r2, r6
 8003330:	4629      	mov	r1, r5
 8003332:	4628      	mov	r0, r5
 8003334:	47d8      	blx	fp
    /* Y = Y * T1 */
    sp_256_mont_mul_8(y, y, t1, p256_mod, p256_mp_mod);
 8003336:	f8cd a000 	str.w	sl, [sp]
 800333a:	4623      	mov	r3, r4
 800333c:	4642      	mov	r2, r8
 800333e:	4629      	mov	r1, r5
 8003340:	4628      	mov	r0, r5
 8003342:	4f07      	ldr	r7, [pc, #28]	; (8003360 <sp_256_proj_point_dbl_8+0x128>)
 8003344:	47b8      	blx	r7
    /* Y = Y - T2 */
    sp_256_mont_sub_8(y, y, t2, p256_mod);
 8003346:	4623      	mov	r3, r4
 8003348:	464a      	mov	r2, r9
 800334a:	4629      	mov	r1, r5
 800334c:	4628      	mov	r0, r5
 800334e:	47d8      	blx	fp
}
 8003350:	b005      	add	sp, #20
 8003352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003356:	bf00      	nop
 8003358:	08005064 	.word	0x08005064
 800335c:	080025f5 	.word	0x080025f5
 8003360:	08001e49 	.word	0x08001e49
 8003364:	08002f25 	.word	0x08002f25
 8003368:	08002e65 	.word	0x08002e65
 800336c:	08002fa5 	.word	0x08002fa5
 8003370:	08003157 	.word	0x08003157
 8003374:	0800309b 	.word	0x0800309b

08003378 <sp_256_cmp_equal_8>:
 * a  First number to compare.
 * b  Second number to compare.
 * returns 1 when equal and 0 otherwise.
 */
static int sp_256_cmp_equal_8(const sp_digit* a, const sp_digit* b)
{
 8003378:	b410      	push	{r4}
    return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2]) | (a[3] ^ b[3]) |
 800337a:	6803      	ldr	r3, [r0, #0]
 800337c:	680a      	ldr	r2, [r1, #0]
 800337e:	4053      	eors	r3, r2
 8003380:	6842      	ldr	r2, [r0, #4]
 8003382:	684c      	ldr	r4, [r1, #4]
 8003384:	4062      	eors	r2, r4
 8003386:	4313      	orrs	r3, r2
 8003388:	6882      	ldr	r2, [r0, #8]
 800338a:	688c      	ldr	r4, [r1, #8]
 800338c:	4062      	eors	r2, r4
 800338e:	4313      	orrs	r3, r2
 8003390:	68c2      	ldr	r2, [r0, #12]
 8003392:	68cc      	ldr	r4, [r1, #12]
 8003394:	4062      	eors	r2, r4
 8003396:	4313      	orrs	r3, r2
            (a[4] ^ b[4]) | (a[5] ^ b[5]) | (a[6] ^ b[6]) | (a[7] ^ b[7])) == 0;
 8003398:	6902      	ldr	r2, [r0, #16]
 800339a:	690c      	ldr	r4, [r1, #16]
 800339c:	4062      	eors	r2, r4
    return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2]) | (a[3] ^ b[3]) |
 800339e:	4313      	orrs	r3, r2
            (a[4] ^ b[4]) | (a[5] ^ b[5]) | (a[6] ^ b[6]) | (a[7] ^ b[7])) == 0;
 80033a0:	6942      	ldr	r2, [r0, #20]
 80033a2:	694c      	ldr	r4, [r1, #20]
 80033a4:	4062      	eors	r2, r4
 80033a6:	4313      	orrs	r3, r2
 80033a8:	6982      	ldr	r2, [r0, #24]
 80033aa:	698c      	ldr	r4, [r1, #24]
 80033ac:	4062      	eors	r2, r4
 80033ae:	4313      	orrs	r3, r2
 80033b0:	69c2      	ldr	r2, [r0, #28]
 80033b2:	69c9      	ldr	r1, [r1, #28]
 80033b4:	404a      	eors	r2, r1
 80033b6:	4313      	orrs	r3, r2
}
 80033b8:	bf0c      	ite	eq
 80033ba:	2001      	moveq	r0, #1
 80033bc:	2000      	movne	r0, #0
 80033be:	bc10      	pop	{r4}
 80033c0:	4770      	bx	lr

080033c2 <sp_256_get_point_16_8>:
 * table  Table - start of the entires to access
 * idx    Index of entry to retrieve.
 */
static void sp_256_get_point_16_8(sp_point_256* r, const sp_point_256* table,
    int idx)
{
 80033c2:	b4f0      	push	{r4, r5, r6, r7}
    int i;
    sp_digit mask;

    r->x[0] = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	6003      	str	r3, [r0, #0]
    r->x[1] = 0;
 80033c8:	6043      	str	r3, [r0, #4]
    r->x[2] = 0;
 80033ca:	6083      	str	r3, [r0, #8]
    r->x[3] = 0;
 80033cc:	60c3      	str	r3, [r0, #12]
    r->x[4] = 0;
 80033ce:	6103      	str	r3, [r0, #16]
    r->x[5] = 0;
 80033d0:	6143      	str	r3, [r0, #20]
    r->x[6] = 0;
 80033d2:	6183      	str	r3, [r0, #24]
    r->x[7] = 0;
 80033d4:	61c3      	str	r3, [r0, #28]
    r->y[0] = 0;
 80033d6:	6403      	str	r3, [r0, #64]	; 0x40
    r->y[1] = 0;
 80033d8:	6443      	str	r3, [r0, #68]	; 0x44
    r->y[2] = 0;
 80033da:	6483      	str	r3, [r0, #72]	; 0x48
    r->y[3] = 0;
 80033dc:	64c3      	str	r3, [r0, #76]	; 0x4c
    r->y[4] = 0;
 80033de:	6503      	str	r3, [r0, #80]	; 0x50
    r->y[5] = 0;
 80033e0:	6543      	str	r3, [r0, #84]	; 0x54
    r->y[6] = 0;
 80033e2:	6583      	str	r3, [r0, #88]	; 0x58
    r->y[7] = 0;
 80033e4:	65c3      	str	r3, [r0, #92]	; 0x5c
    r->z[0] = 0;
 80033e6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    r->z[1] = 0;
 80033ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    r->z[2] = 0;
 80033ee:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    r->z[3] = 0;
 80033f2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    r->z[4] = 0;
 80033f6:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    r->z[5] = 0;
 80033fa:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    r->z[6] = 0;
 80033fe:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    r->z[7] = 0;
 8003402:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    for (i = 1; i < 16; i++) {
 8003406:	2501      	movs	r5, #1
 8003408:	e0af      	b.n	800356a <sp_256_get_point_16_8+0x1a8>
        mask = 0 - (i == idx);
 800340a:	4295      	cmp	r5, r2
 800340c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003410:	bf18      	it	ne
 8003412:	2300      	movne	r3, #0
        r->x[0] |= mask & table[i].x[0];
 8003414:	26c4      	movs	r6, #196	; 0xc4
 8003416:	fb06 f605 	mul.w	r6, r6, r5
 800341a:	198c      	adds	r4, r1, r6
 800341c:	598f      	ldr	r7, [r1, r6]
 800341e:	401f      	ands	r7, r3
 8003420:	6806      	ldr	r6, [r0, #0]
 8003422:	433e      	orrs	r6, r7
 8003424:	6006      	str	r6, [r0, #0]
        r->x[1] |= mask & table[i].x[1];
 8003426:	6866      	ldr	r6, [r4, #4]
 8003428:	ea06 0703 	and.w	r7, r6, r3
 800342c:	6846      	ldr	r6, [r0, #4]
 800342e:	433e      	orrs	r6, r7
 8003430:	6046      	str	r6, [r0, #4]
        r->x[2] |= mask & table[i].x[2];
 8003432:	68a6      	ldr	r6, [r4, #8]
 8003434:	ea06 0703 	and.w	r7, r6, r3
 8003438:	6886      	ldr	r6, [r0, #8]
 800343a:	433e      	orrs	r6, r7
 800343c:	6086      	str	r6, [r0, #8]
        r->x[3] |= mask & table[i].x[3];
 800343e:	68e6      	ldr	r6, [r4, #12]
 8003440:	ea06 0703 	and.w	r7, r6, r3
 8003444:	68c6      	ldr	r6, [r0, #12]
 8003446:	433e      	orrs	r6, r7
 8003448:	60c6      	str	r6, [r0, #12]
        r->x[4] |= mask & table[i].x[4];
 800344a:	6926      	ldr	r6, [r4, #16]
 800344c:	ea06 0703 	and.w	r7, r6, r3
 8003450:	6906      	ldr	r6, [r0, #16]
 8003452:	433e      	orrs	r6, r7
 8003454:	6106      	str	r6, [r0, #16]
        r->x[5] |= mask & table[i].x[5];
 8003456:	6966      	ldr	r6, [r4, #20]
 8003458:	ea06 0703 	and.w	r7, r6, r3
 800345c:	6946      	ldr	r6, [r0, #20]
 800345e:	433e      	orrs	r6, r7
 8003460:	6146      	str	r6, [r0, #20]
        r->x[6] |= mask & table[i].x[6];
 8003462:	69a6      	ldr	r6, [r4, #24]
 8003464:	ea06 0703 	and.w	r7, r6, r3
 8003468:	6986      	ldr	r6, [r0, #24]
 800346a:	433e      	orrs	r6, r7
 800346c:	6186      	str	r6, [r0, #24]
        r->x[7] |= mask & table[i].x[7];
 800346e:	69e6      	ldr	r6, [r4, #28]
 8003470:	ea06 0703 	and.w	r7, r6, r3
 8003474:	69c6      	ldr	r6, [r0, #28]
 8003476:	433e      	orrs	r6, r7
 8003478:	61c6      	str	r6, [r0, #28]
        r->y[0] |= mask & table[i].y[0];
 800347a:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800347c:	ea06 0703 	and.w	r7, r6, r3
 8003480:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003482:	433e      	orrs	r6, r7
 8003484:	6406      	str	r6, [r0, #64]	; 0x40
        r->y[1] |= mask & table[i].y[1];
 8003486:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8003488:	ea06 0703 	and.w	r7, r6, r3
 800348c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800348e:	433e      	orrs	r6, r7
 8003490:	6446      	str	r6, [r0, #68]	; 0x44
        r->y[2] |= mask & table[i].y[2];
 8003492:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8003494:	ea06 0703 	and.w	r7, r6, r3
 8003498:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800349a:	433e      	orrs	r6, r7
 800349c:	6486      	str	r6, [r0, #72]	; 0x48
        r->y[3] |= mask & table[i].y[3];
 800349e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 80034a0:	ea06 0703 	and.w	r7, r6, r3
 80034a4:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 80034a6:	433e      	orrs	r6, r7
 80034a8:	64c6      	str	r6, [r0, #76]	; 0x4c
        r->y[4] |= mask & table[i].y[4];
 80034aa:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80034ac:	ea06 0703 	and.w	r7, r6, r3
 80034b0:	6d06      	ldr	r6, [r0, #80]	; 0x50
 80034b2:	433e      	orrs	r6, r7
 80034b4:	6506      	str	r6, [r0, #80]	; 0x50
        r->y[5] |= mask & table[i].y[5];
 80034b6:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80034b8:	ea06 0703 	and.w	r7, r6, r3
 80034bc:	6d46      	ldr	r6, [r0, #84]	; 0x54
 80034be:	433e      	orrs	r6, r7
 80034c0:	6546      	str	r6, [r0, #84]	; 0x54
        r->y[6] |= mask & table[i].y[6];
 80034c2:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80034c4:	ea06 0703 	and.w	r7, r6, r3
 80034c8:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80034ca:	433e      	orrs	r6, r7
 80034cc:	6586      	str	r6, [r0, #88]	; 0x58
        r->y[7] |= mask & table[i].y[7];
 80034ce:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 80034d0:	ea06 0703 	and.w	r7, r6, r3
 80034d4:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 80034d6:	433e      	orrs	r6, r7
 80034d8:	65c6      	str	r6, [r0, #92]	; 0x5c
        r->z[0] |= mask & table[i].z[0];
 80034da:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80034de:	ea06 0703 	and.w	r7, r6, r3
 80034e2:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 80034e6:	433e      	orrs	r6, r7
 80034e8:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
        r->z[1] |= mask & table[i].z[1];
 80034ec:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 80034f0:	ea06 0703 	and.w	r7, r6, r3
 80034f4:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 80034f8:	433e      	orrs	r6, r7
 80034fa:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
        r->z[2] |= mask & table[i].z[2];
 80034fe:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8003502:	ea06 0703 	and.w	r7, r6, r3
 8003506:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 800350a:	433e      	orrs	r6, r7
 800350c:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
        r->z[3] |= mask & table[i].z[3];
 8003510:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8003514:	ea06 0703 	and.w	r7, r6, r3
 8003518:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
 800351c:	433e      	orrs	r6, r7
 800351e:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
        r->z[4] |= mask & table[i].z[4];
 8003522:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 8003526:	ea06 0703 	and.w	r7, r6, r3
 800352a:	f8d0 6090 	ldr.w	r6, [r0, #144]	; 0x90
 800352e:	433e      	orrs	r6, r7
 8003530:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
        r->z[5] |= mask & table[i].z[5];
 8003534:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
 8003538:	ea06 0703 	and.w	r7, r6, r3
 800353c:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
 8003540:	433e      	orrs	r6, r7
 8003542:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
        r->z[6] |= mask & table[i].z[6];
 8003546:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 800354a:	ea06 0703 	and.w	r7, r6, r3
 800354e:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
 8003552:	433e      	orrs	r6, r7
 8003554:	f8c0 6098 	str.w	r6, [r0, #152]	; 0x98
        r->z[7] |= mask & table[i].z[7];
 8003558:	f8d4 409c 	ldr.w	r4, [r4, #156]	; 0x9c
 800355c:	4023      	ands	r3, r4
 800355e:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 8003562:	431c      	orrs	r4, r3
 8003564:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    for (i = 1; i < 16; i++) {
 8003568:	3501      	adds	r5, #1
 800356a:	2d0f      	cmp	r5, #15
 800356c:	f77f af4d 	ble.w	800340a <sp_256_get_point_16_8+0x48>
    }
}
 8003570:	bcf0      	pop	{r4, r5, r6, r7}
 8003572:	4770      	bx	lr

08003574 <sp_256_get_entry_16_8>:
 * table  Table - start of the entires to access
 * idx    Index of entry to retrieve.
 */
static void sp_256_get_entry_16_8(sp_point_256* r,
    const sp_table_entry_256* table, int idx)
{
 8003574:	b4f0      	push	{r4, r5, r6, r7}
    int i;
    sp_digit mask;

    r->x[0] = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	6003      	str	r3, [r0, #0]
    r->x[1] = 0;
 800357a:	6043      	str	r3, [r0, #4]
    r->x[2] = 0;
 800357c:	6083      	str	r3, [r0, #8]
    r->x[3] = 0;
 800357e:	60c3      	str	r3, [r0, #12]
    r->x[4] = 0;
 8003580:	6103      	str	r3, [r0, #16]
    r->x[5] = 0;
 8003582:	6143      	str	r3, [r0, #20]
    r->x[6] = 0;
 8003584:	6183      	str	r3, [r0, #24]
    r->x[7] = 0;
 8003586:	61c3      	str	r3, [r0, #28]
    r->y[0] = 0;
 8003588:	6403      	str	r3, [r0, #64]	; 0x40
    r->y[1] = 0;
 800358a:	6443      	str	r3, [r0, #68]	; 0x44
    r->y[2] = 0;
 800358c:	6483      	str	r3, [r0, #72]	; 0x48
    r->y[3] = 0;
 800358e:	64c3      	str	r3, [r0, #76]	; 0x4c
    r->y[4] = 0;
 8003590:	6503      	str	r3, [r0, #80]	; 0x50
    r->y[5] = 0;
 8003592:	6543      	str	r3, [r0, #84]	; 0x54
    r->y[6] = 0;
 8003594:	6583      	str	r3, [r0, #88]	; 0x58
    r->y[7] = 0;
 8003596:	65c3      	str	r3, [r0, #92]	; 0x5c
    for (i = 1; i < 16; i++) {
 8003598:	2501      	movs	r5, #1
 800359a:	e066      	b.n	800366a <sp_256_get_entry_16_8+0xf6>
        mask = 0 - (i == idx);
 800359c:	4295      	cmp	r5, r2
 800359e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035a2:	bf18      	it	ne
 80035a4:	2300      	movne	r3, #0
        r->x[0] |= mask & table[i].x[0];
 80035a6:	01ae      	lsls	r6, r5, #6
 80035a8:	eb01 1485 	add.w	r4, r1, r5, lsl #6
 80035ac:	598f      	ldr	r7, [r1, r6]
 80035ae:	401f      	ands	r7, r3
 80035b0:	6806      	ldr	r6, [r0, #0]
 80035b2:	433e      	orrs	r6, r7
 80035b4:	6006      	str	r6, [r0, #0]
        r->x[1] |= mask & table[i].x[1];
 80035b6:	6866      	ldr	r6, [r4, #4]
 80035b8:	ea06 0703 	and.w	r7, r6, r3
 80035bc:	6846      	ldr	r6, [r0, #4]
 80035be:	433e      	orrs	r6, r7
 80035c0:	6046      	str	r6, [r0, #4]
        r->x[2] |= mask & table[i].x[2];
 80035c2:	68a6      	ldr	r6, [r4, #8]
 80035c4:	ea06 0703 	and.w	r7, r6, r3
 80035c8:	6886      	ldr	r6, [r0, #8]
 80035ca:	433e      	orrs	r6, r7
 80035cc:	6086      	str	r6, [r0, #8]
        r->x[3] |= mask & table[i].x[3];
 80035ce:	68e6      	ldr	r6, [r4, #12]
 80035d0:	ea06 0703 	and.w	r7, r6, r3
 80035d4:	68c6      	ldr	r6, [r0, #12]
 80035d6:	433e      	orrs	r6, r7
 80035d8:	60c6      	str	r6, [r0, #12]
        r->x[4] |= mask & table[i].x[4];
 80035da:	6926      	ldr	r6, [r4, #16]
 80035dc:	ea06 0703 	and.w	r7, r6, r3
 80035e0:	6906      	ldr	r6, [r0, #16]
 80035e2:	433e      	orrs	r6, r7
 80035e4:	6106      	str	r6, [r0, #16]
        r->x[5] |= mask & table[i].x[5];
 80035e6:	6966      	ldr	r6, [r4, #20]
 80035e8:	ea06 0703 	and.w	r7, r6, r3
 80035ec:	6946      	ldr	r6, [r0, #20]
 80035ee:	433e      	orrs	r6, r7
 80035f0:	6146      	str	r6, [r0, #20]
        r->x[6] |= mask & table[i].x[6];
 80035f2:	69a6      	ldr	r6, [r4, #24]
 80035f4:	ea06 0703 	and.w	r7, r6, r3
 80035f8:	6986      	ldr	r6, [r0, #24]
 80035fa:	433e      	orrs	r6, r7
 80035fc:	6186      	str	r6, [r0, #24]
        r->x[7] |= mask & table[i].x[7];
 80035fe:	69e6      	ldr	r6, [r4, #28]
 8003600:	ea06 0703 	and.w	r7, r6, r3
 8003604:	69c6      	ldr	r6, [r0, #28]
 8003606:	433e      	orrs	r6, r7
 8003608:	61c6      	str	r6, [r0, #28]
        r->y[0] |= mask & table[i].y[0];
 800360a:	6a26      	ldr	r6, [r4, #32]
 800360c:	ea06 0703 	and.w	r7, r6, r3
 8003610:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003612:	433e      	orrs	r6, r7
 8003614:	6406      	str	r6, [r0, #64]	; 0x40
        r->y[1] |= mask & table[i].y[1];
 8003616:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003618:	ea06 0703 	and.w	r7, r6, r3
 800361c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800361e:	433e      	orrs	r6, r7
 8003620:	6446      	str	r6, [r0, #68]	; 0x44
        r->y[2] |= mask & table[i].y[2];
 8003622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003624:	ea06 0703 	and.w	r7, r6, r3
 8003628:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800362a:	433e      	orrs	r6, r7
 800362c:	6486      	str	r6, [r0, #72]	; 0x48
        r->y[3] |= mask & table[i].y[3];
 800362e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003630:	ea06 0703 	and.w	r7, r6, r3
 8003634:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8003636:	433e      	orrs	r6, r7
 8003638:	64c6      	str	r6, [r0, #76]	; 0x4c
        r->y[4] |= mask & table[i].y[4];
 800363a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800363c:	ea06 0703 	and.w	r7, r6, r3
 8003640:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8003642:	433e      	orrs	r6, r7
 8003644:	6506      	str	r6, [r0, #80]	; 0x50
        r->y[5] |= mask & table[i].y[5];
 8003646:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8003648:	ea06 0703 	and.w	r7, r6, r3
 800364c:	6d46      	ldr	r6, [r0, #84]	; 0x54
 800364e:	433e      	orrs	r6, r7
 8003650:	6546      	str	r6, [r0, #84]	; 0x54
        r->y[6] |= mask & table[i].y[6];
 8003652:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003654:	ea06 0703 	and.w	r7, r6, r3
 8003658:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800365a:	433e      	orrs	r6, r7
 800365c:	6586      	str	r6, [r0, #88]	; 0x58
        r->y[7] |= mask & table[i].y[7];
 800365e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8003660:	4023      	ands	r3, r4
 8003662:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8003664:	431c      	orrs	r4, r3
 8003666:	65c4      	str	r4, [r0, #92]	; 0x5c
    for (i = 1; i < 16; i++) {
 8003668:	3501      	adds	r5, #1
 800366a:	2d0f      	cmp	r5, #15
 800366c:	dd96      	ble.n	800359c <sp_256_get_entry_16_8+0x28>
    }
}
 800366e:	bcf0      	pop	{r4, r5, r6, r7}
 8003670:	4770      	bx	lr

08003672 <sp_256_iszero_8>:
 * a  Number to check.
 * returns 1 if the number is zero and 0 otherwise.
 */
static int sp_256_iszero_8(const sp_digit* a)
{
    return (a[0] | a[1] | a[2] | a[3] | a[4] | a[5] | a[6] | a[7]) == 0;
 8003672:	6803      	ldr	r3, [r0, #0]
 8003674:	6842      	ldr	r2, [r0, #4]
 8003676:	4313      	orrs	r3, r2
 8003678:	6882      	ldr	r2, [r0, #8]
 800367a:	4313      	orrs	r3, r2
 800367c:	68c2      	ldr	r2, [r0, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	6902      	ldr	r2, [r0, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	6942      	ldr	r2, [r0, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	6982      	ldr	r2, [r0, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	69c2      	ldr	r2, [r0, #28]
 800368e:	4313      	orrs	r3, r2
}
 8003690:	bf0c      	ite	eq
 8003692:	2001      	moveq	r0, #1
 8003694:	2000      	movne	r0, #0
 8003696:	4770      	bx	lr

08003698 <sp_256_from_bin>:
 * size  Maximum number of bytes to convert
 * a  Byte array.
 * n  Number of bytes in array to read.
 */
static void sp_256_from_bin(sp_digit* r, int size, const byte* a, int n)
{
 8003698:	b4f0      	push	{r4, r5, r6, r7}
    int i;
    int j = 0;
    word32 s = 0;

    r[0] = 0;
 800369a:	2400      	movs	r4, #0
 800369c:	6004      	str	r4, [r0, #0]
    for (i = n-1; i >= 0; i--) {
 800369e:	3b01      	subs	r3, #1
    word32 s = 0;
 80036a0:	4625      	mov	r5, r4
    for (i = n-1; i >= 0; i--) {
 80036a2:	e001      	b.n	80036a8 <sp_256_from_bin+0x10>
            }
            r[++j] = (sp_digit)a[i] >> s;
            s = 8U - s;
        }
        else {
            s += 8U;
 80036a4:	3508      	adds	r5, #8
    for (i = n-1; i >= 0; i--) {
 80036a6:	3b01      	subs	r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	db18      	blt.n	80036de <sp_256_from_bin+0x46>
        r[j] |= (((sp_digit)a[i]) << s);
 80036ac:	eb02 0c03 	add.w	ip, r2, r3
 80036b0:	5cd6      	ldrb	r6, [r2, r3]
 80036b2:	fa06 f705 	lsl.w	r7, r6, r5
 80036b6:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 80036ba:	433e      	orrs	r6, r7
 80036bc:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        if (s >= 24U) {
 80036c0:	2d17      	cmp	r5, #23
 80036c2:	d9ef      	bls.n	80036a4 <sp_256_from_bin+0xc>
            s = 32U - s;
 80036c4:	f1c5 0720 	rsb	r7, r5, #32
            if (j + 1 >= size) {
 80036c8:	1c66      	adds	r6, r4, #1
 80036ca:	428e      	cmp	r6, r1
 80036cc:	da07      	bge.n	80036de <sp_256_from_bin+0x46>
            r[++j] = (sp_digit)a[i] >> s;
 80036ce:	f89c 4000 	ldrb.w	r4, [ip]
 80036d2:	40fc      	lsrs	r4, r7
 80036d4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
            s = 8U - s;
 80036d8:	3d18      	subs	r5, #24
            r[++j] = (sp_digit)a[i] >> s;
 80036da:	4634      	mov	r4, r6
 80036dc:	e7e3      	b.n	80036a6 <sp_256_from_bin+0xe>
        }
    }

    for (j++; j < size; j++) {
 80036de:	3401      	adds	r4, #1
 80036e0:	428c      	cmp	r4, r1
 80036e2:	da04      	bge.n	80036ee <sp_256_from_bin+0x56>
        r[j] = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
    for (j++; j < size; j++) {
 80036ea:	3401      	adds	r4, #1
 80036ec:	e7f8      	b.n	80036e0 <sp_256_from_bin+0x48>
    }
}
 80036ee:	bcf0      	pop	{r4, r5, r6, r7}
 80036f0:	4770      	bx	lr

080036f2 <sp_256_sub_in_place_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_sub_in_place_8(sp_digit* a,
        const sp_digit* b)
{
 80036f2:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
 80036f6:	4602      	mov	r2, r0
    sp_digit c = 0;
    __asm__ __volatile__ (
 80036f8:	2000      	movs	r0, #0
 80036fa:	4690      	mov	r8, r2
 80036fc:	f108 0820 	add.w	r8, r8, #32
 8003700:	f04f 0500 	mov.w	r5, #0
 8003704:	1a2d      	subs	r5, r5, r0
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	6854      	ldr	r4, [r2, #4]
 800370a:	680d      	ldr	r5, [r1, #0]
 800370c:	684e      	ldr	r6, [r1, #4]
 800370e:	41ab      	sbcs	r3, r5
 8003710:	41b4      	sbcs	r4, r6
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	6054      	str	r4, [r2, #4]
 8003716:	eb60 0000 	sbc.w	r0, r0, r0
 800371a:	f102 0208 	add.w	r2, r2, #8
 800371e:	f101 0108 	add.w	r1, r1, #8
 8003722:	4542      	cmp	r2, r8
 8003724:	d1ec      	bne.n	8003700 <sp_256_sub_in_place_8+0xe>
        :
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );

    return c;
}
 8003726:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 800372a:	4770      	bx	lr

0800372c <sp_256_mul_d_8>:
 * a  A single precision integer.
 * b  A single precision digit.
 */
SP_NOINLINE static void sp_256_mul_d_8(sp_digit* r, const sp_digit* a,
        sp_digit b)
{
 800372c:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    __asm__ __volatile__ (
 8003730:	f101 0920 	add.w	r9, r1, #32
 8003734:	f851 6b04 	ldr.w	r6, [r1], #4
 8003738:	fba6 5302 	umull	r5, r3, r6, r2
 800373c:	f04f 0400 	mov.w	r4, #0
 8003740:	f840 5b04 	str.w	r5, [r0], #4
 8003744:	f04f 0500 	mov.w	r5, #0
 8003748:	f851 6b04 	ldr.w	r6, [r1], #4
 800374c:	fba6 6802 	umull	r6, r8, r6, r2
 8003750:	199b      	adds	r3, r3, r6
 8003752:	eb54 0408 	adcs.w	r4, r4, r8
 8003756:	f145 0500 	adc.w	r5, r5, #0
 800375a:	f840 3b04 	str.w	r3, [r0], #4
 800375e:	4623      	mov	r3, r4
 8003760:	462c      	mov	r4, r5
 8003762:	4549      	cmp	r1, r9
 8003764:	dbee      	blt.n	8003744 <sp_256_mul_d_8+0x18>
 8003766:	6003      	str	r3, [r0, #0]
        "str	r3, [%[r]]\n\t"
        : [r] "+r" (r), [a] "+r" (a)
        : [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9"
    );
}
 8003768:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
 800376c:	4770      	bx	lr

0800376e <div_256_word_8>:
 *
 * Note that this is an approximate div. It may give an answer 1 larger.
 */
SP_NOINLINE static sp_digit div_256_word_8(sp_digit d1, sp_digit d0,
        sp_digit div)
{
 800376e:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
    sp_digit r = 0;

    __asm__ __volatile__ (
 8003772:	2300      	movs	r3, #0
 8003774:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8003778:	f106 0601 	add.w	r6, r6, #1
 800377c:	fbb0 f4f6 	udiv	r4, r0, r6
 8003780:	ea4f 4804 	mov.w	r8, r4, lsl #16
 8003784:	fba2 4508 	umull	r4, r5, r2, r8
 8003788:	1b09      	subs	r1, r1, r4
 800378a:	eb60 0005 	sbc.w	r0, r0, r5
 800378e:	fbb0 f5f6 	udiv	r5, r0, r6
 8003792:	ea4f 4405 	mov.w	r4, r5, lsl #16
 8003796:	44a0      	add	r8, r4
 8003798:	fba2 4504 	umull	r4, r5, r2, r4
 800379c:	1b09      	subs	r1, r1, r4
 800379e:	eb60 0005 	sbc.w	r0, r0, r5
 80037a2:	ea4f 4400 	mov.w	r4, r0, lsl #16
 80037a6:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 80037aa:	fbb4 f4f6 	udiv	r4, r4, r6
 80037ae:	44a0      	add	r8, r4
 80037b0:	fba2 4504 	umull	r4, r5, r2, r4
 80037b4:	1b09      	subs	r1, r1, r4
 80037b6:	eb60 0005 	sbc.w	r0, r0, r5
 80037ba:	ea4f 4400 	mov.w	r4, r0, lsl #16
 80037be:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 80037c2:	fbb4 f4f6 	udiv	r4, r4, r6
 80037c6:	44a0      	add	r8, r4
 80037c8:	fba2 4504 	umull	r4, r5, r2, r4
 80037cc:	1b09      	subs	r1, r1, r4
 80037ce:	eb60 0005 	sbc.w	r0, r0, r5
 80037d2:	fbb1 f4f2 	udiv	r4, r1, r2
 80037d6:	44a0      	add	r8, r4
 80037d8:	4643      	mov	r3, r8
        : [r] "+r" (r)
        : [d1] "r" (d1), [d0] "r" (d0), [div] "r" (div)
        : "r4", "r5", "r6", "r8"
    );
    return r;
}
 80037da:	4618      	mov	r0, r3
 80037dc:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 80037e0:	4770      	bx	lr

080037e2 <sp_256_mask_8>:
static void sp_256_mask_8(sp_digit* r, const sp_digit* a, sp_digit m)
{
#ifdef WOLFSSL_SP_SMALL
    int i;

    for (i=0; i<8; i++) {
 80037e2:	2300      	movs	r3, #0
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	dc0a      	bgt.n	80037fe <sp_256_mask_8+0x1c>
{
 80037e8:	b410      	push	{r4}
        r[i] = a[i] & m;
 80037ea:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80037ee:	4014      	ands	r4, r2
 80037f0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (i=0; i<8; i++) {
 80037f4:	3301      	adds	r3, #1
 80037f6:	2b07      	cmp	r3, #7
 80037f8:	ddf7      	ble.n	80037ea <sp_256_mask_8+0x8>
    r[4] = a[4] & m;
    r[5] = a[5] & m;
    r[6] = a[6] & m;
    r[7] = a[7] & m;
#endif
}
 80037fa:	bc10      	pop	{r4}
 80037fc:	4770      	bx	lr
 80037fe:	4770      	bx	lr

08003800 <sp_256_mont_mul_order_8>:
 * r  Result of the multiplication.
 * a  First operand of the multiplication.
 * b  Second operand of the multiplication.
 */
static void sp_256_mont_mul_order_8(sp_digit* r, const sp_digit* a, const sp_digit* b)
{
 8003800:	b510      	push	{r4, lr}
 8003802:	4604      	mov	r4, r0
    sp_256_mul_8(r, a, b);
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <sp_256_mont_mul_order_8+0x14>)
 8003806:	4798      	blx	r3
    sp_256_mont_reduce_order_8(r, p256_order, p256_mp_order);
 8003808:	4a03      	ldr	r2, [pc, #12]	; (8003818 <sp_256_mont_mul_order_8+0x18>)
 800380a:	4904      	ldr	r1, [pc, #16]	; (800381c <sp_256_mont_mul_order_8+0x1c>)
 800380c:	4620      	mov	r0, r4
 800380e:	4b04      	ldr	r3, [pc, #16]	; (8003820 <sp_256_mont_mul_order_8+0x20>)
 8003810:	4798      	blx	r3
}
 8003812:	bd10      	pop	{r4, pc}
 8003814:	08001169 	.word	0x08001169
 8003818:	ee00bc4f 	.word	0xee00bc4f
 800381c:	080050e4 	.word	0x080050e4
 8003820:	08002d89 	.word	0x08002d89

08003824 <sp_256_mont_sqr_order_8>:
 *
 * r  Result of the squaring.
 * a  Number to square.
 */
static void sp_256_mont_sqr_order_8(sp_digit* r, const sp_digit* a)
{
 8003824:	b510      	push	{r4, lr}
 8003826:	4604      	mov	r4, r0
    sp_256_sqr_8(r, a);
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <sp_256_mont_sqr_order_8+0x14>)
 800382a:	4798      	blx	r3
    sp_256_mont_reduce_order_8(r, p256_order, p256_mp_order);
 800382c:	4a03      	ldr	r2, [pc, #12]	; (800383c <sp_256_mont_sqr_order_8+0x18>)
 800382e:	4904      	ldr	r1, [pc, #16]	; (8003840 <sp_256_mont_sqr_order_8+0x1c>)
 8003830:	4620      	mov	r0, r4
 8003832:	4b04      	ldr	r3, [pc, #16]	; (8003844 <sp_256_mont_sqr_order_8+0x20>)
 8003834:	4798      	blx	r3
}
 8003836:	bd10      	pop	{r4, pc}
 8003838:	080016e1 	.word	0x080016e1
 800383c:	ee00bc4f 	.word	0xee00bc4f
 8003840:	080050e4 	.word	0x080050e4
 8003844:	08002d89 	.word	0x08002d89

08003848 <sp_256_from_mp>:
{
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	4605      	mov	r5, r0
 800384c:	460c      	mov	r4, r1
 800384e:	4616      	mov	r6, r2
    XMEMCPY(r, a->dp, sizeof(sp_digit) * a->used);
 8003850:	4611      	mov	r1, r2
 8003852:	f851 2b08 	ldr.w	r2, [r1], #8
 8003856:	0092      	lsls	r2, r2, #2
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <sp_256_from_mp+0x28>)
 800385a:	4798      	blx	r3
    for (j = a->used; j < size; j++) {
 800385c:	6833      	ldr	r3, [r6, #0]
 800385e:	42a3      	cmp	r3, r4
 8003860:	da04      	bge.n	800386c <sp_256_from_mp+0x24>
        r[j] = 0;
 8003862:	2200      	movs	r2, #0
 8003864:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (j = a->used; j < size; j++) {
 8003868:	3301      	adds	r3, #1
 800386a:	e7f8      	b.n	800385e <sp_256_from_mp+0x16>
}
 800386c:	bd70      	pop	{r4, r5, r6, pc}
 800386e:	bf00      	nop
 8003870:	08000147 	.word	0x08000147

08003874 <sp_256_mont_inv_8>:
{
 8003874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	4680      	mov	r8, r0
 800387c:	460e      	mov	r6, r1
 800387e:	4615      	mov	r5, r2
    XMEMCPY(t, a, sizeof(sp_digit) * 8);
 8003880:	2220      	movs	r2, #32
 8003882:	4628      	mov	r0, r5
 8003884:	4b19      	ldr	r3, [pc, #100]	; (80038ec <sp_256_mont_inv_8+0x78>)
 8003886:	4798      	blx	r3
    for (i=254; i>=0; i--) {
 8003888:	24fe      	movs	r4, #254	; 0xfe
 800388a:	e00f      	b.n	80038ac <sp_256_mont_inv_8+0x38>
        if (p256_mod_minus_2[i / 32] & ((sp_digit)1 << (i % 32)))
 800388c:	115b      	asrs	r3, r3, #5
 800388e:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <sp_256_mont_inv_8+0x7c>)
 8003890:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003894:	4263      	negs	r3, r4
 8003896:	f004 021f 	and.w	r2, r4, #31
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	bf58      	it	pl
 80038a0:	425a      	negpl	r2, r3
 80038a2:	2301      	movs	r3, #1
 80038a4:	4093      	lsls	r3, r2
 80038a6:	4219      	tst	r1, r3
 80038a8:	d10e      	bne.n	80038c8 <sp_256_mont_inv_8+0x54>
    for (i=254; i>=0; i--) {
 80038aa:	3c01      	subs	r4, #1
 80038ac:	2c00      	cmp	r4, #0
 80038ae:	db14      	blt.n	80038da <sp_256_mont_inv_8+0x66>
        sp_256_mont_sqr_8(t, t, p256_mod, p256_mp_mod);
 80038b0:	2301      	movs	r3, #1
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <sp_256_mont_inv_8+0x80>)
 80038b4:	4629      	mov	r1, r5
 80038b6:	4628      	mov	r0, r5
 80038b8:	4f0f      	ldr	r7, [pc, #60]	; (80038f8 <sp_256_mont_inv_8+0x84>)
 80038ba:	47b8      	blx	r7
        if (p256_mod_minus_2[i / 32] & ((sp_digit)1 << (i % 32)))
 80038bc:	4623      	mov	r3, r4
 80038be:	2c00      	cmp	r4, #0
 80038c0:	dae4      	bge.n	800388c <sp_256_mont_inv_8+0x18>
 80038c2:	f104 031f 	add.w	r3, r4, #31
 80038c6:	e7e1      	b.n	800388c <sp_256_mont_inv_8+0x18>
            sp_256_mont_mul_8(t, t, a, p256_mod, p256_mp_mod);
 80038c8:	2301      	movs	r3, #1
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <sp_256_mont_inv_8+0x80>)
 80038ce:	4632      	mov	r2, r6
 80038d0:	4629      	mov	r1, r5
 80038d2:	4628      	mov	r0, r5
 80038d4:	4f09      	ldr	r7, [pc, #36]	; (80038fc <sp_256_mont_inv_8+0x88>)
 80038d6:	47b8      	blx	r7
 80038d8:	e7e7      	b.n	80038aa <sp_256_mont_inv_8+0x36>
    XMEMCPY(r, t, sizeof(sp_digit) * 8);
 80038da:	2220      	movs	r2, #32
 80038dc:	4629      	mov	r1, r5
 80038de:	4640      	mov	r0, r8
 80038e0:	4b02      	ldr	r3, [pc, #8]	; (80038ec <sp_256_mont_inv_8+0x78>)
 80038e2:	4798      	blx	r3
}
 80038e4:	b002      	add	sp, #8
 80038e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038ea:	bf00      	nop
 80038ec:	08000147 	.word	0x08000147
 80038f0:	08005084 	.word	0x08005084
 80038f4:	08005064 	.word	0x08005064
 80038f8:	080025f5 	.word	0x080025f5
 80038fc:	08001e49 	.word	0x08001e49

08003900 <sp_256_mont_inv_order_8>:
}
#endif /* WOLFSSL_SP_NONBLOCK */

static void sp_256_mont_inv_order_8(sp_digit* r, const sp_digit* a,
        sp_digit* td)
{
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	4607      	mov	r7, r0
 8003904:	460e      	mov	r6, r1
 8003906:	4615      	mov	r5, r2
#ifdef WOLFSSL_SP_SMALL
    sp_digit* t = td;
    int i;

    XMEMCPY(t, a, sizeof(sp_digit) * 8);
 8003908:	2220      	movs	r2, #32
 800390a:	4628      	mov	r0, r5
 800390c:	4b15      	ldr	r3, [pc, #84]	; (8003964 <sp_256_mont_inv_order_8+0x64>)
 800390e:	4798      	blx	r3
    for (i=254; i>=0; i--) {
 8003910:	24fe      	movs	r4, #254	; 0xfe
 8003912:	e00f      	b.n	8003934 <sp_256_mont_inv_order_8+0x34>
        sp_256_mont_sqr_order_8(t, t);
        if ((p256_order_minus_2[i / 32] & ((sp_int_digit)1 << (i % 32))) != 0) {
 8003914:	115b      	asrs	r3, r3, #5
 8003916:	4a14      	ldr	r2, [pc, #80]	; (8003968 <sp_256_mont_inv_order_8+0x68>)
 8003918:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800391c:	4263      	negs	r3, r4
 800391e:	f004 021f 	and.w	r2, r4, #31
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	bf58      	it	pl
 8003928:	425a      	negpl	r2, r3
 800392a:	2301      	movs	r3, #1
 800392c:	4093      	lsls	r3, r2
 800392e:	4219      	tst	r1, r3
 8003930:	d10c      	bne.n	800394c <sp_256_mont_inv_order_8+0x4c>
    for (i=254; i>=0; i--) {
 8003932:	3c01      	subs	r4, #1
 8003934:	2c00      	cmp	r4, #0
 8003936:	db0f      	blt.n	8003958 <sp_256_mont_inv_order_8+0x58>
        sp_256_mont_sqr_order_8(t, t);
 8003938:	4629      	mov	r1, r5
 800393a:	4628      	mov	r0, r5
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <sp_256_mont_inv_order_8+0x6c>)
 800393e:	4798      	blx	r3
        if ((p256_order_minus_2[i / 32] & ((sp_int_digit)1 << (i % 32))) != 0) {
 8003940:	4623      	mov	r3, r4
 8003942:	2c00      	cmp	r4, #0
 8003944:	dae6      	bge.n	8003914 <sp_256_mont_inv_order_8+0x14>
 8003946:	f104 031f 	add.w	r3, r4, #31
 800394a:	e7e3      	b.n	8003914 <sp_256_mont_inv_order_8+0x14>
            sp_256_mont_mul_order_8(t, t, a);
 800394c:	4632      	mov	r2, r6
 800394e:	4629      	mov	r1, r5
 8003950:	4628      	mov	r0, r5
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <sp_256_mont_inv_order_8+0x70>)
 8003954:	4798      	blx	r3
 8003956:	e7ec      	b.n	8003932 <sp_256_mont_inv_order_8+0x32>
        }
    }
    XMEMCPY(r, t, sizeof(sp_digit) * 8U);
 8003958:	2220      	movs	r2, #32
 800395a:	4629      	mov	r1, r5
 800395c:	4638      	mov	r0, r7
 800395e:	4b01      	ldr	r3, [pc, #4]	; (8003964 <sp_256_mont_inv_order_8+0x64>)
 8003960:	4798      	blx	r3
    /* t2= a^ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632540 */
    sp_256_mont_sqr_n_order_8(t2, t2, 4);
    /* r = a^ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f */
    sp_256_mont_mul_order_8(r, t2, t3);
#endif /* WOLFSSL_SP_SMALL */
}
 8003962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003964:	08000147 	.word	0x08000147
 8003968:	08005104 	.word	0x08005104
 800396c:	08003825 	.word	0x08003825
 8003970:	08003801 	.word	0x08003801

08003974 <sp_256_proj_point_add_8>:
{
 8003974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003978:	b08f      	sub	sp, #60	; 0x3c
 800397a:	4606      	mov	r6, r0
 800397c:	460d      	mov	r5, r1
 800397e:	4690      	mov	r8, r2
 8003980:	461f      	mov	r7, r3
    sp_digit* t2 = t + 2*8;
 8003982:	3340      	adds	r3, #64	; 0x40
 8003984:	9306      	str	r3, [sp, #24]
    sp_digit* t3 = t + 4*8;
 8003986:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800398a:	9304      	str	r3, [sp, #16]
    sp_digit* t4 = t + 6*8;
 800398c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003990:	9303      	str	r3, [sp, #12]
    sp_digit* t5 = t + 8*8;
 8003992:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003996:	9307      	str	r3, [sp, #28]
    if (q == r) {
 8003998:	4282      	cmp	r2, r0
 800399a:	d02c      	beq.n	80039f6 <sp_256_proj_point_add_8+0x82>
    (void)sp_256_sub_8(t1, p256_mod, q->y);
 800399c:	f108 0340 	add.w	r3, r8, #64	; 0x40
 80039a0:	461c      	mov	r4, r3
 80039a2:	9308      	str	r3, [sp, #32]
 80039a4:	461a      	mov	r2, r3
 80039a6:	4992      	ldr	r1, [pc, #584]	; (8003bf0 <sp_256_proj_point_add_8+0x27c>)
 80039a8:	4638      	mov	r0, r7
 80039aa:	4b92      	ldr	r3, [pc, #584]	; (8003bf4 <sp_256_proj_point_add_8+0x280>)
 80039ac:	4798      	blx	r3
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 80039ae:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80039b2:	4641      	mov	r1, r8
 80039b4:	4628      	mov	r0, r5
 80039b6:	f8df a250 	ldr.w	sl, [pc, #592]	; 8003c08 <sp_256_proj_point_add_8+0x294>
 80039ba:	47d0      	blx	sl
 80039bc:	4681      	mov	r9, r0
 80039be:	f108 0380 	add.w	r3, r8, #128	; 0x80
 80039c2:	9305      	str	r3, [sp, #20]
 80039c4:	4619      	mov	r1, r3
 80039c6:	f105 0080 	add.w	r0, r5, #128	; 0x80
 80039ca:	47d0      	blx	sl
 80039cc:	ea09 0900 	and.w	r9, r9, r0
        (sp_256_cmp_equal_8(p->y, q->y) | sp_256_cmp_equal_8(p->y, t1))) != 0) {
 80039d0:	f105 0b40 	add.w	fp, r5, #64	; 0x40
 80039d4:	4621      	mov	r1, r4
 80039d6:	4658      	mov	r0, fp
 80039d8:	47d0      	blx	sl
 80039da:	4604      	mov	r4, r0
 80039dc:	4639      	mov	r1, r7
 80039de:	4658      	mov	r0, fp
 80039e0:	47d0      	blx	sl
 80039e2:	4304      	orrs	r4, r0
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 80039e4:	ea19 0904 	ands.w	r9, r9, r4
 80039e8:	d008      	beq.n	80039fc <sp_256_proj_point_add_8+0x88>
        sp_256_proj_point_dbl_8(r, p, t);
 80039ea:	463a      	mov	r2, r7
 80039ec:	4629      	mov	r1, r5
 80039ee:	4630      	mov	r0, r6
 80039f0:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <sp_256_proj_point_add_8+0x284>)
 80039f2:	4798      	blx	r3
 80039f4:	e0f9      	b.n	8003bea <sp_256_proj_point_add_8+0x276>
        p = q;
 80039f6:	4615      	mov	r5, r2
        q = a;
 80039f8:	4688      	mov	r8, r1
 80039fa:	e7cf      	b.n	800399c <sp_256_proj_point_add_8+0x28>
        rp[0] = r;
 80039fc:	960a      	str	r6, [sp, #40]	; 0x28
        rp[1] = (sp_point_256*)t; /*lint !e9087 !e740*/
 80039fe:	970b      	str	r7, [sp, #44]	; 0x2c
        XMEMSET(rp[1], 0, sizeof(sp_point_256));
 8003a00:	22c4      	movs	r2, #196	; 0xc4
 8003a02:	2100      	movs	r1, #0
 8003a04:	4638      	mov	r0, r7
 8003a06:	4b7d      	ldr	r3, [pc, #500]	; (8003bfc <sp_256_proj_point_add_8+0x288>)
 8003a08:	4798      	blx	r3
        x = rp[p->infinity | q->infinity]->x;
 8003a0a:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8003a0e:	f8d8 20c0 	ldr.w	r2, [r8, #192]	; 0xc0
 8003a12:	4313      	orrs	r3, r2
 8003a14:	aa0e      	add	r2, sp, #56	; 0x38
 8003a16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003a1a:	f853 ac10 	ldr.w	sl, [r3, #-16]
        y = rp[p->infinity | q->infinity]->y;
 8003a1e:	f10a 0440 	add.w	r4, sl, #64	; 0x40
        z = rp[p->infinity | q->infinity]->z;
 8003a22:	f10a 0b80 	add.w	fp, sl, #128	; 0x80
        ap[0] = p;
 8003a26:	950c      	str	r5, [sp, #48]	; 0x30
        ap[1] = q;
 8003a28:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
        for (i=0; i<8; i++) {
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	e00b      	b.n	8003a48 <sp_256_proj_point_add_8+0xd4>
            r->x[i] = ap[p->infinity]->x[i];
 8003a30:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8003a34:	a90e      	add	r1, sp, #56	; 0x38
 8003a36:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003a3a:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8003a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a42:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 8003a46:	3301      	adds	r3, #1
 8003a48:	2b07      	cmp	r3, #7
 8003a4a:	ddf1      	ble.n	8003a30 <sp_256_proj_point_add_8+0xbc>
        for (i=0; i<8; i++) {
 8003a4c:	464b      	mov	r3, r9
 8003a4e:	e00d      	b.n	8003a6c <sp_256_proj_point_add_8+0xf8>
            r->y[i] = ap[p->infinity]->y[i];
 8003a50:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8003a54:	a90e      	add	r1, sp, #56	; 0x38
 8003a56:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003a5a:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8003a5e:	f103 0210 	add.w	r2, r3, #16
 8003a62:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003a66:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
        for (i=0; i<8; i++) {
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	2b07      	cmp	r3, #7
 8003a6e:	ddef      	ble.n	8003a50 <sp_256_proj_point_add_8+0xdc>
 8003a70:	e00e      	b.n	8003a90 <sp_256_proj_point_add_8+0x11c>
            r->z[i] = ap[p->infinity]->z[i];
 8003a72:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8003a76:	aa0e      	add	r2, sp, #56	; 0x38
 8003a78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003a7c:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8003a80:	f109 0320 	add.w	r3, r9, #32
 8003a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a88:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 8003a8c:	f109 0901 	add.w	r9, r9, #1
 8003a90:	f1b9 0f07 	cmp.w	r9, #7
 8003a94:	dded      	ble.n	8003a72 <sp_256_proj_point_add_8+0xfe>
        r->infinity = ap[p->infinity]->infinity;
 8003a96:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8003a9a:	aa0e      	add	r2, sp, #56	; 0x38
 8003a9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003aa0:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8003aa4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003aa8:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
        sp_256_mont_sqr_8(t1, q->z, p256_mod, p256_mp_mod);
 8003aac:	4d50      	ldr	r5, [pc, #320]	; (8003bf0 <sp_256_proj_point_add_8+0x27c>)
 8003aae:	2301      	movs	r3, #1
 8003ab0:	462a      	mov	r2, r5
 8003ab2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	4638      	mov	r0, r7
 8003aba:	4e51      	ldr	r6, [pc, #324]	; (8003c00 <sp_256_proj_point_add_8+0x28c>)
 8003abc:	47b0      	blx	r6
        sp_256_mont_mul_8(t3, t1, q->z, p256_mod, p256_mp_mod);
 8003abe:	2301      	movs	r3, #1
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	462b      	mov	r3, r5
 8003ac4:	f8cd 8014 	str.w	r8, [sp, #20]
 8003ac8:	4642      	mov	r2, r8
 8003aca:	4639      	mov	r1, r7
 8003acc:	9804      	ldr	r0, [sp, #16]
 8003ace:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8003c0c <sp_256_proj_point_add_8+0x298>
 8003ad2:	47c0      	blx	r8
        sp_256_mont_mul_8(t1, t1, x, p256_mod, p256_mp_mod);
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	462b      	mov	r3, r5
 8003ada:	4652      	mov	r2, sl
 8003adc:	4639      	mov	r1, r7
 8003ade:	4638      	mov	r0, r7
 8003ae0:	47c0      	blx	r8
        sp_256_mont_sqr_8(t2, z, p256_mod, p256_mp_mod);
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	462a      	mov	r2, r5
 8003ae6:	4659      	mov	r1, fp
 8003ae8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8003aec:	4648      	mov	r0, r9
 8003aee:	47b0      	blx	r6
        sp_256_mont_mul_8(t4, t2, z, p256_mod, p256_mp_mod);
 8003af0:	2301      	movs	r3, #1
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	462b      	mov	r3, r5
 8003af6:	465a      	mov	r2, fp
 8003af8:	4649      	mov	r1, r9
 8003afa:	9e03      	ldr	r6, [sp, #12]
 8003afc:	4630      	mov	r0, r6
 8003afe:	47c0      	blx	r8
        sp_256_mont_mul_8(t2, t2, q->x, p256_mod, p256_mp_mod);
 8003b00:	2301      	movs	r3, #1
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	462b      	mov	r3, r5
 8003b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b08:	4649      	mov	r1, r9
 8003b0a:	4648      	mov	r0, r9
 8003b0c:	47c0      	blx	r8
        sp_256_mont_mul_8(t3, t3, y, p256_mod, p256_mp_mod);
 8003b0e:	2301      	movs	r3, #1
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	462b      	mov	r3, r5
 8003b14:	4622      	mov	r2, r4
 8003b16:	9904      	ldr	r1, [sp, #16]
 8003b18:	4608      	mov	r0, r1
 8003b1a:	47c0      	blx	r8
        sp_256_mont_mul_8(t4, t4, q->y, p256_mod, p256_mp_mod);
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	462b      	mov	r3, r5
 8003b22:	9a08      	ldr	r2, [sp, #32]
 8003b24:	4631      	mov	r1, r6
 8003b26:	9603      	str	r6, [sp, #12]
 8003b28:	4630      	mov	r0, r6
 8003b2a:	47c0      	blx	r8
        sp_256_mont_sub_8(t2, t2, t1, p256_mod);
 8003b2c:	462b      	mov	r3, r5
 8003b2e:	463a      	mov	r2, r7
 8003b30:	4649      	mov	r1, r9
 8003b32:	464e      	mov	r6, r9
 8003b34:	4648      	mov	r0, r9
 8003b36:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8003c10 <sp_256_proj_point_add_8+0x29c>
 8003b3a:	47c8      	blx	r9
        sp_256_mont_sub_8(t4, t4, t3, p256_mod);
 8003b3c:	462b      	mov	r3, r5
 8003b3e:	9a04      	ldr	r2, [sp, #16]
 8003b40:	9903      	ldr	r1, [sp, #12]
 8003b42:	4608      	mov	r0, r1
 8003b44:	47c8      	blx	r9
        sp_256_mont_mul_8(z, z, q->z, p256_mod, p256_mp_mod);
 8003b46:	2301      	movs	r3, #1
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	462b      	mov	r3, r5
 8003b4c:	9a05      	ldr	r2, [sp, #20]
 8003b4e:	4659      	mov	r1, fp
 8003b50:	4658      	mov	r0, fp
 8003b52:	47c0      	blx	r8
        sp_256_mont_mul_8(z, z, t2, p256_mod, p256_mp_mod);
 8003b54:	2301      	movs	r3, #1
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	462b      	mov	r3, r5
 8003b5a:	9606      	str	r6, [sp, #24]
 8003b5c:	4632      	mov	r2, r6
 8003b5e:	4659      	mov	r1, fp
 8003b60:	4658      	mov	r0, fp
 8003b62:	47c0      	blx	r8
        sp_256_mont_sqr_8(x, t4, p256_mod, p256_mp_mod);
 8003b64:	2301      	movs	r3, #1
 8003b66:	462a      	mov	r2, r5
 8003b68:	9903      	ldr	r1, [sp, #12]
 8003b6a:	4650      	mov	r0, sl
 8003b6c:	4e24      	ldr	r6, [pc, #144]	; (8003c00 <sp_256_proj_point_add_8+0x28c>)
 8003b6e:	47b0      	blx	r6
        sp_256_mont_sqr_8(t5, t2, p256_mod, p256_mp_mod);
 8003b70:	2301      	movs	r3, #1
 8003b72:	462a      	mov	r2, r5
 8003b74:	f8dd b018 	ldr.w	fp, [sp, #24]
 8003b78:	4659      	mov	r1, fp
 8003b7a:	9807      	ldr	r0, [sp, #28]
 8003b7c:	47b0      	blx	r6
        sp_256_mont_mul_8(y, t1, t5, p256_mod, p256_mp_mod);
 8003b7e:	2301      	movs	r3, #1
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	462b      	mov	r3, r5
 8003b84:	9e07      	ldr	r6, [sp, #28]
 8003b86:	4632      	mov	r2, r6
 8003b88:	4639      	mov	r1, r7
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	47c0      	blx	r8
        sp_256_mont_mul_8(t5, t5, t2, p256_mod, p256_mp_mod);
 8003b8e:	2301      	movs	r3, #1
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	462b      	mov	r3, r5
 8003b94:	465a      	mov	r2, fp
 8003b96:	4631      	mov	r1, r6
 8003b98:	4630      	mov	r0, r6
 8003b9a:	47c0      	blx	r8
        sp_256_mont_sub_8(x, x, t5, p256_mod);
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	4632      	mov	r2, r6
 8003ba0:	4651      	mov	r1, sl
 8003ba2:	4650      	mov	r0, sl
 8003ba4:	47c8      	blx	r9
        sp_256_mont_dbl_8(t1, y, p256_mod);
 8003ba6:	462a      	mov	r2, r5
 8003ba8:	4621      	mov	r1, r4
 8003baa:	4638      	mov	r0, r7
 8003bac:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <sp_256_proj_point_add_8+0x290>)
 8003bae:	4798      	blx	r3
        sp_256_mont_sub_8(x, x, t1, p256_mod);
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	463a      	mov	r2, r7
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	4650      	mov	r0, sl
 8003bb8:	47c8      	blx	r9
        sp_256_mont_sub_8(y, y, x, p256_mod);
 8003bba:	462b      	mov	r3, r5
 8003bbc:	4652      	mov	r2, sl
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	47c8      	blx	r9
        sp_256_mont_mul_8(y, y, t4, p256_mod, p256_mp_mod);
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	462b      	mov	r3, r5
 8003bca:	9a03      	ldr	r2, [sp, #12]
 8003bcc:	4621      	mov	r1, r4
 8003bce:	4620      	mov	r0, r4
 8003bd0:	47c0      	blx	r8
        sp_256_mont_mul_8(t5, t5, t3, p256_mod, p256_mp_mod);
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	462b      	mov	r3, r5
 8003bd8:	9a04      	ldr	r2, [sp, #16]
 8003bda:	4631      	mov	r1, r6
 8003bdc:	4630      	mov	r0, r6
 8003bde:	47c0      	blx	r8
        sp_256_mont_sub_8(y, y, t5, p256_mod);
 8003be0:	462b      	mov	r3, r5
 8003be2:	4632      	mov	r2, r6
 8003be4:	4621      	mov	r1, r4
 8003be6:	4620      	mov	r0, r4
 8003be8:	47c8      	blx	r9
}
 8003bea:	b00f      	add	sp, #60	; 0x3c
 8003bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf0:	08005064 	.word	0x08005064
 8003bf4:	08001b2d 	.word	0x08001b2d
 8003bf8:	08003239 	.word	0x08003239
 8003bfc:	08000125 	.word	0x08000125
 8003c00:	080025f5 	.word	0x080025f5
 8003c04:	08002f25 	.word	0x08002f25
 8003c08:	08003379 	.word	0x08003379
 8003c0c:	08001e49 	.word	0x08001e49
 8003c10:	0800309b 	.word	0x0800309b

08003c14 <sp_256_add_points_8>:
 * p2   Second point to add.
 * tmp  Temporary storage for intermediate numbers.
 */
static void sp_256_add_points_8(sp_point_256* p1, const sp_point_256* p2,
    sp_digit* tmp)
{
 8003c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c16:	4604      	mov	r4, r0
 8003c18:	460d      	mov	r5, r1
 8003c1a:	4616      	mov	r6, r2

        sp_256_proj_point_add_8(p1, p1, p2, tmp);
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	460a      	mov	r2, r1
 8003c20:	4601      	mov	r1, r0
 8003c22:	4f13      	ldr	r7, [pc, #76]	; (8003c70 <sp_256_add_points_8+0x5c>)
 8003c24:	47b8      	blx	r7
    if (sp_256_iszero_8(p1->z)) {
 8003c26:	f104 0780 	add.w	r7, r4, #128	; 0x80
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <sp_256_add_points_8+0x60>)
 8003c2e:	4798      	blx	r3
 8003c30:	b1b0      	cbz	r0, 8003c60 <sp_256_add_points_8+0x4c>
        if (sp_256_iszero_8(p1->x) && sp_256_iszero_8(p1->y)) {
 8003c32:	4620      	mov	r0, r4
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <sp_256_add_points_8+0x60>)
 8003c36:	4798      	blx	r3
 8003c38:	b120      	cbz	r0, 8003c44 <sp_256_add_points_8+0x30>
 8003c3a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <sp_256_add_points_8+0x60>)
 8003c40:	4798      	blx	r3
 8003c42:	b970      	cbnz	r0, 8003c62 <sp_256_add_points_8+0x4e>
                sp_256_proj_point_dbl_8(p1, p2, tmp);
        }
        else {
            /* Y ordinate is not used from here - don't set. */
            p1->x[0] = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	6023      	str	r3, [r4, #0]
            p1->x[1] = 0;
 8003c48:	6063      	str	r3, [r4, #4]
            p1->x[2] = 0;
 8003c4a:	60a3      	str	r3, [r4, #8]
            p1->x[3] = 0;
 8003c4c:	60e3      	str	r3, [r4, #12]
            p1->x[4] = 0;
 8003c4e:	6123      	str	r3, [r4, #16]
            p1->x[5] = 0;
 8003c50:	6163      	str	r3, [r4, #20]
            p1->x[6] = 0;
 8003c52:	61a3      	str	r3, [r4, #24]
            p1->x[7] = 0;
 8003c54:	61e3      	str	r3, [r4, #28]
            XMEMCPY(p1->z, p256_norm_mod, sizeof(p256_norm_mod));
 8003c56:	2220      	movs	r2, #32
 8003c58:	4907      	ldr	r1, [pc, #28]	; (8003c78 <sp_256_add_points_8+0x64>)
 8003c5a:	4638      	mov	r0, r7
 8003c5c:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <sp_256_add_points_8+0x68>)
 8003c5e:	4798      	blx	r3
        }
    }
}
 8003c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                sp_256_proj_point_dbl_8(p1, p2, tmp);
 8003c62:	4632      	mov	r2, r6
 8003c64:	4629      	mov	r1, r5
 8003c66:	4620      	mov	r0, r4
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <sp_256_add_points_8+0x6c>)
 8003c6a:	4798      	blx	r3
 8003c6c:	e7f8      	b.n	8003c60 <sp_256_add_points_8+0x4c>
 8003c6e:	bf00      	nop
 8003c70:	08003975 	.word	0x08003975
 8003c74:	08003673 	.word	0x08003673
 8003c78:	080050a4 	.word	0x080050a4
 8003c7c:	08000147 	.word	0x08000147
 8003c80:	08003239 	.word	0x08003239

08003c84 <sp_256_map_8>:
{
 8003c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	460f      	mov	r7, r1
 8003c8e:	4615      	mov	r5, r2
    sp_digit* t2 = t + 2*8;
 8003c90:	f102 0840 	add.w	r8, r2, #64	; 0x40
    sp_256_mont_inv_8(t1, p->z, t + 2*8);
 8003c94:	4642      	mov	r2, r8
 8003c96:	3180      	adds	r1, #128	; 0x80
 8003c98:	4628      	mov	r0, r5
 8003c9a:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <sp_256_map_8+0xec>)
 8003c9c:	4798      	blx	r3
    sp_256_mont_sqr_8(t2, t1, p256_mod, p256_mp_mod);
 8003c9e:	4e35      	ldr	r6, [pc, #212]	; (8003d74 <sp_256_map_8+0xf0>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	4632      	mov	r2, r6
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	4640      	mov	r0, r8
 8003ca8:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8003d8c <sp_256_map_8+0x108>
 8003cac:	47c8      	blx	r9
    sp_256_mont_mul_8(t1, t2, t1, p256_mod, p256_mp_mod);
 8003cae:	f04f 0901 	mov.w	r9, #1
 8003cb2:	f8cd 9000 	str.w	r9, [sp]
 8003cb6:	4633      	mov	r3, r6
 8003cb8:	462a      	mov	r2, r5
 8003cba:	4641      	mov	r1, r8
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003d88 <sp_256_map_8+0x104>
 8003cc2:	47d0      	blx	sl
    sp_256_mont_mul_8(r->x, p->x, t2, p256_mod, p256_mp_mod);
 8003cc4:	f8cd 9000 	str.w	r9, [sp]
 8003cc8:	4633      	mov	r3, r6
 8003cca:	4642      	mov	r2, r8
 8003ccc:	4639      	mov	r1, r7
 8003cce:	4620      	mov	r0, r4
 8003cd0:	47d0      	blx	sl
    XMEMSET(r->x + 8, 0, sizeof(r->x) / 2U);
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	18a0      	adds	r0, r4, r2
 8003cd8:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <sp_256_map_8+0xf4>)
 8003cda:	4798      	blx	r3
    sp_256_mont_reduce_8(r->x, p256_mod, p256_mp_mod);
 8003cdc:	464a      	mov	r2, r9
 8003cde:	4631      	mov	r1, r6
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <sp_256_map_8+0xf8>)
 8003ce4:	4798      	blx	r3
    n = sp_256_cmp_8(r->x, p256_mod);
 8003ce6:	4631      	mov	r1, r6
 8003ce8:	4620      	mov	r0, r4
 8003cea:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <sp_256_map_8+0xfc>)
 8003cec:	4798      	blx	r3
    sp_256_cond_sub_8(r->x, r->x, p256_mod, 0 - ((n >= 0) ?
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	db39      	blt.n	8003d66 <sp_256_map_8+0xe2>
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cf6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8003d74 <sp_256_map_8+0xf0>
 8003cfa:	4642      	mov	r2, r8
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	4620      	mov	r0, r4
 8003d00:	4e20      	ldr	r6, [pc, #128]	; (8003d84 <sp_256_map_8+0x100>)
 8003d02:	47b0      	blx	r6
    sp_256_mont_mul_8(r->y, p->y, t1, p256_mod, p256_mp_mod);
 8003d04:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8003d08:	f04f 0901 	mov.w	r9, #1
 8003d0c:	f8cd 9000 	str.w	r9, [sp]
 8003d10:	4643      	mov	r3, r8
 8003d12:	462a      	mov	r2, r5
 8003d14:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003d18:	4630      	mov	r0, r6
 8003d1a:	4d1b      	ldr	r5, [pc, #108]	; (8003d88 <sp_256_map_8+0x104>)
 8003d1c:	47a8      	blx	r5
    XMEMSET(r->y + 8, 0, sizeof(r->y) / 2U);
 8003d1e:	2220      	movs	r2, #32
 8003d20:	2100      	movs	r1, #0
 8003d22:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8003d26:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <sp_256_map_8+0xf4>)
 8003d28:	4798      	blx	r3
    sp_256_mont_reduce_8(r->y, p256_mod, p256_mp_mod);
 8003d2a:	464a      	mov	r2, r9
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	4630      	mov	r0, r6
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <sp_256_map_8+0xf8>)
 8003d32:	4798      	blx	r3
    n = sp_256_cmp_8(r->y, p256_mod);
 8003d34:	4641      	mov	r1, r8
 8003d36:	4630      	mov	r0, r6
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <sp_256_map_8+0xfc>)
 8003d3a:	4798      	blx	r3
    sp_256_cond_sub_8(r->y, r->y, p256_mod, 0 - ((n >= 0) ?
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	db14      	blt.n	8003d6a <sp_256_map_8+0xe6>
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d44:	4a0b      	ldr	r2, [pc, #44]	; (8003d74 <sp_256_map_8+0xf0>)
 8003d46:	4631      	mov	r1, r6
 8003d48:	4630      	mov	r0, r6
 8003d4a:	4d0e      	ldr	r5, [pc, #56]	; (8003d84 <sp_256_map_8+0x100>)
 8003d4c:	47a8      	blx	r5
    XMEMSET(r->z, 0, sizeof(r->z));
 8003d4e:	2240      	movs	r2, #64	; 0x40
 8003d50:	2100      	movs	r1, #0
 8003d52:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <sp_256_map_8+0xf4>)
 8003d58:	4798      	blx	r3
    r->z[0] = 1;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8003d60:	b002      	add	sp, #8
 8003d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sp_256_cond_sub_8(r->x, r->x, p256_mod, 0 - ((n >= 0) ?
 8003d66:	2300      	movs	r3, #0
 8003d68:	e7c5      	b.n	8003cf6 <sp_256_map_8+0x72>
    sp_256_cond_sub_8(r->y, r->y, p256_mod, 0 - ((n >= 0) ?
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e7ea      	b.n	8003d44 <sp_256_map_8+0xc0>
 8003d6e:	bf00      	nop
 8003d70:	08003875 	.word	0x08003875
 8003d74:	08005064 	.word	0x08005064
 8003d78:	08000125 	.word	0x08000125
 8003d7c:	08002c7d 	.word	0x08002c7d
 8003d80:	08002bed 	.word	0x08002bed
 8003d84:	08002c43 	.word	0x08002c43
 8003d88:	08001e49 	.word	0x08001e49
 8003d8c:	080025f5 	.word	0x080025f5

08003d90 <sp_256_ecc_mulmod_fast_8>:
{
 8003d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d94:	f6ad 7d14 	subw	sp, sp, #3860	; 0xf14
 8003d98:	9001      	str	r0, [sp, #4]
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	4692      	mov	sl, r2
 8003d9e:	469b      	mov	fp, r3
 8003da0:	f8dd 9f38 	ldr.w	r9, [sp, #3896]	; 0xf38
        XMEMSET(&t[0], 0, sizeof(t[0]));
 8003da4:	22c4      	movs	r2, #196	; 0xc4
 8003da6:	2100      	movs	r1, #0
 8003da8:	a883      	add	r0, sp, #524	; 0x20c
 8003daa:	4b93      	ldr	r3, [pc, #588]	; (8003ff8 <sp_256_ecc_mulmod_fast_8+0x268>)
 8003dac:	4798      	blx	r3
        t[0].infinity = 1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	93b3      	str	r3, [sp, #716]	; 0x2cc
        (void)sp_256_mod_mul_norm_8(t[1].x, g->x, p256_mod);
 8003db2:	4e92      	ldr	r6, [pc, #584]	; (8003ffc <sp_256_ecc_mulmod_fast_8+0x26c>)
 8003db4:	4632      	mov	r2, r6
 8003db6:	4621      	mov	r1, r4
 8003db8:	a8b4      	add	r0, sp, #720	; 0x2d0
 8003dba:	4d91      	ldr	r5, [pc, #580]	; (8004000 <sp_256_ecc_mulmod_fast_8+0x270>)
 8003dbc:	47a8      	blx	r5
        (void)sp_256_mod_mul_norm_8(t[1].y, g->y, p256_mod);
 8003dbe:	4632      	mov	r2, r6
 8003dc0:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003dc4:	a8c4      	add	r0, sp, #784	; 0x310
 8003dc6:	47a8      	blx	r5
        (void)sp_256_mod_mul_norm_8(t[1].z, g->z, p256_mod);
 8003dc8:	4632      	mov	r2, r6
 8003dca:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8003dce:	a8d4      	add	r0, sp, #848	; 0x350
 8003dd0:	47a8      	blx	r5
        t[1].infinity = 0;
 8003dd2:	2400      	movs	r4, #0
 8003dd4:	94e4      	str	r4, [sp, #912]	; 0x390
        sp_256_proj_point_dbl_8(&t[ 2], &t[ 1], tmp);
 8003dd6:	aa33      	add	r2, sp, #204	; 0xcc
 8003dd8:	a9b4      	add	r1, sp, #720	; 0x2d0
 8003dda:	a8e5      	add	r0, sp, #916	; 0x394
 8003ddc:	4e89      	ldr	r6, [pc, #548]	; (8004004 <sp_256_ecc_mulmod_fast_8+0x274>)
 8003dde:	47b0      	blx	r6
        t[ 2].infinity = 0;
 8003de0:	f8cd 4454 	str.w	r4, [sp, #1108]	; 0x454
        sp_256_proj_point_add_8(&t[ 3], &t[ 2], &t[ 1], tmp);
 8003de4:	ab33      	add	r3, sp, #204	; 0xcc
 8003de6:	aab4      	add	r2, sp, #720	; 0x2d0
 8003de8:	a9e5      	add	r1, sp, #916	; 0x394
 8003dea:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
 8003dee:	4d86      	ldr	r5, [pc, #536]	; (8004008 <sp_256_ecc_mulmod_fast_8+0x278>)
 8003df0:	47a8      	blx	r5
        t[ 3].infinity = 0;
 8003df2:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
        sp_256_proj_point_dbl_8(&t[ 4], &t[ 2], tmp);
 8003df6:	aa33      	add	r2, sp, #204	; 0xcc
 8003df8:	a9e5      	add	r1, sp, #916	; 0x394
 8003dfa:	f20d 501c 	addw	r0, sp, #1308	; 0x51c
 8003dfe:	47b0      	blx	r6
        t[ 4].infinity = 0;
 8003e00:	f8cd 45dc 	str.w	r4, [sp, #1500]	; 0x5dc
        sp_256_proj_point_add_8(&t[ 5], &t[ 3], &t[ 2], tmp);
 8003e04:	ab33      	add	r3, sp, #204	; 0xcc
 8003e06:	aae5      	add	r2, sp, #916	; 0x394
 8003e08:	f50d 618b 	add.w	r1, sp, #1112	; 0x458
 8003e0c:	f50d 60bc 	add.w	r0, sp, #1504	; 0x5e0
 8003e10:	47a8      	blx	r5
        t[ 5].infinity = 0;
 8003e12:	f8cd 46a0 	str.w	r4, [sp, #1696]	; 0x6a0
        sp_256_proj_point_dbl_8(&t[ 6], &t[ 3], tmp);
 8003e16:	aa33      	add	r2, sp, #204	; 0xcc
 8003e18:	f50d 618b 	add.w	r1, sp, #1112	; 0x458
 8003e1c:	f20d 60a4 	addw	r0, sp, #1700	; 0x6a4
 8003e20:	47b0      	blx	r6
        t[ 6].infinity = 0;
 8003e22:	f8cd 4764 	str.w	r4, [sp, #1892]	; 0x764
        sp_256_proj_point_add_8(&t[ 7], &t[ 4], &t[ 3], tmp);
 8003e26:	ab33      	add	r3, sp, #204	; 0xcc
 8003e28:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
 8003e2c:	f20d 511c 	addw	r1, sp, #1308	; 0x51c
 8003e30:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
 8003e34:	47a8      	blx	r5
        t[ 7].infinity = 0;
 8003e36:	f8cd 4828 	str.w	r4, [sp, #2088]	; 0x828
        sp_256_proj_point_dbl_8(&t[ 8], &t[ 4], tmp);
 8003e3a:	aa33      	add	r2, sp, #204	; 0xcc
 8003e3c:	f20d 511c 	addw	r1, sp, #1308	; 0x51c
 8003e40:	f60d 002c 	addw	r0, sp, #2092	; 0x82c
 8003e44:	47b0      	blx	r6
        t[ 8].infinity = 0;
 8003e46:	f8cd 48ec 	str.w	r4, [sp, #2284]	; 0x8ec
        sp_256_proj_point_add_8(&t[ 9], &t[ 5], &t[ 4], tmp);
 8003e4a:	ab33      	add	r3, sp, #204	; 0xcc
 8003e4c:	f20d 521c 	addw	r2, sp, #1308	; 0x51c
 8003e50:	f50d 61bc 	add.w	r1, sp, #1504	; 0x5e0
 8003e54:	f50d 600f 	add.w	r0, sp, #2288	; 0x8f0
 8003e58:	47a8      	blx	r5
        t[ 9].infinity = 0;
 8003e5a:	f8cd 49b0 	str.w	r4, [sp, #2480]	; 0x9b0
        sp_256_proj_point_dbl_8(&t[10], &t[ 5], tmp);
 8003e5e:	aa33      	add	r2, sp, #204	; 0xcc
 8003e60:	f50d 61bc 	add.w	r1, sp, #1504	; 0x5e0
 8003e64:	f60d 10b4 	addw	r0, sp, #2484	; 0x9b4
 8003e68:	47b0      	blx	r6
        t[10].infinity = 0;
 8003e6a:	f8cd 4a74 	str.w	r4, [sp, #2676]	; 0xa74
        sp_256_proj_point_add_8(&t[11], &t[ 6], &t[ 5], tmp);
 8003e6e:	ab33      	add	r3, sp, #204	; 0xcc
 8003e70:	f50d 62bc 	add.w	r2, sp, #1504	; 0x5e0
 8003e74:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
 8003e78:	f60d 2078 	addw	r0, sp, #2680	; 0xa78
 8003e7c:	47a8      	blx	r5
        t[11].infinity = 0;
 8003e7e:	f8cd 4b38 	str.w	r4, [sp, #2872]	; 0xb38
        sp_256_proj_point_dbl_8(&t[12], &t[ 6], tmp);
 8003e82:	aa33      	add	r2, sp, #204	; 0xcc
 8003e84:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
 8003e88:	f60d 303c 	addw	r0, sp, #2876	; 0xb3c
 8003e8c:	47b0      	blx	r6
        t[12].infinity = 0;
 8003e8e:	f8cd 4bfc 	str.w	r4, [sp, #3068]	; 0xbfc
        sp_256_proj_point_add_8(&t[13], &t[ 7], &t[ 6], tmp);
 8003e92:	ab33      	add	r3, sp, #204	; 0xcc
 8003e94:	f20d 62a4 	addw	r2, sp, #1700	; 0x6a4
 8003e98:	f50d 61ed 	add.w	r1, sp, #1896	; 0x768
 8003e9c:	f50d 6040 	add.w	r0, sp, #3072	; 0xc00
 8003ea0:	47a8      	blx	r5
        t[13].infinity = 0;
 8003ea2:	f8cd 4cc0 	str.w	r4, [sp, #3264]	; 0xcc0
        sp_256_proj_point_dbl_8(&t[14], &t[ 7], tmp);
 8003ea6:	aa33      	add	r2, sp, #204	; 0xcc
 8003ea8:	f50d 61ed 	add.w	r1, sp, #1896	; 0x768
 8003eac:	f60d 40c4 	addw	r0, sp, #3268	; 0xcc4
 8003eb0:	47b0      	blx	r6
        t[14].infinity = 0;
 8003eb2:	f8cd 4d84 	str.w	r4, [sp, #3460]	; 0xd84
        sp_256_proj_point_add_8(&t[15], &t[ 8], &t[ 7], tmp);
 8003eb6:	ab33      	add	r3, sp, #204	; 0xcc
 8003eb8:	f50d 62ed 	add.w	r2, sp, #1896	; 0x768
 8003ebc:	f60d 012c 	addw	r1, sp, #2092	; 0x82c
 8003ec0:	f60d 5088 	addw	r0, sp, #3464	; 0xd88
 8003ec4:	47a8      	blx	r5
        t[15].infinity = 0;
 8003ec6:	f8cd 4e48 	str.w	r4, [sp, #3656]	; 0xe48
        n = k[i+1] << 0;
 8003eca:	f8da 701c 	ldr.w	r7, [sl, #28]
        y = (int)(n >> 28);
 8003ece:	0f3c      	lsrs	r4, r7, #28
        if (ct) {
 8003ed0:	f1b9 0f00 	cmp.w	r9, #0
 8003ed4:	d00f      	beq.n	8003ef6 <sp_256_ecc_mulmod_fast_8+0x166>
            sp_256_get_point_16_8(rt, t, y);
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	a983      	add	r1, sp, #524	; 0x20c
 8003eda:	f60d 604c 	addw	r0, sp, #3660	; 0xe4c
 8003ede:	4b4b      	ldr	r3, [pc, #300]	; (800400c <sp_256_ecc_mulmod_fast_8+0x27c>)
 8003ee0:	4798      	blx	r3
            rt->infinity = !y;
 8003ee2:	fab4 f484 	clz	r4, r4
 8003ee6:	0964      	lsrs	r4, r4, #5
 8003ee8:	f8cd 4f0c 	str.w	r4, [sp, #3852]	; 0xf0c
        n <<= 4;
 8003eec:	013f      	lsls	r7, r7, #4
        c = 28;
 8003eee:	261c      	movs	r6, #28
        i = 6;
 8003ef0:	f04f 0806 	mov.w	r8, #6
        for (; i>=0 || c>=4; ) {
 8003ef4:	e012      	b.n	8003f1c <sp_256_ecc_mulmod_fast_8+0x18c>
            XMEMCPY(rt, &t[y], sizeof(sp_point_256));
 8003ef6:	22c4      	movs	r2, #196	; 0xc4
 8003ef8:	ab83      	add	r3, sp, #524	; 0x20c
 8003efa:	fb02 3104 	mla	r1, r2, r4, r3
 8003efe:	f60d 604c 	addw	r0, sp, #3660	; 0xe4c
 8003f02:	4b43      	ldr	r3, [pc, #268]	; (8004010 <sp_256_ecc_mulmod_fast_8+0x280>)
 8003f04:	4798      	blx	r3
 8003f06:	e7f1      	b.n	8003eec <sp_256_ecc_mulmod_fast_8+0x15c>
                sp_256_proj_point_add_8(rt, rt, &t[y], tmp);
 8003f08:	ab33      	add	r3, sp, #204	; 0xcc
 8003f0a:	22c4      	movs	r2, #196	; 0xc4
 8003f0c:	a983      	add	r1, sp, #524	; 0x20c
 8003f0e:	fb02 1205 	mla	r2, r2, r5, r1
 8003f12:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8003f16:	4608      	mov	r0, r1
 8003f18:	4c3b      	ldr	r4, [pc, #236]	; (8004008 <sp_256_ecc_mulmod_fast_8+0x278>)
 8003f1a:	47a0      	blx	r4
        for (; i>=0 || c>=4; ) {
 8003f1c:	f1b8 0f00 	cmp.w	r8, #0
 8003f20:	db33      	blt.n	8003f8a <sp_256_ecc_mulmod_fast_8+0x1fa>
            if (c < 4) {
 8003f22:	2e03      	cmp	r6, #3
 8003f24:	dc05      	bgt.n	8003f32 <sp_256_ecc_mulmod_fast_8+0x1a2>
                n |= k[i--];
 8003f26:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
 8003f2a:	431f      	orrs	r7, r3
                c += 32;
 8003f2c:	3620      	adds	r6, #32
                n |= k[i--];
 8003f2e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            y = (n >> 28) & 0xf;
 8003f32:	0f3d      	lsrs	r5, r7, #28
            n <<= 4;
 8003f34:	013f      	lsls	r7, r7, #4
            c -= 4;
 8003f36:	3e04      	subs	r6, #4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8003f38:	aa33      	add	r2, sp, #204	; 0xcc
 8003f3a:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8003f3e:	4608      	mov	r0, r1
 8003f40:	4c30      	ldr	r4, [pc, #192]	; (8004004 <sp_256_ecc_mulmod_fast_8+0x274>)
 8003f42:	47a0      	blx	r4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8003f44:	aa33      	add	r2, sp, #204	; 0xcc
 8003f46:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8003f4a:	4608      	mov	r0, r1
 8003f4c:	47a0      	blx	r4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8003f4e:	aa33      	add	r2, sp, #204	; 0xcc
 8003f50:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8003f54:	4608      	mov	r0, r1
 8003f56:	47a0      	blx	r4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8003f58:	aa33      	add	r2, sp, #204	; 0xcc
 8003f5a:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8003f5e:	4608      	mov	r0, r1
 8003f60:	47a0      	blx	r4
            if (ct) {
 8003f62:	f1b9 0f00 	cmp.w	r9, #0
 8003f66:	d0cf      	beq.n	8003f08 <sp_256_ecc_mulmod_fast_8+0x178>
                sp_256_get_point_16_8(p, t, y);
 8003f68:	462a      	mov	r2, r5
 8003f6a:	a983      	add	r1, sp, #524	; 0x20c
 8003f6c:	a802      	add	r0, sp, #8
 8003f6e:	4b27      	ldr	r3, [pc, #156]	; (800400c <sp_256_ecc_mulmod_fast_8+0x27c>)
 8003f70:	4798      	blx	r3
                p->infinity = !y;
 8003f72:	fab5 f585 	clz	r5, r5
 8003f76:	096d      	lsrs	r5, r5, #5
 8003f78:	9532      	str	r5, [sp, #200]	; 0xc8
                sp_256_proj_point_add_8(rt, rt, p, tmp);
 8003f7a:	ab33      	add	r3, sp, #204	; 0xcc
 8003f7c:	aa02      	add	r2, sp, #8
 8003f7e:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8003f82:	4608      	mov	r0, r1
 8003f84:	4c20      	ldr	r4, [pc, #128]	; (8004008 <sp_256_ecc_mulmod_fast_8+0x278>)
 8003f86:	47a0      	blx	r4
 8003f88:	e7c8      	b.n	8003f1c <sp_256_ecc_mulmod_fast_8+0x18c>
        for (; i>=0 || c>=4; ) {
 8003f8a:	2e03      	cmp	r6, #3
 8003f8c:	dcc9      	bgt.n	8003f22 <sp_256_ecc_mulmod_fast_8+0x192>
        if (map != 0) {
 8003f8e:	f1bb 0f00 	cmp.w	fp, #0
 8003f92:	d009      	beq.n	8003fa8 <sp_256_ecc_mulmod_fast_8+0x218>
            sp_256_map_8(r, rt, tmp);
 8003f94:	aa33      	add	r2, sp, #204	; 0xcc
 8003f96:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8003f9a:	9801      	ldr	r0, [sp, #4]
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <sp_256_ecc_mulmod_fast_8+0x284>)
 8003f9e:	4798      	blx	r3
        i = 6;
 8003fa0:	ab33      	add	r3, sp, #204	; 0xcc
 8003fa2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003fa6:	e00a      	b.n	8003fbe <sp_256_ecc_mulmod_fast_8+0x22e>
            XMEMCPY(r, rt, sizeof(sp_point_256));
 8003fa8:	22c4      	movs	r2, #196	; 0xc4
 8003faa:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8003fae:	9801      	ldr	r0, [sp, #4]
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <sp_256_ecc_mulmod_fast_8+0x280>)
 8003fb2:	4798      	blx	r3
 8003fb4:	e7f4      	b.n	8003fa0 <sp_256_ecc_mulmod_fast_8+0x210>
    for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
        *w++ = 0;
    z = (volatile byte*)w;
#endif

    while (len--) *z++ = 0;
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f803 2b01 	strb.w	r2, [r3], #1
 8003fbc:	460a      	mov	r2, r1
 8003fbe:	1e51      	subs	r1, r2, #1
 8003fc0:	2a00      	cmp	r2, #0
 8003fc2:	d1f8      	bne.n	8003fb6 <sp_256_ecc_mulmod_fast_8+0x226>
    volatile byte* z = (volatile byte*)mem;
 8003fc4:	ab02      	add	r3, sp, #8
 8003fc6:	22c4      	movs	r2, #196	; 0xc4
 8003fc8:	e003      	b.n	8003fd2 <sp_256_ecc_mulmod_fast_8+0x242>
    while (len--) *z++ = 0;
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f803 2b01 	strb.w	r2, [r3], #1
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	1e51      	subs	r1, r2, #1
 8003fd4:	2a00      	cmp	r2, #0
 8003fd6:	d1f8      	bne.n	8003fca <sp_256_ecc_mulmod_fast_8+0x23a>
    volatile byte* z = (volatile byte*)mem;
 8003fd8:	ab83      	add	r3, sp, #524	; 0x20c
 8003fda:	f640 5204 	movw	r2, #3332	; 0xd04
 8003fde:	e003      	b.n	8003fe8 <sp_256_ecc_mulmod_fast_8+0x258>
    while (len--) *z++ = 0;
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f803 2b01 	strb.w	r2, [r3], #1
 8003fe6:	460a      	mov	r2, r1
 8003fe8:	1e51      	subs	r1, r2, #1
 8003fea:	2a00      	cmp	r2, #0
 8003fec:	d1f8      	bne.n	8003fe0 <sp_256_ecc_mulmod_fast_8+0x250>
}
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f60d 7d14 	addw	sp, sp, #3860	; 0xf14
 8003ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff8:	08000125 	.word	0x08000125
 8003ffc:	08005064 	.word	0x08005064
 8004000:	08001b5f 	.word	0x08001b5f
 8004004:	08003239 	.word	0x08003239
 8004008:	08003975 	.word	0x08003975
 800400c:	080033c3 	.word	0x080033c3
 8004010:	08000147 	.word	0x08000147
 8004014:	08003c85 	.word	0x08003c85

08004018 <sp_256_ecc_mulmod_8>:
{
 8004018:	b510      	push	{r4, lr}
 800401a:	b082      	sub	sp, #8
    return sp_256_ecc_mulmod_fast_8(r, g, k, map, ct, heap);
 800401c:	9c05      	ldr	r4, [sp, #20]
 800401e:	9401      	str	r4, [sp, #4]
 8004020:	9c04      	ldr	r4, [sp, #16]
 8004022:	9400      	str	r4, [sp, #0]
 8004024:	4c01      	ldr	r4, [pc, #4]	; (800402c <sp_256_ecc_mulmod_8+0x14>)
 8004026:	47a0      	blx	r4
}
 8004028:	b002      	add	sp, #8
 800402a:	bd10      	pop	{r4, pc}
 800402c:	08003d91 	.word	0x08003d91

08004030 <sp_256_proj_point_add_qz1_8>:
{
 8004030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004034:	b08d      	sub	sp, #52	; 0x34
 8004036:	4606      	mov	r6, r0
 8004038:	460d      	mov	r5, r1
 800403a:	4690      	mov	r8, r2
 800403c:	461f      	mov	r7, r3
    sp_digit* t2 = t + 2*8;
 800403e:	3340      	adds	r3, #64	; 0x40
 8004040:	9303      	str	r3, [sp, #12]
    sp_digit* t3 = t + 4*8;
 8004042:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004046:	9304      	str	r3, [sp, #16]
    sp_digit* t4 = t + 6*8;
 8004048:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800404c:	9302      	str	r3, [sp, #8]
    sp_digit* t5 = t + 8*8;
 800404e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004052:	9305      	str	r3, [sp, #20]
    (void)sp_256_sub_8(t1, p256_mod, q->y);
 8004054:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004058:	461c      	mov	r4, r3
 800405a:	9306      	str	r3, [sp, #24]
 800405c:	461a      	mov	r2, r3
 800405e:	497b      	ldr	r1, [pc, #492]	; (800424c <sp_256_proj_point_add_qz1_8+0x21c>)
 8004060:	4638      	mov	r0, r7
 8004062:	4b7b      	ldr	r3, [pc, #492]	; (8004250 <sp_256_proj_point_add_qz1_8+0x220>)
 8004064:	4798      	blx	r3
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 8004066:	4641      	mov	r1, r8
 8004068:	4628      	mov	r0, r5
 800406a:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8004264 <sp_256_proj_point_add_qz1_8+0x234>
 800406e:	47d0      	blx	sl
 8004070:	4681      	mov	r9, r0
 8004072:	f108 0180 	add.w	r1, r8, #128	; 0x80
 8004076:	f105 0080 	add.w	r0, r5, #128	; 0x80
 800407a:	47d0      	blx	sl
 800407c:	ea09 0900 	and.w	r9, r9, r0
        (sp_256_cmp_equal_8(p->y, q->y) | sp_256_cmp_equal_8(p->y, t1))) != 0) {
 8004080:	f105 0b40 	add.w	fp, r5, #64	; 0x40
 8004084:	4621      	mov	r1, r4
 8004086:	4658      	mov	r0, fp
 8004088:	47d0      	blx	sl
 800408a:	4604      	mov	r4, r0
 800408c:	4639      	mov	r1, r7
 800408e:	4658      	mov	r0, fp
 8004090:	47d0      	blx	sl
 8004092:	4304      	orrs	r4, r0
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 8004094:	ea19 0904 	ands.w	r9, r9, r4
 8004098:	d005      	beq.n	80040a6 <sp_256_proj_point_add_qz1_8+0x76>
        sp_256_proj_point_dbl_8(r, p, t);
 800409a:	463a      	mov	r2, r7
 800409c:	4629      	mov	r1, r5
 800409e:	4630      	mov	r0, r6
 80040a0:	4b6c      	ldr	r3, [pc, #432]	; (8004254 <sp_256_proj_point_add_qz1_8+0x224>)
 80040a2:	4798      	blx	r3
 80040a4:	e0cf      	b.n	8004246 <sp_256_proj_point_add_qz1_8+0x216>
        rp[0] = r;
 80040a6:	9608      	str	r6, [sp, #32]
        rp[1] = (sp_point_256*)t; /*lint !e9087 !e740*/
 80040a8:	9709      	str	r7, [sp, #36]	; 0x24
        XMEMSET(rp[1], 0, sizeof(sp_point_256));
 80040aa:	22c4      	movs	r2, #196	; 0xc4
 80040ac:	2100      	movs	r1, #0
 80040ae:	4638      	mov	r0, r7
 80040b0:	4b69      	ldr	r3, [pc, #420]	; (8004258 <sp_256_proj_point_add_qz1_8+0x228>)
 80040b2:	4798      	blx	r3
        x = rp[p->infinity | q->infinity]->x;
 80040b4:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 80040b8:	f8d8 20c0 	ldr.w	r2, [r8, #192]	; 0xc0
 80040bc:	4313      	orrs	r3, r2
 80040be:	aa0c      	add	r2, sp, #48	; 0x30
 80040c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80040c4:	f853 ac10 	ldr.w	sl, [r3, #-16]
        y = rp[p->infinity | q->infinity]->y;
 80040c8:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 80040cc:	9307      	str	r3, [sp, #28]
        z = rp[p->infinity | q->infinity]->z;
 80040ce:	f10a 0b80 	add.w	fp, sl, #128	; 0x80
        ap[0] = p;
 80040d2:	950a      	str	r5, [sp, #40]	; 0x28
        ap[1] = q;
 80040d4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
        for (i=0; i<8; i++) {
 80040d8:	464b      	mov	r3, r9
 80040da:	e00b      	b.n	80040f4 <sp_256_proj_point_add_qz1_8+0xc4>
            r->x[i] = ap[p->infinity]->x[i];
 80040dc:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 80040e0:	a90c      	add	r1, sp, #48	; 0x30
 80040e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80040e6:	f852 2c08 	ldr.w	r2, [r2, #-8]
 80040ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040ee:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 80040f2:	3301      	adds	r3, #1
 80040f4:	2b07      	cmp	r3, #7
 80040f6:	ddf1      	ble.n	80040dc <sp_256_proj_point_add_qz1_8+0xac>
        for (i=0; i<8; i++) {
 80040f8:	464b      	mov	r3, r9
 80040fa:	e00d      	b.n	8004118 <sp_256_proj_point_add_qz1_8+0xe8>
            r->y[i] = ap[p->infinity]->y[i];
 80040fc:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8004100:	a90c      	add	r1, sp, #48	; 0x30
 8004102:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004106:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800410a:	f103 0210 	add.w	r2, r3, #16
 800410e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004112:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
        for (i=0; i<8; i++) {
 8004116:	3301      	adds	r3, #1
 8004118:	2b07      	cmp	r3, #7
 800411a:	ddef      	ble.n	80040fc <sp_256_proj_point_add_qz1_8+0xcc>
 800411c:	e00e      	b.n	800413c <sp_256_proj_point_add_qz1_8+0x10c>
            r->z[i] = ap[p->infinity]->z[i];
 800411e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8004122:	aa0c      	add	r2, sp, #48	; 0x30
 8004124:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004128:	f853 2c08 	ldr.w	r2, [r3, #-8]
 800412c:	f109 0320 	add.w	r3, r9, #32
 8004130:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004134:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 8004138:	f109 0901 	add.w	r9, r9, #1
 800413c:	f1b9 0f07 	cmp.w	r9, #7
 8004140:	dded      	ble.n	800411e <sp_256_proj_point_add_qz1_8+0xee>
        r->infinity = ap[p->infinity]->infinity;
 8004142:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8004146:	aa0c      	add	r2, sp, #48	; 0x30
 8004148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800414c:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8004150:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004154:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
        sp_256_mont_sqr_8(t2, z, p256_mod, p256_mp_mod);
 8004158:	4c3c      	ldr	r4, [pc, #240]	; (800424c <sp_256_proj_point_add_qz1_8+0x21c>)
 800415a:	2301      	movs	r3, #1
 800415c:	4622      	mov	r2, r4
 800415e:	4659      	mov	r1, fp
 8004160:	9e03      	ldr	r6, [sp, #12]
 8004162:	4630      	mov	r0, r6
 8004164:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004268 <sp_256_proj_point_add_qz1_8+0x238>
 8004168:	47c8      	blx	r9
        sp_256_mont_mul_8(t4, t2, z, p256_mod, p256_mp_mod);
 800416a:	2501      	movs	r5, #1
 800416c:	9500      	str	r5, [sp, #0]
 800416e:	4623      	mov	r3, r4
 8004170:	465a      	mov	r2, fp
 8004172:	9603      	str	r6, [sp, #12]
 8004174:	4631      	mov	r1, r6
 8004176:	9802      	ldr	r0, [sp, #8]
 8004178:	4e38      	ldr	r6, [pc, #224]	; (800425c <sp_256_proj_point_add_qz1_8+0x22c>)
 800417a:	47b0      	blx	r6
        sp_256_mont_mul_8(t2, t2, q->x, p256_mod, p256_mp_mod);
 800417c:	9500      	str	r5, [sp, #0]
 800417e:	4623      	mov	r3, r4
 8004180:	4642      	mov	r2, r8
 8004182:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004186:	4641      	mov	r1, r8
 8004188:	4640      	mov	r0, r8
 800418a:	47b0      	blx	r6
        sp_256_mont_mul_8(t4, t4, q->y, p256_mod, p256_mp_mod);
 800418c:	9500      	str	r5, [sp, #0]
 800418e:	4623      	mov	r3, r4
 8004190:	9a06      	ldr	r2, [sp, #24]
 8004192:	9902      	ldr	r1, [sp, #8]
 8004194:	4608      	mov	r0, r1
 8004196:	47b0      	blx	r6
        sp_256_mont_sub_8(t2, t2, x, p256_mod);
 8004198:	4623      	mov	r3, r4
 800419a:	4652      	mov	r2, sl
 800419c:	4641      	mov	r1, r8
 800419e:	f8cd 800c 	str.w	r8, [sp, #12]
 80041a2:	4640      	mov	r0, r8
 80041a4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800426c <sp_256_proj_point_add_qz1_8+0x23c>
 80041a8:	47c0      	blx	r8
        sp_256_mont_sub_8(t4, t4, y, p256_mod);
 80041aa:	4623      	mov	r3, r4
 80041ac:	9a07      	ldr	r2, [sp, #28]
 80041ae:	9902      	ldr	r1, [sp, #8]
 80041b0:	4608      	mov	r0, r1
 80041b2:	47c0      	blx	r8
        sp_256_mont_mul_8(z, z, t2, p256_mod, p256_mp_mod);
 80041b4:	9500      	str	r5, [sp, #0]
 80041b6:	4623      	mov	r3, r4
 80041b8:	9a03      	ldr	r2, [sp, #12]
 80041ba:	4659      	mov	r1, fp
 80041bc:	4658      	mov	r0, fp
 80041be:	47b0      	blx	r6
        sp_256_mont_sqr_8(t1, t4, p256_mod, p256_mp_mod);
 80041c0:	462b      	mov	r3, r5
 80041c2:	4622      	mov	r2, r4
 80041c4:	9902      	ldr	r1, [sp, #8]
 80041c6:	4638      	mov	r0, r7
 80041c8:	47c8      	blx	r9
        sp_256_mont_sqr_8(t5, t2, p256_mod, p256_mp_mod);
 80041ca:	462b      	mov	r3, r5
 80041cc:	4622      	mov	r2, r4
 80041ce:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80041d2:	4659      	mov	r1, fp
 80041d4:	9805      	ldr	r0, [sp, #20]
 80041d6:	47c8      	blx	r9
        sp_256_mont_mul_8(t3, x, t5, p256_mod, p256_mp_mod);
 80041d8:	9500      	str	r5, [sp, #0]
 80041da:	4623      	mov	r3, r4
 80041dc:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80041e0:	464a      	mov	r2, r9
 80041e2:	4651      	mov	r1, sl
 80041e4:	9804      	ldr	r0, [sp, #16]
 80041e6:	47b0      	blx	r6
        sp_256_mont_mul_8(t5, t5, t2, p256_mod, p256_mp_mod);
 80041e8:	9500      	str	r5, [sp, #0]
 80041ea:	4623      	mov	r3, r4
 80041ec:	465a      	mov	r2, fp
 80041ee:	4649      	mov	r1, r9
 80041f0:	4648      	mov	r0, r9
 80041f2:	47b0      	blx	r6
        sp_256_mont_sub_8(x, t1, t5, p256_mod);
 80041f4:	4623      	mov	r3, r4
 80041f6:	464a      	mov	r2, r9
 80041f8:	4639      	mov	r1, r7
 80041fa:	4650      	mov	r0, sl
 80041fc:	47c0      	blx	r8
        sp_256_mont_dbl_8(t1, t3, p256_mod);
 80041fe:	4622      	mov	r2, r4
 8004200:	f8dd b010 	ldr.w	fp, [sp, #16]
 8004204:	4659      	mov	r1, fp
 8004206:	4638      	mov	r0, r7
 8004208:	4b15      	ldr	r3, [pc, #84]	; (8004260 <sp_256_proj_point_add_qz1_8+0x230>)
 800420a:	4798      	blx	r3
        sp_256_mont_sub_8(x, x, t1, p256_mod);
 800420c:	4623      	mov	r3, r4
 800420e:	463a      	mov	r2, r7
 8004210:	4651      	mov	r1, sl
 8004212:	4650      	mov	r0, sl
 8004214:	47c0      	blx	r8
        sp_256_mont_sub_8(t3, t3, x, p256_mod);
 8004216:	4623      	mov	r3, r4
 8004218:	4652      	mov	r2, sl
 800421a:	4659      	mov	r1, fp
 800421c:	4658      	mov	r0, fp
 800421e:	47c0      	blx	r8
        sp_256_mont_mul_8(t3, t3, t4, p256_mod, p256_mp_mod);
 8004220:	9500      	str	r5, [sp, #0]
 8004222:	4623      	mov	r3, r4
 8004224:	9a02      	ldr	r2, [sp, #8]
 8004226:	4659      	mov	r1, fp
 8004228:	4658      	mov	r0, fp
 800422a:	47b0      	blx	r6
        sp_256_mont_mul_8(t5, t5, y, p256_mod, p256_mp_mod);
 800422c:	9500      	str	r5, [sp, #0]
 800422e:	4623      	mov	r3, r4
 8004230:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004234:	4652      	mov	r2, sl
 8004236:	4649      	mov	r1, r9
 8004238:	4648      	mov	r0, r9
 800423a:	47b0      	blx	r6
        sp_256_mont_sub_8(y, t3, t5, p256_mod);
 800423c:	4623      	mov	r3, r4
 800423e:	464a      	mov	r2, r9
 8004240:	4659      	mov	r1, fp
 8004242:	4650      	mov	r0, sl
 8004244:	47c0      	blx	r8
}
 8004246:	b00d      	add	sp, #52	; 0x34
 8004248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424c:	08005064 	.word	0x08005064
 8004250:	08001b2d 	.word	0x08001b2d
 8004254:	08003239 	.word	0x08003239
 8004258:	08000125 	.word	0x08000125
 800425c:	08001e49 	.word	0x08001e49
 8004260:	08002f25 	.word	0x08002f25
 8004264:	08003379 	.word	0x08003379
 8004268:	080025f5 	.word	0x080025f5
 800426c:	0800309b 	.word	0x0800309b

08004270 <sp_256_ecc_mulmod_stripe_8>:
{
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8004278:	4683      	mov	fp, r0
 800427a:	4691      	mov	r9, r2
 800427c:	461d      	mov	r5, r3
 800427e:	f8dd a2f4 	ldr.w	sl, [sp, #756]	; 0x2f4
        XMEMCPY(p->z, p256_norm_mod, sizeof(p256_norm_mod));
 8004282:	4e4b      	ldr	r6, [pc, #300]	; (80043b0 <sp_256_ecc_mulmod_stripe_8+0x140>)
 8004284:	2220      	movs	r2, #32
 8004286:	4631      	mov	r1, r6
 8004288:	a8a1      	add	r0, sp, #644	; 0x284
 800428a:	4c4a      	ldr	r4, [pc, #296]	; (80043b4 <sp_256_ecc_mulmod_stripe_8+0x144>)
 800428c:	47a0      	blx	r4
        XMEMCPY(rt->z, p256_norm_mod, sizeof(p256_norm_mod));
 800428e:	2220      	movs	r2, #32
 8004290:	4631      	mov	r1, r6
 8004292:	a870      	add	r0, sp, #448	; 0x1c0
 8004294:	47a0      	blx	r4
        x = 63;
 8004296:	223f      	movs	r2, #63	; 0x3f
        y = 0;
 8004298:	2400      	movs	r4, #0
        for (j=0; j<4; j++) {
 800429a:	4621      	mov	r1, r4
 800429c:	e010      	b.n	80042c0 <sp_256_ecc_mulmod_stripe_8+0x50>
            y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 800429e:	115b      	asrs	r3, r3, #5
 80042a0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80042a4:	4256      	negs	r6, r2
 80042a6:	f002 001f 	and.w	r0, r2, #31
 80042aa:	f006 061f 	and.w	r6, r6, #31
 80042ae:	bf58      	it	pl
 80042b0:	4270      	negpl	r0, r6
 80042b2:	40c3      	lsrs	r3, r0
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	408b      	lsls	r3, r1
 80042ba:	431c      	orrs	r4, r3
            x += 64;
 80042bc:	3240      	adds	r2, #64	; 0x40
        for (j=0; j<4; j++) {
 80042be:	3101      	adds	r1, #1
 80042c0:	2903      	cmp	r1, #3
 80042c2:	dc05      	bgt.n	80042d0 <sp_256_ecc_mulmod_stripe_8+0x60>
            y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 80042c4:	4613      	mov	r3, r2
 80042c6:	2a00      	cmp	r2, #0
 80042c8:	dae9      	bge.n	800429e <sp_256_ecc_mulmod_stripe_8+0x2e>
 80042ca:	f102 031f 	add.w	r3, r2, #31
 80042ce:	e7e6      	b.n	800429e <sp_256_ecc_mulmod_stripe_8+0x2e>
        if (ct) {
 80042d0:	f1ba 0f00 	cmp.w	sl, #0
 80042d4:	d00a      	beq.n	80042ec <sp_256_ecc_mulmod_stripe_8+0x7c>
            sp_256_get_entry_16_8(rt, table, y);
 80042d6:	4622      	mov	r2, r4
 80042d8:	4649      	mov	r1, r9
 80042da:	a850      	add	r0, sp, #320	; 0x140
 80042dc:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <sp_256_ecc_mulmod_stripe_8+0x148>)
 80042de:	4798      	blx	r3
        rt->infinity = !y;
 80042e0:	fab4 f484 	clz	r4, r4
 80042e4:	0964      	lsrs	r4, r4, #5
 80042e6:	9480      	str	r4, [sp, #512]	; 0x200
        for (i=62; i>=0; i--) {
 80042e8:	263e      	movs	r6, #62	; 0x3e
 80042ea:	e03c      	b.n	8004366 <sp_256_ecc_mulmod_stripe_8+0xf6>
            XMEMCPY(rt->x, table[y].x, sizeof(table[y].x));
 80042ec:	eb09 1684 	add.w	r6, r9, r4, lsl #6
 80042f0:	2220      	movs	r2, #32
 80042f2:	4631      	mov	r1, r6
 80042f4:	a850      	add	r0, sp, #320	; 0x140
 80042f6:	4f2f      	ldr	r7, [pc, #188]	; (80043b4 <sp_256_ecc_mulmod_stripe_8+0x144>)
 80042f8:	47b8      	blx	r7
            XMEMCPY(rt->y, table[y].y, sizeof(table[y].y));
 80042fa:	2220      	movs	r2, #32
 80042fc:	18b1      	adds	r1, r6, r2
 80042fe:	a860      	add	r0, sp, #384	; 0x180
 8004300:	47b8      	blx	r7
 8004302:	e7ed      	b.n	80042e0 <sp_256_ecc_mulmod_stripe_8+0x70>
                y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 8004304:	115b      	asrs	r3, r3, #5
 8004306:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800430a:	4257      	negs	r7, r2
 800430c:	f002 001f 	and.w	r0, r2, #31
 8004310:	f007 071f 	and.w	r7, r7, #31
 8004314:	bf58      	it	pl
 8004316:	4278      	negpl	r0, r7
 8004318:	40c3      	lsrs	r3, r0
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	408b      	lsls	r3, r1
 8004320:	431c      	orrs	r4, r3
                x += 64;
 8004322:	3240      	adds	r2, #64	; 0x40
            for (j=0; j<4; j++) {
 8004324:	3101      	adds	r1, #1
 8004326:	2903      	cmp	r1, #3
 8004328:	dc05      	bgt.n	8004336 <sp_256_ecc_mulmod_stripe_8+0xc6>
                y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 800432a:	4613      	mov	r3, r2
 800432c:	2a00      	cmp	r2, #0
 800432e:	dae9      	bge.n	8004304 <sp_256_ecc_mulmod_stripe_8+0x94>
 8004330:	f102 031f 	add.w	r3, r2, #31
 8004334:	e7e6      	b.n	8004304 <sp_256_ecc_mulmod_stripe_8+0x94>
            sp_256_proj_point_dbl_8(rt, rt, t);
 8004336:	466a      	mov	r2, sp
 8004338:	a950      	add	r1, sp, #320	; 0x140
 800433a:	4608      	mov	r0, r1
 800433c:	4b1f      	ldr	r3, [pc, #124]	; (80043bc <sp_256_ecc_mulmod_stripe_8+0x14c>)
 800433e:	4798      	blx	r3
            if (ct) {
 8004340:	f1ba 0f00 	cmp.w	sl, #0
 8004344:	d015      	beq.n	8004372 <sp_256_ecc_mulmod_stripe_8+0x102>
                sp_256_get_entry_16_8(p, table, y);
 8004346:	4622      	mov	r2, r4
 8004348:	4649      	mov	r1, r9
 800434a:	a881      	add	r0, sp, #516	; 0x204
 800434c:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <sp_256_ecc_mulmod_stripe_8+0x148>)
 800434e:	4798      	blx	r3
            p->infinity = !y;
 8004350:	fab4 f484 	clz	r4, r4
 8004354:	0964      	lsrs	r4, r4, #5
 8004356:	94b1      	str	r4, [sp, #708]	; 0x2c4
            sp_256_proj_point_add_qz1_8(rt, rt, p, t);
 8004358:	466b      	mov	r3, sp
 800435a:	aa81      	add	r2, sp, #516	; 0x204
 800435c:	a950      	add	r1, sp, #320	; 0x140
 800435e:	4608      	mov	r0, r1
 8004360:	4c17      	ldr	r4, [pc, #92]	; (80043c0 <sp_256_ecc_mulmod_stripe_8+0x150>)
 8004362:	47a0      	blx	r4
        for (i=62; i>=0; i--) {
 8004364:	3e01      	subs	r6, #1
 8004366:	2e00      	cmp	r6, #0
 8004368:	db10      	blt.n	800438c <sp_256_ecc_mulmod_stripe_8+0x11c>
            x = i;
 800436a:	4632      	mov	r2, r6
            y = 0;
 800436c:	2400      	movs	r4, #0
            for (j=0; j<4; j++) {
 800436e:	4621      	mov	r1, r4
 8004370:	e7d9      	b.n	8004326 <sp_256_ecc_mulmod_stripe_8+0xb6>
                XMEMCPY(p->x, table[y].x, sizeof(table[y].x));
 8004372:	eb09 1784 	add.w	r7, r9, r4, lsl #6
 8004376:	2220      	movs	r2, #32
 8004378:	4639      	mov	r1, r7
 800437a:	a881      	add	r0, sp, #516	; 0x204
 800437c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80043b4 <sp_256_ecc_mulmod_stripe_8+0x144>
 8004380:	47c0      	blx	r8
                XMEMCPY(p->y, table[y].y, sizeof(table[y].y));
 8004382:	2220      	movs	r2, #32
 8004384:	18b9      	adds	r1, r7, r2
 8004386:	a891      	add	r0, sp, #580	; 0x244
 8004388:	47c0      	blx	r8
 800438a:	e7e1      	b.n	8004350 <sp_256_ecc_mulmod_stripe_8+0xe0>
        if (map != 0) {
 800438c:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 800438e:	b14b      	cbz	r3, 80043a4 <sp_256_ecc_mulmod_stripe_8+0x134>
            sp_256_map_8(r, rt, t);
 8004390:	466a      	mov	r2, sp
 8004392:	a950      	add	r1, sp, #320	; 0x140
 8004394:	4658      	mov	r0, fp
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <sp_256_ecc_mulmod_stripe_8+0x154>)
 8004398:	4798      	blx	r3
}
 800439a:	2000      	movs	r0, #0
 800439c:	f50d 7d33 	add.w	sp, sp, #716	; 0x2cc
 80043a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            XMEMCPY(r, rt, sizeof(sp_point_256));
 80043a4:	22c4      	movs	r2, #196	; 0xc4
 80043a6:	a950      	add	r1, sp, #320	; 0x140
 80043a8:	4658      	mov	r0, fp
 80043aa:	4b02      	ldr	r3, [pc, #8]	; (80043b4 <sp_256_ecc_mulmod_stripe_8+0x144>)
 80043ac:	4798      	blx	r3
 80043ae:	e7f4      	b.n	800439a <sp_256_ecc_mulmod_stripe_8+0x12a>
 80043b0:	080050a4 	.word	0x080050a4
 80043b4:	08000147 	.word	0x08000147
 80043b8:	08003575 	.word	0x08003575
 80043bc:	08003239 	.word	0x08003239
 80043c0:	08004031 	.word	0x08004031
 80043c4:	08003c85 	.word	0x08003c85

080043c8 <sp_256_ecc_mulmod_base_8>:
{
 80043c8:	b510      	push	{r4, lr}
 80043ca:	b084      	sub	sp, #16
    return sp_256_ecc_mulmod_stripe_8(r, &p256_base, p256_table,
 80043cc:	9c06      	ldr	r4, [sp, #24]
 80043ce:	9402      	str	r4, [sp, #8]
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	9200      	str	r2, [sp, #0]
 80043d4:	460b      	mov	r3, r1
 80043d6:	4a03      	ldr	r2, [pc, #12]	; (80043e4 <sp_256_ecc_mulmod_base_8+0x1c>)
 80043d8:	4903      	ldr	r1, [pc, #12]	; (80043e8 <sp_256_ecc_mulmod_base_8+0x20>)
 80043da:	4c04      	ldr	r4, [pc, #16]	; (80043ec <sp_256_ecc_mulmod_base_8+0x24>)
 80043dc:	47a0      	blx	r4
}
 80043de:	b004      	add	sp, #16
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	bf00      	nop
 80043e4:	08005124 	.word	0x08005124
 80043e8:	08004fa0 	.word	0x08004fa0
 80043ec:	08004271 	.word	0x08004271

080043f0 <sp_256_to_mp>:
{
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4605      	mov	r5, r0
 80043f4:	460c      	mov	r4, r1
    err = mp_grow(r, (256 + DIGIT_BIT - 1) / DIGIT_BIT);
 80043f6:	2108      	movs	r1, #8
 80043f8:	4620      	mov	r0, r4
 80043fa:	4b0c      	ldr	r3, [pc, #48]	; (800442c <sp_256_to_mp+0x3c>)
 80043fc:	4798      	blx	r3
    if (err == MP_OKAY) { /*lint !e774 case where err is always MP_OKAY*/
 80043fe:	4606      	mov	r6, r0
 8004400:	b108      	cbz	r0, 8004406 <sp_256_to_mp+0x16>
}
 8004402:	4630      	mov	r0, r6
 8004404:	bd70      	pop	{r4, r5, r6, pc}
        XMEMCPY(r->dp, a, sizeof(sp_digit) * 8);
 8004406:	2220      	movs	r2, #32
 8004408:	4629      	mov	r1, r5
 800440a:	f104 0008 	add.w	r0, r4, #8
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <sp_256_to_mp+0x40>)
 8004410:	4798      	blx	r3
        mp_clamp(r);
 8004412:	2307      	movs	r3, #7
 8004414:	e000      	b.n	8004418 <sp_256_to_mp+0x28>
 8004416:	3b01      	subs	r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	db04      	blt.n	8004426 <sp_256_to_mp+0x36>
 800441c:	1c9a      	adds	r2, r3, #2
 800441e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004422:	2a00      	cmp	r2, #0
 8004424:	d0f7      	beq.n	8004416 <sp_256_to_mp+0x26>
 8004426:	3301      	adds	r3, #1
 8004428:	6023      	str	r3, [r4, #0]
    return err;
 800442a:	e7ea      	b.n	8004402 <sp_256_to_mp+0x12>
 800442c:	08000fad 	.word	0x08000fad
 8004430:	08000147 	.word	0x08000147

08004434 <sp_256_point_to_ecc_point_8>:
{
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4604      	mov	r4, r0
 8004438:	460d      	mov	r5, r1
    err = sp_256_to_mp(p->x, pm->x);
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <sp_256_point_to_ecc_point_8+0x2c>)
 800443c:	4798      	blx	r3
    if (err == MP_OKAY) {
 800443e:	b108      	cbz	r0, 8004444 <sp_256_point_to_ecc_point_8+0x10>
    if (err == MP_OKAY) {
 8004440:	b138      	cbz	r0, 8004452 <sp_256_point_to_ecc_point_8+0x1e>
}
 8004442:	bd38      	pop	{r3, r4, r5, pc}
        err = sp_256_to_mp(p->y, pm->y);
 8004444:	f105 0150 	add.w	r1, r5, #80	; 0x50
 8004448:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <sp_256_point_to_ecc_point_8+0x2c>)
 800444e:	4798      	blx	r3
 8004450:	e7f6      	b.n	8004440 <sp_256_point_to_ecc_point_8+0xc>
        err = sp_256_to_mp(p->z, pm->z);
 8004452:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
 8004456:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800445a:	4b01      	ldr	r3, [pc, #4]	; (8004460 <sp_256_point_to_ecc_point_8+0x2c>)
 800445c:	4798      	blx	r3
    return err;
 800445e:	e7f0      	b.n	8004442 <sp_256_point_to_ecc_point_8+0xe>
 8004460:	080043f1 	.word	0x080043f1

08004464 <sp_256_calc_vfy_point_8>:
 * heap  Heap to use for allocation.
 * returns MEMORY_E when memory allocation fails and MP_OKAY on success.
 */
static int sp_256_calc_vfy_point_8(sp_point_256* p1, sp_point_256* p2,
    sp_digit* s, sp_digit* u1, sp_digit* u2, sp_digit* tmp, void* heap)
{
 8004464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004468:	b09f      	sub	sp, #124	; 0x7c
 800446a:	4682      	mov	sl, r0
 800446c:	9102      	str	r1, [sp, #8]
 800446e:	4614      	mov	r4, r2
 8004470:	4698      	mov	r8, r3
    {
        sp_256_mod_inv_8(s, s, p256_order);
    }
#endif /* !WOLFSSL_SP_SMALL */
    {
        sp_256_mul_8(s, s, p256_norm_order);
 8004472:	4a53      	ldr	r2, [pc, #332]	; (80045c0 <sp_256_calc_vfy_point_8+0x15c>)
 8004474:	4621      	mov	r1, r4
 8004476:	4620      	mov	r0, r4
 8004478:	4b52      	ldr	r3, [pc, #328]	; (80045c4 <sp_256_calc_vfy_point_8+0x160>)
 800447a:	4798      	blx	r3
    XMEMCPY(t1, a, sizeof(*t1) * 2 * 8);
 800447c:	2240      	movs	r2, #64	; 0x40
 800447e:	4621      	mov	r1, r4
 8004480:	a80e      	add	r0, sp, #56	; 0x38
 8004482:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <sp_256_calc_vfy_point_8+0x164>)
 8004484:	4798      	blx	r3
    for (i=7; i>=0; i--) {
 8004486:	2707      	movs	r7, #7
 8004488:	46a3      	mov	fp, r4
 800448a:	f8cd 800c 	str.w	r8, [sp, #12]
 800448e:	e044      	b.n	800451a <sp_256_calc_vfy_point_8+0xb6>
        sp_digit hi = t1[8 + i] - (t1[8 + i] == div);
 8004490:	f107 0508 	add.w	r5, r7, #8
 8004494:	ab1e      	add	r3, sp, #120	; 0x78
 8004496:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800449a:	f855 0c40 	ldr.w	r0, [r5, #-64]
        r1 = div_256_word_8(hi, t1[8 + i - 1], div);
 800449e:	1dfb      	adds	r3, r7, #7
 80044a0:	aa1e      	add	r2, sp, #120	; 0x78
 80044a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80044a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044aa:	f853 1c40 	ldr.w	r1, [r3, #-64]
 80044ae:	4290      	cmp	r0, r2
 80044b0:	bf08      	it	eq
 80044b2:	3801      	subeq	r0, #1
 80044b4:	4b45      	ldr	r3, [pc, #276]	; (80045cc <sp_256_calc_vfy_point_8+0x168>)
 80044b6:	4798      	blx	r3
 80044b8:	4602      	mov	r2, r0
        sp_256_mul_d_8(t2, d, r1);
 80044ba:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80045dc <sp_256_calc_vfy_point_8+0x178>
 80044be:	4649      	mov	r1, r9
 80044c0:	a805      	add	r0, sp, #20
 80044c2:	4b43      	ldr	r3, [pc, #268]	; (80045d0 <sp_256_calc_vfy_point_8+0x16c>)
 80044c4:	4798      	blx	r3
        t1[8 + i] += sp_256_sub_in_place_8(&t1[i], t2);
 80044c6:	ab0e      	add	r3, sp, #56	; 0x38
 80044c8:	eb03 0687 	add.w	r6, r3, r7, lsl #2
 80044cc:	a905      	add	r1, sp, #20
 80044ce:	4630      	mov	r0, r6
 80044d0:	4b40      	ldr	r3, [pc, #256]	; (80045d4 <sp_256_calc_vfy_point_8+0x170>)
 80044d2:	4798      	blx	r3
 80044d4:	f855 2c40 	ldr.w	r2, [r5, #-64]
 80044d8:	4402      	add	r2, r0
        t1[8 + i] -= t2[8];
 80044da:	980d      	ldr	r0, [sp, #52]	; 0x34
 80044dc:	1a12      	subs	r2, r2, r0
 80044de:	f845 2c40 	str.w	r2, [r5, #-64]
        sp_256_mask_8(t2, d, t1[8 + i]);
 80044e2:	4649      	mov	r1, r9
 80044e4:	a805      	add	r0, sp, #20
 80044e6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8004600 <sp_256_calc_vfy_point_8+0x19c>
 80044ea:	47c0      	blx	r8
        t1[8 + i] += sp_256_add_8(&t1[i], &t1[i], t2);
 80044ec:	aa05      	add	r2, sp, #20
 80044ee:	4631      	mov	r1, r6
 80044f0:	4630      	mov	r0, r6
 80044f2:	4c39      	ldr	r4, [pc, #228]	; (80045d8 <sp_256_calc_vfy_point_8+0x174>)
 80044f4:	47a0      	blx	r4
 80044f6:	f855 2c40 	ldr.w	r2, [r5, #-64]
 80044fa:	4402      	add	r2, r0
 80044fc:	f845 2c40 	str.w	r2, [r5, #-64]
        sp_256_mask_8(t2, d, t1[8 + i]);
 8004500:	4649      	mov	r1, r9
 8004502:	a805      	add	r0, sp, #20
 8004504:	47c0      	blx	r8
        t1[8 + i] += sp_256_add_8(&t1[i], &t1[i], t2);
 8004506:	aa05      	add	r2, sp, #20
 8004508:	4631      	mov	r1, r6
 800450a:	4630      	mov	r0, r6
 800450c:	47a0      	blx	r4
 800450e:	f855 3c40 	ldr.w	r3, [r5, #-64]
 8004512:	4403      	add	r3, r0
 8004514:	f845 3c40 	str.w	r3, [r5, #-64]
    for (i=7; i>=0; i--) {
 8004518:	3f01      	subs	r7, #1
 800451a:	2f00      	cmp	r7, #0
 800451c:	dab8      	bge.n	8004490 <sp_256_calc_vfy_point_8+0x2c>
 800451e:	f8dd 800c 	ldr.w	r8, [sp, #12]
    r1 = sp_256_cmp_8(t1, d) >= 0;
 8004522:	4d2e      	ldr	r5, [pc, #184]	; (80045dc <sp_256_calc_vfy_point_8+0x178>)
 8004524:	4629      	mov	r1, r5
 8004526:	a80e      	add	r0, sp, #56	; 0x38
 8004528:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <sp_256_calc_vfy_point_8+0x17c>)
 800452a:	4798      	blx	r3
 800452c:	43c3      	mvns	r3, r0
 800452e:	0fdb      	lsrs	r3, r3, #31
    sp_256_cond_sub_8(r, t1, d, (sp_digit)0 - r1);
 8004530:	425b      	negs	r3, r3
 8004532:	462a      	mov	r2, r5
 8004534:	a90e      	add	r1, sp, #56	; 0x38
 8004536:	4658      	mov	r0, fp
 8004538:	4d2a      	ldr	r5, [pc, #168]	; (80045e4 <sp_256_calc_vfy_point_8+0x180>)
 800453a:	47a8      	blx	r5
    err = sp_256_mod_8(s, s, p256_order);
    if (err == MP_OKAY) {
        sp_256_norm_8(s);
#ifdef WOLFSSL_SP_SMALL
        {
            sp_256_mont_inv_order_8(s, s, tmp);
 800453c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800453e:	4659      	mov	r1, fp
 8004540:	4658      	mov	r0, fp
 8004542:	4b29      	ldr	r3, [pc, #164]	; (80045e8 <sp_256_calc_vfy_point_8+0x184>)
 8004544:	4798      	blx	r3
            sp_256_mont_mul_order_8(u1, u1, s);
 8004546:	465a      	mov	r2, fp
 8004548:	4641      	mov	r1, r8
 800454a:	4640      	mov	r0, r8
 800454c:	4d27      	ldr	r5, [pc, #156]	; (80045ec <sp_256_calc_vfy_point_8+0x188>)
 800454e:	47a8      	blx	r5
            sp_256_mont_mul_order_8(u2, u2, s);
 8004550:	465a      	mov	r2, fp
 8004552:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8004554:	4608      	mov	r0, r1
 8004556:	47a8      	blx	r5
            sp_256_mont_mul_order_8(u1, u1, s);
            sp_256_mont_mul_order_8(u2, u2, s);
        }

#endif /* WOLFSSL_SP_SMALL */
            err = sp_256_ecc_mulmod_base_8(p1, u1, 0, 0, heap);
 8004558:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2300      	movs	r3, #0
 800455e:	461a      	mov	r2, r3
 8004560:	4641      	mov	r1, r8
 8004562:	4650      	mov	r0, sl
 8004564:	4c22      	ldr	r4, [pc, #136]	; (80045f0 <sp_256_calc_vfy_point_8+0x18c>)
 8004566:	47a0      	blx	r4
    }
    if ((err == MP_OKAY) && sp_256_iszero_8(p1->z)) {
 8004568:	4604      	mov	r4, r0
 800456a:	b938      	cbnz	r0, 800457c <sp_256_calc_vfy_point_8+0x118>
 800456c:	f10a 0080 	add.w	r0, sl, #128	; 0x80
 8004570:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <sp_256_calc_vfy_point_8+0x190>)
 8004572:	4798      	blx	r3
 8004574:	b110      	cbz	r0, 800457c <sp_256_calc_vfy_point_8+0x118>
        p1->infinity = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
    }
    if (err == MP_OKAY) {
 800457c:	b174      	cbz	r4, 800459c <sp_256_calc_vfy_point_8+0x138>
            err = sp_256_ecc_mulmod_8(p2, p2, u2, 0, 0, heap);
    }
    if ((err == MP_OKAY) && sp_256_iszero_8(p2->z)) {
 800457e:	b944      	cbnz	r4, 8004592 <sp_256_calc_vfy_point_8+0x12e>
 8004580:	9d02      	ldr	r5, [sp, #8]
 8004582:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <sp_256_calc_vfy_point_8+0x190>)
 8004588:	4798      	blx	r3
 800458a:	b110      	cbz	r0, 8004592 <sp_256_calc_vfy_point_8+0x12e>
        p2->infinity = 1;
 800458c:	2301      	movs	r3, #1
 800458e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
    }

    if (err == MP_OKAY) {
 8004592:	b174      	cbz	r4, 80045b2 <sp_256_calc_vfy_point_8+0x14e>
        sp_256_add_points_8(p1, p2, tmp);
    }

    return err;
}
 8004594:	4620      	mov	r0, r4
 8004596:	b01f      	add	sp, #124	; 0x7c
 8004598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            err = sp_256_ecc_mulmod_8(p2, p2, u2, 0, 0, heap);
 800459c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	2300      	movs	r3, #0
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80045a6:	9902      	ldr	r1, [sp, #8]
 80045a8:	4608      	mov	r0, r1
 80045aa:	4c13      	ldr	r4, [pc, #76]	; (80045f8 <sp_256_calc_vfy_point_8+0x194>)
 80045ac:	47a0      	blx	r4
 80045ae:	4604      	mov	r4, r0
 80045b0:	e7e5      	b.n	800457e <sp_256_calc_vfy_point_8+0x11a>
        sp_256_add_points_8(p1, p2, tmp);
 80045b2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80045b4:	9902      	ldr	r1, [sp, #8]
 80045b6:	4650      	mov	r0, sl
 80045b8:	4b10      	ldr	r3, [pc, #64]	; (80045fc <sp_256_calc_vfy_point_8+0x198>)
 80045ba:	4798      	blx	r3
    return err;
 80045bc:	e7ea      	b.n	8004594 <sp_256_calc_vfy_point_8+0x130>
 80045be:	bf00      	nop
 80045c0:	080050c4 	.word	0x080050c4
 80045c4:	08001169 	.word	0x08001169
 80045c8:	08000147 	.word	0x08000147
 80045cc:	0800376f 	.word	0x0800376f
 80045d0:	0800372d 	.word	0x0800372d
 80045d4:	080036f3 	.word	0x080036f3
 80045d8:	08001aed 	.word	0x08001aed
 80045dc:	080050e4 	.word	0x080050e4
 80045e0:	08002bed 	.word	0x08002bed
 80045e4:	08002c43 	.word	0x08002c43
 80045e8:	08003901 	.word	0x08003901
 80045ec:	08003801 	.word	0x08003801
 80045f0:	080043c9 	.word	0x080043c9
 80045f4:	08003673 	.word	0x08003673
 80045f8:	08004019 	.word	0x08004019
 80045fc:	08003c15 	.word	0x08003c15
 8004600:	080037e3 	.word	0x080037e3

08004604 <sp_ecc_mulmod_base_256>:
{
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	b0bc      	sub	sp, #240	; 0xf0
 8004608:	460e      	mov	r6, r1
 800460a:	4614      	mov	r4, r2
 800460c:	461d      	mov	r5, r3
        sp_256_from_mp(k, 8, km);
 800460e:	4602      	mov	r2, r0
 8004610:	2108      	movs	r1, #8
 8004612:	a803      	add	r0, sp, #12
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <sp_ecc_mulmod_base_256+0x34>)
 8004616:	4798      	blx	r3
            err = sp_256_ecc_mulmod_base_8(point, k, map, 1, heap);
 8004618:	9500      	str	r5, [sp, #0]
 800461a:	2301      	movs	r3, #1
 800461c:	4622      	mov	r2, r4
 800461e:	a903      	add	r1, sp, #12
 8004620:	a80b      	add	r0, sp, #44	; 0x2c
 8004622:	4c06      	ldr	r4, [pc, #24]	; (800463c <sp_ecc_mulmod_base_256+0x38>)
 8004624:	47a0      	blx	r4
    if (err == MP_OKAY) {
 8004626:	b108      	cbz	r0, 800462c <sp_ecc_mulmod_base_256+0x28>
}
 8004628:	b03c      	add	sp, #240	; 0xf0
 800462a:	bd70      	pop	{r4, r5, r6, pc}
        err = sp_256_point_to_ecc_point_8(point, r);
 800462c:	4631      	mov	r1, r6
 800462e:	a80b      	add	r0, sp, #44	; 0x2c
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <sp_ecc_mulmod_base_256+0x3c>)
 8004632:	4798      	blx	r3
    return err;
 8004634:	e7f8      	b.n	8004628 <sp_ecc_mulmod_base_256+0x24>
 8004636:	bf00      	nop
 8004638:	08003849 	.word	0x08003849
 800463c:	080043c9 	.word	0x080043c9
 8004640:	08004435 	.word	0x08004435

08004644 <sp_ecc_verify_256>:
#endif /* WOLFSSL_SP_NONBLOCK */

int sp_ecc_verify_256(const byte* hash, word32 hashLen, const mp_int* pX,
    const mp_int* pY, const mp_int* pZ, const mp_int* rm, const mp_int* sm,
    int* res, void* heap)
{
 8004644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004648:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
 800464c:	4690      	mov	r8, r2
 800464e:	461f      	mov	r7, r3
 8004650:	9ded      	ldr	r5, [sp, #948]	; 0x3b4
        u2  = u1 + 2 * 8;
        s   = u1 + 4 * 8;
        tmp = u1 + 6 * 8;
        p2 = p1 + 1;

        if (hashLen > 32U) {
 8004652:	2920      	cmp	r1, #32
 8004654:	d900      	bls.n	8004658 <sp_ecc_verify_256+0x14>
            hashLen = 32U;
 8004656:	2120      	movs	r1, #32
        }

        sp_256_from_bin(u1, 8, hash, (int)hashLen);
 8004658:	460b      	mov	r3, r1
 800465a:	4602      	mov	r2, r0
 800465c:	2108      	movs	r1, #8
 800465e:	a866      	add	r0, sp, #408	; 0x198
 8004660:	4c41      	ldr	r4, [pc, #260]	; (8004768 <sp_ecc_verify_256+0x124>)
 8004662:	47a0      	blx	r4
        sp_256_from_mp(u2, 8, rm);
 8004664:	ae76      	add	r6, sp, #472	; 0x1d8
 8004666:	462a      	mov	r2, r5
 8004668:	2108      	movs	r1, #8
 800466a:	4630      	mov	r0, r6
 800466c:	4c3f      	ldr	r4, [pc, #252]	; (800476c <sp_ecc_verify_256+0x128>)
 800466e:	47a0      	blx	r4
        sp_256_from_mp(s, 8, sm);
 8004670:	9aee      	ldr	r2, [sp, #952]	; 0x3b8
 8004672:	2108      	movs	r1, #8
 8004674:	a886      	add	r0, sp, #536	; 0x218
 8004676:	47a0      	blx	r4
        sp_256_from_mp(p2->x, 8, pX);
 8004678:	4642      	mov	r2, r8
 800467a:	2108      	movs	r1, #8
 800467c:	a835      	add	r0, sp, #212	; 0xd4
 800467e:	47a0      	blx	r4
        sp_256_from_mp(p2->y, 8, pY);
 8004680:	463a      	mov	r2, r7
 8004682:	2108      	movs	r1, #8
 8004684:	a845      	add	r0, sp, #276	; 0x114
 8004686:	47a0      	blx	r4
        sp_256_from_mp(p2->z, 8, pZ);
 8004688:	9aec      	ldr	r2, [sp, #944]	; 0x3b0
 800468a:	2108      	movs	r1, #8
 800468c:	a855      	add	r0, sp, #340	; 0x154
 800468e:	47a0      	blx	r4

        err = sp_256_calc_vfy_point_8(p1, p2, s, u1, u2, tmp, heap);
 8004690:	9bf0      	ldr	r3, [sp, #960]	; 0x3c0
 8004692:	9302      	str	r3, [sp, #8]
 8004694:	ab96      	add	r3, sp, #600	; 0x258
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	9600      	str	r6, [sp, #0]
 800469a:	ab66      	add	r3, sp, #408	; 0x198
 800469c:	aa86      	add	r2, sp, #536	; 0x218
 800469e:	a935      	add	r1, sp, #212	; 0xd4
 80046a0:	a804      	add	r0, sp, #16
 80046a2:	4c33      	ldr	r4, [pc, #204]	; (8004770 <sp_ecc_verify_256+0x12c>)
 80046a4:	47a0      	blx	r4
    }
    if (err == MP_OKAY) {
 80046a6:	4604      	mov	r4, r0
 80046a8:	b128      	cbz	r0, 80046b6 <sp_ecc_verify_256+0x72>
        /* Reload r and convert to Montgomery form. */
        sp_256_from_mp(u2, 8, rm);
        err = sp_256_mod_mul_norm_8(u2, u2, p256_mod);
    }

    if (err == MP_OKAY) {
 80046aa:	b184      	cbz	r4, 80046ce <sp_ecc_verify_256+0x8a>
    if (p1 != NULL)
        XFREE(p1, heap, DYNAMIC_TYPE_ECC);
#endif

    return err;
}
 80046ac:	4620      	mov	r0, r4
 80046ae:	f50d 7d66 	add.w	sp, sp, #920	; 0x398
 80046b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sp_256_from_mp(u2, 8, rm);
 80046b6:	462a      	mov	r2, r5
 80046b8:	2108      	movs	r1, #8
 80046ba:	a876      	add	r0, sp, #472	; 0x1d8
 80046bc:	4b2b      	ldr	r3, [pc, #172]	; (800476c <sp_ecc_verify_256+0x128>)
 80046be:	4798      	blx	r3
        err = sp_256_mod_mul_norm_8(u2, u2, p256_mod);
 80046c0:	4a2c      	ldr	r2, [pc, #176]	; (8004774 <sp_ecc_verify_256+0x130>)
 80046c2:	a976      	add	r1, sp, #472	; 0x1d8
 80046c4:	4608      	mov	r0, r1
 80046c6:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <sp_ecc_verify_256+0x134>)
 80046c8:	4798      	blx	r3
 80046ca:	4604      	mov	r4, r0
 80046cc:	e7ed      	b.n	80046aa <sp_ecc_verify_256+0x66>
        sp_256_mont_sqr_8(p1->z, p1->z, p256_mod, p256_mp_mod);
 80046ce:	4f29      	ldr	r7, [pc, #164]	; (8004774 <sp_ecc_verify_256+0x130>)
 80046d0:	2301      	movs	r3, #1
 80046d2:	463a      	mov	r2, r7
 80046d4:	a924      	add	r1, sp, #144	; 0x90
 80046d6:	4608      	mov	r0, r1
 80046d8:	4e28      	ldr	r6, [pc, #160]	; (800477c <sp_ecc_verify_256+0x138>)
 80046da:	47b0      	blx	r6
        sp_256_mont_mul_8(u1, u2, p1->z, p256_mod, p256_mp_mod);
 80046dc:	2301      	movs	r3, #1
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	463b      	mov	r3, r7
 80046e2:	aa24      	add	r2, sp, #144	; 0x90
 80046e4:	a976      	add	r1, sp, #472	; 0x1d8
 80046e6:	a866      	add	r0, sp, #408	; 0x198
 80046e8:	4f25      	ldr	r7, [pc, #148]	; (8004780 <sp_ecc_verify_256+0x13c>)
 80046ea:	47b8      	blx	r7
        *res = (int)(sp_256_cmp_8(p1->x, u1) == 0);
 80046ec:	a966      	add	r1, sp, #408	; 0x198
 80046ee:	a804      	add	r0, sp, #16
 80046f0:	4b24      	ldr	r3, [pc, #144]	; (8004784 <sp_ecc_verify_256+0x140>)
 80046f2:	4798      	blx	r3
 80046f4:	fab0 f780 	clz	r7, r0
 80046f8:	097f      	lsrs	r7, r7, #5
 80046fa:	9bef      	ldr	r3, [sp, #956]	; 0x3bc
 80046fc:	601f      	str	r7, [r3, #0]
        if (*res == 0) {
 80046fe:	b307      	cbz	r7, 8004742 <sp_ecc_verify_256+0xfe>
    int32_t c = 0;
 8004700:	4627      	mov	r7, r4
        if ((*res == 0) && (c < 0)) {
 8004702:	9bef      	ldr	r3, [sp, #956]	; 0x3bc
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1d0      	bne.n	80046ac <sp_ecc_verify_256+0x68>
 800470a:	2f00      	cmp	r7, #0
 800470c:	dace      	bge.n	80046ac <sp_ecc_verify_256+0x68>
            err = sp_256_mod_mul_norm_8(u2, u2, p256_mod);
 800470e:	4a19      	ldr	r2, [pc, #100]	; (8004774 <sp_ecc_verify_256+0x130>)
 8004710:	a976      	add	r1, sp, #472	; 0x1d8
 8004712:	4608      	mov	r0, r1
 8004714:	4b18      	ldr	r3, [pc, #96]	; (8004778 <sp_ecc_verify_256+0x134>)
 8004716:	4798      	blx	r3
            if (err == MP_OKAY) {
 8004718:	4604      	mov	r4, r0
 800471a:	2800      	cmp	r0, #0
 800471c:	d1c6      	bne.n	80046ac <sp_ecc_verify_256+0x68>
                sp_256_mont_mul_8(u1, u2, p1->z, p256_mod,
 800471e:	2301      	movs	r3, #1
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	4b14      	ldr	r3, [pc, #80]	; (8004774 <sp_ecc_verify_256+0x130>)
 8004724:	aa24      	add	r2, sp, #144	; 0x90
 8004726:	a976      	add	r1, sp, #472	; 0x1d8
 8004728:	a866      	add	r0, sp, #408	; 0x198
 800472a:	4d15      	ldr	r5, [pc, #84]	; (8004780 <sp_ecc_verify_256+0x13c>)
 800472c:	47a8      	blx	r5
                *res = (sp_256_cmp_8(p1->x, u1) == 0);
 800472e:	a966      	add	r1, sp, #408	; 0x198
 8004730:	a804      	add	r0, sp, #16
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <sp_ecc_verify_256+0x140>)
 8004734:	4798      	blx	r3
 8004736:	fab0 f080 	clz	r0, r0
 800473a:	0940      	lsrs	r0, r0, #5
 800473c:	9bef      	ldr	r3, [sp, #956]	; 0x3bc
 800473e:	6018      	str	r0, [r3, #0]
    return err;
 8004740:	e7b4      	b.n	80046ac <sp_ecc_verify_256+0x68>
            sp_256_from_mp(u2, 8, rm);
 8004742:	462a      	mov	r2, r5
 8004744:	2108      	movs	r1, #8
 8004746:	a876      	add	r0, sp, #472	; 0x1d8
 8004748:	4b08      	ldr	r3, [pc, #32]	; (800476c <sp_ecc_verify_256+0x128>)
 800474a:	4798      	blx	r3
            carry = sp_256_add_8(u2, u2, p256_order);
 800474c:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <sp_ecc_verify_256+0x144>)
 800474e:	a976      	add	r1, sp, #472	; 0x1d8
 8004750:	4608      	mov	r0, r1
 8004752:	4b0e      	ldr	r3, [pc, #56]	; (800478c <sp_ecc_verify_256+0x148>)
 8004754:	4798      	blx	r3
            if (carry == 0) {
 8004756:	2800      	cmp	r0, #0
 8004758:	d1d3      	bne.n	8004702 <sp_ecc_verify_256+0xbe>
                c = sp_256_cmp_8(u2, p256_mod);
 800475a:	4906      	ldr	r1, [pc, #24]	; (8004774 <sp_ecc_verify_256+0x130>)
 800475c:	a876      	add	r0, sp, #472	; 0x1d8
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <sp_ecc_verify_256+0x140>)
 8004760:	4798      	blx	r3
 8004762:	4607      	mov	r7, r0
 8004764:	e7cd      	b.n	8004702 <sp_ecc_verify_256+0xbe>
 8004766:	bf00      	nop
 8004768:	08003699 	.word	0x08003699
 800476c:	08003849 	.word	0x08003849
 8004770:	08004465 	.word	0x08004465
 8004774:	08005064 	.word	0x08005064
 8004778:	08001b5f 	.word	0x08001b5f
 800477c:	080025f5 	.word	0x080025f5
 8004780:	08001e49 	.word	0x08001e49
 8004784:	08002bed 	.word	0x08002bed
 8004788:	080050e4 	.word	0x080050e4
 800478c:	08001aed 	.word	0x08001aed

08004790 <wc_ecc_curve_cache_free_spec_item>:
    #define FREE_CURVE_SPECS()
#endif /* ECC_CACHE_CURVE */

static void wc_ecc_curve_cache_free_spec_item(ecc_curve_spec* curve, mp_int* item,
    byte mask)
{
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4604      	mov	r4, r0
 8004794:	4615      	mov	r5, r2
    if (item) {
 8004796:	b111      	cbz	r1, 800479e <wc_ecc_curve_cache_free_spec_item+0xe>
 8004798:	4608      	mov	r0, r1
    #ifdef HAVE_WOLF_BIGINT
        wc_bigint_free(&item->raw);
    #endif
        mp_clear(item);
 800479a:	4b04      	ldr	r3, [pc, #16]	; (80047ac <wc_ecc_curve_cache_free_spec_item+0x1c>)
 800479c:	4798      	blx	r3
    }
    curve->load_mask &= ~mask;
 800479e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80047a2:	ea23 0205 	bic.w	r2, r3, r5
 80047a6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
}
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	08000fe1 	.word	0x08000fe1

080047b0 <wc_ecc_curve_cache_free_spec>:
static void wc_ecc_curve_cache_free_spec(ecc_curve_spec* curve)
{
    if (curve == NULL) {
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d03b      	beq.n	800482c <wc_ecc_curve_cache_free_spec+0x7c>
{
 80047b4:	b510      	push	{r4, lr}
 80047b6:	4604      	mov	r4, r0
        return;
    }

    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
 80047b8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80047bc:	f013 0f01 	tst.w	r3, #1
 80047c0:	d117      	bne.n	80047f2 <wc_ecc_curve_cache_free_spec+0x42>
        wc_ecc_curve_cache_free_spec_item(curve, curve->prime, ECC_CURVE_FIELD_PRIME);
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
 80047c2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80047c6:	f013 0f02 	tst.w	r3, #2
 80047ca:	d117      	bne.n	80047fc <wc_ecc_curve_cache_free_spec+0x4c>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Af, ECC_CURVE_FIELD_AF);
#ifdef USE_ECC_B_PARAM
    if (curve->load_mask & ECC_CURVE_FIELD_BF)
        wc_ecc_curve_cache_free_spec_item(curve, curve->Bf, ECC_CURVE_FIELD_BF);
#endif
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
 80047cc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80047d0:	f013 0f08 	tst.w	r3, #8
 80047d4:	d118      	bne.n	8004808 <wc_ecc_curve_cache_free_spec+0x58>
        wc_ecc_curve_cache_free_spec_item(curve, curve->order, ECC_CURVE_FIELD_ORDER);
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
 80047d6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80047da:	f013 0f10 	tst.w	r3, #16
 80047de:	d119      	bne.n	8004814 <wc_ecc_curve_cache_free_spec+0x64>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gx, ECC_CURVE_FIELD_GX);
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
 80047e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80047e4:	f013 0f20 	tst.w	r3, #32
 80047e8:	d11a      	bne.n	8004820 <wc_ecc_curve_cache_free_spec+0x70>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gy, ECC_CURVE_FIELD_GY);

    curve->load_mask = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80047f0:	bd10      	pop	{r4, pc}
        wc_ecc_curve_cache_free_spec_item(curve, curve->prime, ECC_CURVE_FIELD_PRIME);
 80047f2:	2201      	movs	r2, #1
 80047f4:	6841      	ldr	r1, [r0, #4]
 80047f6:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <wc_ecc_curve_cache_free_spec+0x80>)
 80047f8:	4798      	blx	r3
 80047fa:	e7e2      	b.n	80047c2 <wc_ecc_curve_cache_free_spec+0x12>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Af, ECC_CURVE_FIELD_AF);
 80047fc:	2202      	movs	r2, #2
 80047fe:	68a1      	ldr	r1, [r4, #8]
 8004800:	4620      	mov	r0, r4
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <wc_ecc_curve_cache_free_spec+0x80>)
 8004804:	4798      	blx	r3
 8004806:	e7e1      	b.n	80047cc <wc_ecc_curve_cache_free_spec+0x1c>
        wc_ecc_curve_cache_free_spec_item(curve, curve->order, ECC_CURVE_FIELD_ORDER);
 8004808:	2208      	movs	r2, #8
 800480a:	68e1      	ldr	r1, [r4, #12]
 800480c:	4620      	mov	r0, r4
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <wc_ecc_curve_cache_free_spec+0x80>)
 8004810:	4798      	blx	r3
 8004812:	e7e0      	b.n	80047d6 <wc_ecc_curve_cache_free_spec+0x26>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gx, ECC_CURVE_FIELD_GX);
 8004814:	2210      	movs	r2, #16
 8004816:	6921      	ldr	r1, [r4, #16]
 8004818:	4620      	mov	r0, r4
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <wc_ecc_curve_cache_free_spec+0x80>)
 800481c:	4798      	blx	r3
 800481e:	e7df      	b.n	80047e0 <wc_ecc_curve_cache_free_spec+0x30>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gy, ECC_CURVE_FIELD_GY);
 8004820:	2220      	movs	r2, #32
 8004822:	6961      	ldr	r1, [r4, #20]
 8004824:	4620      	mov	r0, r4
 8004826:	4b02      	ldr	r3, [pc, #8]	; (8004830 <wc_ecc_curve_cache_free_spec+0x80>)
 8004828:	4798      	blx	r3
 800482a:	e7de      	b.n	80047ea <wc_ecc_curve_cache_free_spec+0x3a>
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	08004791 	.word	0x08004791

08004834 <wc_ecc_curve_free>:

static void wc_ecc_curve_free(ecc_curve_spec* curve)
{
    if (curve) {
 8004834:	b118      	cbz	r0, 800483e <wc_ecc_curve_free+0xa>
{
 8004836:	b508      	push	{r3, lr}
            wc_ecc_curve_cache_free_spec(curve);
            XFREE(curve, NULL, DYNAMIC_TYPE_ECC);
        }
        #endif
    #else
        wc_ecc_curve_cache_free_spec(curve);
 8004838:	4b01      	ldr	r3, [pc, #4]	; (8004840 <wc_ecc_curve_free+0xc>)
 800483a:	4798      	blx	r3
    #endif
    }
}
 800483c:	bd08      	pop	{r3, pc}
 800483e:	4770      	bx	lr
 8004840:	080047b1 	.word	0x080047b1

08004844 <wc_ecc_curve_cache_load_item>:

static int wc_ecc_curve_cache_load_item(ecc_curve_spec* curve, const char* src,
    mp_int** dst, byte mask)
{
 8004844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004848:	461f      	mov	r7, r3
    int err;

#ifndef ECC_CACHE_CURVE
    /* get mp_int from temp */
    if (curve->spec_use >= curve->spec_count) {
 800484a:	6a05      	ldr	r5, [r0, #32]
 800484c:	69c3      	ldr	r3, [r0, #28]
 800484e:	429d      	cmp	r5, r3
 8004850:	d21a      	bcs.n	8004888 <wc_ecc_curve_cache_load_item+0x44>
 8004852:	4604      	mov	r4, r0
 8004854:	4688      	mov	r8, r1
 8004856:	4616      	mov	r6, r2
        WOLFSSL_MSG("Invalid DECLARE_CURVE_SPECS count");
        return ECC_BAD_ARG_E;
    }
    *dst = &curve->spec_ints[curve->spec_use++];
 8004858:	6980      	ldr	r0, [r0, #24]
 800485a:	1c6b      	adds	r3, r5, #1
 800485c:	6223      	str	r3, [r4, #32]
 800485e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004862:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8004866:	6010      	str	r0, [r2, #0]
#endif

    err = mp_init(*dst);
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <wc_ecc_curve_cache_load_item+0x4c>)
 800486a:	4798      	blx	r3
    if (err == MP_OKAY) {
 800486c:	b108      	cbz	r0, 8004872 <wc_ecc_curve_cache_load_item+0x2e>
        if (err == MP_OKAY)
            err = wc_mp_to_bigint(*dst, &(*dst)->raw);
    #endif
    }
    return err;
}
 800486e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        curve->load_mask |= mask;
 8004872:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004876:	431f      	orrs	r7, r3
 8004878:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
 800487c:	2210      	movs	r2, #16
 800487e:	4641      	mov	r1, r8
 8004880:	6830      	ldr	r0, [r6, #0]
 8004882:	4b04      	ldr	r3, [pc, #16]	; (8004894 <wc_ecc_curve_cache_load_item+0x50>)
 8004884:	4798      	blx	r3
 8004886:	e7f2      	b.n	800486e <wc_ecc_curve_cache_load_item+0x2a>
        return ECC_BAD_ARG_E;
 8004888:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800488c:	e7ef      	b.n	800486e <wc_ecc_curve_cache_load_item+0x2a>
 800488e:	bf00      	nop
 8004890:	08000f05 	.word	0x08000f05
 8004894:	08001135 	.word	0x08001135

08004898 <wc_ecc_curve_load>:

static int wc_ecc_curve_load(const ecc_set_type* dp, ecc_curve_spec** pCurve,
    byte load_mask)
{
 8004898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    byte load_items = 0; /* mask of items to load */
#ifdef ECC_CACHE_CURVE
    int x;
#endif

    if (dp == NULL || pCurve == NULL)
 800489c:	2800      	cmp	r0, #0
 800489e:	d059      	beq.n	8004954 <wc_ecc_curve_load+0xbc>
 80048a0:	4607      	mov	r7, r0
 80048a2:	2900      	cmp	r1, #0
 80048a4:	d059      	beq.n	800495a <wc_ecc_curve_load+0xc2>
        curve = ecc_curve_spec_cache[x];
    }
    /* return new or cached curve */
    *pCurve = curve;
#else
    curve = *pCurve;
 80048a6:	680e      	ldr	r6, [r1, #0]
#endif /* ECC_CACHE_CURVE */

    /* make sure the curve is initialized */
    if (curve->dp != dp) {
 80048a8:	6833      	ldr	r3, [r6, #0]
 80048aa:	4283      	cmp	r3, r0
 80048ac:	d002      	beq.n	80048b4 <wc_ecc_curve_load+0x1c>
        curve->load_mask = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
        curve->order = &curve->order_lcl;
        curve->Gx = &curve->Gx_lcl;
        curve->Gy = &curve->Gy_lcl;
    #endif
    }
    curve->dp = dp; /* set dp info */
 80048b4:	6037      	str	r7, [r6, #0]

    /* determine items to load */
    load_items = (((byte)~(word32)curve->load_mask) & load_mask);
 80048b6:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 80048ba:	ea22 0403 	bic.w	r4, r2, r3
    curve->load_mask |= load_items;
 80048be:	4323      	orrs	r3, r4
 80048c0:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24

    /* load items */
    if (load_items & ECC_CURVE_FIELD_PRIME)
 80048c4:	f014 0f01 	tst.w	r4, #1
 80048c8:	d110      	bne.n	80048ec <wc_ecc_curve_load+0x54>
    int ret = 0;
 80048ca:	2500      	movs	r5, #0
        ret += wc_ecc_curve_cache_load_item(curve, dp->prime, &curve->prime,
            ECC_CURVE_FIELD_PRIME);
    if (load_items & ECC_CURVE_FIELD_AF)
 80048cc:	f014 0f02 	tst.w	r4, #2
 80048d0:	d114      	bne.n	80048fc <wc_ecc_curve_load+0x64>
#ifdef USE_ECC_B_PARAM
    if (load_items & ECC_CURVE_FIELD_BF)
        ret += wc_ecc_curve_cache_load_item(curve, dp->Bf, &curve->Bf,
            ECC_CURVE_FIELD_BF);
#endif
    if (load_items & ECC_CURVE_FIELD_ORDER)
 80048d2:	f014 0f08 	tst.w	r4, #8
 80048d6:	d11b      	bne.n	8004910 <wc_ecc_curve_load+0x78>
        ret += wc_ecc_curve_cache_load_item(curve, dp->order, &curve->order,
            ECC_CURVE_FIELD_ORDER);
    if (load_items & ECC_CURVE_FIELD_GX)
 80048d8:	f014 0f10 	tst.w	r4, #16
 80048dc:	d122      	bne.n	8004924 <wc_ecc_curve_load+0x8c>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gx, &curve->Gx,
            ECC_CURVE_FIELD_GX);
    if (load_items & ECC_CURVE_FIELD_GY)
 80048de:	f014 0f20 	tst.w	r4, #32
 80048e2:	d128      	bne.n	8004936 <wc_ecc_curve_load+0x9e>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gy, &curve->Gy,
            ECC_CURVE_FIELD_GY);

    /* check for error */
    if (ret != 0) {
 80048e4:	bb85      	cbnz	r5, 8004948 <wc_ecc_curve_load+0xb0>
#if defined(ECC_CACHE_CURVE) && !defined(SINGLE_THREADED)
    wc_UnLockMutex(&ecc_curve_cache_mutex);
#endif

    return ret;
}
 80048e6:	4628      	mov	r0, r5
 80048e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret += wc_ecc_curve_cache_load_item(curve, dp->prime, &curve->prime,
 80048ec:	2301      	movs	r3, #1
 80048ee:	1d32      	adds	r2, r6, #4
 80048f0:	68f9      	ldr	r1, [r7, #12]
 80048f2:	4630      	mov	r0, r6
 80048f4:	4d1a      	ldr	r5, [pc, #104]	; (8004960 <wc_ecc_curve_load+0xc8>)
 80048f6:	47a8      	blx	r5
 80048f8:	4605      	mov	r5, r0
 80048fa:	e7e7      	b.n	80048cc <wc_ecc_curve_load+0x34>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Af, &curve->Af,
 80048fc:	2302      	movs	r3, #2
 80048fe:	f106 0208 	add.w	r2, r6, #8
 8004902:	6939      	ldr	r1, [r7, #16]
 8004904:	4630      	mov	r0, r6
 8004906:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004960 <wc_ecc_curve_load+0xc8>
 800490a:	47c0      	blx	r8
 800490c:	4405      	add	r5, r0
 800490e:	e7e0      	b.n	80048d2 <wc_ecc_curve_load+0x3a>
        ret += wc_ecc_curve_cache_load_item(curve, dp->order, &curve->order,
 8004910:	2308      	movs	r3, #8
 8004912:	f106 020c 	add.w	r2, r6, #12
 8004916:	69b9      	ldr	r1, [r7, #24]
 8004918:	4630      	mov	r0, r6
 800491a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8004960 <wc_ecc_curve_load+0xc8>
 800491e:	47c0      	blx	r8
 8004920:	4405      	add	r5, r0
 8004922:	e7d9      	b.n	80048d8 <wc_ecc_curve_load+0x40>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gx, &curve->Gx,
 8004924:	2310      	movs	r3, #16
 8004926:	18f2      	adds	r2, r6, r3
 8004928:	69f9      	ldr	r1, [r7, #28]
 800492a:	4630      	mov	r0, r6
 800492c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8004960 <wc_ecc_curve_load+0xc8>
 8004930:	47c0      	blx	r8
 8004932:	4405      	add	r5, r0
 8004934:	e7d3      	b.n	80048de <wc_ecc_curve_load+0x46>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gy, &curve->Gy,
 8004936:	2320      	movs	r3, #32
 8004938:	f106 0214 	add.w	r2, r6, #20
 800493c:	6a39      	ldr	r1, [r7, #32]
 800493e:	4630      	mov	r0, r6
 8004940:	4c07      	ldr	r4, [pc, #28]	; (8004960 <wc_ecc_curve_load+0xc8>)
 8004942:	47a0      	blx	r4
 8004944:	4405      	add	r5, r0
 8004946:	e7cd      	b.n	80048e4 <wc_ecc_curve_load+0x4c>
        wc_ecc_curve_free(curve);
 8004948:	4630      	mov	r0, r6
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <wc_ecc_curve_load+0xcc>)
 800494c:	4798      	blx	r3
        ret = MP_READ_E;
 800494e:	f06f 056e 	mvn.w	r5, #110	; 0x6e
 8004952:	e7c8      	b.n	80048e6 <wc_ecc_curve_load+0x4e>
        return BAD_FUNC_ARG;
 8004954:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8004958:	e7c5      	b.n	80048e6 <wc_ecc_curve_load+0x4e>
 800495a:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 800495e:	e7c2      	b.n	80048e6 <wc_ecc_curve_load+0x4e>
 8004960:	08004845 	.word	0x08004845
 8004964:	08004835 	.word	0x08004835

08004968 <ecc_make_pub_ex>:
 *
 * returns MP_OKAY on success
 */
static int ecc_make_pub_ex(ecc_key* key, ecc_curve_spec* curveIn,
        ecc_point* pubOut, WC_RNG* rng)
{
 8004968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800496c:	b0f3      	sub	sp, #460	; 0x1cc
 800496e:	4604      	mov	r4, r0
 8004970:	460d      	mov	r5, r1
 8004972:	4617      	mov	r7, r2
  && !defined(WOLFSSL_SILABS_SE_ACCEL)
#if !defined(WOLFSSL_SP_MATH)
    ecc_point* base = NULL;
#endif
    ecc_point* pub;
    DECLARE_CURVE_SPECS(curve, ECC_CURVE_FIELD_COUNT);
 8004974:	a804      	add	r0, sp, #16
 8004976:	9003      	str	r0, [sp, #12]
 8004978:	2228      	movs	r2, #40	; 0x28
 800497a:	2100      	movs	r1, #0
 800497c:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <ecc_make_pub_ex+0xfc>)
 800497e:	4798      	blx	r3
 8004980:	9b03      	ldr	r3, [sp, #12]
 8004982:	aa0e      	add	r2, sp, #56	; 0x38
 8004984:	619a      	str	r2, [r3, #24]
 8004986:	2205      	movs	r2, #5
 8004988:	61da      	str	r2, [r3, #28]
#endif /* !WOLFSSL_ATECC508A */

    (void)rng;

    if (key == NULL) {
 800498a:	2c00      	cmp	r4, #0
 800498c:	d067      	beq.n	8004a5e <ecc_make_pub_ex+0xf6>

#if !defined(WOLFSSL_ATECC508A) && !defined(WOLFSSL_ATECC608A) \
  && !defined(WOLFSSL_SILABS_SE_ACCEL)

    /* if ecc_point passed in then use it as output for public key point */
    if (pubOut != NULL) {
 800498e:	b1c7      	cbz	r7, 80049c2 <ecc_make_pub_ex+0x5a>
        pub = pubOut;
 8004990:	46b8      	mov	r8, r7
        pub = &key->pubkey;
        key->type = ECC_PRIVATEKEY_ONLY;
    }

    /* avoid loading the curve unless it is not passed in */
    if (curveIn != NULL) {
 8004992:	b1dd      	cbz	r5, 80049cc <ecc_make_pub_ex+0x64>
        curve = curveIn;
 8004994:	9503      	str	r5, [sp, #12]
    int err = MP_OKAY;
 8004996:	2600      	movs	r6, #0
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
        }
    }

    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8004998:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800499c:	bb63      	cbnz	r3, 80049f8 <ecc_make_pub_ex+0x90>
                                      (mp_cmp(&key->k, curve->order) != MP_LT)))
    {
        err = ECC_PRIV_KEY_E;
 800499e:	f06f 06d7 	mvn.w	r6, #215	; 0xd7
        alt_fp_init(pub->y);
        alt_fp_init(pub->z);
    #endif
    }

    if (err != MP_OKAY) {
 80049a2:	2e00      	cmp	r6, #0
 80049a4:	d13c      	bne.n	8004a20 <ecc_make_pub_ex+0xb8>
    }
    else
#ifdef WOLFSSL_HAVE_SP_ECC
#ifndef WOLFSSL_SP_NO_256
    if (key->idx != ECC_CUSTOM_IDX && ecc_sets[key->idx].id == ECC_SECP256R1) {
 80049a6:	6863      	ldr	r3, [r4, #4]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ac:	d04b      	beq.n	8004a46 <ecc_make_pub_ex+0xde>
 80049ae:	4a2e      	ldr	r2, [pc, #184]	; (8004a68 <ecc_make_pub_ex+0x100>)
 80049b0:	2134      	movs	r1, #52	; 0x34
 80049b2:	fb01 2303 	mla	r3, r1, r3, r2
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b07      	cmp	r3, #7
 80049ba:	d029      	beq.n	8004a10 <ecc_make_pub_ex+0xa8>
    }
    else
#endif
#endif
#if defined(WOLFSSL_SP_MATH)
        err = WC_KEY_SIZE_E;
 80049bc:	f06f 06e9 	mvn.w	r6, #233	; 0xe9
 80049c0:	e02f      	b.n	8004a22 <ecc_make_pub_ex+0xba>
        pub = &key->pubkey;
 80049c2:	46a0      	mov	r8, r4
        key->type = ECC_PRIVATEKEY_ONLY;
 80049c4:	2303      	movs	r3, #3
 80049c6:	f848 3b18 	str.w	r3, [r8], #24
 80049ca:	e7e2      	b.n	8004992 <ecc_make_pub_ex+0x2a>
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 80049cc:	223b      	movs	r2, #59	; 0x3b
 80049ce:	a903      	add	r1, sp, #12
 80049d0:	6920      	ldr	r0, [r4, #16]
 80049d2:	4b26      	ldr	r3, [pc, #152]	; (8004a6c <ecc_make_pub_ex+0x104>)
 80049d4:	4798      	blx	r3
    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 80049d6:	4606      	mov	r6, r0
 80049d8:	2800      	cmp	r0, #0
 80049da:	d0dd      	beq.n	8004998 <ecc_make_pub_ex+0x30>
    if (err == MP_OKAY) {
 80049dc:	2e00      	cmp	r6, #0
 80049de:	d1e0      	bne.n	80049a2 <ecc_make_pub_ex+0x3a>
        err = mp_init_multi(pub->x, pub->y, pub->z, NULL, NULL, NULL);
 80049e0:	2300      	movs	r3, #0
 80049e2:	9301      	str	r3, [sp, #4]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	f108 02a0 	add.w	r2, r8, #160	; 0xa0
 80049ea:	f108 0150 	add.w	r1, r8, #80	; 0x50
 80049ee:	4640      	mov	r0, r8
 80049f0:	4e1f      	ldr	r6, [pc, #124]	; (8004a70 <ecc_make_pub_ex+0x108>)
 80049f2:	47b0      	blx	r6
 80049f4:	4606      	mov	r6, r0
 80049f6:	e7d4      	b.n	80049a2 <ecc_make_pub_ex+0x3a>
                                      (mp_cmp(&key->k, curve->order) != MP_LT)))
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	68d9      	ldr	r1, [r3, #12]
 80049fc:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8004a00:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <ecc_make_pub_ex+0x10c>)
 8004a02:	4798      	blx	r3
    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8004a04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004a08:	d0e8      	beq.n	80049dc <ecc_make_pub_ex+0x74>
        err = ECC_PRIV_KEY_E;
 8004a0a:	f06f 06d7 	mvn.w	r6, #215	; 0xd7
 8004a0e:	e7c8      	b.n	80049a2 <ecc_make_pub_ex+0x3a>
        err = sp_ecc_mulmod_base_256(&key->k, pub, 1, key->heap);
 8004a10:	6963      	ldr	r3, [r4, #20]
 8004a12:	2201      	movs	r2, #1
 8004a14:	4641      	mov	r1, r8
 8004a16:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8004a1a:	4e17      	ldr	r6, [pc, #92]	; (8004a78 <ecc_make_pub_ex+0x110>)
 8004a1c:	47b0      	blx	r6
 8004a1e:	4606      	mov	r6, r0
    if (err == MP_OKAY)
        err = ecc_check_pubkey_order(key, pub, curve->Af, curve->prime,
                curve->order);
#endif /* WOLFSSL_VALIDATE_KEYGEN */

    if (err != MP_OKAY) {
 8004a20:	b14e      	cbz	r6, 8004a36 <ecc_make_pub_ex+0xce>
        /* clean up if failed */
    #ifndef ALT_ECC_SIZE
        mp_clear(pub->x);
 8004a22:	4640      	mov	r0, r8
 8004a24:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004a80 <ecc_make_pub_ex+0x118>
 8004a28:	47c8      	blx	r9
        mp_clear(pub->y);
 8004a2a:	f108 0050 	add.w	r0, r8, #80	; 0x50
 8004a2e:	47c8      	blx	r9
        mp_clear(pub->z);
 8004a30:	f108 00a0 	add.w	r0, r8, #160	; 0xa0
 8004a34:	47c8      	blx	r9
    #endif
    }

    /* free up local curve */
    if (curveIn == NULL) {
 8004a36:	b14d      	cbz	r5, 8004a4c <ecc_make_pub_ex+0xe4>
    (void)curveIn;
    err = NOT_COMPILED_IN;
#endif /* WOLFSSL_ATECC508A || WOLFSSL_SILABS_SE_ACCEL */

    /* change key state if public part is cached */
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d00a      	beq.n	8004a54 <ecc_make_pub_ex+0xec>
        key->type = ECC_PRIVATEKEY;
    }

    return err;
}
 8004a3e:	4630      	mov	r0, r6
 8004a40:	b073      	add	sp, #460	; 0x1cc
 8004a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = WC_KEY_SIZE_E;
 8004a46:	f06f 06e9 	mvn.w	r6, #233	; 0xe9
 8004a4a:	e7ea      	b.n	8004a22 <ecc_make_pub_ex+0xba>
        wc_ecc_curve_free(curve);
 8004a4c:	9803      	ldr	r0, [sp, #12]
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <ecc_make_pub_ex+0x114>)
 8004a50:	4798      	blx	r3
 8004a52:	e7f1      	b.n	8004a38 <ecc_make_pub_ex+0xd0>
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
 8004a54:	2f00      	cmp	r7, #0
 8004a56:	d1f2      	bne.n	8004a3e <ecc_make_pub_ex+0xd6>
        key->type = ECC_PRIVATEKEY;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	e7ef      	b.n	8004a3e <ecc_make_pub_ex+0xd6>
        return BAD_FUNC_ARG;
 8004a5e:	f06f 06ac 	mvn.w	r6, #172	; 0xac
 8004a62:	e7ec      	b.n	8004a3e <ecc_make_pub_ex+0xd6>
 8004a64:	08000125 	.word	0x08000125
 8004a68:	080056d0 	.word	0x080056d0
 8004a6c:	08004899 	.word	0x08004899
 8004a70:	08000f21 	.word	0x08000f21
 8004a74:	08001009 	.word	0x08001009
 8004a78:	08004605 	.word	0x08004605
 8004a7c:	08004835 	.word	0x08004835
 8004a80:	08000fe1 	.word	0x08000fe1

08004a84 <wc_ecc_check_r_s_range>:
    return err;
}
#endif /* !NO_ASN */

static int wc_ecc_check_r_s_range(ecc_key* key, mp_int* r, mp_int* s)
{
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	b0a0      	sub	sp, #128	; 0x80
 8004a88:	4604      	mov	r4, r0
 8004a8a:	460d      	mov	r5, r1
 8004a8c:	4616      	mov	r6, r2
    int err;
    DECLARE_CURVE_SPECS(curve, 1);
 8004a8e:	a802      	add	r0, sp, #8
 8004a90:	9001      	str	r0, [sp, #4]
 8004a92:	2228      	movs	r2, #40	; 0x28
 8004a94:	2100      	movs	r1, #0
 8004a96:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <wc_ecc_check_r_s_range+0x7c>)
 8004a98:	4798      	blx	r3
 8004a9a:	9b01      	ldr	r3, [sp, #4]
 8004a9c:	aa0c      	add	r2, sp, #48	; 0x30
 8004a9e:	619a      	str	r2, [r3, #24]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	61da      	str	r2, [r3, #28]

    ALLOC_CURVE_SPECS(1);
    err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	a901      	add	r1, sp, #4
 8004aa8:	6920      	ldr	r0, [r4, #16]
 8004aaa:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <wc_ecc_check_r_s_range+0x80>)
 8004aac:	4798      	blx	r3
    if (err != 0) {
 8004aae:	4604      	mov	r4, r0
 8004ab0:	b9b8      	cbnz	r0, 8004ae2 <wc_ecc_check_r_s_range+0x5e>
        FREE_CURVE_SPECS();
        return err;
    }

    if (mp_iszero(r) || mp_iszero(s)) {
 8004ab2:	682b      	ldr	r3, [r5, #0]
 8004ab4:	b17b      	cbz	r3, 8004ad6 <wc_ecc_check_r_s_range+0x52>
 8004ab6:	6833      	ldr	r3, [r6, #0]
 8004ab8:	b913      	cbnz	r3, 8004ac0 <wc_ecc_check_r_s_range+0x3c>
        err = MP_ZERO_E;
 8004aba:	f06f 0478 	mvn.w	r4, #120	; 0x78
 8004abe:	e00c      	b.n	8004ada <wc_ecc_check_r_s_range+0x56>
    }
    if ((err == 0) && (mp_cmp(r, curve->order) != MP_LT)) {
 8004ac0:	9b01      	ldr	r3, [sp, #4]
 8004ac2:	68d9      	ldr	r1, [r3, #12]
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <wc_ecc_check_r_s_range+0x84>)
 8004ac8:	4798      	blx	r3
 8004aca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004ace:	d004      	beq.n	8004ada <wc_ecc_check_r_s_range+0x56>
        err = MP_VAL;
 8004ad0:	f06f 0402 	mvn.w	r4, #2
 8004ad4:	e002      	b.n	8004adc <wc_ecc_check_r_s_range+0x58>
        err = MP_ZERO_E;
 8004ad6:	f06f 0478 	mvn.w	r4, #120	; 0x78
    }
    if ((err == 0) && (mp_cmp(s, curve->order) != MP_LT)) {
 8004ada:	b12c      	cbz	r4, 8004ae8 <wc_ecc_check_r_s_range+0x64>
        err = MP_VAL;
    }

    wc_ecc_curve_free(curve);
 8004adc:	9801      	ldr	r0, [sp, #4]
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <wc_ecc_check_r_s_range+0x88>)
 8004ae0:	4798      	blx	r3
    FREE_CURVE_SPECS();
    return err;
}
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	b020      	add	sp, #128	; 0x80
 8004ae6:	bd70      	pop	{r4, r5, r6, pc}
    if ((err == 0) && (mp_cmp(s, curve->order) != MP_LT)) {
 8004ae8:	9b01      	ldr	r3, [sp, #4]
 8004aea:	68d9      	ldr	r1, [r3, #12]
 8004aec:	4630      	mov	r0, r6
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <wc_ecc_check_r_s_range+0x84>)
 8004af0:	4798      	blx	r3
 8004af2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004af6:	d0f1      	beq.n	8004adc <wc_ecc_check_r_s_range+0x58>
        err = MP_VAL;
 8004af8:	f06f 0402 	mvn.w	r4, #2
 8004afc:	e7ee      	b.n	8004adc <wc_ecc_check_r_s_range+0x58>
 8004afe:	bf00      	nop
 8004b00:	08000125 	.word	0x08000125
 8004b04:	08004899 	.word	0x08004899
 8004b08:	08001009 	.word	0x08001009
 8004b0c:	08004835 	.word	0x08004835

08004b10 <wc_ecc_set_curve>:
    if (keysize <= 0 && curve_id < 0) {
 8004b10:	2900      	cmp	r1, #0
 8004b12:	dd0a      	ble.n	8004b2a <wc_ecc_set_curve+0x1a>
    if (keysize > ECC_MAXSIZE) {
 8004b14:	2942      	cmp	r1, #66	; 0x42
 8004b16:	dc29      	bgt.n	8004b6c <wc_ecc_set_curve+0x5c>
    if (key->idx != ECC_CUSTOM_IDX) {
 8004b18:	6843      	ldr	r3, [r0, #4]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b1e:	d028      	beq.n	8004b72 <wc_ecc_set_curve+0x62>
{
 8004b20:	b470      	push	{r4, r5, r6}
        key->idx = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	6043      	str	r3, [r0, #4]
        key->dp = NULL;
 8004b26:	6103      	str	r3, [r0, #16]
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8004b28:	e007      	b.n	8004b3a <wc_ecc_set_curve+0x2a>
    if (keysize <= 0 && curve_id < 0) {
 8004b2a:	2a00      	cmp	r2, #0
 8004b2c:	daf2      	bge.n	8004b14 <wc_ecc_set_curve+0x4>
        return BAD_FUNC_ARG;
 8004b2e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8004b32:	4770      	bx	lr
            else if (keysize <= ecc_sets[x].size) {
 8004b34:	428c      	cmp	r4, r1
 8004b36:	da0f      	bge.n	8004b58 <wc_ecc_set_curve+0x48>
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8004b38:	3301      	adds	r3, #1
 8004b3a:	2434      	movs	r4, #52	; 0x34
 8004b3c:	fb04 f403 	mul.w	r4, r4, r3
 8004b40:	4d0e      	ldr	r5, [pc, #56]	; (8004b7c <wc_ecc_set_curve+0x6c>)
 8004b42:	592c      	ldr	r4, [r5, r4]
 8004b44:	b144      	cbz	r4, 8004b58 <wc_ecc_set_curve+0x48>
            if (curve_id > ECC_CURVE_DEF) {
 8004b46:	2a00      	cmp	r2, #0
 8004b48:	ddf4      	ble.n	8004b34 <wc_ecc_set_curve+0x24>
                if (curve_id == ecc_sets[x].id)
 8004b4a:	4e0c      	ldr	r6, [pc, #48]	; (8004b7c <wc_ecc_set_curve+0x6c>)
 8004b4c:	2534      	movs	r5, #52	; 0x34
 8004b4e:	fb05 6503 	mla	r5, r5, r3, r6
 8004b52:	686d      	ldr	r5, [r5, #4]
 8004b54:	4295      	cmp	r5, r2
 8004b56:	d1ef      	bne.n	8004b38 <wc_ecc_set_curve+0x28>
        if (ecc_sets[x].size == 0) {
 8004b58:	b16c      	cbz	r4, 8004b76 <wc_ecc_set_curve+0x66>
        key->idx = x;
 8004b5a:	6043      	str	r3, [r0, #4]
        key->dp  = &ecc_sets[x];
 8004b5c:	4a07      	ldr	r2, [pc, #28]	; (8004b7c <wc_ecc_set_curve+0x6c>)
 8004b5e:	2134      	movs	r1, #52	; 0x34
 8004b60:	fb01 2303 	mla	r3, r1, r3, r2
 8004b64:	6103      	str	r3, [r0, #16]
    return 0;
 8004b66:	2000      	movs	r0, #0
}
 8004b68:	bc70      	pop	{r4, r5, r6}
 8004b6a:	4770      	bx	lr
        return ECC_BAD_ARG_E;
 8004b6c:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8004b70:	4770      	bx	lr
    return 0;
 8004b72:	2000      	movs	r0, #0
}
 8004b74:	4770      	bx	lr
            return ECC_CURVE_OID_E;
 8004b76:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 8004b7a:	e7f5      	b.n	8004b68 <wc_ecc_set_curve+0x58>
 8004b7c:	080056d0 	.word	0x080056d0

08004b80 <wc_ecc_import_raw_private>:
#endif /* !NO_ASN */

#ifdef HAVE_ECC_KEY_IMPORT
static int wc_ecc_import_raw_private(ecc_key* key, const char* qx,
          const char* qy, const char* d, int curve_id, int encType)
{
 8004b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b84:	b085      	sub	sp, #20
 8004b86:	9303      	str	r3, [sp, #12]
  defined(WOLFSSL_SILABS_SE_ACCEL)
    word32 keySz = 0;
#endif

    /* if d is NULL, only import as public key using Qx,Qy */
    if (key == NULL || qx == NULL || qy == NULL) {
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d07f      	beq.n	8004c8c <wc_ecc_import_raw_private+0x10c>
 8004b8c:	460e      	mov	r6, r1
 8004b8e:	4617      	mov	r7, r2
 8004b90:	4605      	mov	r5, r0
 8004b92:	2900      	cmp	r1, #0
 8004b94:	d07d      	beq.n	8004c92 <wc_ecc_import_raw_private+0x112>
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	d07e      	beq.n	8004c98 <wc_ecc_import_raw_private+0x118>
    key->state = ECC_STATE_NONE;
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	6081      	str	r1, [r0, #8]

    /* make sure required variables are reset */
    wc_ecc_reset(key);

    /* set curve type and index */
    err = wc_ecc_set_curve(key, 0, curve_id);
 8004b9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ba0:	4b42      	ldr	r3, [pc, #264]	; (8004cac <wc_ecc_import_raw_private+0x12c>)
 8004ba2:	4798      	blx	r3
    if (err != 0) {
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	b118      	cbz	r0, 8004bb0 <wc_ecc_import_raw_private+0x30>
        mp_clear(key->pubkey.z);
        mp_clear(&key->k);
    }

    return err;
}
 8004ba8:	4620      	mov	r0, r4
 8004baa:	b005      	add	sp, #20
 8004bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = mp_init_multi(&key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
 8004bb0:	f505 7984 	add.w	r9, r5, #264	; 0x108
 8004bb4:	f105 0818 	add.w	r8, r5, #24
 8004bb8:	f105 0b68 	add.w	fp, r5, #104	; 0x68
 8004bbc:	f105 0ab8 	add.w	sl, r5, #184	; 0xb8
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	4653      	mov	r3, sl
 8004bc8:	465a      	mov	r2, fp
 8004bca:	4641      	mov	r1, r8
 8004bcc:	4648      	mov	r0, r9
 8004bce:	4c38      	ldr	r4, [pc, #224]	; (8004cb0 <wc_ecc_import_raw_private+0x130>)
 8004bd0:	47a0      	blx	r4
    if (err != MP_OKAY)
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	d163      	bne.n	8004c9e <wc_ecc_import_raw_private+0x11e>
        if (encType == WC_TYPE_HEX_STR)
 8004bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d018      	beq.n	8004c0e <wc_ecc_import_raw_private+0x8e>
                key->dp->size);
 8004bdc:	692b      	ldr	r3, [r5, #16]
            err = mp_read_unsigned_bin(key->pubkey.x, (const byte*)qx,
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4631      	mov	r1, r6
 8004be2:	4640      	mov	r0, r8
 8004be4:	4b33      	ldr	r3, [pc, #204]	; (8004cb4 <wc_ecc_import_raw_private+0x134>)
 8004be6:	4798      	blx	r3
 8004be8:	4604      	mov	r4, r0
        if (mp_iszero(key->pubkey.x)) {
 8004bea:	69ab      	ldr	r3, [r5, #24]
 8004bec:	b1eb      	cbz	r3, 8004c2a <wc_ecc_import_raw_private+0xaa>
    if (err == MP_OKAY) {
 8004bee:	b9f4      	cbnz	r4, 8004c2e <wc_ecc_import_raw_private+0xae>
        if (encType == WC_TYPE_HEX_STR)
 8004bf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d012      	beq.n	8004c1c <wc_ecc_import_raw_private+0x9c>
                key->dp->size);
 8004bf6:	692b      	ldr	r3, [r5, #16]
            err = mp_read_unsigned_bin(key->pubkey.y, (const byte*)qy,
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	4658      	mov	r0, fp
 8004bfe:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <wc_ecc_import_raw_private+0x134>)
 8004c00:	4798      	blx	r3
 8004c02:	4604      	mov	r4, r0
        if (mp_iszero(key->pubkey.y)) {
 8004c04:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004c06:	b993      	cbnz	r3, 8004c2e <wc_ecc_import_raw_private+0xae>
            err = BAD_FUNC_ARG;
 8004c08:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8004c0c:	e010      	b.n	8004c30 <wc_ecc_import_raw_private+0xb0>
            err = mp_read_radix(key->pubkey.x, qx, MP_RADIX_HEX);
 8004c0e:	2210      	movs	r2, #16
 8004c10:	4631      	mov	r1, r6
 8004c12:	4640      	mov	r0, r8
 8004c14:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <wc_ecc_import_raw_private+0x138>)
 8004c16:	4798      	blx	r3
 8004c18:	4604      	mov	r4, r0
 8004c1a:	e7e6      	b.n	8004bea <wc_ecc_import_raw_private+0x6a>
            err = mp_read_radix(key->pubkey.y, qy, MP_RADIX_HEX);
 8004c1c:	2210      	movs	r2, #16
 8004c1e:	4639      	mov	r1, r7
 8004c20:	4658      	mov	r0, fp
 8004c22:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <wc_ecc_import_raw_private+0x138>)
 8004c24:	4798      	blx	r3
 8004c26:	4604      	mov	r4, r0
 8004c28:	e7ec      	b.n	8004c04 <wc_ecc_import_raw_private+0x84>
            err = BAD_FUNC_ARG;
 8004c2a:	f06f 04ac 	mvn.w	r4, #172	; 0xac
    if (err == MP_OKAY)
 8004c2e:	b1ec      	cbz	r4, 8004c6c <wc_ecc_import_raw_private+0xec>
    if (err == MP_OKAY) {
 8004c30:	b984      	cbnz	r4, 8004c54 <wc_ecc_import_raw_private+0xd4>
        if (d != NULL) {
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	b33b      	cbz	r3, 8004c86 <wc_ecc_import_raw_private+0x106>
            key->type = ECC_PRIVATEKEY;
 8004c36:	2302      	movs	r3, #2
 8004c38:	602b      	str	r3, [r5, #0]
            if (encType == WC_TYPE_HEX_STR)
 8004c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d01b      	beq.n	8004c78 <wc_ecc_import_raw_private+0xf8>
                    key->dp->size);
 8004c40:	692b      	ldr	r3, [r5, #16]
                err = mp_read_unsigned_bin(&key->k, (const byte*)d,
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	9903      	ldr	r1, [sp, #12]
 8004c46:	4648      	mov	r0, r9
 8004c48:	4b1a      	ldr	r3, [pc, #104]	; (8004cb4 <wc_ecc_import_raw_private+0x134>)
 8004c4a:	4798      	blx	r3
 8004c4c:	4604      	mov	r4, r0
            if (mp_iszero(&key->k)) {
 8004c4e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8004c52:	b33b      	cbz	r3, 8004ca4 <wc_ecc_import_raw_private+0x124>
    if (err != MP_OKAY) {
 8004c54:	2c00      	cmp	r4, #0
 8004c56:	d0a7      	beq.n	8004ba8 <wc_ecc_import_raw_private+0x28>
        mp_clear(key->pubkey.x);
 8004c58:	4640      	mov	r0, r8
 8004c5a:	4d18      	ldr	r5, [pc, #96]	; (8004cbc <wc_ecc_import_raw_private+0x13c>)
 8004c5c:	47a8      	blx	r5
        mp_clear(key->pubkey.y);
 8004c5e:	4658      	mov	r0, fp
 8004c60:	47a8      	blx	r5
        mp_clear(key->pubkey.z);
 8004c62:	4650      	mov	r0, sl
 8004c64:	47a8      	blx	r5
        mp_clear(&key->k);
 8004c66:	4648      	mov	r0, r9
 8004c68:	47a8      	blx	r5
 8004c6a:	e79d      	b.n	8004ba8 <wc_ecc_import_raw_private+0x28>
        err = mp_set(key->pubkey.z, 1);
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	4650      	mov	r0, sl
 8004c70:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <wc_ecc_import_raw_private+0x140>)
 8004c72:	4798      	blx	r3
 8004c74:	4604      	mov	r4, r0
 8004c76:	e7db      	b.n	8004c30 <wc_ecc_import_raw_private+0xb0>
                err = mp_read_radix(&key->k, d, MP_RADIX_HEX);
 8004c78:	2210      	movs	r2, #16
 8004c7a:	9903      	ldr	r1, [sp, #12]
 8004c7c:	4648      	mov	r0, r9
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <wc_ecc_import_raw_private+0x138>)
 8004c80:	4798      	blx	r3
 8004c82:	4604      	mov	r4, r0
 8004c84:	e7e3      	b.n	8004c4e <wc_ecc_import_raw_private+0xce>
            key->type = ECC_PUBLICKEY;
 8004c86:	2301      	movs	r3, #1
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	e7e3      	b.n	8004c54 <wc_ecc_import_raw_private+0xd4>
        return BAD_FUNC_ARG;
 8004c8c:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8004c90:	e78a      	b.n	8004ba8 <wc_ecc_import_raw_private+0x28>
 8004c92:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8004c96:	e787      	b.n	8004ba8 <wc_ecc_import_raw_private+0x28>
 8004c98:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8004c9c:	e784      	b.n	8004ba8 <wc_ecc_import_raw_private+0x28>
        return MEMORY_E;
 8004c9e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8004ca2:	e781      	b.n	8004ba8 <wc_ecc_import_raw_private+0x28>
                return BAD_FUNC_ARG;
 8004ca4:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8004ca8:	e77e      	b.n	8004ba8 <wc_ecc_import_raw_private+0x28>
 8004caa:	bf00      	nop
 8004cac:	08004b11 	.word	0x08004b11
 8004cb0:	08000f21 	.word	0x08000f21
 8004cb4:	08001043 	.word	0x08001043
 8004cb8:	08001135 	.word	0x08001135
 8004cbc:	08000fe1 	.word	0x08000fe1
 8004cc0:	0800102d 	.word	0x0800102d

08004cc4 <wc_ecc_is_valid_idx>:
{
 8004cc4:	4601      	mov	r1, r0
   for (x = 0; ecc_sets[x].size != 0; x++)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2334      	movs	r3, #52	; 0x34
 8004cca:	fb03 f302 	mul.w	r3, r3, r2
 8004cce:	4806      	ldr	r0, [pc, #24]	; (8004ce8 <wc_ecc_is_valid_idx+0x24>)
 8004cd0:	58c0      	ldr	r0, [r0, r3]
 8004cd2:	b928      	cbnz	r0, 8004ce0 <wc_ecc_is_valid_idx+0x1c>
   if ((n >= ECC_CUSTOM_IDX) && (n < x)) {
 8004cd4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8004cd8:	db01      	blt.n	8004cde <wc_ecc_is_valid_idx+0x1a>
 8004cda:	428a      	cmp	r2, r1
 8004cdc:	dc02      	bgt.n	8004ce4 <wc_ecc_is_valid_idx+0x20>
}
 8004cde:	4770      	bx	lr
   for (x = 0; ecc_sets[x].size != 0; x++)
 8004ce0:	3201      	adds	r2, #1
 8004ce2:	e7f1      	b.n	8004cc8 <wc_ecc_is_valid_idx+0x4>
      return 1;
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	e7fa      	b.n	8004cde <wc_ecc_is_valid_idx+0x1a>
 8004ce8:	080056d0 	.word	0x080056d0

08004cec <wc_ecc_init_ex>:
    if (key == NULL) {
 8004cec:	b1d0      	cbz	r0, 8004d24 <wc_ecc_init_ex+0x38>
{
 8004cee:	b570      	push	{r4, r5, r6, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	460d      	mov	r5, r1
 8004cf4:	4604      	mov	r4, r0
    XMEMSET(key, 0, sizeof(ecc_key));
 8004cf6:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <wc_ecc_init_ex+0x44>)
 8004cfe:	4798      	blx	r3
    key->state = ECC_STATE_NONE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60a3      	str	r3, [r4, #8]
    ret = mp_init_multi(&key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8004d0c:	f104 0268 	add.w	r2, r4, #104	; 0x68
 8004d10:	f104 0118 	add.w	r1, r4, #24
 8004d14:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8004d18:	4e06      	ldr	r6, [pc, #24]	; (8004d34 <wc_ecc_init_ex+0x48>)
 8004d1a:	47b0      	blx	r6
    if (ret != MP_OKAY) {
 8004d1c:	b928      	cbnz	r0, 8004d2a <wc_ecc_init_ex+0x3e>
    key->heap = heap;
 8004d1e:	6165      	str	r5, [r4, #20]
}
 8004d20:	b002      	add	sp, #8
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 8004d24:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8004d28:	4770      	bx	lr
        return MEMORY_E;
 8004d2a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 8004d2e:	e7f7      	b.n	8004d20 <wc_ecc_init_ex+0x34>
 8004d30:	08000125 	.word	0x08000125
 8004d34:	08000f21 	.word	0x08000f21

08004d38 <wc_ecc_init>:
{
 8004d38:	b508      	push	{r3, lr}
    return wc_ecc_init_ex(key, NULL, INVALID_DEVID);
 8004d3a:	f06f 0201 	mvn.w	r2, #1
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4b01      	ldr	r3, [pc, #4]	; (8004d48 <wc_ecc_init+0x10>)
 8004d42:	4798      	blx	r3
}
 8004d44:	bd08      	pop	{r3, pc}
 8004d46:	bf00      	nop
 8004d48:	08004ced 	.word	0x08004ced

08004d4c <wc_ecc_verify_hash_ex>:
{
 8004d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	b086      	sub	sp, #24
 8004d52:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004d54:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d04c      	beq.n	8004df4 <wc_ecc_verify_hash_ex+0xa8>
 8004d5a:	460d      	mov	r5, r1
 8004d5c:	4616      	mov	r6, r2
 8004d5e:	4698      	mov	r8, r3
 8004d60:	4681      	mov	r9, r0
 8004d62:	2900      	cmp	r1, #0
 8004d64:	d049      	beq.n	8004dfa <wc_ecc_verify_hash_ex+0xae>
 8004d66:	2a00      	cmp	r2, #0
 8004d68:	d04a      	beq.n	8004e00 <wc_ecc_verify_hash_ex+0xb4>
 8004d6a:	2f00      	cmp	r7, #0
 8004d6c:	d04b      	beq.n	8004e06 <wc_ecc_verify_hash_ex+0xba>
 8004d6e:	2c00      	cmp	r4, #0
 8004d70:	d04c      	beq.n	8004e0c <wc_ecc_verify_hash_ex+0xc0>
   *res = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	603b      	str	r3, [r7, #0]
   if (wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL) {
 8004d76:	6860      	ldr	r0, [r4, #4]
 8004d78:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <wc_ecc_verify_hash_ex+0xe0>)
 8004d7a:	4798      	blx	r3
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d048      	beq.n	8004e12 <wc_ecc_verify_hash_ex+0xc6>
 8004d80:	6923      	ldr	r3, [r4, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d048      	beq.n	8004e18 <wc_ecc_verify_hash_ex+0xcc>
   err = wc_ecc_check_r_s_range(key, r, s);
 8004d86:	462a      	mov	r2, r5
 8004d88:	4649      	mov	r1, r9
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4b28      	ldr	r3, [pc, #160]	; (8004e30 <wc_ecc_verify_hash_ex+0xe4>)
 8004d8e:	4798      	blx	r3
   if (err != MP_OKAY) {
 8004d90:	b988      	cbnz	r0, 8004db6 <wc_ecc_verify_hash_ex+0x6a>
  if (key->type == ECC_PRIVATEKEY_ONLY) {
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d011      	beq.n	8004dbc <wc_ecc_verify_hash_ex+0x70>
    if (key->idx == ECC_CUSTOM_IDX ||
 8004d98:	6863      	ldr	r3, [r4, #4]
 8004d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d9e:	d03e      	beq.n	8004e1e <wc_ecc_verify_hash_ex+0xd2>
            (ecc_sets[key->idx].id != ECC_SECP256R1 &&
 8004da0:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <wc_ecc_verify_hash_ex+0xe8>)
 8004da2:	2134      	movs	r1, #52	; 0x34
 8004da4:	fb01 2303 	mla	r3, r1, r3, r2
 8004da8:	685b      	ldr	r3, [r3, #4]
    if (key->idx == ECC_CUSTOM_IDX ||
 8004daa:	2b07      	cmp	r3, #7
 8004dac:	d001      	beq.n	8004db2 <wc_ecc_verify_hash_ex+0x66>
            (ecc_sets[key->idx].id != ECC_SECP256R1 &&
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	d138      	bne.n	8004e24 <wc_ecc_verify_hash_ex+0xd8>
        if (ecc_sets[key->idx].id == ECC_SECP256R1) {
 8004db2:	2b07      	cmp	r3, #7
 8004db4:	d00c      	beq.n	8004dd0 <wc_ecc_verify_hash_ex+0x84>
}
 8004db6:	b006      	add	sp, #24
 8004db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      err = ecc_make_pub_ex(key, NULL, NULL, NULL);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004e3c <wc_ecc_verify_hash_ex+0xf0>
 8004dc8:	47d0      	blx	sl
      if (err != MP_OKAY) {
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d0e4      	beq.n	8004d98 <wc_ecc_verify_hash_ex+0x4c>
 8004dce:	e7f2      	b.n	8004db6 <wc_ecc_verify_hash_ex+0x6a>
                key->pubkey.y, key->pubkey.z, r, s, res, key->heap);
 8004dd0:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
            return sp_ecc_verify_256(hash, hashlen, key->pubkey.x,
 8004dd4:	6962      	ldr	r2, [r4, #20]
 8004dd6:	9204      	str	r2, [sp, #16]
 8004dd8:	9703      	str	r7, [sp, #12]
 8004dda:	9502      	str	r5, [sp, #8]
 8004ddc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8004de6:	f104 0218 	add.w	r2, r4, #24
 8004dea:	4641      	mov	r1, r8
 8004dec:	4630      	mov	r0, r6
 8004dee:	4c12      	ldr	r4, [pc, #72]	; (8004e38 <wc_ecc_verify_hash_ex+0xec>)
 8004df0:	47a0      	blx	r4
 8004df2:	e7e0      	b.n	8004db6 <wc_ecc_verify_hash_ex+0x6a>
       return ECC_BAD_ARG_E;
 8004df4:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8004df8:	e7dd      	b.n	8004db6 <wc_ecc_verify_hash_ex+0x6a>
 8004dfa:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8004dfe:	e7da      	b.n	8004db6 <wc_ecc_verify_hash_ex+0x6a>
 8004e00:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8004e04:	e7d7      	b.n	8004db6 <wc_ecc_verify_hash_ex+0x6a>
 8004e06:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8004e0a:	e7d4      	b.n	8004db6 <wc_ecc_verify_hash_ex+0x6a>
 8004e0c:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8004e10:	e7d1      	b.n	8004db6 <wc_ecc_verify_hash_ex+0x6a>
      return ECC_BAD_ARG_E;
 8004e12:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8004e16:	e7ce      	b.n	8004db6 <wc_ecc_verify_hash_ex+0x6a>
 8004e18:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8004e1c:	e7cb      	b.n	8004db6 <wc_ecc_verify_hash_ex+0x6a>
        return WC_KEY_SIZE_E;
 8004e1e:	f06f 00e9 	mvn.w	r0, #233	; 0xe9
 8004e22:	e7c8      	b.n	8004db6 <wc_ecc_verify_hash_ex+0x6a>
 8004e24:	f06f 00e9 	mvn.w	r0, #233	; 0xe9
 8004e28:	e7c5      	b.n	8004db6 <wc_ecc_verify_hash_ex+0x6a>
 8004e2a:	bf00      	nop
 8004e2c:	08004cc5 	.word	0x08004cc5
 8004e30:	08004a85 	.word	0x08004a85
 8004e34:	080056d0 	.word	0x080056d0
 8004e38:	08004645 	.word	0x08004645
 8004e3c:	08004969 	.word	0x08004969

08004e40 <wc_ecc_import_unsigned>:
}

/* Import x, y and optional private (d) as unsigned binary */
int wc_ecc_import_unsigned(ecc_key* key, byte* qx, byte* qy,
                   byte* d, int curve_id)
{
 8004e40:	b510      	push	{r4, lr}
 8004e42:	b082      	sub	sp, #8
    return wc_ecc_import_raw_private(key, (const char*)qx, (const char*)qy,
 8004e44:	2402      	movs	r4, #2
 8004e46:	9401      	str	r4, [sp, #4]
 8004e48:	9c04      	ldr	r4, [sp, #16]
 8004e4a:	9400      	str	r4, [sp, #0]
 8004e4c:	4c01      	ldr	r4, [pc, #4]	; (8004e54 <wc_ecc_import_unsigned+0x14>)
 8004e4e:	47a0      	blx	r4
        (const char*)d, curve_id, WC_TYPE_UNSIGNED_BIN);
}
 8004e50:	b002      	add	sp, #8
 8004e52:	bd10      	pop	{r4, pc}
 8004e54:	08004b81 	.word	0x08004b81

08004e58 <wolfboot_magic_trail>:
 8004e58:	544f4f42                                BOOT

08004e5c <ecc256_pub_key>:
 8004e5c:	87a8083e 916ea7c4 f2532b8f c1cf650f     >.....n..+S..e..
 8004e6c:	ca67cb9e 1cba33ce b673d621 a3bb3e84     ..g..3..!.s..>..
 8004e7c:	521f1071 ac454375 4d8baef3 65ac6f23     q..RuCE....M#o.e
 8004e8c:	824b274b 10fd503d fa180dc1 7234ff98     K'K.=P........4r

08004e9c <ecc256_pub_key_len>:
 8004e9c:	00000040                                @...

08004ea0 <K>:
 8004ea0:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
 8004eb0:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
 8004ec0:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
 8004ed0:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
 8004ee0:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
 8004ef0:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
 8004f00:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
 8004f10:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
 8004f20:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
 8004f30:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
 8004f40:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
 8004f50:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
 8004f60:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
 8004f70:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
 8004f80:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
 8004f90:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

08004fa0 <p256_base>:
 8004fa0:	d898c296 f4a13945 2deb33a0 77037d81     ....E9...3.-.}.w
 8004fb0:	63a440f2 f8bce6e5 e12c4247 6b17d1f2     .@.c....GB,....k
	...
 8004fe0:	37bf51f5 cbb64068 6b315ece 2bce3357     .Q.7h@...^1kW3.+
 8004ff0:	7c0f9e16 8ee7eb4a fe1a7f9b 4fe342e2     ...|J........B.O
	...
 8005020:	00000001 00000000 00000000 00000000     ................
	...

08005064 <p256_mod>:
 8005064:	ffffffff ffffffff ffffffff 00000000     ................
	...
 800507c:	00000001 ffffffff                       ........

08005084 <p256_mod_minus_2>:
 8005084:	fffffffd ffffffff ffffffff 00000000     ................
	...
 800509c:	00000001 ffffffff                       ........

080050a4 <p256_norm_mod>:
 80050a4:	00000001 00000000 00000000 ffffffff     ................
 80050b4:	ffffffff ffffffff fffffffe 00000000     ................

080050c4 <p256_norm_order>:
 80050c4:	039cdaaf 0c46353d 58e8617b 43190552     ....=5F.{a.XR..C
	...
 80050dc:	ffffffff 00000000                       ........

080050e4 <p256_order>:
 80050e4:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
 80050f4:	ffffffff ffffffff 00000000 ffffffff     ................

08005104 <p256_order_minus_2>:
 8005104:	fc63254f f3b9cac2 a7179e84 bce6faad     O%c.............
 8005114:	ffffffff ffffffff 00000000 ffffffff     ................

08005124 <p256_table>:
	...
 8005164:	18a9143c 79e730d4 5fedb601 75ba95fc     <....0.y..._...u
 8005174:	77622510 79fb732b a53755c6 18905f76     .%bw+s.y.U7.v_..
 8005184:	ce95560a ddf25357 ba19e45c 8b4ab8e4     .V..WS..\.....J.
 8005194:	dd21f325 d2e88688 25885d85 8571ff18     %.!......].%..q.
 80051a4:	16a0d2bb 4f922fc5 1a623499 0d5cc16c     ...../.O.4b.l.\.
 80051b4:	57c62c8b 9241cf3a fd1b667f 2f5e6961     .,.W:.A..f..ai^/
 80051c4:	f5a01797 5c15c70b 60956192 3d20b44d     .......\.a.`M. =
 80051d4:	071fdb52 04911b37 8d6f0f7b f648f916     R...7...{.o...H.
 80051e4:	e137bbbc 9e566847 8a6a0bec e434469e     ..7.GhV...j..F4.
 80051f4:	79d73463 b1c42761 133d0015 5abe0285     c4.ya'....=....Z
 8005204:	c04c7dab 92aa837c 43260c07 573d9f4c     .}L.|.....&CL.=W
 8005214:	78e6cc37 0c931562 6b6f7383 94bb725b     7..xb....sok[r..
 8005224:	bfe20925 62a8c244 8fdce867 91c19ac3     %...D..bg.......
 8005234:	dd387063 5a96a5d5 21d324f6 61d587d4     cp8....Z.$.!...a
 8005244:	a37173ea e87673a2 53778b65 23848008     .sq..sv.e.wS...#
 8005254:	05bab43e 10f8441e 4621efbe fa11fe12     >....D....!F....
 8005264:	2cb19ffd 1c891f2b b1923c23 01ba8d5b     ...,+...#<..[...
 8005274:	8ac5ca8e b6d03d67 1f13bedc 586eb04c     ....g=......L.nX
 8005284:	27e8ed09 0c35c6e5 1819ede2 1e81a33c     ...'..5.....<...
 8005294:	56c652fa 278fd6c0 70864f11 19d5ac08     .R.V...'.O.p....
 80052a4:	d2b533d5 62577734 a1bdddc0 673b8af6     .3..4wWb......;g
 80052b4:	a79ec293 577e7c9a c3b266b1 bb6de651     .....|~W.f..Q.m.
 80052c4:	b65259b3 e7e9303a d03a7480 d6a0afd3     .YR.:0...t:.....
 80052d4:	9b3cfc27 c5ac83d1 5d18b99b 60b4619a     '.<........].a.`
 80052e4:	1ae5aa1c bd6a38e1 49e73658 b8b7652b     .....8j.X6.I+e..
 80052f4:	ee5f87ed 0b130014 aeebffcd 9d0f27b2     .._..........'..
 8005304:	7a730a55 ca924631 ddbbc83a 9c955b2f     U.sz1F..:.../[..
 8005314:	ac019a71 07c1dfe0 356ec48d 244a566d     q.........n5mVJ$
 8005324:	f4f8b16a 56f8410e c47b266a 97241afe     j....A.Vj&{...$.
 8005334:	6d9c87c1 0a406b8e cd42ab1b 803f3e02     ...m.k@...B..>?.
 8005344:	04dbec69 7f0309a8 3bbad05f a83b85f7     i......._..;..;.
 8005354:	ad8e197f c6097273 5067adc1 c097440e     ....sr....gP.D..
 8005364:	c379ab34 846a56f2 841df8d1 a8ee068b     4.y..Vj.........
 8005374:	176c68ef 20314459 915f1f30 f1af32d5     .hl.YD1 0._..2..
 8005384:	5d75bd50 99c37531 f72f67bc 837cffba     P.u]1u...g/...|.
 8005394:	48d7723f 0613a418 e2d41c8b 23d0f130     ?r.H........0..#
 80053a4:	d5be5a2b ed93e225 5934f3c6 6fe79983     +Z..%.....4Y...o
 80053b4:	22626ffc 43140926 7990216a 50bbb4d9     .ob"&..Cj!.y...P
 80053c4:	e57ec63e 378191c6 181dcdb2 65422c40     >.~....7....@,Be
 80053d4:	0236e0f6 41a8099b 01fe49c3 2b100118     ..6....A.I.....+
 80053e4:	9b391593 fc68b5c5 598270fc c385f5a2     ..9...h..p.Y....
 80053f4:	d19adcbb 7144f3aa 83fbae0c dd558999     ......Dq......U.
 8005404:	74b82ff4 93b88b8e 71e734c9 d2e03c40     ./.t.....4.q@<..
 8005414:	43c0322a 9a7a9eaf 149d6041 e6e4c551     *2.C..z.A`..Q...
 8005424:	80ec21fe 5fe14bfe c255be82 f6ce116a     .!...K._..U.j...
 8005434:	2f4a5d67 98bc5a07 db7e63af fad27148     g]J/.Z...c~.Hq..
 8005444:	29ab05b3 90c0b6ac 4e251ae6 37a9a83c     ...)......%N<..7
 8005454:	c2aade7d 0a7dc875 9f0e1a84 77387de3     }...u.}......}8w
 8005464:	a56c0dd7 1e9ecc49 46086c74 a5cffcd8     ..l.I...tl.F....
 8005474:	f505aece 8f7a1408 bef0c47e b37b85c0     ......z.~.....{.
 8005484:	cc0e6a8f 3596b6e4 6b388f23 fd6d4bbf     .j.....5#.8k.Km.
 8005494:	c39cef4e aba453fa f9f628d5 9c135ac8     N....S...(...Z..
 80054a4:	95c8f8be 0a1c7294 3bf362bf 2961c480     .....r...b.;..a)
 80054b4:	df63d4ac 9e418403 91ece900 c109f9cb     ..c...A.........
 80054c4:	58945705 c2d095d0 ddeb85c0 b9083d96     .W.X.........=..
 80054d4:	7a40449b 84692b8d 2eee1ee1 9bc3344f     .D@z.+i.....O4..
 80054e4:	42913074 0d5ae356 48a542b1 55491b27     t0.BV.Z..B.H'.IU
 80054f4:	b310732a 469ca665 5f1a4cc1 29591d52     *s..e..F.L._R.Y)
 8005504:	b84f983f e76f5b6b 9f5f84e1 be7eef41     ?.O.k[o..._.A.~.
 8005514:	80baa189 1200d496 18ef332c 6376551f     ........,3...Uvc
 8005524:	50434553 52363532 00000031 46464646     SECP256R1...FFFF
 8005534:	46464646 30303030 31303030 30303030     FFFF000000010000
 8005544:	30303030 30303030 30303030 30303030     0000000000000000
 8005554:	30303030 46464646 46464646 46464646     0000FFFFFFFFFFFF
 8005564:	46464646 46464646 46464646 00000000     FFFFFFFFFFFF....
 8005574:	46464646 46464646 30303030 31303030     FFFFFFFF00000001
 8005584:	30303030 30303030 30303030 30303030     0000000000000000
 8005594:	30303030 30303030 46464646 46464646     00000000FFFFFFFF
 80055a4:	46464646 46464646 46464646 43464646     FFFFFFFFFFFFFFFC
 80055b4:	00000000 36434135 38443533 41334141     ....5AC635D8AA3A
 80055c4:	37453339 42453342 35354442 38393637     93E7B3EBBD557698
 80055d4:	43423638 44313536 30423630 33354343     86BC651D06B0CC53
 80055e4:	36463042 45434233 45334333 32443732     B0F63BCE3C3E27D2
 80055f4:	42343036 00000000 46464646 46464646     604B....FFFFFFFF
 8005604:	30303030 30303030 46464646 46464646     00000000FFFFFFFF
 8005614:	46464646 46464646 36454342 44414146     FFFFFFFFBCE6FAAD
 8005624:	37313741 34384539 39423346 32434143     A7179E84F3B9CAC2
 8005634:	33364346 31353532 00000000 37314236     FC632551....6B17
 8005644:	32463144 43323145 37343234 43423846     D1F2E12C4247F8BC
 8005654:	35453645 34413336 32463034 33303737     E6E563A440F27703
 8005664:	31384437 42454432 30413333 31413446     7D812DEB33A0F4A1
 8005674:	35343933 38393844 36393243 00000000     3945D898C296....
 8005684:	33454634 32453234 41314546 42394637     4FE342E2FE1A7F9B
 8005694:	37454538 41344245 46304337 36314539     8EE7EB4A7C0F9E16
 80056a4:	45434232 37353333 31334236 45434535     2BCE33576B315ECE
 80056b4:	36424243 38363034 46423733 35463135     CBB6406837BF51F5
 80056c4:	00000000                                ....

080056c8 <ecc_oid_secp256r1>:
 80056c8:	ce48862a 0701033d                       *.H.=...

080056d0 <ecc_sets>:
 80056d0:	00000020 00000007 08005524 08005530      .......$U..0U..
 80056e0:	08005574 080055b8 080055fc 08005640     tU...U...U..@V..
 80056f0:	08005684 080056c8 00000008 0000020e     .V...V..........
 8005700:	00000001 00000000 ffffffff 00000000     ................
	...

Disassembly of section .data:

20000000 <AHB_ENABLE_REG>:
20000000:	40021014                                ...@

20000004 <GPIOA_IDR>:
20000004:	48000010                                ...H

20000008 <GPIOA_MODER>:
20000008:	48000000                                ...H

2000000c <GPIOA_ODR>:
2000000c:	48000014                                ...H

20000010 <GPIOA_PUPDR>:
20000010:	4800000c                                ...H

20000014 <wolfboot_version>:
20000014:	00000000                                ....

20000018 <wolfboot_version>:
20000018:	00000000                                ....

2000001c <flash_set_waitstates>:
}
2000001c:	4770      	bx	lr

2000001e <flash_wait_complete>:
    while ((FLASH_SR & FLASH_SR_BSY) == FLASH_SR_BSY)
2000001e:	4b03      	ldr	r3, [pc, #12]	; (2000002c <flash_wait_complete+0xe>)
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f013 0f01 	tst.w	r3, #1
20000026:	d1fa      	bne.n	2000001e <flash_wait_complete>
}
20000028:	4770      	bx	lr
2000002a:	bf00      	nop
2000002c:	4002200c 	.word	0x4002200c

20000030 <clear_errors>:
    FLASH_SR |= 0b110101;
20000030:	4a02      	ldr	r2, [pc, #8]	; (2000003c <clear_errors+0xc>)
20000032:	6813      	ldr	r3, [r2, #0]
20000034:	f043 0335 	orr.w	r3, r3, #53	; 0x35
20000038:	6013      	str	r3, [r2, #0]
}
2000003a:	4770      	bx	lr
2000003c:	4002200c 	.word	0x4002200c

20000040 <hal_flash_write>:
{
20000040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20000044:	b082      	sub	sp, #8
20000046:	4607      	mov	r7, r0
20000048:	4688      	mov	r8, r1
2000004a:	4616      	mov	r6, r2
    flash_wait_complete();
2000004c:	f7ff ffe7 	bl	2000001e <flash_wait_complete>
    clear_errors();
20000050:	f7ff ffee 	bl	20000030 <clear_errors>
    if (address & 0x01) {
20000054:	f017 0f01 	tst.w	r7, #1
20000058:	d116      	bne.n	20000088 <hal_flash_write+0x48>
    int i = 0;
2000005a:	2400      	movs	r4, #0
    for (; i < (len/2); i++) {
2000005c:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
20000060:	ebb4 0f63 	cmp.w	r4, r3, asr #1
20000064:	da27      	bge.n	200000b6 <hal_flash_write+0x76>
        FLASH_CR |= FLASH_CR_PG;
20000066:	4d22      	ldr	r5, [pc, #136]	; (200000f0 <hal_flash_write+0xb0>)
20000068:	682b      	ldr	r3, [r5, #0]
2000006a:	f043 0301 	orr.w	r3, r3, #1
2000006e:	602b      	str	r3, [r5, #0]
        flash_mem[i] = hw_data[i];
20000070:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
20000074:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
        flash_wait_complete();
20000078:	f7ff ffd1 	bl	2000001e <flash_wait_complete>
        FLASH_CR &= ~FLASH_CR_PG;
2000007c:	682b      	ldr	r3, [r5, #0]
2000007e:	f023 0301 	bic.w	r3, r3, #1
20000082:	602b      	str	r3, [r5, #0]
    for (; i < (len/2); i++) {
20000084:	3401      	adds	r4, #1
20000086:	e7e9      	b.n	2000005c <hal_flash_write+0x1c>
        uint16_t half_word = (data[0] << 8) | (flash_mem[0] & 0xFF);
20000088:	f818 2b01 	ldrb.w	r2, [r8], #1
2000008c:	f837 3c01 	ldrh.w	r3, [r7, #-1]
20000090:	b2db      	uxtb	r3, r3
20000092:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        FLASH_CR |= FLASH_CR_PG;
20000096:	4c16      	ldr	r4, [pc, #88]	; (200000f0 <hal_flash_write+0xb0>)
20000098:	6822      	ldr	r2, [r4, #0]
2000009a:	f042 0201 	orr.w	r2, r2, #1
2000009e:	6022      	str	r2, [r4, #0]
        flash_mem[0] = half_word;
200000a0:	f827 3c01 	strh.w	r3, [r7, #-1]
        flash_wait_complete();
200000a4:	f7ff ffbb 	bl	2000001e <flash_wait_complete>
        FLASH_CR &= ~FLASH_CR_PG;
200000a8:	6823      	ldr	r3, [r4, #0]
200000aa:	f023 0301 	bic.w	r3, r3, #1
200000ae:	6023      	str	r3, [r4, #0]
        len--;
200000b0:	3e01      	subs	r6, #1
        address += 1;
200000b2:	3701      	adds	r7, #1
200000b4:	e7d1      	b.n	2000005a <hal_flash_write+0x1a>
    if (len & 1) {
200000b6:	f016 0f01 	tst.w	r6, #1
200000ba:	d103      	bne.n	200000c4 <hal_flash_write+0x84>
}
200000bc:	2000      	movs	r0, #0
200000be:	b002      	add	sp, #8
200000c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_CR |= FLASH_CR_PG;
200000c4:	4d0a      	ldr	r5, [pc, #40]	; (200000f0 <hal_flash_write+0xb0>)
200000c6:	682b      	ldr	r3, [r5, #0]
200000c8:	f043 0301 	orr.w	r3, r3, #1
200000cc:	602b      	str	r3, [r5, #0]
        volatile uint16_t half_word = hw_data[i] & 0xFF;
200000ce:	f818 3014 	ldrb.w	r3, [r8, r4, lsl #1]
200000d2:	f8ad 3006 	strh.w	r3, [sp, #6]
        flash_mem[i] = (uint16_t)(half_word);
200000d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
200000da:	b29b      	uxth	r3, r3
200000dc:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
        flash_wait_complete();
200000e0:	f7ff ff9d 	bl	2000001e <flash_wait_complete>
        FLASH_CR &= ~FLASH_CR_PG;
200000e4:	682b      	ldr	r3, [r5, #0]
200000e6:	f023 0301 	bic.w	r3, r3, #1
200000ea:	602b      	str	r3, [r5, #0]
200000ec:	e7e6      	b.n	200000bc <hal_flash_write+0x7c>
200000ee:	bf00      	nop
200000f0:	40022010 	.word	0x40022010

200000f4 <hal_flash_unlock>:
    if (FLASH_CR & FLASH_CR_LOCK) {
200000f4:	4b05      	ldr	r3, [pc, #20]	; (2000010c <hal_flash_unlock+0x18>)
200000f6:	681b      	ldr	r3, [r3, #0]
200000f8:	f013 0f80 	tst.w	r3, #128	; 0x80
200000fc:	d005      	beq.n	2000010a <hal_flash_unlock+0x16>
        FLASH_KEYR = FLASH_KEY1;
200000fe:	4b04      	ldr	r3, [pc, #16]	; (20000110 <hal_flash_unlock+0x1c>)
20000100:	4a04      	ldr	r2, [pc, #16]	; (20000114 <hal_flash_unlock+0x20>)
20000102:	601a      	str	r2, [r3, #0]
        FLASH_KEYR = FLASH_KEY2;
20000104:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
20000108:	601a      	str	r2, [r3, #0]
}
2000010a:	4770      	bx	lr
2000010c:	40022010 	.word	0x40022010
20000110:	40022004 	.word	0x40022004
20000114:	45670123 	.word	0x45670123

20000118 <hal_flash_lock>:
    FLASH_CR |= FLASH_CR_LOCK;
20000118:	4a02      	ldr	r2, [pc, #8]	; (20000124 <hal_flash_lock+0xc>)
2000011a:	6813      	ldr	r3, [r2, #0]
2000011c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20000120:	6013      	str	r3, [r2, #0]
}
20000122:	4770      	bx	lr
20000124:	40022010 	.word	0x40022010

20000128 <flash_erase_page>:
{
20000128:	b510      	push	{r4, lr}
    uint32_t addr = page*2048;
2000012a:	02c4      	lsls	r4, r0, #11
    if (addr < FLASH_OFFSET)
2000012c:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
20000130:	d201      	bcs.n	20000136 <flash_erase_page+0xe>
        addr += FLASH_OFFSET;
20000132:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
    flash_wait_complete();
20000136:	f7ff ff72 	bl	2000001e <flash_wait_complete>
    FLASH_CR |= FLASH_CR_PER;
2000013a:	4b0e      	ldr	r3, [pc, #56]	; (20000174 <flash_erase_page+0x4c>)
2000013c:	681a      	ldr	r2, [r3, #0]
2000013e:	f042 0202 	orr.w	r2, r2, #2
20000142:	601a      	str	r2, [r3, #0]
    FLASH_AR = addr;
20000144:	4a0c      	ldr	r2, [pc, #48]	; (20000178 <flash_erase_page+0x50>)
20000146:	6014      	str	r4, [r2, #0]
    FLASH_CR |= FLASH_CR_STRT;
20000148:	681a      	ldr	r2, [r3, #0]
2000014a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2000014e:	601a      	str	r2, [r3, #0]
    flash_wait_complete();
20000150:	f7ff ff65 	bl	2000001e <flash_wait_complete>
    while (!(FLASH_SR & (FLASH_SR_EOP)));
20000154:	4b09      	ldr	r3, [pc, #36]	; (2000017c <flash_erase_page+0x54>)
20000156:	681b      	ldr	r3, [r3, #0]
20000158:	f013 0f20 	tst.w	r3, #32
2000015c:	d0fa      	beq.n	20000154 <flash_erase_page+0x2c>
    FLASH_SR |= FLASH_SR_EOP;
2000015e:	4a07      	ldr	r2, [pc, #28]	; (2000017c <flash_erase_page+0x54>)
20000160:	6813      	ldr	r3, [r2, #0]
20000162:	f043 0320 	orr.w	r3, r3, #32
20000166:	6013      	str	r3, [r2, #0]
    FLASH_CR &= ~FLASH_CR_PER;
20000168:	3204      	adds	r2, #4
2000016a:	6813      	ldr	r3, [r2, #0]
2000016c:	f023 0302 	bic.w	r3, r3, #2
20000170:	6013      	str	r3, [r2, #0]
}
20000172:	bd10      	pop	{r4, pc}
20000174:	40022010 	.word	0x40022010
20000178:	40022014 	.word	0x40022014
2000017c:	4002200c 	.word	0x4002200c

20000180 <hal_flash_erase>:
    if (len == 0)
20000180:	b3a1      	cbz	r1, 200001ec <hal_flash_erase+0x6c>
{
20000182:	b570      	push	{r4, r5, r6, lr}
20000184:	460b      	mov	r3, r1
    if (address >= FLASH_OFFSET)
20000186:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
2000018a:	d301      	bcc.n	20000190 <hal_flash_erase+0x10>
        address -= FLASH_OFFSET;
2000018c:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
    end_address = address + len - 1;
20000190:	1819      	adds	r1, r3, r0
20000192:	3901      	subs	r1, #1
    for (i = 0; i < 255; i++)
20000194:	2300      	movs	r3, #0
    int start = -1, end = -1;
20000196:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2000019a:	462c      	mov	r4, r5
    for (i = 0; i < 255; i++)
2000019c:	e004      	b.n	200001a8 <hal_flash_erase+0x28>
        if (start > 0 && end > 0)
2000019e:	2c00      	cmp	r4, #0
200001a0:	dd01      	ble.n	200001a6 <hal_flash_erase+0x26>
200001a2:	2d00      	cmp	r5, #0
200001a4:	dc13      	bgt.n	200001ce <hal_flash_erase+0x4e>
    for (i = 0; i < 255; i++)
200001a6:	3301      	adds	r3, #1
200001a8:	2bfe      	cmp	r3, #254	; 0xfe
200001aa:	dc10      	bgt.n	200001ce <hal_flash_erase+0x4e>
        if ((address >= (2048*i)) && (address < (2048*(i+1)))) {
200001ac:	02da      	lsls	r2, r3, #11
200001ae:	ebb0 2fc3 	cmp.w	r0, r3, lsl #11
200001b2:	d304      	bcc.n	200001be <hal_flash_erase+0x3e>
200001b4:	1c5e      	adds	r6, r3, #1
200001b6:	ebb0 2fc6 	cmp.w	r0, r6, lsl #11
200001ba:	d200      	bcs.n	200001be <hal_flash_erase+0x3e>
            start = i;
200001bc:	461c      	mov	r4, r3
        if ((end_address >= (2048*i)) && (end_address < (2048*(i+1)))) {
200001be:	428a      	cmp	r2, r1
200001c0:	d8ed      	bhi.n	2000019e <hal_flash_erase+0x1e>
200001c2:	1c5a      	adds	r2, r3, #1
200001c4:	ebb1 2fc2 	cmp.w	r1, r2, lsl #11
200001c8:	d2e9      	bcs.n	2000019e <hal_flash_erase+0x1e>
            end = i;
200001ca:	461d      	mov	r5, r3
200001cc:	e7e7      	b.n	2000019e <hal_flash_erase+0x1e>
    if (start < 0 || end < 0)
200001ce:	2c00      	cmp	r4, #0
200001d0:	db0f      	blt.n	200001f2 <hal_flash_erase+0x72>
200001d2:	2d00      	cmp	r5, #0
200001d4:	da06      	bge.n	200001e4 <hal_flash_erase+0x64>
        return -1;
200001d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
200001da:	e006      	b.n	200001ea <hal_flash_erase+0x6a>
        flash_erase_page(i);
200001dc:	4620      	mov	r0, r4
200001de:	f7ff ffa3 	bl	20000128 <flash_erase_page>
    for (i = start; i <= end; i++)
200001e2:	3401      	adds	r4, #1
200001e4:	42a5      	cmp	r5, r4
200001e6:	daf9      	bge.n	200001dc <hal_flash_erase+0x5c>
    return 0;
200001e8:	2000      	movs	r0, #0
}
200001ea:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
200001ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
200001f0:	4770      	bx	lr
        return -1;
200001f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
200001f6:	e7f8      	b.n	200001ea <hal_flash_erase+0x6a>

200001f8 <get_trailer_at>:
    if (part == PART_BOOT)
200001f8:	b120      	cbz	r0, 20000204 <get_trailer_at+0xc>
    else if (part == PART_UPDATE) {
200001fa:	2801      	cmp	r0, #1
200001fc:	d105      	bne.n	2000020a <get_trailer_at+0x12>
        return (void *)(PART_UPDATE_ENDFLAGS - (sizeof(uint32_t) + at));
200001fe:	4804      	ldr	r0, [pc, #16]	; (20000210 <get_trailer_at+0x18>)
20000200:	1a40      	subs	r0, r0, r1
20000202:	4770      	bx	lr
        return (void *)(PART_BOOT_ENDFLAGS - (sizeof(uint32_t) + at));
20000204:	4803      	ldr	r0, [pc, #12]	; (20000214 <get_trailer_at+0x1c>)
20000206:	1a40      	subs	r0, r0, r1
20000208:	4770      	bx	lr
        return NULL;
2000020a:	2000      	movs	r0, #0
}
2000020c:	4770      	bx	lr
2000020e:	bf00      	nop
20000210:	08017ffc 	.word	0x08017ffc
20000214:	0800fffc 	.word	0x0800fffc

20000218 <set_trailer_at>:
{
20000218:	b500      	push	{lr}
2000021a:	b083      	sub	sp, #12
2000021c:	460b      	mov	r3, r1
2000021e:	f88d 2007 	strb.w	r2, [sp, #7]
    if (part == PART_BOOT) {
20000222:	b128      	cbz	r0, 20000230 <set_trailer_at+0x18>
20000224:	4602      	mov	r2, r0
    else if (part == PART_UPDATE) {
20000226:	2801      	cmp	r0, #1
20000228:	d00a      	beq.n	20000240 <set_trailer_at+0x28>
}
2000022a:	b003      	add	sp, #12
2000022c:	f85d fb04 	ldr.w	pc, [sp], #4
        hal_trailer_write(PART_BOOT_ENDFLAGS - (sizeof(uint32_t) + at), val);
20000230:	2201      	movs	r2, #1
20000232:	f10d 0107 	add.w	r1, sp, #7
20000236:	4806      	ldr	r0, [pc, #24]	; (20000250 <set_trailer_at+0x38>)
20000238:	1ac0      	subs	r0, r0, r3
2000023a:	4b06      	ldr	r3, [pc, #24]	; (20000254 <set_trailer_at+0x3c>)
2000023c:	4798      	blx	r3
2000023e:	e7f4      	b.n	2000022a <set_trailer_at+0x12>
        hal_trailer_write(PART_UPDATE_ENDFLAGS - (sizeof(uint32_t) + at), val);
20000240:	f10d 0107 	add.w	r1, sp, #7
20000244:	4804      	ldr	r0, [pc, #16]	; (20000258 <set_trailer_at+0x40>)
20000246:	1ac0      	subs	r0, r0, r3
20000248:	4b02      	ldr	r3, [pc, #8]	; (20000254 <set_trailer_at+0x3c>)
2000024a:	4798      	blx	r3
}
2000024c:	e7ed      	b.n	2000022a <set_trailer_at+0x12>
2000024e:	bf00      	nop
20000250:	0800fffc 	.word	0x0800fffc
20000254:	20000041 	.word	0x20000041
20000258:	08017ffc 	.word	0x08017ffc

2000025c <set_partition_magic>:
{
2000025c:	b508      	push	{r3, lr}
    if (part == PART_BOOT) {
2000025e:	b110      	cbz	r0, 20000266 <set_partition_magic+0xa>
    else if (part == PART_UPDATE) {
20000260:	2801      	cmp	r0, #1
20000262:	d006      	beq.n	20000272 <set_partition_magic+0x16>
}
20000264:	bd08      	pop	{r3, pc}
        hal_set_partition_magic(PART_BOOT_ENDFLAGS - sizeof(uint32_t));
20000266:	2204      	movs	r2, #4
20000268:	4905      	ldr	r1, [pc, #20]	; (20000280 <set_partition_magic+0x24>)
2000026a:	4806      	ldr	r0, [pc, #24]	; (20000284 <set_partition_magic+0x28>)
2000026c:	4b06      	ldr	r3, [pc, #24]	; (20000288 <set_partition_magic+0x2c>)
2000026e:	4798      	blx	r3
20000270:	e7f8      	b.n	20000264 <set_partition_magic+0x8>
        hal_set_partition_magic(PART_UPDATE_ENDFLAGS - sizeof(uint32_t));
20000272:	2204      	movs	r2, #4
20000274:	4902      	ldr	r1, [pc, #8]	; (20000280 <set_partition_magic+0x24>)
20000276:	4805      	ldr	r0, [pc, #20]	; (2000028c <set_partition_magic+0x30>)
20000278:	4b03      	ldr	r3, [pc, #12]	; (20000288 <set_partition_magic+0x2c>)
2000027a:	4798      	blx	r3
}
2000027c:	e7f2      	b.n	20000264 <set_partition_magic+0x8>
2000027e:	bf00      	nop
20000280:	08004e58 	.word	0x08004e58
20000284:	0800fffc 	.word	0x0800fffc
20000288:	20000041 	.word	0x20000041
2000028c:	08017ffc 	.word	0x08017ffc

20000290 <get_partition_magic>:
{
20000290:	b508      	push	{r3, lr}
    return (uint32_t *)get_trailer_at(part, 0);
20000292:	2100      	movs	r1, #0
20000294:	f7ff ffb0 	bl	200001f8 <get_trailer_at>
}
20000298:	bd08      	pop	{r3, pc}

2000029a <get_partition_state>:
{
2000029a:	b508      	push	{r3, lr}
    return (uint8_t *)get_trailer_at(part, 1);
2000029c:	2101      	movs	r1, #1
2000029e:	f7ff ffab 	bl	200001f8 <get_trailer_at>
}
200002a2:	bd08      	pop	{r3, pc}

200002a4 <set_partition_state>:
{
200002a4:	b508      	push	{r3, lr}
200002a6:	460a      	mov	r2, r1
    set_trailer_at(part, 1, val);
200002a8:	2101      	movs	r1, #1
200002aa:	f7ff ffb5 	bl	20000218 <set_trailer_at>
}
200002ae:	bd08      	pop	{r3, pc}

200002b0 <set_update_sector_flags>:
{
200002b0:	b508      	push	{r3, lr}
200002b2:	460a      	mov	r2, r1
    set_trailer_at(PART_UPDATE, 2 + pos, val);
200002b4:	1c81      	adds	r1, r0, #2
200002b6:	2001      	movs	r0, #1
200002b8:	f7ff ffae 	bl	20000218 <set_trailer_at>
}
200002bc:	bd08      	pop	{r3, pc}

200002be <get_update_sector_flags>:
{
200002be:	b508      	push	{r3, lr}
    return (uint8_t *)get_trailer_at(PART_UPDATE, 2 + pos);
200002c0:	1c81      	adds	r1, r0, #2
200002c2:	2001      	movs	r0, #1
200002c4:	f7ff ff98 	bl	200001f8 <get_trailer_at>
}
200002c8:	bd08      	pop	{r3, pc}

200002ca <wolfBoot_set_partition_state>:
{
200002ca:	b538      	push	{r3, r4, r5, lr}
200002cc:	4604      	mov	r4, r0
200002ce:	460d      	mov	r5, r1
    magic = get_partition_magic(part);
200002d0:	f7ff ffde 	bl	20000290 <get_partition_magic>
    if (*magic != WOLFBOOT_MAGIC_TRAIL)
200002d4:	6802      	ldr	r2, [r0, #0]
200002d6:	4b0a      	ldr	r3, [pc, #40]	; (20000300 <wolfBoot_set_partition_state+0x36>)
200002d8:	429a      	cmp	r2, r3
200002da:	d107      	bne.n	200002ec <wolfBoot_set_partition_state+0x22>
    state = get_partition_state(part);
200002dc:	4620      	mov	r0, r4
200002de:	f7ff ffdc 	bl	2000029a <get_partition_state>
    if (*state != newst)
200002e2:	7803      	ldrb	r3, [r0, #0]
200002e4:	42ab      	cmp	r3, r5
200002e6:	d105      	bne.n	200002f4 <wolfBoot_set_partition_state+0x2a>
}
200002e8:	2000      	movs	r0, #0
200002ea:	bd38      	pop	{r3, r4, r5, pc}
        set_partition_magic(part);
200002ec:	4620      	mov	r0, r4
200002ee:	f7ff ffb5 	bl	2000025c <set_partition_magic>
200002f2:	e7f3      	b.n	200002dc <wolfBoot_set_partition_state+0x12>
        set_partition_state(part, newst);
200002f4:	4629      	mov	r1, r5
200002f6:	4620      	mov	r0, r4
200002f8:	f7ff ffd4 	bl	200002a4 <set_partition_state>
200002fc:	e7f4      	b.n	200002e8 <wolfBoot_set_partition_state+0x1e>
200002fe:	bf00      	nop
20000300:	544f4f42 	.word	0x544f4f42

20000304 <wolfBoot_set_update_sector_flag>:
{
20000304:	b570      	push	{r4, r5, r6, lr}
20000306:	4606      	mov	r6, r0
20000308:	460d      	mov	r5, r1
    uint8_t pos = sector >> 1;
2000030a:	f3c0 0447 	ubfx	r4, r0, #1, #8
    magic = get_partition_magic(PART_UPDATE);
2000030e:	2001      	movs	r0, #1
20000310:	f7ff ffbe 	bl	20000290 <get_partition_magic>
    if (*magic != wolfboot_magic_trail)
20000314:	6802      	ldr	r2, [r0, #0]
20000316:	4b13      	ldr	r3, [pc, #76]	; (20000364 <wolfBoot_set_update_sector_flag+0x60>)
20000318:	429a      	cmp	r2, r3
2000031a:	d111      	bne.n	20000340 <wolfBoot_set_update_sector_flag+0x3c>
    flags = get_update_sector_flags(pos);
2000031c:	4620      	mov	r0, r4
2000031e:	f7ff ffce 	bl	200002be <get_update_sector_flags>
    if (sector == (pos << 1))
20000322:	ebb6 0f44 	cmp.w	r6, r4, lsl #1
20000326:	d00f      	beq.n	20000348 <wolfBoot_set_update_sector_flag+0x44>
        fl_value = ((newflag & 0x0F) << 4) | (*flags & 0x0F);
20000328:	f990 3000 	ldrsb.w	r3, [r0]
2000032c:	f003 030f 	and.w	r3, r3, #15
20000330:	ea43 1105 	orr.w	r1, r3, r5, lsl #4
20000334:	b2c9      	uxtb	r1, r1
    if (fl_value != *flags)
20000336:	7803      	ldrb	r3, [r0, #0]
20000338:	428b      	cmp	r3, r1
2000033a:	d10e      	bne.n	2000035a <wolfBoot_set_update_sector_flag+0x56>
}
2000033c:	2000      	movs	r0, #0
2000033e:	bd70      	pop	{r4, r5, r6, pc}
        set_partition_magic(PART_UPDATE);
20000340:	2001      	movs	r0, #1
20000342:	f7ff ff8b 	bl	2000025c <set_partition_magic>
20000346:	e7e9      	b.n	2000031c <wolfBoot_set_update_sector_flag+0x18>
        fl_value = (*flags & 0xF0) | (newflag & 0x0F);
20000348:	f990 3000 	ldrsb.w	r3, [r0]
2000034c:	f023 030f 	bic.w	r3, r3, #15
20000350:	f005 010f 	and.w	r1, r5, #15
20000354:	4319      	orrs	r1, r3
20000356:	b2c9      	uxtb	r1, r1
20000358:	e7ed      	b.n	20000336 <wolfBoot_set_update_sector_flag+0x32>
        set_update_sector_flags(pos, fl_value);
2000035a:	4620      	mov	r0, r4
2000035c:	f7ff ffa8 	bl	200002b0 <set_update_sector_flags>
20000360:	e7ec      	b.n	2000033c <wolfBoot_set_update_sector_flag+0x38>
20000362:	bf00      	nop
20000364:	544f4f42 	.word	0x544f4f42

20000368 <wolfBoot_get_partition_state>:
{
20000368:	b538      	push	{r3, r4, r5, lr}
2000036a:	4605      	mov	r5, r0
2000036c:	460c      	mov	r4, r1
    magic = get_partition_magic(part);
2000036e:	f7ff ff8f 	bl	20000290 <get_partition_magic>
    if (*magic != WOLFBOOT_MAGIC_TRAIL)
20000372:	6802      	ldr	r2, [r0, #0]
20000374:	4b06      	ldr	r3, [pc, #24]	; (20000390 <wolfBoot_get_partition_state+0x28>)
20000376:	429a      	cmp	r2, r3
20000378:	d106      	bne.n	20000388 <wolfBoot_get_partition_state+0x20>
    state = get_partition_state(part);
2000037a:	4628      	mov	r0, r5
2000037c:	f7ff ff8d 	bl	2000029a <get_partition_state>
    *st = *state;
20000380:	7803      	ldrb	r3, [r0, #0]
20000382:	7023      	strb	r3, [r4, #0]
    return 0;
20000384:	2000      	movs	r0, #0
}
20000386:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
20000388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2000038c:	e7fb      	b.n	20000386 <wolfBoot_get_partition_state+0x1e>
2000038e:	bf00      	nop
20000390:	544f4f42 	.word	0x544f4f42

20000394 <wolfBoot_erase_partition>:
{
20000394:	b510      	push	{r4, lr}
    if (part == PART_BOOT) {
20000396:	4604      	mov	r4, r0
20000398:	b120      	cbz	r0, 200003a4 <wolfBoot_erase_partition+0x10>
    if (part == PART_UPDATE) {
2000039a:	2c01      	cmp	r4, #1
2000039c:	d008      	beq.n	200003b0 <wolfBoot_erase_partition+0x1c>
    if (part == PART_SWAP) {
2000039e:	2c02      	cmp	r4, #2
200003a0:	d00c      	beq.n	200003bc <wolfBoot_erase_partition+0x28>
}
200003a2:	bd10      	pop	{r4, pc}
            hal_flash_erase(WOLFBOOT_PARTITION_BOOT_ADDRESS, WOLFBOOT_PARTITION_SIZE);
200003a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
200003a8:	4807      	ldr	r0, [pc, #28]	; (200003c8 <wolfBoot_erase_partition+0x34>)
200003aa:	4b08      	ldr	r3, [pc, #32]	; (200003cc <wolfBoot_erase_partition+0x38>)
200003ac:	4798      	blx	r3
200003ae:	e7f4      	b.n	2000039a <wolfBoot_erase_partition+0x6>
            hal_flash_erase(WOLFBOOT_PARTITION_UPDATE_ADDRESS, WOLFBOOT_PARTITION_SIZE);
200003b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
200003b4:	4806      	ldr	r0, [pc, #24]	; (200003d0 <wolfBoot_erase_partition+0x3c>)
200003b6:	4b05      	ldr	r3, [pc, #20]	; (200003cc <wolfBoot_erase_partition+0x38>)
200003b8:	4798      	blx	r3
200003ba:	e7f0      	b.n	2000039e <wolfBoot_erase_partition+0xa>
            hal_flash_erase(WOLFBOOT_PARTITION_SWAP_ADDRESS, WOLFBOOT_SECTOR_SIZE);
200003bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
200003c0:	4804      	ldr	r0, [pc, #16]	; (200003d4 <wolfBoot_erase_partition+0x40>)
200003c2:	4b02      	ldr	r3, [pc, #8]	; (200003cc <wolfBoot_erase_partition+0x38>)
200003c4:	4798      	blx	r3
}
200003c6:	e7ec      	b.n	200003a2 <wolfBoot_erase_partition+0xe>
200003c8:	08008000 	.word	0x08008000
200003cc:	20000181 	.word	0x20000181
200003d0:	08010000 	.word	0x08010000
200003d4:	08018000 	.word	0x08018000

200003d8 <wolfBoot_update_trigger>:
{
200003d8:	b508      	push	{r3, lr}
        hal_flash_unlock();
200003da:	4b04      	ldr	r3, [pc, #16]	; (200003ec <wolfBoot_update_trigger+0x14>)
200003dc:	4798      	blx	r3
        wolfBoot_set_partition_state(PART_UPDATE, st);
200003de:	2170      	movs	r1, #112	; 0x70
200003e0:	2001      	movs	r0, #1
200003e2:	f7ff ff72 	bl	200002ca <wolfBoot_set_partition_state>
        hal_flash_lock();
200003e6:	4b02      	ldr	r3, [pc, #8]	; (200003f0 <wolfBoot_update_trigger+0x18>)
200003e8:	4798      	blx	r3
}
200003ea:	bd08      	pop	{r3, pc}
200003ec:	200000f5 	.word	0x200000f5
200003f0:	20000119 	.word	0x20000119

200003f4 <wolfBoot_success>:
{
200003f4:	b508      	push	{r3, lr}
        hal_flash_unlock();
200003f6:	4b04      	ldr	r3, [pc, #16]	; (20000408 <wolfBoot_success+0x14>)
200003f8:	4798      	blx	r3
        wolfBoot_set_partition_state(PART_BOOT, st);
200003fa:	2100      	movs	r1, #0
200003fc:	4608      	mov	r0, r1
200003fe:	f7ff ff64 	bl	200002ca <wolfBoot_set_partition_state>
        hal_flash_lock();
20000402:	4b02      	ldr	r3, [pc, #8]	; (2000040c <wolfBoot_success+0x18>)
20000404:	4798      	blx	r3
}
20000406:	bd08      	pop	{r3, pc}
20000408:	200000f5 	.word	0x200000f5
2000040c:	20000119 	.word	0x20000119

20000410 <mpu_off>:
    mpu_is_on = 0;
20000410:	2300      	movs	r3, #0
20000412:	4a02      	ldr	r2, [pc, #8]	; (2000041c <mpu_off+0xc>)
20000414:	6013      	str	r3, [r2, #0]
    MPU_CTRL = 0;
20000416:	4a02      	ldr	r2, [pc, #8]	; (20000420 <mpu_off+0x10>)
20000418:	6013      	str	r3, [r2, #0]
}
2000041a:	4770      	bx	lr
2000041c:	20000800 	.word	0x20000800
20000420:	e000ed94 	.word	0xe000ed94

20000424 <do_boot>:
{
20000424:	b510      	push	{r4, lr}
20000426:	4604      	mov	r4, r0
    mpu_off();
20000428:	f7ff fff2 	bl	20000410 <mpu_off>
    asm volatile("cpsid i");
2000042c:	b672      	cpsid	i
    VTOR = ((uint32_t)app_offset);
2000042e:	4b06      	ldr	r3, [pc, #24]	; (20000448 <do_boot+0x24>)
20000430:	601c      	str	r4, [r3, #0]
    app_end_stack = (*((uint32_t *)(app_offset)));
20000432:	6822      	ldr	r2, [r4, #0]
    app_entry = (void *)(*((uint32_t *)(app_offset + 1)));
20000434:	6861      	ldr	r1, [r4, #4]
20000436:	4b05      	ldr	r3, [pc, #20]	; (2000044c <do_boot+0x28>)
20000438:	6019      	str	r1, [r3, #0]
    asm volatile("msr msp, %0" ::"r"(app_end_stack));
2000043a:	f382 8808 	msr	MSP, r2
    asm volatile("cpsie i");
2000043e:	b662      	cpsie	i
    asm volatile("mov pc, %0" ::"r"(app_entry));
20000440:	681b      	ldr	r3, [r3, #0]
20000442:	469f      	mov	pc, r3
}
20000444:	bd10      	pop	{r4, pc}
20000446:	bf00      	nop
20000448:	e000ed08 	.word	0xe000ed08
2000044c:	200007fc 	.word	0x200007fc

20000450 <arch_reboot>:
void RAMFUNCTION arch_reboot(void)
{
#ifdef CORTEX_R5
    SYSECR = ECR_RESET;
#else
    AIRCR = AIRCR_SYSRESETREQ | AIRCR_VKEY;
20000450:	4b01      	ldr	r3, [pc, #4]	; (20000458 <arch_reboot+0x8>)
20000452:	4a02      	ldr	r2, [pc, #8]	; (2000045c <arch_reboot+0xc>)
20000454:	601a      	str	r2, [r3, #0]
#endif
    while(1)
20000456:	e7fe      	b.n	20000456 <arch_reboot+0x6>
20000458:	e000ed0c 	.word	0xe000ed0c
2000045c:	05fa0004 	.word	0x05fa0004

20000460 <wolfBoot_erase_bootloader>:
{
20000460:	b508      	push	{r3, lr}
    uint32_t len = WOLFBOOT_PARTITION_BOOT_ADDRESS - (uint32_t)start;
20000462:	4804      	ldr	r0, [pc, #16]	; (20000474 <wolfBoot_erase_bootloader+0x14>)
    hal_flash_erase((uint32_t)start, len);
20000464:	f1c0 6100 	rsb	r1, r0, #134217728	; 0x8000000
20000468:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
2000046c:	4b02      	ldr	r3, [pc, #8]	; (20000478 <wolfBoot_erase_bootloader+0x18>)
2000046e:	4798      	blx	r3
}
20000470:	bd08      	pop	{r3, pc}
20000472:	bf00      	nop
20000474:	08000000 	.word	0x08000000
20000478:	20000181 	.word	0x20000181

2000047c <wolfBoot_self_update>:
{
2000047c:	b570      	push	{r4, r5, r6, lr}
2000047e:	4606      	mov	r6, r0
    hal_flash_unlock();
20000480:	4b0e      	ldr	r3, [pc, #56]	; (200004bc <wolfBoot_self_update+0x40>)
20000482:	4798      	blx	r3
    wolfBoot_erase_bootloader();
20000484:	f7ff ffec 	bl	20000460 <wolfBoot_erase_bootloader>
    uint32_t pos = 0;
20000488:	2400      	movs	r4, #0
    while (pos < src->fw_size) {
2000048a:	e008      	b.n	2000049e <wolfBoot_self_update+0x22>
            uint8_t *orig = (uint8_t*)(src->hdr + src_offset + pos);
2000048c:	6831      	ldr	r1, [r6, #0]
            hal_flash_write(pos + (uint32_t)&_start_text, orig, FLASHBUFFER_SIZE);
2000048e:	f44f 7280 	mov.w	r2, #256	; 0x100
20000492:	4429      	add	r1, r5
20000494:	480a      	ldr	r0, [pc, #40]	; (200004c0 <wolfBoot_self_update+0x44>)
20000496:	4420      	add	r0, r4
20000498:	4b0a      	ldr	r3, [pc, #40]	; (200004c4 <wolfBoot_self_update+0x48>)
2000049a:	4798      	blx	r3
{
2000049c:	462c      	mov	r4, r5
    while (pos < src->fw_size) {
2000049e:	6933      	ldr	r3, [r6, #16]
200004a0:	42a3      	cmp	r3, r4
200004a2:	d906      	bls.n	200004b2 <wolfBoot_self_update+0x36>
        if (src_offset + pos < (src->fw_size + IMAGE_HEADER_SIZE + FLASHBUFFER_SIZE))  {
200004a4:	f504 7580 	add.w	r5, r4, #256	; 0x100
200004a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
200004ac:	429d      	cmp	r5, r3
200004ae:	d2f5      	bcs.n	2000049c <wolfBoot_self_update+0x20>
200004b0:	e7ec      	b.n	2000048c <wolfBoot_self_update+0x10>
    hal_flash_lock();
200004b2:	4b05      	ldr	r3, [pc, #20]	; (200004c8 <wolfBoot_self_update+0x4c>)
200004b4:	4798      	blx	r3
    arch_reboot();
200004b6:	4b05      	ldr	r3, [pc, #20]	; (200004cc <wolfBoot_self_update+0x50>)
200004b8:	4798      	blx	r3
}
200004ba:	bd70      	pop	{r4, r5, r6, pc}
200004bc:	200000f5 	.word	0x200000f5
200004c0:	08000000 	.word	0x08000000
200004c4:	20000041 	.word	0x20000041
200004c8:	20000119 	.word	0x20000119
200004cc:	20000451 	.word	0x20000451

200004d0 <wolfBoot_copy_sector>:
    uint8_t key[ENCRYPT_KEY_SIZE];
    uint8_t nonce[ENCRYPT_NONCE_SIZE];
    uint32_t iv_counter;
#endif

    if (src == dst)
200004d0:	4288      	cmp	r0, r1
200004d2:	d033      	beq.n	2000053c <wolfBoot_copy_sector+0x6c>
{
200004d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
200004d8:	4606      	mov	r6, r0
200004da:	460f      	mov	r7, r1
200004dc:	ea4f 29c2 	mov.w	r9, r2, lsl #11
        return 0;

    if (src->part == PART_SWAP)
200004e0:	7d03      	ldrb	r3, [r0, #20]
200004e2:	2b02      	cmp	r3, #2
200004e4:	d00b      	beq.n	200004fe <wolfBoot_copy_sector+0x2e>
    uint32_t src_sector_offset = (sector * WOLFBOOT_SECTOR_SIZE);
200004e6:	46c8      	mov	r8, r9
        src_sector_offset = 0;
    if (dst->part == PART_SWAP)
200004e8:	7d3b      	ldrb	r3, [r7, #20]
200004ea:	2b02      	cmp	r3, #2
200004ec:	d00a      	beq.n	20000504 <wolfBoot_copy_sector+0x34>
            pos += FLASHBUFFER_SIZE;
        }
        return pos;
    }
#endif
    wb_flash_erase(dst, dst_sector_offset, WOLFBOOT_SECTOR_SIZE);
200004ee:	6838      	ldr	r0, [r7, #0]
200004f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
200004f4:	4448      	add	r0, r9
200004f6:	4b12      	ldr	r3, [pc, #72]	; (20000540 <wolfBoot_copy_sector+0x70>)
200004f8:	4798      	blx	r3
    uint32_t pos = 0;
200004fa:	2400      	movs	r4, #0
    while (pos < WOLFBOOT_SECTOR_SIZE) {
200004fc:	e010      	b.n	20000520 <wolfBoot_copy_sector+0x50>
        src_sector_offset = 0;
200004fe:	f04f 0800 	mov.w	r8, #0
20000502:	e7f1      	b.n	200004e8 <wolfBoot_copy_sector+0x18>
        dst_sector_offset = 0;
20000504:	f04f 0900 	mov.w	r9, #0
20000508:	e7f1      	b.n	200004ee <wolfBoot_copy_sector+0x1e>
        if (src_sector_offset + pos < (src->fw_size + IMAGE_HEADER_SIZE + FLASHBUFFER_SIZE))  {
            uint8_t *orig = (uint8_t*)(src->hdr + src_sector_offset + pos);
2000050a:	6831      	ldr	r1, [r6, #0]
            wb_flash_write(dst, dst_sector_offset + pos, orig, FLASHBUFFER_SIZE);
2000050c:	6838      	ldr	r0, [r7, #0]
2000050e:	4448      	add	r0, r9
20000510:	f44f 7280 	mov.w	r2, #256	; 0x100
20000514:	4429      	add	r1, r5
20000516:	4420      	add	r0, r4
20000518:	4b0a      	ldr	r3, [pc, #40]	; (20000544 <wolfBoot_copy_sector+0x74>)
2000051a:	4798      	blx	r3
        }
        pos += FLASHBUFFER_SIZE;
2000051c:	f504 7480 	add.w	r4, r4, #256	; 0x100
    while (pos < WOLFBOOT_SECTOR_SIZE) {
20000520:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
20000524:	d207      	bcs.n	20000536 <wolfBoot_copy_sector+0x66>
        if (src_sector_offset + pos < (src->fw_size + IMAGE_HEADER_SIZE + FLASHBUFFER_SIZE))  {
20000526:	eb04 0508 	add.w	r5, r4, r8
2000052a:	6933      	ldr	r3, [r6, #16]
2000052c:	f503 7300 	add.w	r3, r3, #512	; 0x200
20000530:	429d      	cmp	r5, r3
20000532:	d2f3      	bcs.n	2000051c <wolfBoot_copy_sector+0x4c>
20000534:	e7e9      	b.n	2000050a <wolfBoot_copy_sector+0x3a>
    }
    return pos;
20000536:	4620      	mov	r0, r4
}
20000538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return 0;
2000053c:	2000      	movs	r0, #0
}
2000053e:	4770      	bx	lr
20000540:	20000181 	.word	0x20000181
20000544:	20000041 	.word	0x20000041

20000548 <wolfBoot_update>:
#ifdef WOLFBOOT_ARMORED
#    pragma GCC push_options
#    pragma GCC optimize("O0")
#endif
static int RAMFUNCTION wolfBoot_update(int fallback_allowed)
{
20000548:	b570      	push	{r4, r5, r6, lr}
2000054a:	b094      	sub	sp, #80	; 0x50
2000054c:	4605      	mov	r5, r0
    uint8_t key[ENCRYPT_KEY_SIZE];
    uint8_t nonce[ENCRYPT_NONCE_SIZE];
#endif

    /* No Safety check on open: we might be in the middle of a broken update */
    wolfBoot_open_image(&update, PART_UPDATE);
2000054e:	2101      	movs	r1, #1
20000550:	a807      	add	r0, sp, #28
20000552:	4c62      	ldr	r4, [pc, #392]	; (200006dc <wolfBoot_update+0x194>)
20000554:	47a0      	blx	r4
    wolfBoot_open_image(&boot, PART_BOOT);
20000556:	2100      	movs	r1, #0
20000558:	a80d      	add	r0, sp, #52	; 0x34
2000055a:	47a0      	blx	r4
    wolfBoot_open_image(&swap, PART_SWAP);
2000055c:	2102      	movs	r1, #2
2000055e:	a801      	add	r0, sp, #4
20000560:	47a0      	blx	r4


    /* Use biggest size for the swap */
    total_size = boot.fw_size + IMAGE_HEADER_SIZE;
20000562:	9b11      	ldr	r3, [sp, #68]	; 0x44
20000564:	f503 7380 	add.w	r3, r3, #256	; 0x100
    if ((update.fw_size + IMAGE_HEADER_SIZE) > total_size)
20000568:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
2000056a:	f506 7680 	add.w	r6, r6, #256	; 0x100
2000056e:	429e      	cmp	r6, r3
20000570:	d800      	bhi.n	20000574 <wolfBoot_update+0x2c>
    total_size = boot.fw_size + IMAGE_HEADER_SIZE;
20000572:	461e      	mov	r6, r3
            total_size = update.fw_size + IMAGE_HEADER_SIZE;

    if (total_size <= IMAGE_HEADER_SIZE)
20000574:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
20000578:	f240 80aa 	bls.w	200006d0 <wolfBoot_update+0x188>
    /* In case this is a new update, do the required
     * checks on the firmware update
     * before starting the swap
     */

    update_type = wolfBoot_get_image_type(PART_UPDATE);
2000057c:	2001      	movs	r0, #1
2000057e:	4b58      	ldr	r3, [pc, #352]	; (200006e0 <wolfBoot_update+0x198>)
20000580:	4798      	blx	r3
20000582:	4604      	mov	r4, r0


    /* Check the first sector to detect interrupted update */
    if ((wolfBoot_get_update_sector_flag(0, &flag) < 0) || (flag == SECT_FLAG_NEW))
20000584:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
20000588:	2000      	movs	r0, #0
2000058a:	4b56      	ldr	r3, [pc, #344]	; (200006e4 <wolfBoot_update+0x19c>)
2000058c:	4798      	blx	r3
2000058e:	2800      	cmp	r0, #0
20000590:	db07      	blt.n	200005a2 <wolfBoot_update+0x5a>
20000592:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
20000596:	2b0f      	cmp	r3, #15
20000598:	d003      	beq.n	200005a2 <wolfBoot_update+0x5a>
#endif

    #ifdef GLITCH_VER
    trigger_low();
    #endif
    hal_flash_unlock();
2000059a:	4b53      	ldr	r3, [pc, #332]	; (200006e8 <wolfBoot_update+0x1a0>)
2000059c:	4798      	blx	r3
    uint32_t sector = 0;
2000059e:	2400      	movs	r4, #0
#ifndef DISABLE_BACKUP
    /* Interruptible swap
     * The status is saved in the sector flags of the update partition.
     * If something goes wrong, the operation will be resumed upon reboot.
     */
    while ((sector * sector_size) < total_size) {
200005a0:	e03c      	b.n	2000061c <wolfBoot_update+0xd4>
        if (((update_type & 0x000F) != HDR_IMG_TYPE_APP) || ((update_type & 0xFF00) != HDR_IMG_TYPE_AUTH))
200005a2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
200005a6:	b2a4      	uxth	r4, r4
200005a8:	f240 2301 	movw	r3, #513	; 0x201
200005ac:	429c      	cmp	r4, r3
200005ae:	f040 8092 	bne.w	200006d6 <wolfBoot_update+0x18e>
        if (!update.hdr_ok || (wolfBoot_verify_integrity(&update) < 0) 
200005b2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
200005b6:	f013 0f01 	tst.w	r3, #1
200005ba:	d016      	beq.n	200005ea <wolfBoot_update+0xa2>
200005bc:	a807      	add	r0, sp, #28
200005be:	4b4b      	ldr	r3, [pc, #300]	; (200006ec <wolfBoot_update+0x1a4>)
200005c0:	4798      	blx	r3
200005c2:	2800      	cmp	r0, #0
200005c4:	db11      	blt.n	200005ea <wolfBoot_update+0xa2>
                || (wolfBoot_verify_authenticity(&update) < 0)
200005c6:	a807      	add	r0, sp, #28
200005c8:	4b49      	ldr	r3, [pc, #292]	; (200006f0 <wolfBoot_update+0x1a8>)
200005ca:	4798      	blx	r3
200005cc:	2800      	cmp	r0, #0
200005ce:	db0c      	blt.n	200005ea <wolfBoot_update+0xa2>
            if ( !fallback_allowed &&
200005d0:	2d00      	cmp	r5, #0
200005d2:	d1e2      	bne.n	2000059a <wolfBoot_update+0x52>
                    (wolfBoot_update_firmware_version() <= wolfBoot_current_firmware_version()) ) {
200005d4:	2001      	movs	r0, #1
200005d6:	4d47      	ldr	r5, [pc, #284]	; (200006f4 <wolfBoot_update+0x1ac>)
200005d8:	47a8      	blx	r5
200005da:	4604      	mov	r4, r0
200005dc:	2000      	movs	r0, #0
200005de:	47a8      	blx	r5
            if ( !fallback_allowed &&
200005e0:	4284      	cmp	r4, r0
200005e2:	d8da      	bhi.n	2000059a <wolfBoot_update+0x52>
                        return -1;
200005e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
200005e8:	e070      	b.n	200006cc <wolfBoot_update+0x184>
            return -1;
200005ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
200005ee:	e06d      	b.n	200006cc <wolfBoot_update+0x184>
        if ((wolfBoot_get_update_sector_flag(sector, &flag) != 0) || (flag == SECT_FLAG_NEW)) {
           flag = SECT_FLAG_SWAPPING;
200005f0:	2307      	movs	r3, #7
200005f2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
           wolfBoot_copy_sector(&update, &swap, sector);
200005f6:	4622      	mov	r2, r4
200005f8:	a901      	add	r1, sp, #4
200005fa:	a807      	add	r0, sp, #28
200005fc:	f7ff ff68 	bl	200004d0 <wolfBoot_copy_sector>
           if (((sector + 1) * sector_size) < WOLFBOOT_PARTITION_SIZE)
20000600:	1c63      	adds	r3, r4, #1
20000602:	02db      	lsls	r3, r3, #11
20000604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000608:	d318      	bcc.n	2000063c <wolfBoot_update+0xf4>
               wolfBoot_set_update_sector_flag(sector, flag);
        }
        if (flag == SECT_FLAG_SWAPPING) {
2000060a:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
2000060e:	2b07      	cmp	r3, #7
20000610:	d01a      	beq.n	20000648 <wolfBoot_update+0x100>
            flag = SECT_FLAG_BACKUP;
            wolfBoot_copy_sector(&boot, &update, sector);
           if (((sector + 1) * sector_size) < WOLFBOOT_PARTITION_SIZE)
                wolfBoot_set_update_sector_flag(sector, flag);
        }
        if (flag == SECT_FLAG_BACKUP) {
20000612:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
20000616:	2b03      	cmp	r3, #3
20000618:	d029      	beq.n	2000066e <wolfBoot_update+0x126>
            flag = SECT_FLAG_UPDATED;
            wolfBoot_copy_sector(&swap, &boot, sector);
            if (((sector + 1) * sector_size) < WOLFBOOT_PARTITION_SIZE)
                wolfBoot_set_update_sector_flag(sector, flag);
        }
        sector++;
2000061a:	3401      	adds	r4, #1
    while ((sector * sector_size) < total_size) {
2000061c:	ebb6 2fc4 	cmp.w	r6, r4, lsl #11
20000620:	d944      	bls.n	200006ac <wolfBoot_update+0x164>
        if ((wolfBoot_get_update_sector_flag(sector, &flag) != 0) || (flag == SECT_FLAG_NEW)) {
20000622:	b2a5      	uxth	r5, r4
20000624:	f10d 014f 	add.w	r1, sp, #79	; 0x4f
20000628:	4628      	mov	r0, r5
2000062a:	4b2e      	ldr	r3, [pc, #184]	; (200006e4 <wolfBoot_update+0x19c>)
2000062c:	4798      	blx	r3
2000062e:	2800      	cmp	r0, #0
20000630:	d1de      	bne.n	200005f0 <wolfBoot_update+0xa8>
20000632:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
20000636:	2b0f      	cmp	r3, #15
20000638:	d1e7      	bne.n	2000060a <wolfBoot_update+0xc2>
2000063a:	e7d9      	b.n	200005f0 <wolfBoot_update+0xa8>
               wolfBoot_set_update_sector_flag(sector, flag);
2000063c:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
20000640:	4628      	mov	r0, r5
20000642:	4b2d      	ldr	r3, [pc, #180]	; (200006f8 <wolfBoot_update+0x1b0>)
20000644:	4798      	blx	r3
20000646:	e7e0      	b.n	2000060a <wolfBoot_update+0xc2>
            flag = SECT_FLAG_BACKUP;
20000648:	2303      	movs	r3, #3
2000064a:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
            wolfBoot_copy_sector(&boot, &update, sector);
2000064e:	4622      	mov	r2, r4
20000650:	a907      	add	r1, sp, #28
20000652:	a80d      	add	r0, sp, #52	; 0x34
20000654:	f7ff ff3c 	bl	200004d0 <wolfBoot_copy_sector>
           if (((sector + 1) * sector_size) < WOLFBOOT_PARTITION_SIZE)
20000658:	1c63      	adds	r3, r4, #1
2000065a:	02db      	lsls	r3, r3, #11
2000065c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000660:	d2d7      	bcs.n	20000612 <wolfBoot_update+0xca>
                wolfBoot_set_update_sector_flag(sector, flag);
20000662:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
20000666:	4628      	mov	r0, r5
20000668:	4b23      	ldr	r3, [pc, #140]	; (200006f8 <wolfBoot_update+0x1b0>)
2000066a:	4798      	blx	r3
2000066c:	e7d1      	b.n	20000612 <wolfBoot_update+0xca>
            flag = SECT_FLAG_UPDATED;
2000066e:	2300      	movs	r3, #0
20000670:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
            wolfBoot_copy_sector(&swap, &boot, sector);
20000674:	4622      	mov	r2, r4
20000676:	a90d      	add	r1, sp, #52	; 0x34
20000678:	a801      	add	r0, sp, #4
2000067a:	f7ff ff29 	bl	200004d0 <wolfBoot_copy_sector>
            if (((sector + 1) * sector_size) < WOLFBOOT_PARTITION_SIZE)
2000067e:	1c63      	adds	r3, r4, #1
20000680:	02db      	lsls	r3, r3, #11
20000682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000686:	d2c8      	bcs.n	2000061a <wolfBoot_update+0xd2>
                wolfBoot_set_update_sector_flag(sector, flag);
20000688:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
2000068c:	4628      	mov	r0, r5
2000068e:	4b1a      	ldr	r3, [pc, #104]	; (200006f8 <wolfBoot_update+0x1b0>)
20000690:	4798      	blx	r3
20000692:	e7c2      	b.n	2000061a <wolfBoot_update+0xd2>
    }
    while((sector * sector_size) < WOLFBOOT_PARTITION_SIZE) {
        wb_flash_erase(&boot, sector * sector_size, sector_size);
20000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
20000698:	980d      	ldr	r0, [sp, #52]	; 0x34
2000069a:	4428      	add	r0, r5
2000069c:	4e17      	ldr	r6, [pc, #92]	; (200006fc <wolfBoot_update+0x1b4>)
2000069e:	47b0      	blx	r6
        wb_flash_erase(&update, sector * sector_size, sector_size);
200006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
200006a4:	9807      	ldr	r0, [sp, #28]
200006a6:	4428      	add	r0, r5
200006a8:	47b0      	blx	r6
        sector++;
200006aa:	3401      	adds	r4, #1
    while((sector * sector_size) < WOLFBOOT_PARTITION_SIZE) {
200006ac:	02e5      	lsls	r5, r4, #11
200006ae:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
200006b2:	d3ef      	bcc.n	20000694 <wolfBoot_update+0x14c>
    }
    wb_flash_erase(&swap, 0, WOLFBOOT_SECTOR_SIZE);
200006b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
200006b8:	9801      	ldr	r0, [sp, #4]
200006ba:	4b10      	ldr	r3, [pc, #64]	; (200006fc <wolfBoot_update+0x1b4>)
200006bc:	4798      	blx	r3
    st = IMG_STATE_TESTING;
    wolfBoot_set_partition_state(PART_BOOT, st);
200006be:	2110      	movs	r1, #16
200006c0:	2000      	movs	r0, #0
200006c2:	4b0f      	ldr	r3, [pc, #60]	; (20000700 <wolfBoot_update+0x1b8>)
200006c4:	4798      	blx	r3
#endif

#ifdef EXT_FLASH
    ext_flash_lock();
#endif
    hal_flash_lock();
200006c6:	4b0f      	ldr	r3, [pc, #60]	; (20000704 <wolfBoot_update+0x1bc>)
200006c8:	4798      	blx	r3

/* Save the encryption key after swapping */
#ifdef EXT_ENCRYPTED
    wolfBoot_set_encrypt_key(key, nonce);
#endif
    return 0;
200006ca:	2000      	movs	r0, #0
}
200006cc:	b014      	add	sp, #80	; 0x50
200006ce:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
200006d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
200006d4:	e7fa      	b.n	200006cc <wolfBoot_update+0x184>
            return -1;
200006d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
200006da:	e7f7      	b.n	200006cc <wolfBoot_update+0x184>
200006dc:	0800035d 	.word	0x0800035d
200006e0:	08000641 	.word	0x08000641
200006e4:	08000529 	.word	0x08000529
200006e8:	200000f5 	.word	0x200000f5
200006ec:	08000401 	.word	0x08000401
200006f0:	08000469 	.word	0x08000469
200006f4:	0800061d 	.word	0x0800061d
200006f8:	20000305 	.word	0x20000305
200006fc:	20000181 	.word	0x20000181
20000700:	200002cb 	.word	0x200002cb
20000704:	20000119 	.word	0x20000119

20000708 <wolfBoot_start>:

void RAMFUNCTION wolfBoot_start(void)
{
20000708:	b500      	push	{lr}
2000070a:	b089      	sub	sp, #36	; 0x24
    uint8_t st;
    struct wolfBoot_image boot;

#ifdef RAM_CODE
    wolfBoot_check_self_update();
2000070c:	4b2a      	ldr	r3, [pc, #168]	; (200007b8 <wolfBoot_start+0xb0>)
2000070e:	4798      	blx	r3
#endif

    /* Check if the BOOT partition is still in TESTING,
     * to trigger fallback.
     */
    if ((wolfBoot_get_partition_state(PART_BOOT, &st) == 0) && (st == IMG_STATE_TESTING)) {
20000710:	f10d 011f 	add.w	r1, sp, #31
20000714:	2000      	movs	r0, #0
20000716:	4b29      	ldr	r3, [pc, #164]	; (200007bc <wolfBoot_start+0xb4>)
20000718:	4798      	blx	r3
2000071a:	b918      	cbnz	r0, 20000724 <wolfBoot_start+0x1c>
2000071c:	f89d 301f 	ldrb.w	r3, [sp, #31]
20000720:	2b10      	cmp	r3, #16
20000722:	d022      	beq.n	2000076a <wolfBoot_start+0x62>
        wolfBoot_update_trigger();
        wolfBoot_update(1);
    } else if ((wolfBoot_get_partition_state(PART_UPDATE, &st) == 0) && (st == IMG_STATE_UPDATING)) {
20000724:	f10d 011f 	add.w	r1, sp, #31
20000728:	2001      	movs	r0, #1
2000072a:	4b24      	ldr	r3, [pc, #144]	; (200007bc <wolfBoot_start+0xb4>)
2000072c:	4798      	blx	r3
2000072e:	b918      	cbnz	r0, 20000738 <wolfBoot_start+0x30>
20000730:	f89d 301f 	ldrb.w	r3, [sp, #31]
20000734:	2b70      	cmp	r3, #112	; 0x70
20000736:	d01e      	beq.n	20000776 <wolfBoot_start+0x6e>
    /* Check for new updates in the UPDATE partition */
        wolfBoot_update(0);
    }

    if ((wolfBoot_open_image(&boot, PART_BOOT) < 0)
20000738:	2100      	movs	r1, #0
2000073a:	a801      	add	r0, sp, #4
2000073c:	4b20      	ldr	r3, [pc, #128]	; (200007c0 <wolfBoot_start+0xb8>)
2000073e:	4798      	blx	r3
20000740:	2800      	cmp	r0, #0
20000742:	db04      	blt.n	2000074e <wolfBoot_start+0x46>
            || (wolfBoot_verify_integrity(&boot) < 0)
20000744:	a801      	add	r0, sp, #4
20000746:	4b1f      	ldr	r3, [pc, #124]	; (200007c4 <wolfBoot_start+0xbc>)
20000748:	4798      	blx	r3
2000074a:	2800      	cmp	r0, #0
2000074c:	da16      	bge.n	2000077c <wolfBoot_start+0x74>
            || (wolfBoot_verify_authenticity(&boot) < 0)
            ) {
        trigger_low();
2000074e:	4b1e      	ldr	r3, [pc, #120]	; (200007c8 <wolfBoot_start+0xc0>)
20000750:	4798      	blx	r3
        if (likely(wolfBoot_update(1) < 0)) {
20000752:	2001      	movs	r0, #1
20000754:	f7ff fef8 	bl	20000548 <wolfBoot_update>
20000758:	2800      	cmp	r0, #0
2000075a:	db1e      	blt.n	2000079a <wolfBoot_start+0x92>
            #else
                while(1);
            #endif
        } else {
            /* Emergency update successful, try to re-open boot image */
            if (likely(((wolfBoot_open_image(&boot, PART_BOOT) < 0) ||
2000075c:	2100      	movs	r1, #0
2000075e:	a801      	add	r0, sp, #4
20000760:	4b17      	ldr	r3, [pc, #92]	; (200007c0 <wolfBoot_start+0xb8>)
20000762:	4798      	blx	r3
20000764:	2800      	cmp	r0, #0
20000766:	da1b      	bge.n	200007a0 <wolfBoot_start+0x98>
                /* panic: something went wrong after the emergency update */
                // trigger_low();
                #ifdef WOLFBOOT_ARMORED
                    wolfBoot_panic();
                #else
                    while(1);
20000768:	e7fe      	b.n	20000768 <wolfBoot_start+0x60>
        wolfBoot_update_trigger();
2000076a:	4b18      	ldr	r3, [pc, #96]	; (200007cc <wolfBoot_start+0xc4>)
2000076c:	4798      	blx	r3
        wolfBoot_update(1);
2000076e:	2001      	movs	r0, #1
20000770:	f7ff feea 	bl	20000548 <wolfBoot_update>
20000774:	e7e0      	b.n	20000738 <wolfBoot_start+0x30>
        wolfBoot_update(0);
20000776:	f7ff fee7 	bl	20000548 <wolfBoot_update>
2000077a:	e7dd      	b.n	20000738 <wolfBoot_start+0x30>
            || (wolfBoot_verify_authenticity(&boot) < 0)
2000077c:	a801      	add	r0, sp, #4
2000077e:	4b14      	ldr	r3, [pc, #80]	; (200007d0 <wolfBoot_start+0xc8>)
20000780:	4798      	blx	r3
20000782:	2800      	cmp	r0, #0
20000784:	dbe3      	blt.n	2000074e <wolfBoot_start+0x46>
                #endif
            }
        }
    }
    trigger_low();
20000786:	4b10      	ldr	r3, [pc, #64]	; (200007c8 <wolfBoot_start+0xc0>)
20000788:	4798      	blx	r3
#if defined(WOLFBOOT_ARMORED)
    PART_SANITY_CHECK(&boot);
#endif
    hal_prepare_boot();
2000078a:	4b12      	ldr	r3, [pc, #72]	; (200007d4 <wolfBoot_start+0xcc>)
2000078c:	4798      	blx	r3
    do_boot((void *)boot.fw_base);
2000078e:	9804      	ldr	r0, [sp, #16]
20000790:	4b11      	ldr	r3, [pc, #68]	; (200007d8 <wolfBoot_start+0xd0>)
20000792:	4798      	blx	r3
}
20000794:	b009      	add	sp, #36	; 0x24
20000796:	f85d fb04 	ldr.w	pc, [sp], #4
            trigger_low();
2000079a:	4b0b      	ldr	r3, [pc, #44]	; (200007c8 <wolfBoot_start+0xc0>)
2000079c:	4798      	blx	r3
                while(1);
2000079e:	e7fe      	b.n	2000079e <wolfBoot_start+0x96>
            if (likely(((wolfBoot_open_image(&boot, PART_BOOT) < 0) ||
200007a0:	a801      	add	r0, sp, #4
200007a2:	4b08      	ldr	r3, [pc, #32]	; (200007c4 <wolfBoot_start+0xbc>)
200007a4:	4798      	blx	r3
200007a6:	2800      	cmp	r0, #0
200007a8:	dbde      	blt.n	20000768 <wolfBoot_start+0x60>
200007aa:	a801      	add	r0, sp, #4
200007ac:	4b08      	ldr	r3, [pc, #32]	; (200007d0 <wolfBoot_start+0xc8>)
200007ae:	4798      	blx	r3
200007b0:	2800      	cmp	r0, #0
200007b2:	dae8      	bge.n	20000786 <wolfBoot_start+0x7e>
200007b4:	e7d8      	b.n	20000768 <wolfBoot_start+0x60>
200007b6:	bf00      	nop
200007b8:	0800080d 	.word	0x0800080d
200007bc:	20000369 	.word	0x20000369
200007c0:	0800035d 	.word	0x0800035d
200007c4:	08000401 	.word	0x08000401
200007c8:	08000069 	.word	0x08000069
200007cc:	200003d9 	.word	0x200003d9
200007d0:	08000469 	.word	0x08000469
200007d4:	080000fd 	.word	0x080000fd
200007d8:	20000425 	.word	0x20000425
