
wolfboot.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <IV>:
 8000000:	00 80 00 20 ad 0b 00 08 03 0c 00 08 f5 0b 00 08     ... ............
 8000010:	f5 0b 00 08 f5 0b 00 08 f5 0b 00 08 00 00 00 00     ................
	...
 800002c:	03 0c 00 08 03 0c 00 08 00 00 00 00 03 0c 00 08     ................
 800003c:	03 0c 00 08                                         ....

08000040 <boot_jump>:
};
#endif

__attribute__((section(".boot_jmp")))
void boot_jump(void)
{
 8000040:	b500      	push	{lr}
 8000042:	b083      	sub	sp, #12
    uint32_t x = (uint32_t)(&END_STACK);
 8000044:	4b04      	ldr	r3, [pc, #16]	; (8000058 <boot_jump+0x18>)
 8000046:	9301      	str	r3, [sp, #4]
    asm volatile ("mov r13,%0" :: "r" (x));
 8000048:	9b01      	ldr	r3, [sp, #4]
 800004a:	469d      	mov	sp, r3
    isr_reset();
 800004c:	f000 fdae 	bl	8000bac <isr_reset>
}
 8000050:	bf00      	nop
 8000052:	b003      	add	sp, #12
 8000054:	f85d fb04 	ldr.w	pc, [sp], #4
 8000058:	20008000 	.word	0x20008000

0800005c <trigger_high>:
volatile uint32_t *GPIOA_IDR = (uint32_t *)(GPIOA + 0x10);


void trigger_high(void)
{
	*GPIOA_ODR |= 1 << 12;
 800005c:	4b04      	ldr	r3, [pc, #16]	; (8000070 <trigger_high+0x14>)
 800005e:	681b      	ldr	r3, [r3, #0]
 8000060:	681a      	ldr	r2, [r3, #0]
 8000062:	4b03      	ldr	r3, [pc, #12]	; (8000070 <trigger_high+0x14>)
 8000064:	681b      	ldr	r3, [r3, #0]
 8000066:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800006a:	601a      	str	r2, [r3, #0]
}
 800006c:	bf00      	nop
 800006e:	4770      	bx	lr
 8000070:	20000008 	.word	0x20000008

08000074 <trigger_low>:

void trigger_low(void)
{
    *GPIOA_ODR &= ~(1 << 12);
 8000074:	4b04      	ldr	r3, [pc, #16]	; (8000088 <trigger_low+0x14>)
 8000076:	681b      	ldr	r3, [r3, #0]
 8000078:	681a      	ldr	r2, [r3, #0]
 800007a:	4b03      	ldr	r3, [pc, #12]	; (8000088 <trigger_low+0x14>)
 800007c:	681b      	ldr	r3, [r3, #0]
 800007e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000082:	601a      	str	r2, [r3, #0]
}
 8000084:	bf00      	nop
 8000086:	4770      	bx	lr
 8000088:	20000008 	.word	0x20000008

0800008c <trigger_setup>:

void trigger_setup(void)
{
 800008c:	b500      	push	{lr}
 800008e:	b083      	sub	sp, #12
	*AHB_ENABLE_REG |= (1 << 17);
 8000090:	4b0d      	ldr	r3, [pc, #52]	; (80000c8 <trigger_setup+0x3c>)
 8000092:	681b      	ldr	r3, [r3, #0]
 8000094:	681a      	ldr	r2, [r3, #0]
 8000096:	4b0c      	ldr	r3, [pc, #48]	; (80000c8 <trigger_setup+0x3c>)
 8000098:	681b      	ldr	r3, [r3, #0]
 800009a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800009e:	601a      	str	r2, [r3, #0]
    volatile uint32_t x = 0;
 80000a0:	2300      	movs	r3, #0
 80000a2:	9301      	str	r3, [sp, #4]
    x = 0;
 80000a4:	2300      	movs	r3, #0
 80000a6:	9301      	str	r3, [sp, #4]
    x = 0;
 80000a8:	2300      	movs	r3, #0
 80000aa:	9301      	str	r3, [sp, #4]
    trigger_low();
 80000ac:	f7ff ffe2 	bl	8000074 <trigger_low>
	*GPIOA_MODER |= (0b01) << (12*2);
 80000b0:	4b06      	ldr	r3, [pc, #24]	; (80000cc <trigger_setup+0x40>)
 80000b2:	681b      	ldr	r3, [r3, #0]
 80000b4:	681a      	ldr	r2, [r3, #0]
 80000b6:	4b05      	ldr	r3, [pc, #20]	; (80000cc <trigger_setup+0x40>)
 80000b8:	681b      	ldr	r3, [r3, #0]
 80000ba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80000be:	601a      	str	r2, [r3, #0]
}
 80000c0:	bf00      	nop
 80000c2:	b003      	add	sp, #12
 80000c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80000c8:	20000000 	.word	0x20000000
 80000cc:	20000004 	.word	0x20000004

080000d0 <clock_pll_off>:

    return 0;
}

void clock_pll_off(void)
{
 80000d0:	b082      	sub	sp, #8
    uint32_t reg32;
    /* Enable internal high-speed oscillator. */
    RCC_CR |= RCC_CR_HSION;
 80000d2:	4b13      	ldr	r3, [pc, #76]	; (8000120 <clock_pll_off+0x50>)
 80000d4:	681b      	ldr	r3, [r3, #0]
 80000d6:	4a12      	ldr	r2, [pc, #72]	; (8000120 <clock_pll_off+0x50>)
 80000d8:	f043 0301 	orr.w	r3, r3, #1
 80000dc:	6013      	str	r3, [r2, #0]
    DMB();
 80000de:	f3bf 8f5f 	dmb	sy
    while ((RCC_CR & RCC_CR_HSIRDY) == 0) {};
 80000e2:	bf00      	nop
 80000e4:	4b0e      	ldr	r3, [pc, #56]	; (8000120 <clock_pll_off+0x50>)
 80000e6:	681b      	ldr	r3, [r3, #0]
 80000e8:	f003 0302 	and.w	r3, r3, #2
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d0f9      	beq.n	80000e4 <clock_pll_off+0x14>

    /* Select HSI as SYSCLK source. */
    reg32 = RCC_CFGR;
 80000f0:	4b0c      	ldr	r3, [pc, #48]	; (8000124 <clock_pll_off+0x54>)
 80000f2:	681b      	ldr	r3, [r3, #0]
 80000f4:	9301      	str	r3, [sp, #4]
    reg32 &= ~((1 << 1) | (1 << 0));
 80000f6:	9b01      	ldr	r3, [sp, #4]
 80000f8:	f023 0303 	bic.w	r3, r3, #3
 80000fc:	9301      	str	r3, [sp, #4]
    RCC_CFGR = (reg32 | RCC_CFGR_SW_HSI);
 80000fe:	4a09      	ldr	r2, [pc, #36]	; (8000124 <clock_pll_off+0x54>)
 8000100:	9b01      	ldr	r3, [sp, #4]
 8000102:	6013      	str	r3, [r2, #0]
    DMB();
 8000104:	f3bf 8f5f 	dmb	sy

    /* Turn off PLL */
    RCC_CR &= ~RCC_CR_PLLON;
 8000108:	4b05      	ldr	r3, [pc, #20]	; (8000120 <clock_pll_off+0x50>)
 800010a:	681b      	ldr	r3, [r3, #0]
 800010c:	4a04      	ldr	r2, [pc, #16]	; (8000120 <clock_pll_off+0x50>)
 800010e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000112:	6013      	str	r3, [r2, #0]
    DMB();
 8000114:	f3bf 8f5f 	dmb	sy
}
 8000118:	bf00      	nop
 800011a:	b002      	add	sp, #8
 800011c:	4770      	bx	lr
 800011e:	bf00      	nop
 8000120:	40021000 	.word	0x40021000
 8000124:	40021004 	.word	0x40021004

08000128 <hal_init>:
}

void hal_init(void)
{
    //clock_pll_on(0);
}
 8000128:	bf00      	nop
 800012a:	4770      	bx	lr

0800012c <hal_prepare_boot>:

void hal_prepare_boot(void)
{
 800012c:	b508      	push	{r3, lr}
#ifdef SPI_FLASH
    spi_release();
#endif

    clock_pll_off();
 800012e:	f7ff ffcf 	bl	80000d0 <clock_pll_off>
}
 8000132:	bf00      	nop
 8000134:	bd08      	pop	{r3, pc}

08000136 <main>:
extern void (** const IV_RAM)(void);
#endif

void trigger_setup(void);
int main(void)
{
 8000136:	b508      	push	{r3, lr}
    hal_init();
 8000138:	f7ff fff6 	bl	8000128 <hal_init>
    // for (volatile uint32_t i = 0; i < 50; i++) {
    //     for (volatile uint32_t j = 0; j < 50; j++) {
    //         k++;
    //     }
    // }
    wolfBoot_update_trigger();
 800013c:	f005 f930 	bl	80053a0 <__wolfBoot_update_trigger_veneer>
    trigger_setup();
 8000140:	f7ff ffa4 	bl	800008c <trigger_setup>
#endif
#ifdef WOLFBOOT_TPM
    wolfBoot_tpm2_init();
#endif

    wolfBoot_start();
 8000144:	f005 f930 	bl	80053a8 <__wolfBoot_start_veneer>

    /* wolfBoot_start should never return. */
    wolfBoot_panic();
 8000148:	e7fe      	b.n	8000148 <main+0x12>
 800014a:	e7fd      	b.n	8000148 <main+0x12>
 800014c:	e7fc      	b.n	8000148 <main+0x12>
 800014e:	e7fb      	b.n	8000148 <main+0x12>
 8000150:	e7fa      	b.n	8000148 <main+0x12>

    return 0;
 8000152:	2300      	movs	r3, #0
}
 8000154:	4618      	mov	r0, r3
 8000156:	bd08      	pop	{r3, pc}

08000158 <memset>:
    return (isupper(c) || islower(c));
}

#if !defined(__IAR_SYSTEMS_ICC__) && !defined(PLATFORM_X86_64_EFI)
void *memset(void *s, int c, size_t n)
{
 8000158:	b086      	sub	sp, #24
 800015a:	9003      	str	r0, [sp, #12]
 800015c:	9102      	str	r1, [sp, #8]
 800015e:	9201      	str	r2, [sp, #4]
	unsigned char *d = (unsigned char *)s;
 8000160:	9b03      	ldr	r3, [sp, #12]
 8000162:	9305      	str	r3, [sp, #20]

	while (n--) {
 8000164:	e005      	b.n	8000172 <memset+0x1a>
		*d++ = (unsigned char)c;
 8000166:	9b05      	ldr	r3, [sp, #20]
 8000168:	1c5a      	adds	r2, r3, #1
 800016a:	9205      	str	r2, [sp, #20]
 800016c:	9a02      	ldr	r2, [sp, #8]
 800016e:	b2d2      	uxtb	r2, r2
 8000170:	701a      	strb	r2, [r3, #0]
	while (n--) {
 8000172:	9b01      	ldr	r3, [sp, #4]
 8000174:	1e5a      	subs	r2, r3, #1
 8000176:	9201      	str	r2, [sp, #4]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d1f4      	bne.n	8000166 <memset+0xe>
	}

	return s;
 800017c:	9b03      	ldr	r3, [sp, #12]
}
 800017e:	4618      	mov	r0, r3
 8000180:	b006      	add	sp, #24
 8000182:	4770      	bx	lr

08000184 <strlen>:
    }
	return diff;
}

size_t strlen(const char *s)
{
 8000184:	b084      	sub	sp, #16
 8000186:	9001      	str	r0, [sp, #4]
    size_t i = 0;
 8000188:	2300      	movs	r3, #0
 800018a:	9303      	str	r3, [sp, #12]

    while (s[i] != 0)
 800018c:	e002      	b.n	8000194 <strlen+0x10>
        i++;
 800018e:	9b03      	ldr	r3, [sp, #12]
 8000190:	3301      	adds	r3, #1
 8000192:	9303      	str	r3, [sp, #12]
    while (s[i] != 0)
 8000194:	9a01      	ldr	r2, [sp, #4]
 8000196:	9b03      	ldr	r3, [sp, #12]
 8000198:	4413      	add	r3, r2
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d1f6      	bne.n	800018e <strlen+0xa>

    return i;
 80001a0:	9b03      	ldr	r3, [sp, #12]
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <memcpy>:
    return diff;
}

#if  !defined(__IAR_SYSTEMS_ICC__) && !defined(PLATFORM_X86_64_EFI)
void *memcpy(void *dst, const void *src, size_t n)
{
 80001a8:	b088      	sub	sp, #32
 80001aa:	9003      	str	r0, [sp, #12]
 80001ac:	9102      	str	r1, [sp, #8]
 80001ae:	9201      	str	r2, [sp, #4]
    size_t i;
    const char *s = (const char *)src;
 80001b0:	9b02      	ldr	r3, [sp, #8]
 80001b2:	9306      	str	r3, [sp, #24]
    char *d = (char *)dst;
 80001b4:	9b03      	ldr	r3, [sp, #12]
 80001b6:	9305      	str	r3, [sp, #20]

    for (i = 0; i < n; i++) {
 80001b8:	2300      	movs	r3, #0
 80001ba:	9307      	str	r3, [sp, #28]
 80001bc:	e00a      	b.n	80001d4 <memcpy+0x2c>
        d[i] = s[i];
 80001be:	9a06      	ldr	r2, [sp, #24]
 80001c0:	9b07      	ldr	r3, [sp, #28]
 80001c2:	441a      	add	r2, r3
 80001c4:	9905      	ldr	r1, [sp, #20]
 80001c6:	9b07      	ldr	r3, [sp, #28]
 80001c8:	440b      	add	r3, r1
 80001ca:	7812      	ldrb	r2, [r2, #0]
 80001cc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < n; i++) {
 80001ce:	9b07      	ldr	r3, [sp, #28]
 80001d0:	3301      	adds	r3, #1
 80001d2:	9307      	str	r3, [sp, #28]
 80001d4:	9a07      	ldr	r2, [sp, #28]
 80001d6:	9b01      	ldr	r3, [sp, #4]
 80001d8:	429a      	cmp	r2, r3
 80001da:	d3f0      	bcc.n	80001be <memcpy+0x16>
    }

    return dst;
 80001dc:	9b03      	ldr	r3, [sp, #12]
}
 80001de:	4618      	mov	r0, r3
 80001e0:	b008      	add	sp, #32
 80001e2:	4770      	bx	lr

080001e4 <memcmp>:
    return dst;
}


int memcmp(const void *_s1, const void *_s2, size_t n)
{
 80001e4:	b088      	sub	sp, #32
 80001e6:	9003      	str	r0, [sp, #12]
 80001e8:	9102      	str	r1, [sp, #8]
 80001ea:	9201      	str	r2, [sp, #4]
    int diff = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	9307      	str	r3, [sp, #28]
    const unsigned char *s1 = (const unsigned char *)_s1;
 80001f0:	9b03      	ldr	r3, [sp, #12]
 80001f2:	9306      	str	r3, [sp, #24]
    const unsigned char *s2 = (const unsigned char *)_s2;
 80001f4:	9b02      	ldr	r3, [sp, #8]
 80001f6:	9305      	str	r3, [sp, #20]

    while (!diff && n) {
 80001f8:	e00f      	b.n	800021a <memcmp+0x36>
        diff = (int)*s1 - (int)*s2;
 80001fa:	9b06      	ldr	r3, [sp, #24]
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	461a      	mov	r2, r3
 8000200:	9b05      	ldr	r3, [sp, #20]
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	1ad3      	subs	r3, r2, r3
 8000206:	9307      	str	r3, [sp, #28]
        s1++;
 8000208:	9b06      	ldr	r3, [sp, #24]
 800020a:	3301      	adds	r3, #1
 800020c:	9306      	str	r3, [sp, #24]
        s2++;
 800020e:	9b05      	ldr	r3, [sp, #20]
 8000210:	3301      	adds	r3, #1
 8000212:	9305      	str	r3, [sp, #20]
        n--;
 8000214:	9b01      	ldr	r3, [sp, #4]
 8000216:	3b01      	subs	r3, #1
 8000218:	9301      	str	r3, [sp, #4]
    while (!diff && n) {
 800021a:	9b07      	ldr	r3, [sp, #28]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d102      	bne.n	8000226 <memcmp+0x42>
 8000220:	9b01      	ldr	r3, [sp, #4]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d1e9      	bne.n	80001fa <memcmp+0x16>
    }

	return diff;
 8000226:	9b07      	ldr	r3, [sp, #28]
}
 8000228:	4618      	mov	r0, r3
 800022a:	b008      	add	sp, #32
 800022c:	4770      	bx	lr
	...

08000230 <wolfBoot_image_confirm_signature_ok>:
 *
 * With ARMORED setup, the flag is redundant, and the information is wrapped in
 * between canary variables, to mitigate attacks based on memory corruptions.
 */
static void __attribute__((noinline)) wolfBoot_image_confirm_signature_ok(struct wolfBoot_image *img)
{
 8000230:	b082      	sub	sp, #8
 8000232:	9001      	str	r0, [sp, #4]
    img->canary_FEED4567 = 0xFEED4567UL;
 8000234:	9b01      	ldr	r3, [sp, #4]
 8000236:	4a09      	ldr	r2, [pc, #36]	; (800025c <wolfBoot_image_confirm_signature_ok+0x2c>)
 8000238:	61da      	str	r2, [r3, #28]
    img->signature_ok = 1UL;
 800023a:	9b01      	ldr	r3, [sp, #4]
 800023c:	2201      	movs	r2, #1
 800023e:	621a      	str	r2, [r3, #32]
    img->canary_FEED6789 = 0xFEED6789UL;
 8000240:	9b01      	ldr	r3, [sp, #4]
 8000242:	4a07      	ldr	r2, [pc, #28]	; (8000260 <wolfBoot_image_confirm_signature_ok+0x30>)
 8000244:	625a      	str	r2, [r3, #36]	; 0x24
    img->not_signature_ok = ~(1UL);
 8000246:	9b01      	ldr	r3, [sp, #4]
 8000248:	f06f 0201 	mvn.w	r2, #1
 800024c:	629a      	str	r2, [r3, #40]	; 0x28
    img->canary_FEED89AB = 0xFEED89ABUL;
 800024e:	9b01      	ldr	r3, [sp, #4]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <wolfBoot_image_confirm_signature_ok+0x34>)
 8000252:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000254:	bf00      	nop
 8000256:	b002      	add	sp, #8
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	feed4567 	.word	0xfeed4567
 8000260:	feed6789 	.word	0xfeed6789
 8000264:	feed89ab 	.word	0xfeed89ab

08000268 <wolfBoot_verify_signature>:
    #define ECC_KEY_SIZE  66
    #define ECC_KEY_TYPE ECC_SECP521R1
#endif

static void wolfBoot_verify_signature(struct wolfBoot_image *img, uint8_t *sig)
{
 8000268:	b500      	push	{lr}
 800026a:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800026e:	ab03      	add	r3, sp, #12
 8000270:	6018      	str	r0, [r3, #0]
 8000272:	ab02      	add	r3, sp, #8
 8000274:	6019      	str	r1, [r3, #0]
    int ret, verify_res = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	9384      	str	r3, [sp, #528]	; 0x210
#else
    /* wolfCrypt software ECC verify */
    mp_int r, s;
    ecc_key ecc;

    ret = wc_ecc_init(&ecc);
 800027a:	ab05      	add	r3, sp, #20
 800027c:	4618      	mov	r0, r3
 800027e:	f004 fff9 	bl	8005274 <wc_ecc_init>
 8000282:	9085      	str	r0, [sp, #532]	; 0x214
    if (ret < 0) {
 8000284:	9b85      	ldr	r3, [sp, #532]	; 0x214
 8000286:	2b00      	cmp	r3, #0
 8000288:	db56      	blt.n	8000338 <nope+0x4>
        /* Failed to initialize key */
        return;
    }

    /* Import public key */
    ret = wc_ecc_import_unsigned(&ecc, (byte*)KEY_BUFFER,
 800028a:	4a2f      	ldr	r2, [pc, #188]	; (8000348 <nope+0x14>)
 800028c:	a805      	add	r0, sp, #20
 800028e:	2307      	movs	r3, #7
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	492d      	ldr	r1, [pc, #180]	; (800034c <nope+0x18>)
 8000296:	f005 f871 	bl	800537c <wc_ecc_import_unsigned>
 800029a:	9085      	str	r0, [sp, #532]	; 0x214
        (byte*)(KEY_BUFFER + ECC_KEY_SIZE), NULL, ECC_KEY_TYPE);
    if ((ret < 0) || ecc.type != ECC_PUBLICKEY) {
 800029c:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db4c      	blt.n	800033c <nope+0x8>
 80002a2:	ab05      	add	r3, sp, #20
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d148      	bne.n	800033c <nope+0x8>
        /* Failed to import ecc key */
        return;
    }

    /* Import signature into r,s */
    mp_init(&r);
 80002aa:	ab70      	add	r3, sp, #448	; 0x1c0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 f8c7 	bl	8001440 <sp_init>
    mp_init(&s);
 80002b2:	ab5c      	add	r3, sp, #368	; 0x170
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 f8c3 	bl	8001440 <sp_init>
    mp_read_unsigned_bin(&r, sig, ECC_KEY_SIZE);
 80002ba:	ab02      	add	r3, sp, #8
 80002bc:	a870      	add	r0, sp, #448	; 0x1c0
 80002be:	2220      	movs	r2, #32
 80002c0:	6819      	ldr	r1, [r3, #0]
 80002c2:	f001 f95c 	bl	800157e <sp_read_unsigned_bin>
    mp_read_unsigned_bin(&s, sig + ECC_KEY_SIZE, ECC_KEY_SIZE);
 80002c6:	ab02      	add	r3, sp, #8
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f103 0120 	add.w	r1, r3, #32
 80002ce:	ab5c      	add	r3, sp, #368	; 0x170
 80002d0:	2220      	movs	r2, #32
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 f953 	bl	800157e <sp_read_unsigned_bin>
    VERIFY_FN(img, &verify_res, wc_ecc_verify_hash_ex, &r, &s, img->sha_hash,
 80002d8:	f04f 0032 	mov.w	r0, #50	; 0x32
 80002dc:	f04f 0032 	mov.w	r0, #50	; 0x32
 80002e0:	f04f 0032 	mov.w	r0, #50	; 0x32
 80002e4:	ab03      	add	r3, sp, #12
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	689a      	ldr	r2, [r3, #8]
 80002ea:	a95c      	add	r1, sp, #368	; 0x170
 80002ec:	a870      	add	r0, sp, #448	; 0x1c0
 80002ee:	ab05      	add	r3, sp, #20
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	ab84      	add	r3, sp, #528	; 0x210
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	2320      	movs	r3, #32
 80002f8:	f004 ffc6 	bl	8005288 <wc_ecc_verify_hash_ex>
 80002fc:	2800      	cmp	r0, #0
 80002fe:	d119      	bne.n	8000334 <nope>
 8000300:	2800      	cmp	r0, #0
 8000302:	d117      	bne.n	8000334 <nope>
 8000304:	2800      	cmp	r0, #0
 8000306:	d115      	bne.n	8000334 <nope>
 8000308:	2800      	cmp	r0, #0
 800030a:	d113      	bne.n	8000334 <nope>
 800030c:	ab84      	add	r3, sp, #528	; 0x210
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	2a01      	cmp	r2, #1
 8000312:	d10f      	bne.n	8000334 <nope>
 8000314:	ab84      	add	r3, sp, #528	; 0x210
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	2a01      	cmp	r2, #1
 800031a:	d10b      	bne.n	8000334 <nope>
 800031c:	ab84      	add	r3, sp, #528	; 0x210
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	2a01      	cmp	r2, #1
 8000322:	d107      	bne.n	8000334 <nope>
 8000324:	ab84      	add	r3, sp, #528	; 0x210
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	2a01      	cmp	r2, #1
 800032a:	d103      	bne.n	8000334 <nope>
 800032c:	ab03      	add	r3, sp, #12
 800032e:	6818      	ldr	r0, [r3, #0]
 8000330:	f7ff ff7e 	bl	8000230 <wolfBoot_image_confirm_signature_ok>

08000334 <nope>:
 8000334:	bf00      	nop
 8000336:	e002      	b.n	800033e <nope+0xa>
        return;
 8000338:	bf00      	nop
 800033a:	e000      	b.n	800033e <nope+0xa>
        return;
 800033c:	bf00      	nop
            WOLFBOOT_SHA_DIGEST_SIZE, &verify_res, &ecc);
#endif /* WOLFBOOT_TPM */
}
 800033e:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8000342:	f85d fb04 	ldr.w	pc, [sp], #4
 8000346:	bf00      	nop
 8000348:	080053ec 	.word	0x080053ec
 800034c:	080053cc 	.word	0x080053cc

08000350 <get_header>:


static uint16_t get_header_ext(struct wolfBoot_image *img, uint16_t type, uint8_t **ptr);

static uint16_t get_header(struct wolfBoot_image *img, uint16_t type, uint8_t **ptr)
{
 8000350:	b500      	push	{lr}
 8000352:	b085      	sub	sp, #20
 8000354:	9003      	str	r0, [sp, #12]
 8000356:	460b      	mov	r3, r1
 8000358:	9201      	str	r2, [sp, #4]
 800035a:	f8ad 300a 	strh.w	r3, [sp, #10]
    if (PART_IS_EXT(img))
        return get_header_ext(img, type, ptr);
    else
        return wolfBoot_find_header(img->hdr + IMAGE_HEADER_OFFSET, type, ptr);
 800035e:	9b03      	ldr	r3, [sp, #12]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	3308      	adds	r3, #8
 8000364:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8000368:	9a01      	ldr	r2, [sp, #4]
 800036a:	4618      	mov	r0, r3
 800036c:	f000 fa46 	bl	80007fc <wolfBoot_find_header>
 8000370:	4603      	mov	r3, r0
}
 8000372:	4618      	mov	r0, r3
 8000374:	b005      	add	sp, #20
 8000376:	f85d fb04 	ldr.w	pc, [sp], #4

0800037a <get_sha_block>:
#ifdef EXT_FLASH
static uint8_t ext_hash_block[WOLFBOOT_SHA_BLOCK_SIZE];
#endif
static uint8_t digest[WOLFBOOT_SHA_DIGEST_SIZE];
static uint8_t *get_sha_block(struct wolfBoot_image *img, uint32_t offset)
{
 800037a:	b082      	sub	sp, #8
 800037c:	9001      	str	r0, [sp, #4]
 800037e:	9100      	str	r1, [sp, #0]
    if (offset > img->fw_size)
 8000380:	9b01      	ldr	r3, [sp, #4]
 8000382:	691b      	ldr	r3, [r3, #16]
 8000384:	9a00      	ldr	r2, [sp, #0]
 8000386:	429a      	cmp	r2, r3
 8000388:	d901      	bls.n	800038e <get_sha_block+0x14>
        return NULL;
 800038a:	2300      	movs	r3, #0
 800038c:	e003      	b.n	8000396 <get_sha_block+0x1c>
    if (PART_IS_EXT(img)) {
        ext_flash_check_read((uintptr_t)(img->fw_base) + offset, ext_hash_block, WOLFBOOT_SHA_BLOCK_SIZE);
        return ext_hash_block;
    } else
#endif
        return (uint8_t *)(img->fw_base + offset);
 800038e:	9b01      	ldr	r3, [sp, #4]
 8000390:	68da      	ldr	r2, [r3, #12]
 8000392:	9b00      	ldr	r3, [sp, #0]
 8000394:	4413      	add	r3, r2
}
 8000396:	4618      	mov	r0, r3
 8000398:	b002      	add	sp, #8
 800039a:	4770      	bx	lr

0800039c <get_img_hdr>:
#   define fetch_hdr_cpy(i) ((uint8_t *)0)
static uint16_t get_header_ext(struct wolfBoot_image *img, uint16_t type, uint8_t **ptr) { return 0; }
#endif

static uint8_t *get_img_hdr(struct wolfBoot_image *img)
{
 800039c:	b082      	sub	sp, #8
 800039e:	9001      	str	r0, [sp, #4]
    if (PART_IS_EXT(img))
        return fetch_hdr_cpy(img);
    else
        return (uint8_t *)(img->hdr);
 80003a0:	9b01      	ldr	r3, [sp, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	b002      	add	sp, #8
 80003a8:	4770      	bx	lr

080003aa <image_sha256>:

#if defined(WOLFBOOT_HASH_SHA256)
#include <wolfssl/wolfcrypt/sha256.h>
static int image_sha256(struct wolfBoot_image *img, uint8_t *hash)
{
 80003aa:	b500      	push	{lr}
 80003ac:	b0a5      	sub	sp, #148	; 0x94
 80003ae:	9001      	str	r0, [sp, #4]
 80003b0:	9100      	str	r1, [sp, #0]
#else
    uint8_t *stored_sha, *end_sha;
    uint16_t stored_sha_len;
    uint8_t *p;
    int blksz;
    uint32_t position = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	9321      	str	r3, [sp, #132]	; 0x84
    wc_Sha256 sha256_ctx;
    if (!img)
 80003b6:	9b01      	ldr	r3, [sp, #4]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d102      	bne.n	80003c2 <image_sha256+0x18>
        return -1;
 80003bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003c0:	e064      	b.n	800048c <image_sha256+0xe2>
    p = get_img_hdr(img);
 80003c2:	9801      	ldr	r0, [sp, #4]
 80003c4:	f7ff ffea 	bl	800039c <get_img_hdr>
 80003c8:	9023      	str	r0, [sp, #140]	; 0x8c
    stored_sha_len = get_header(img, HDR_SHA256, &stored_sha);
 80003ca:	ab1e      	add	r3, sp, #120	; 0x78
 80003cc:	461a      	mov	r2, r3
 80003ce:	2103      	movs	r1, #3
 80003d0:	9801      	ldr	r0, [sp, #4]
 80003d2:	f7ff ffbd 	bl	8000350 <get_header>
 80003d6:	4603      	mov	r3, r0
 80003d8:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    if (stored_sha_len != WOLFBOOT_SHA_DIGEST_SIZE)
 80003dc:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 80003e0:	2b20      	cmp	r3, #32
 80003e2:	d002      	beq.n	80003ea <image_sha256+0x40>
        return -1;
 80003e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003e8:	e050      	b.n	800048c <image_sha256+0xe2>
    wc_InitSha256(&sha256_ctx);
 80003ea:	ab02      	add	r3, sp, #8
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 ffa1 	bl	8001334 <wc_InitSha256>
    end_sha = stored_sha - (2 * sizeof(uint16_t)); /* Subtract 2 Type + 2 Len */
 80003f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80003f4:	3b04      	subs	r3, #4
 80003f6:	931f      	str	r3, [sp, #124]	; 0x7c
    while (p < end_sha) {
 80003f8:	e016      	b.n	8000428 <image_sha256+0x7e>
        blksz = WOLFBOOT_SHA_BLOCK_SIZE;
 80003fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003fe:	9322      	str	r3, [sp, #136]	; 0x88
        if (end_sha - p < blksz)
 8000400:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8000402:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000408:	429a      	cmp	r2, r3
 800040a:	dd03      	ble.n	8000414 <image_sha256+0x6a>
            blksz = end_sha - p;
 800040c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800040e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	9322      	str	r3, [sp, #136]	; 0x88
        wc_Sha256Update(&sha256_ctx, p, blksz);
 8000414:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000416:	ab02      	add	r3, sp, #8
 8000418:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800041a:	4618      	mov	r0, r3
 800041c:	f000 feac 	bl	8001178 <wc_Sha256Update>
        p += blksz;
 8000420:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000422:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000424:	4413      	add	r3, r2
 8000426:	9323      	str	r3, [sp, #140]	; 0x8c
    while (p < end_sha) {
 8000428:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800042a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800042c:	429a      	cmp	r2, r3
 800042e:	d3e4      	bcc.n	80003fa <image_sha256+0x50>
    }
    do {
        p = get_sha_block(img, position);
 8000430:	9921      	ldr	r1, [sp, #132]	; 0x84
 8000432:	9801      	ldr	r0, [sp, #4]
 8000434:	f7ff ffa1 	bl	800037a <get_sha_block>
 8000438:	9023      	str	r0, [sp, #140]	; 0x8c
        if (p == NULL)
 800043a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800043c:	2b00      	cmp	r3, #0
 800043e:	d01e      	beq.n	800047e <image_sha256+0xd4>
            break;
        blksz = WOLFBOOT_SHA_BLOCK_SIZE;
 8000440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000444:	9322      	str	r3, [sp, #136]	; 0x88
        if (position + blksz > img->fw_size)
 8000446:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000448:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800044a:	441a      	add	r2, r3
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	691b      	ldr	r3, [r3, #16]
 8000450:	429a      	cmp	r2, r3
 8000452:	d904      	bls.n	800045e <image_sha256+0xb4>
            blksz = img->fw_size - position;
 8000454:	9b01      	ldr	r3, [sp, #4]
 8000456:	691a      	ldr	r2, [r3, #16]
 8000458:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	9322      	str	r3, [sp, #136]	; 0x88
        wc_Sha256Update(&sha256_ctx, p, blksz);
 800045e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000460:	ab02      	add	r3, sp, #8
 8000462:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fe87 	bl	8001178 <wc_Sha256Update>
        position += blksz;
 800046a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800046c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800046e:	4413      	add	r3, r2
 8000470:	9321      	str	r3, [sp, #132]	; 0x84
    } while(position < img->fw_size);
 8000472:	9b01      	ldr	r3, [sp, #4]
 8000474:	691b      	ldr	r3, [r3, #16]
 8000476:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8000478:	429a      	cmp	r2, r3
 800047a:	d3d9      	bcc.n	8000430 <image_sha256+0x86>
 800047c:	e000      	b.n	8000480 <image_sha256+0xd6>
            break;
 800047e:	bf00      	nop

    wc_Sha256Final(&sha256_ctx, hash);
 8000480:	ab02      	add	r3, sp, #8
 8000482:	9900      	ldr	r1, [sp, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fecf 	bl	8001228 <wc_Sha256Final>
    return 0;
 800048a:	2300      	movs	r3, #0
#endif /* WOLFBOOT_TPM && WOLFBOOT_HASH_TPM */
}
 800048c:	4618      	mov	r0, r3
 800048e:	b025      	add	sp, #148	; 0x94
 8000490:	f85d fb04 	ldr.w	pc, [sp], #4

08000494 <key_sha256>:

#ifndef WOLFBOOT_NO_SIGN
static void key_sha256(uint8_t *hash)
{
 8000494:	b500      	push	{lr}
 8000496:	b0a1      	sub	sp, #132	; 0x84
 8000498:	9001      	str	r0, [sp, #4]
        i += blksz;
    }
    wolfTPM2_HashFinish(&wolftpm_dev, &tpmHash, hash, (word32*)&hashSz);
#else
    int blksz;
    unsigned int i = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	931e      	str	r3, [sp, #120]	; 0x78
    wc_Sha256 sha256_ctx;
    wc_InitSha256(&sha256_ctx);
 800049e:	ab02      	add	r3, sp, #8
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 ff47 	bl	8001334 <wc_InitSha256>
    while(i < KEY_LEN)
 80004a6:	e01a      	b.n	80004de <key_sha256+0x4a>
    {
        blksz = WOLFBOOT_SHA_BLOCK_SIZE;
 80004a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ac:	931f      	str	r3, [sp, #124]	; 0x7c
        if ((i + blksz) > KEY_LEN)
 80004ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80004b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80004b2:	441a      	add	r2, r3
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <key_sha256+0x68>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d904      	bls.n	80004c6 <key_sha256+0x32>
            blksz = KEY_LEN - i;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <key_sha256+0x68>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80004c2:	1ad3      	subs	r3, r2, r3
 80004c4:	931f      	str	r3, [sp, #124]	; 0x7c
        wc_Sha256Update(&sha256_ctx, (KEY_BUFFER + i), blksz);
 80004c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <key_sha256+0x6c>)
 80004ca:	1899      	adds	r1, r3, r2
 80004cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80004ce:	ab02      	add	r3, sp, #8
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 fe51 	bl	8001178 <wc_Sha256Update>
        i += blksz;
 80004d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80004d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80004da:	4413      	add	r3, r2
 80004dc:	931e      	str	r3, [sp, #120]	; 0x78
    while(i < KEY_LEN)
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <key_sha256+0x68>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d3df      	bcc.n	80004a8 <key_sha256+0x14>
    }
    wc_Sha256Final(&sha256_ctx, hash);
 80004e8:	ab02      	add	r3, sp, #8
 80004ea:	9901      	ldr	r1, [sp, #4]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fe9b 	bl	8001228 <wc_Sha256Final>
#endif /* WOLFBOOT_TPM && WOLFBOOT_HASH_TPM */
}
 80004f2:	bf00      	nop
 80004f4:	b021      	add	sp, #132	; 0x84
 80004f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80004fa:	bf00      	nop
 80004fc:	0800540c 	.word	0x0800540c
 8000500:	080053cc 	.word	0x080053cc

08000504 <im2n>:
}

#endif /* WOLFBOOT_TPM */

static inline uint32_t im2n(uint32_t val)
{
 8000504:	b082      	sub	sp, #8
 8000506:	9001      	str	r0, [sp, #4]
    val = (((val & 0x000000FF) << 24) |
           ((val & 0x0000FF00) <<  8) |
           ((val & 0x00FF0000) >>  8) |
           ((val & 0xFF000000) >> 24));
#endif
  return val;
 8000508:	9b01      	ldr	r3, [sp, #4]
}
 800050a:	4618      	mov	r0, r3
 800050c:	b002      	add	sp, #8
 800050e:	4770      	bx	lr

08000510 <wolfBoot_image_size>:

uint32_t wolfBoot_image_size(uint8_t *image)
{
 8000510:	b500      	push	{lr}
 8000512:	b085      	sub	sp, #20
 8000514:	9001      	str	r0, [sp, #4]
    uint32_t *size = (uint32_t *)(image + sizeof (uint32_t));
 8000516:	9b01      	ldr	r3, [sp, #4]
 8000518:	3304      	adds	r3, #4
 800051a:	9303      	str	r3, [sp, #12]
    return im2n(*size);
 800051c:	9b03      	ldr	r3, [sp, #12]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ffef 	bl	8000504 <im2n>
 8000526:	4603      	mov	r3, r0
}
 8000528:	4618      	mov	r0, r3
 800052a:	b005      	add	sp, #20
 800052c:	f85d fb04 	ldr.w	pc, [sp], #4

08000530 <wolfBoot_open_image>:

int wolfBoot_open_image(struct wolfBoot_image *img, uint8_t part)
{
 8000530:	b500      	push	{lr}
 8000532:	b085      	sub	sp, #20
 8000534:	9001      	str	r0, [sp, #4]
 8000536:	460b      	mov	r3, r1
 8000538:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32_t *magic;
    uint32_t *size;
    uint8_t *image;
    if (!img)
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d102      	bne.n	8000548 <wolfBoot_open_image+0x18>
        return -1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000546:	e05d      	b.n	8000604 <wolfBoot_open_image+0xd4>

#ifdef EXT_FLASH
    hdr_cpy_done = 0; /* reset hdr "open" flag */
#endif

    memset(img, 0, sizeof(struct wolfBoot_image));
 8000548:	2234      	movs	r2, #52	; 0x34
 800054a:	2100      	movs	r1, #0
 800054c:	9801      	ldr	r0, [sp, #4]
 800054e:	f7ff fe03 	bl	8000158 <memset>
    img->part = part;
 8000552:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000556:	9b01      	ldr	r3, [sp, #4]
 8000558:	615a      	str	r2, [r3, #20]
    if (part == PART_SWAP) {
 800055a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d10f      	bne.n	8000582 <wolfBoot_open_image+0x52>
        img->hdr_ok = 1;
 8000562:	9b01      	ldr	r3, [sp, #4]
 8000564:	2201      	movs	r2, #1
 8000566:	619a      	str	r2, [r3, #24]
        img->hdr = (void*)WOLFBOOT_PARTITION_SWAP_ADDRESS;
 8000568:	9b01      	ldr	r3, [sp, #4]
 800056a:	4a28      	ldr	r2, [pc, #160]	; (800060c <wolfBoot_open_image+0xdc>)
 800056c:	601a      	str	r2, [r3, #0]
        img->fw_base = img->hdr;
 800056e:	9b01      	ldr	r3, [sp, #4]
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	9b01      	ldr	r3, [sp, #4]
 8000574:	60da      	str	r2, [r3, #12]
        img->fw_size = WOLFBOOT_SECTOR_SIZE;
 8000576:	9b01      	ldr	r3, [sp, #4]
 8000578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800057c:	611a      	str	r2, [r3, #16]
        return 0;
 800057e:	2300      	movs	r3, #0
 8000580:	e040      	b.n	8000604 <wolfBoot_open_image+0xd4>
                        ((*size & 0x00FF0000) >>  8) |
                        ((*size & 0xFF000000) >> 24));
        return 0;
    }
#endif
    if (part == PART_BOOT) {
 8000582:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d103      	bne.n	8000592 <wolfBoot_open_image+0x62>
        img->hdr = (void*)WOLFBOOT_PARTITION_BOOT_ADDRESS;
 800058a:	9b01      	ldr	r3, [sp, #4]
 800058c:	4a20      	ldr	r2, [pc, #128]	; (8000610 <wolfBoot_open_image+0xe0>)
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	e00a      	b.n	80005a8 <wolfBoot_open_image+0x78>
    } else if (part == PART_UPDATE) {
 8000592:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d103      	bne.n	80005a2 <wolfBoot_open_image+0x72>
        img->hdr = (void*)WOLFBOOT_PARTITION_UPDATE_ADDRESS;
 800059a:	9b01      	ldr	r3, [sp, #4]
 800059c:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <wolfBoot_open_image+0xe4>)
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	e002      	b.n	80005a8 <wolfBoot_open_image+0x78>
    } else
        return -1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a6:	e02d      	b.n	8000604 <wolfBoot_open_image+0xd4>
     * (or copy from external device to a local buffer via fetch_hdr_cpy)
     */
    if (PART_IS_EXT(img))
        image = fetch_hdr_cpy(img);
    else
        image = (uint8_t *)img->hdr;
 80005a8:	9b01      	ldr	r3, [sp, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	9303      	str	r3, [sp, #12]

    magic = (uint32_t *)(image);
 80005ae:	9b03      	ldr	r3, [sp, #12]
 80005b0:	9302      	str	r3, [sp, #8]
    if (*magic != WOLFBOOT_MAGIC)
 80005b2:	9b02      	ldr	r3, [sp, #8]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a18      	ldr	r2, [pc, #96]	; (8000618 <wolfBoot_open_image+0xe8>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d002      	beq.n	80005c2 <wolfBoot_open_image+0x92>
        return -1;
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c0:	e020      	b.n	8000604 <wolfBoot_open_image+0xd4>
    img->fw_size = wolfBoot_image_size(image);
 80005c2:	9803      	ldr	r0, [sp, #12]
 80005c4:	f7ff ffa4 	bl	8000510 <wolfBoot_image_size>
 80005c8:	4602      	mov	r2, r0
 80005ca:	9b01      	ldr	r3, [sp, #4]
 80005cc:	611a      	str	r2, [r3, #16]
    if (img->fw_size > (WOLFBOOT_PARTITION_SIZE - IMAGE_HEADER_SIZE)) {
 80005ce:	9b01      	ldr	r3, [sp, #4]
 80005d0:	691b      	ldr	r3, [r3, #16]
 80005d2:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
 80005d6:	d905      	bls.n	80005e4 <wolfBoot_open_image+0xb4>
        img->fw_size = 0;
 80005d8:	9b01      	ldr	r3, [sp, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
        return -1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e2:	e00f      	b.n	8000604 <wolfBoot_open_image+0xd4>
    }
    img->hdr_ok = 1;
 80005e4:	9b01      	ldr	r3, [sp, #4]
 80005e6:	2201      	movs	r2, #1
 80005e8:	619a      	str	r2, [r3, #24]
    img->fw_base = img->hdr + IMAGE_HEADER_SIZE;
 80005ea:	9b01      	ldr	r3, [sp, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80005f2:	9b01      	ldr	r3, [sp, #4]
 80005f4:	60da      	str	r2, [r3, #12]
    img->trailer = img->hdr + WOLFBOOT_PARTITION_SIZE;
 80005f6:	9b01      	ldr	r3, [sp, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80005fe:	9b01      	ldr	r3, [sp, #4]
 8000600:	605a      	str	r2, [r3, #4]
    return 0;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	b005      	add	sp, #20
 8000608:	f85d fb04 	ldr.w	pc, [sp], #4
 800060c:	08018000 	.word	0x08018000
 8000610:	08008000 	.word	0x08008000
 8000614:	08010000 	.word	0x08010000
 8000618:	464c4f57 	.word	0x464c4f57

0800061c <wolfBoot_verify_integrity>:

int wolfBoot_verify_integrity(struct wolfBoot_image *img)
{
 800061c:	b500      	push	{lr}
 800061e:	b085      	sub	sp, #20
 8000620:	9001      	str	r0, [sp, #4]
    uint8_t *stored_sha;
    uint16_t stored_sha_len;
    stored_sha_len = get_header(img, WOLFBOOT_SHA_HDR, &stored_sha);
 8000622:	ab02      	add	r3, sp, #8
 8000624:	461a      	mov	r2, r3
 8000626:	2103      	movs	r1, #3
 8000628:	9801      	ldr	r0, [sp, #4]
 800062a:	f7ff fe91 	bl	8000350 <get_header>
 800062e:	4603      	mov	r3, r0
 8000630:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (stored_sha_len != WOLFBOOT_SHA_DIGEST_SIZE)
 8000634:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000638:	2b20      	cmp	r3, #32
 800063a:	d002      	beq.n	8000642 <wolfBoot_verify_integrity+0x26>
        return -1;
 800063c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000640:	e01d      	b.n	800067e <wolfBoot_verify_integrity+0x62>
    if (image_hash(img, digest) != 0)
 8000642:	4911      	ldr	r1, [pc, #68]	; (8000688 <wolfBoot_verify_integrity+0x6c>)
 8000644:	9801      	ldr	r0, [sp, #4]
 8000646:	f7ff feb0 	bl	80003aa <image_sha256>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <wolfBoot_verify_integrity+0x3a>
        return -1;
 8000650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000654:	e013      	b.n	800067e <wolfBoot_verify_integrity+0x62>
     * of a Measured Boot is to record the current boot state
     */
    if (measure_boot(digest) != 0)
        return -1;
#endif
    if (memcmp(digest, stored_sha, stored_sha_len) != 0)
 8000656:	9b02      	ldr	r3, [sp, #8]
 8000658:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800065c:	4619      	mov	r1, r3
 800065e:	480a      	ldr	r0, [pc, #40]	; (8000688 <wolfBoot_verify_integrity+0x6c>)
 8000660:	f7ff fdc0 	bl	80001e4 <memcmp>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <wolfBoot_verify_integrity+0x54>
        return -1;
 800066a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800066e:	e006      	b.n	800067e <wolfBoot_verify_integrity+0x62>
    img->sha_ok = 1;
 8000670:	9b01      	ldr	r3, [sp, #4]
 8000672:	2201      	movs	r2, #1
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
    img->sha_hash = stored_sha;
 8000676:	9a02      	ldr	r2, [sp, #8]
 8000678:	9b01      	ldr	r3, [sp, #4]
 800067a:	609a      	str	r2, [r3, #8]
    return 0;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	b005      	add	sp, #20
 8000682:	f85d fb04 	ldr.w	pc, [sp], #4
 8000686:	bf00      	nop
 8000688:	20000d58 	.word	0x20000d58

0800068c <wolfBoot_verify_authenticity>:
{
    return 0;
}
#else
int wolfBoot_verify_authenticity(struct wolfBoot_image *img)
{
 800068c:	b500      	push	{lr}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	9001      	str	r0, [sp, #4]
    uint16_t pubkey_hint_size;
    uint8_t *image_type_buf;
    uint16_t image_type;
    uint16_t image_type_size;

    stored_signature_size = get_header(img, HDR_SIGNATURE, &stored_signature);
 8000692:	ab05      	add	r3, sp, #20
 8000694:	461a      	mov	r2, r3
 8000696:	2120      	movs	r1, #32
 8000698:	9801      	ldr	r0, [sp, #4]
 800069a:	f7ff fe59 	bl	8000350 <get_header>
 800069e:	4603      	mov	r3, r0
 80006a0:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (stored_signature_size != IMAGE_SIGNATURE_SIZE)
 80006a4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80006a8:	2b40      	cmp	r3, #64	; 0x40
 80006aa:	d002      	beq.n	80006b2 <wolfBoot_verify_authenticity+0x26>
       return -1;
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b0:	e05f      	b.n	8000772 <wolfBoot_verify_authenticity+0xe6>
    pubkey_hint_size = get_header(img, HDR_PUBKEY, &pubkey_hint);
 80006b2:	ab04      	add	r3, sp, #16
 80006b4:	461a      	mov	r2, r3
 80006b6:	2110      	movs	r1, #16
 80006b8:	9801      	ldr	r0, [sp, #4]
 80006ba:	f7ff fe49 	bl	8000350 <get_header>
 80006be:	4603      	mov	r3, r0
 80006c0:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (pubkey_hint_size == WOLFBOOT_SHA_DIGEST_SIZE) {
 80006c4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80006c8:	2b20      	cmp	r3, #32
 80006ca:	d10e      	bne.n	80006ea <wolfBoot_verify_authenticity+0x5e>
        key_hash(digest);
 80006cc:	482b      	ldr	r0, [pc, #172]	; (800077c <wolfBoot_verify_authenticity+0xf0>)
 80006ce:	f7ff fee1 	bl	8000494 <key_sha256>
        if (memcmp(digest, pubkey_hint, WOLFBOOT_SHA_DIGEST_SIZE) != 0)
 80006d2:	9b04      	ldr	r3, [sp, #16]
 80006d4:	2220      	movs	r2, #32
 80006d6:	4619      	mov	r1, r3
 80006d8:	4828      	ldr	r0, [pc, #160]	; (800077c <wolfBoot_verify_authenticity+0xf0>)
 80006da:	f7ff fd83 	bl	80001e4 <memcmp>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d002      	beq.n	80006ea <wolfBoot_verify_authenticity+0x5e>
            return -1;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e8:	e043      	b.n	8000772 <wolfBoot_verify_authenticity+0xe6>
    }
    image_type_size = get_header(img, HDR_IMG_TYPE, &image_type_buf);
 80006ea:	ab03      	add	r3, sp, #12
 80006ec:	461a      	mov	r2, r3
 80006ee:	2104      	movs	r1, #4
 80006f0:	9801      	ldr	r0, [sp, #4]
 80006f2:	f7ff fe2d 	bl	8000350 <get_header>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f8ad 301a 	strh.w	r3, [sp, #26]
    if (image_type_size != sizeof(uint16_t))
 80006fc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d002      	beq.n	800070a <wolfBoot_verify_authenticity+0x7e>
            return -1;
 8000704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000708:	e033      	b.n	8000772 <wolfBoot_verify_authenticity+0xe6>
    image_type = (uint16_t)(image_type_buf[0] + (image_type_buf[1] << 8));
 800070a:	9b03      	ldr	r3, [sp, #12]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b29a      	uxth	r2, r3
 8000710:	9b03      	ldr	r3, [sp, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b29b      	uxth	r3, r3
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	4413      	add	r3, r2
 800071e:	f8ad 3018 	strh.w	r3, [sp, #24]
    if ((image_type & 0xFF00) != HDR_IMG_TYPE_AUTH)
 8000722:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8000726:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800072a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800072e:	d002      	beq.n	8000736 <wolfBoot_verify_authenticity+0xaa>
        return -1;
 8000730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000734:	e01d      	b.n	8000772 <wolfBoot_verify_authenticity+0xe6>
    if (img->sha_hash == NULL) {
 8000736:	9b01      	ldr	r3, [sp, #4]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d10c      	bne.n	8000758 <wolfBoot_verify_authenticity+0xcc>
        if (image_hash(img, digest) != 0)
 800073e:	490f      	ldr	r1, [pc, #60]	; (800077c <wolfBoot_verify_authenticity+0xf0>)
 8000740:	9801      	ldr	r0, [sp, #4]
 8000742:	f7ff fe32 	bl	80003aa <image_sha256>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d002      	beq.n	8000752 <wolfBoot_verify_authenticity+0xc6>
            return -1;
 800074c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000750:	e00f      	b.n	8000772 <wolfBoot_verify_authenticity+0xe6>
        img->sha_hash = digest;
 8000752:	9b01      	ldr	r3, [sp, #4]
 8000754:	4a09      	ldr	r2, [pc, #36]	; (800077c <wolfBoot_verify_authenticity+0xf0>)
 8000756:	609a      	str	r2, [r3, #8]
     *
     * only a call to wolfBoot_image_confirm_signature_ok() sets
     * img->signature_ok to 1.
     *
     */
    wolfBoot_verify_signature(img, stored_signature);
 8000758:	9b05      	ldr	r3, [sp, #20]
 800075a:	4619      	mov	r1, r3
 800075c:	9801      	ldr	r0, [sp, #4]
 800075e:	f7ff fd83 	bl	8000268 <wolfBoot_verify_signature>
    if (img->signature_ok == 1)
 8000762:	9b01      	ldr	r3, [sp, #4]
 8000764:	6a1b      	ldr	r3, [r3, #32]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d101      	bne.n	800076e <wolfBoot_verify_authenticity+0xe2>
        return 0;
 800076a:	2300      	movs	r3, #0
 800076c:	e001      	b.n	8000772 <wolfBoot_verify_authenticity+0xe6>
    return -2;
 800076e:	f06f 0301 	mvn.w	r3, #1
}
 8000772:	4618      	mov	r0, r3
 8000774:	b009      	add	sp, #36	; 0x24
 8000776:	f85d fb04 	ldr.w	pc, [sp], #4
 800077a:	bf00      	nop
 800077c:	20000d58 	.word	0x20000d58

08000780 <wolfBoot_get_update_sector_flag>:
    *st = *state;
    return 0;
}

int wolfBoot_get_update_sector_flag(uint16_t sector, uint8_t *flag)
{
 8000780:	b500      	push	{lr}
 8000782:	b087      	sub	sp, #28
 8000784:	4603      	mov	r3, r0
 8000786:	9100      	str	r1, [sp, #0]
 8000788:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint32_t *magic;
    uint8_t *flags;
    uint8_t pos = sector >> 1;
 800078c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	b29b      	uxth	r3, r3
 8000794:	f88d 3017 	strb.w	r3, [sp, #23]
    magic = get_partition_magic(PART_UPDATE);
 8000798:	2001      	movs	r0, #1
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <wolfBoot_get_update_sector_flag+0x70>)
 800079c:	4798      	blx	r3
 800079e:	9004      	str	r0, [sp, #16]
    if (*magic != WOLFBOOT_MAGIC_TRAIL)
 80007a0:	9b04      	ldr	r3, [sp, #16]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <wolfBoot_get_update_sector_flag+0x74>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d002      	beq.n	80007b0 <wolfBoot_get_update_sector_flag+0x30>
        return -1;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ae:	e01b      	b.n	80007e8 <wolfBoot_get_update_sector_flag+0x68>
    flags = get_update_sector_flags(pos);
 80007b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80007b4:	4618      	mov	r0, r3
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <wolfBoot_get_update_sector_flag+0x78>)
 80007b8:	4798      	blx	r3
 80007ba:	9003      	str	r0, [sp, #12]
    if (sector == (pos << 1))
 80007bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80007c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d107      	bne.n	80007da <wolfBoot_get_update_sector_flag+0x5a>
        *flag = *flags & 0x0F;
 80007ca:	9b03      	ldr	r3, [sp, #12]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	9b00      	ldr	r3, [sp, #0]
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	e005      	b.n	80007e6 <wolfBoot_get_update_sector_flag+0x66>
    else
        *flag = (*flags & 0xF0) >> 4;
 80007da:	9b03      	ldr	r3, [sp, #12]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	091b      	lsrs	r3, r3, #4
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	9b00      	ldr	r3, [sp, #0]
 80007e4:	701a      	strb	r2, [r3, #0]
    return 0;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	b007      	add	sp, #28
 80007ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80007f0:	200003d9 	.word	0x200003d9
 80007f4:	544f4f42 	.word	0x544f4f42
 80007f8:	20000467 	.word	0x20000467

080007fc <wolfBoot_find_header>:
    wolfBoot_erase_encrypt_key();
#endif
}

uint16_t wolfBoot_find_header(uint8_t *haystack, uint16_t type, uint8_t **ptr)
{
 80007fc:	b088      	sub	sp, #32
 80007fe:	9003      	str	r0, [sp, #12]
 8000800:	460b      	mov	r3, r1
 8000802:	9201      	str	r2, [sp, #4]
 8000804:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8_t *p = haystack;
 8000808:	9b03      	ldr	r3, [sp, #12]
 800080a:	9307      	str	r3, [sp, #28]
    uint16_t len;
    const volatile uint8_t *max_p = (haystack - IMAGE_HEADER_OFFSET) + IMAGE_HEADER_SIZE;
 800080c:	9b03      	ldr	r3, [sp, #12]
 800080e:	33f8      	adds	r3, #248	; 0xf8
 8000810:	9306      	str	r3, [sp, #24]
    *ptr = NULL;
 8000812:	9b01      	ldr	r3, [sp, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
    if (p > max_p) {
 8000818:	9a07      	ldr	r2, [sp, #28]
 800081a:	9b06      	ldr	r3, [sp, #24]
 800081c:	429a      	cmp	r2, r3
 800081e:	d94e      	bls.n	80008be <wolfBoot_find_header+0xc2>
        unit_dbg("Illegal address (too high)\n");
        return 0;
 8000820:	2300      	movs	r3, #0
 8000822:	e058      	b.n	80008d6 <wolfBoot_find_header+0xda>
    }
    while ((p + 4) < max_p) {
        if ((p[0] == 0) && (p[1] == 0)) {
 8000824:	9b07      	ldr	r3, [sp, #28]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d104      	bne.n	8000836 <wolfBoot_find_header+0x3a>
 800082c:	9b07      	ldr	r3, [sp, #28]
 800082e:	3301      	adds	r3, #1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d049      	beq.n	80008ca <wolfBoot_find_header+0xce>
            unit_dbg("Explicit end of options reached\n");
            break;
        }
        if (*p == HDR_PADDING) {
 8000836:	9b07      	ldr	r3, [sp, #28]
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2bff      	cmp	r3, #255	; 0xff
 800083c:	d103      	bne.n	8000846 <wolfBoot_find_header+0x4a>
            /* Padding byte (skip one position) */
            p++;
 800083e:	9b07      	ldr	r3, [sp, #28]
 8000840:	3301      	adds	r3, #1
 8000842:	9307      	str	r3, [sp, #28]
            continue;
 8000844:	e03b      	b.n	80008be <wolfBoot_find_header+0xc2>
        }
        /* Sanity check to prevent dereferencing unaligned half-words */
        if ((((unsigned long)p) & 0x01) != 0) {
 8000846:	9b07      	ldr	r3, [sp, #28]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d003      	beq.n	8000858 <wolfBoot_find_header+0x5c>
            p++;
 8000850:	9b07      	ldr	r3, [sp, #28]
 8000852:	3301      	adds	r3, #1
 8000854:	9307      	str	r3, [sp, #28]
            continue;
 8000856:	e032      	b.n	80008be <wolfBoot_find_header+0xc2>
        }
        len = p[2] | (p[3] << 8);
 8000858:	9b07      	ldr	r3, [sp, #28]
 800085a:	3302      	adds	r3, #2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b21a      	sxth	r2, r3
 8000860:	9b07      	ldr	r3, [sp, #28]
 8000862:	3303      	adds	r3, #3
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	b21b      	sxth	r3, r3
 800086a:	4313      	orrs	r3, r2
 800086c:	b21b      	sxth	r3, r3
 800086e:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((4 + len) > (uint16_t)(IMAGE_HEADER_SIZE - IMAGE_HEADER_OFFSET)) {
 8000872:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8000876:	2bf4      	cmp	r3, #244	; 0xf4
 8000878:	d829      	bhi.n	80008ce <wolfBoot_find_header+0xd2>
            unit_dbg("This field is too large (bigger than the space available in the current header)\n");
            break;
        }
        if (p + 4 + len > max_p) {
 800087a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800087e:	3304      	adds	r3, #4
 8000880:	9a07      	ldr	r2, [sp, #28]
 8000882:	4413      	add	r3, r2
 8000884:	9a06      	ldr	r2, [sp, #24]
 8000886:	429a      	cmp	r2, r3
 8000888:	d323      	bcc.n	80008d2 <wolfBoot_find_header+0xd6>
            unit_dbg("This field is too large and would overflow the image header\n");
            break;
        }
        if ((p[0] | (p[1] << 8)) == type) {
 800088a:	9b07      	ldr	r3, [sp, #28]
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	9b07      	ldr	r3, [sp, #28]
 8000892:	3301      	adds	r3, #1
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	431a      	orrs	r2, r3
 800089a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800089e:	429a      	cmp	r2, r3
 80008a0:	d106      	bne.n	80008b0 <wolfBoot_find_header+0xb4>
            *ptr = (p + 4);
 80008a2:	9b07      	ldr	r3, [sp, #28]
 80008a4:	1d1a      	adds	r2, r3, #4
 80008a6:	9b01      	ldr	r3, [sp, #4]
 80008a8:	601a      	str	r2, [r3, #0]
            return len;
 80008aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80008ae:	e012      	b.n	80008d6 <wolfBoot_find_header+0xda>
        }
        p += 4 + len;
 80008b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80008b4:	3304      	adds	r3, #4
 80008b6:	461a      	mov	r2, r3
 80008b8:	9b07      	ldr	r3, [sp, #28]
 80008ba:	4413      	add	r3, r2
 80008bc:	9307      	str	r3, [sp, #28]
    while ((p + 4) < max_p) {
 80008be:	9b07      	ldr	r3, [sp, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	9a06      	ldr	r2, [sp, #24]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8ad      	bhi.n	8000824 <wolfBoot_find_header+0x28>
 80008c8:	e004      	b.n	80008d4 <wolfBoot_find_header+0xd8>
            break;
 80008ca:	bf00      	nop
 80008cc:	e002      	b.n	80008d4 <wolfBoot_find_header+0xd8>
            break;
 80008ce:	bf00      	nop
 80008d0:	e000      	b.n	80008d4 <wolfBoot_find_header+0xd8>
            break;
 80008d2:	bf00      	nop
    }
    return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	b008      	add	sp, #32
 80008da:	4770      	bx	lr

080008dc <im2n>:
static uint8_t hdr_cpy[IMAGE_HEADER_SIZE];
static uint32_t hdr_cpy_done = 0;
#endif

static inline uint32_t im2n(uint32_t val)
{
 80008dc:	b082      	sub	sp, #8
 80008de:	9001      	str	r0, [sp, #4]
    val = (((val & 0x000000FF) << 24) |
           ((val & 0x0000FF00) <<  8) |
           ((val & 0x00FF0000) >>  8) |
           ((val & 0xFF000000) >> 24));
#endif
  return val;
 80008e0:	9b01      	ldr	r3, [sp, #4]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	b002      	add	sp, #8
 80008e6:	4770      	bx	lr

080008e8 <im2ns>:


static inline uint16_t im2ns(uint16_t val)
{
 80008e8:	b082      	sub	sp, #8
 80008ea:	4603      	mov	r3, r0
 80008ec:	f8ad 3006 	strh.w	r3, [sp, #6]
#ifdef BIG_ENDIAN_ORDER
    val = (((val & 0x000000FF) << 8) |
           ((val & 0x0000FF00) >>  8));
#endif
  return val;
 80008f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	b002      	add	sp, #8
 80008f8:	4770      	bx	lr
	...

080008fc <wolfBoot_get_blob_version>:
    return 0;
}
#endif

uint32_t wolfBoot_get_blob_version(uint8_t *blob)
{
 80008fc:	b500      	push	{lr}
 80008fe:	b085      	sub	sp, #20
 8000900:	9001      	str	r0, [sp, #4]
    uint32_t *version_field = NULL;
 8000902:	2300      	movs	r3, #0
 8000904:	9302      	str	r3, [sp, #8]
    uint32_t *magic = NULL;
 8000906:	2300      	movs	r3, #0
 8000908:	9303      	str	r3, [sp, #12]
    magic = (uint32_t *)blob;
 800090a:	9b01      	ldr	r3, [sp, #4]
 800090c:	9303      	str	r3, [sp, #12]
    if (*magic != WOLFBOOT_MAGIC)
 800090e:	9b03      	ldr	r3, [sp, #12]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <wolfBoot_get_blob_version+0x58>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d001      	beq.n	800091c <wolfBoot_get_blob_version+0x20>
        return 0;
 8000918:	2300      	movs	r3, #0
 800091a:	e016      	b.n	800094a <wolfBoot_get_blob_version+0x4e>
    if (wolfBoot_find_header(blob + IMAGE_HEADER_OFFSET, HDR_VERSION, (void *)&version_field) == 0)
 800091c:	9b01      	ldr	r3, [sp, #4]
 800091e:	3308      	adds	r3, #8
 8000920:	aa02      	add	r2, sp, #8
 8000922:	2101      	movs	r1, #1
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff69 	bl	80007fc <wolfBoot_find_header>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <wolfBoot_get_blob_version+0x38>
        return 0;
 8000930:	2300      	movs	r3, #0
 8000932:	e00a      	b.n	800094a <wolfBoot_get_blob_version+0x4e>
    if (version_field)
 8000934:	9b02      	ldr	r3, [sp, #8]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d006      	beq.n	8000948 <wolfBoot_get_blob_version+0x4c>
        return im2n(*version_field);
 800093a:	9b02      	ldr	r3, [sp, #8]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ffcc 	bl	80008dc <im2n>
 8000944:	4603      	mov	r3, r0
 8000946:	e000      	b.n	800094a <wolfBoot_get_blob_version+0x4e>
    return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	b005      	add	sp, #20
 800094e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000952:	bf00      	nop
 8000954:	464c4f57 	.word	0x464c4f57

08000958 <wolfBoot_get_image_version>:


uint32_t wolfBoot_get_image_version(uint8_t part)
{
 8000958:	b500      	push	{lr}
 800095a:	b085      	sub	sp, #20
 800095c:	4603      	mov	r3, r0
 800095e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t *image = (uint8_t *)0x00000000;
 8000962:	2300      	movs	r3, #0
 8000964:	9303      	str	r3, [sp, #12]
    if(part == PART_UPDATE) {
 8000966:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d102      	bne.n	8000974 <wolfBoot_get_image_version+0x1c>
            ext_flash_check_read((uintptr_t)WOLFBOOT_PARTITION_UPDATE_ADDRESS, hdr_cpy, IMAGE_HEADER_SIZE);
            hdr_cpy_done = 1;
            image = hdr_cpy;
    #endif
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_UPDATE_ADDRESS;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <wolfBoot_get_image_version+0x38>)
 8000970:	9303      	str	r3, [sp, #12]
 8000972:	e005      	b.n	8000980 <wolfBoot_get_image_version+0x28>
        }
    } else if (part == PART_BOOT) {
 8000974:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <wolfBoot_get_image_version+0x28>
            ext_flash_check_read((uintptr_t)WOLFBOOT_PARTITION_BOOT_ADDRESS, hdr_cpy, IMAGE_HEADER_SIZE);
            hdr_cpy_done = 1;
            image = hdr_cpy;
    #endif
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_BOOT_ADDRESS;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <wolfBoot_get_image_version+0x3c>)
 800097e:	9303      	str	r3, [sp, #12]
        }
    }
    /* Don't check image against NULL to allow using address 0x00000000 */
    return wolfBoot_get_blob_version(image);
 8000980:	9803      	ldr	r0, [sp, #12]
 8000982:	f7ff ffbb 	bl	80008fc <wolfBoot_get_blob_version>
 8000986:	4603      	mov	r3, r0
}
 8000988:	4618      	mov	r0, r3
 800098a:	b005      	add	sp, #20
 800098c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000990:	08010000 	.word	0x08010000
 8000994:	08008000 	.word	0x08008000

08000998 <wolfBoot_get_image_type>:
    /* Don't check image against NULL to allow using address 0x00000000 */
    return wolfBoot_get_blob_diffbase_version(image);
}

uint16_t wolfBoot_get_image_type(uint8_t part)
{
 8000998:	b500      	push	{lr}
 800099a:	b087      	sub	sp, #28
 800099c:	4603      	mov	r3, r0
 800099e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint16_t *type_field = NULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	9303      	str	r3, [sp, #12]
    uint8_t *image = NULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	9305      	str	r3, [sp, #20]
    uint32_t *magic = NULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	9304      	str	r3, [sp, #16]
    if(part == PART_UPDATE) {
 80009ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d102      	bne.n	80009bc <wolfBoot_get_image_type+0x24>
            ext_flash_check_read((uintptr_t)WOLFBOOT_PARTITION_UPDATE_ADDRESS, hdr_cpy, IMAGE_HEADER_SIZE);
            hdr_cpy_done = 1;
            image = hdr_cpy;
    #endif
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_UPDATE_ADDRESS;
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <wolfBoot_get_image_type+0x80>)
 80009b8:	9305      	str	r3, [sp, #20]
 80009ba:	e005      	b.n	80009c8 <wolfBoot_get_image_type+0x30>
        }
    } else if (part == PART_BOOT) {
 80009bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d101      	bne.n	80009c8 <wolfBoot_get_image_type+0x30>
            ext_flash_check_read((uintptr_t)WOLFBOOT_PARTITION_BOOT_ADDRESS, hdr_cpy, IMAGE_HEADER_SIZE);
            hdr_cpy_done = 1;
            image = hdr_cpy;
    #endif
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_BOOT_ADDRESS;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <wolfBoot_get_image_type+0x84>)
 80009c6:	9305      	str	r3, [sp, #20]
        }
    }

    if (image) {
 80009c8:	9b05      	ldr	r3, [sp, #20]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d01e      	beq.n	8000a0c <wolfBoot_get_image_type+0x74>
        magic = (uint32_t *)image;
 80009ce:	9b05      	ldr	r3, [sp, #20]
 80009d0:	9304      	str	r3, [sp, #16]
        if (*magic != WOLFBOOT_MAGIC)
 80009d2:	9b04      	ldr	r3, [sp, #16]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <wolfBoot_get_image_type+0x88>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d001      	beq.n	80009e0 <wolfBoot_get_image_type+0x48>
            return 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	e016      	b.n	8000a0e <wolfBoot_get_image_type+0x76>
        if (wolfBoot_find_header(image + IMAGE_HEADER_OFFSET, HDR_IMG_TYPE, (void *)&type_field) == 0)
 80009e0:	9b05      	ldr	r3, [sp, #20]
 80009e2:	3308      	adds	r3, #8
 80009e4:	aa03      	add	r2, sp, #12
 80009e6:	2104      	movs	r1, #4
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff07 	bl	80007fc <wolfBoot_find_header>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d101      	bne.n	80009f8 <wolfBoot_get_image_type+0x60>
            return 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	e00a      	b.n	8000a0e <wolfBoot_get_image_type+0x76>
        if (type_field)
 80009f8:	9b03      	ldr	r3, [sp, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <wolfBoot_get_image_type+0x74>
            return im2ns(*type_field);
 80009fe:	9b03      	ldr	r3, [sp, #12]
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff70 	bl	80008e8 <im2ns>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	e000      	b.n	8000a0e <wolfBoot_get_image_type+0x76>
    }

    return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	b007      	add	sp, #28
 8000a12:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a16:	bf00      	nop
 8000a18:	08010000 	.word	0x08010000
 8000a1c:	08008000 	.word	0x08008000
 8000a20:	464c4f57 	.word	0x464c4f57

08000a24 <mpu_setaddr>:
{
 8000a24:	b082      	sub	sp, #8
 8000a26:	9001      	str	r0, [sp, #4]
 8000a28:	9100      	str	r1, [sp, #0]
    MPU_RNR = region;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <mpu_setaddr+0x18>)
 8000a2c:	9b01      	ldr	r3, [sp, #4]
 8000a2e:	6013      	str	r3, [r2, #0]
    MPU_RBAR = addr;
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <mpu_setaddr+0x1c>)
 8000a32:	9b00      	ldr	r3, [sp, #0]
 8000a34:	6013      	str	r3, [r2, #0]
}
 8000a36:	bf00      	nop
 8000a38:	b002      	add	sp, #8
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed98 	.word	0xe000ed98
 8000a40:	e000ed9c 	.word	0xe000ed9c

08000a44 <mpu_setattr>:
{
 8000a44:	b082      	sub	sp, #8
 8000a46:	9001      	str	r0, [sp, #4]
 8000a48:	9100      	str	r1, [sp, #0]
    MPU_RNR = region;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <mpu_setattr+0x18>)
 8000a4c:	9b01      	ldr	r3, [sp, #4]
 8000a4e:	6013      	str	r3, [r2, #0]
    MPU_RASR = attr;
 8000a50:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <mpu_setattr+0x1c>)
 8000a52:	9b00      	ldr	r3, [sp, #0]
 8000a54:	6013      	str	r3, [r2, #0]
}
 8000a56:	bf00      	nop
 8000a58:	b002      	add	sp, #8
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed98 	.word	0xe000ed98
 8000a60:	e000eda0 	.word	0xe000eda0

08000a64 <mpu_on>:
    if (mpu_is_on)
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <mpu_on+0x28>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10a      	bne.n	8000a82 <mpu_on+0x1e>
    if (MPU_TYPE == 0)
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <mpu_on+0x2c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d008      	beq.n	8000a86 <mpu_on+0x22>
    MPU_CTRL = 1;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <mpu_on+0x30>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
    mpu_is_on = 1;
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <mpu_on+0x28>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	4770      	bx	lr
        return;
 8000a82:	bf00      	nop
 8000a84:	4770      	bx	lr
        return;
 8000a86:	bf00      	nop
}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000d78 	.word	0x20000d78
 8000a90:	e000ed90 	.word	0xe000ed90
 8000a94:	e000ed94 	.word	0xe000ed94

08000a98 <mpusize>:
{
 8000a98:	b082      	sub	sp, #8
 8000a9a:	9001      	str	r0, [sp, #4]
    if (size <= (8 * 1024))
 8000a9c:	9b01      	ldr	r3, [sp, #4]
 8000a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa2:	d801      	bhi.n	8000aa8 <mpusize+0x10>
        return MPUSIZE_8K;
 8000aa4:	2318      	movs	r3, #24
 8000aa6:	e013      	b.n	8000ad0 <mpusize+0x38>
    if (size <= (16 * 1024))
 8000aa8:	9b01      	ldr	r3, [sp, #4]
 8000aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000aae:	d801      	bhi.n	8000ab4 <mpusize+0x1c>
        return MPUSIZE_16K;
 8000ab0:	231a      	movs	r3, #26
 8000ab2:	e00d      	b.n	8000ad0 <mpusize+0x38>
    if (size <= (32 * 1024))
 8000ab4:	9b01      	ldr	r3, [sp, #4]
 8000ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000aba:	d801      	bhi.n	8000ac0 <mpusize+0x28>
        return MPUSIZE_32K;
 8000abc:	231c      	movs	r3, #28
 8000abe:	e007      	b.n	8000ad0 <mpusize+0x38>
    if (size <= (64 * 1024))
 8000ac0:	9b01      	ldr	r3, [sp, #4]
 8000ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ac6:	d801      	bhi.n	8000acc <mpusize+0x34>
        return MPUSIZE_64K;
 8000ac8:	231e      	movs	r3, #30
 8000aca:	e001      	b.n	8000ad0 <mpusize+0x38>
    return MPUSIZE_ERR;
 8000acc:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	b002      	add	sp, #8
 8000ad4:	4770      	bx	lr
	...

08000ad8 <mpu_init>:
{
 8000ad8:	b500      	push	{lr}
 8000ada:	b085      	sub	sp, #20
    uint32_t wolfboot_flash_size = (uint32_t)&_stored_data -
 8000adc:	4a2a      	ldr	r2, [pc, #168]	; (8000b88 <mpu_init+0xb0>)
                                   (uint32_t)&_start_text;
 8000ade:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <mpu_init+0xb4>)
    uint32_t wolfboot_flash_size = (uint32_t)&_stored_data -
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	9303      	str	r3, [sp, #12]
    uint32_t ram_base = (uint32_t)(&_start_data);
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <mpu_init+0xb8>)
 8000ae6:	9302      	str	r3, [sp, #8]
    uint32_t flash_base = (uint32_t)(&_start_text);
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <mpu_init+0xb4>)
 8000aea:	9301      	str	r3, [sp, #4]
    if (MPU_TYPE == 0)
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <mpu_init+0xbc>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d042      	beq.n	8000b7a <mpu_init+0xa2>
    mpu_setaddr(0, 0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff ff94 	bl	8000a24 <mpu_setaddr>
    mpu_setattr(0, MPUSIZE_4G | MPU_RASR_ENABLE | MPU_RASR_ATTR_SCB |
 8000afc:	4926      	ldr	r1, [pc, #152]	; (8000b98 <mpu_init+0xc0>)
 8000afe:	2000      	movs	r0, #0
 8000b00:	f7ff ffa0 	bl	8000a44 <mpu_setattr>
    wolfboot_mpusize = mpusize(wolfboot_flash_size);
 8000b04:	9803      	ldr	r0, [sp, #12]
 8000b06:	f7ff ffc7 	bl	8000a98 <mpusize>
 8000b0a:	9000      	str	r0, [sp, #0]
    if (wolfboot_mpusize == MPUSIZE_ERR)
 8000b0c:	9b00      	ldr	r3, [sp, #0]
 8000b0e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000b12:	d034      	beq.n	8000b7e <mpu_init+0xa6>
    mpu_setaddr(1, flash_base);
 8000b14:	9901      	ldr	r1, [sp, #4]
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff ff84 	bl	8000a24 <mpu_setaddr>
    mpu_setattr(1, wolfboot_mpusize | MPU_RASR_ENABLE | MPU_RASR_ATTR_SCB |
 8000b1c:	9b00      	ldr	r3, [sp, #0]
 8000b1e:	f043 7383 	orr.w	r3, r3, #17170432	; 0x1060000
 8000b22:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000b26:	4619      	mov	r1, r3
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff ff8b 	bl	8000a44 <mpu_setattr>
    mpu_setaddr(2, ram_base);
 8000b2e:	9902      	ldr	r1, [sp, #8]
 8000b30:	2002      	movs	r0, #2
 8000b32:	f7ff ff77 	bl	8000a24 <mpu_setaddr>
    mpu_setattr(2, MPUSIZE_64K | MPU_RASR_ENABLE | MPU_RASR_ATTR_SCB |
 8000b36:	4919      	ldr	r1, [pc, #100]	; (8000b9c <mpu_init+0xc4>)
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f7ff ff83 	bl	8000a44 <mpu_setattr>
    mpu_setaddr(5, 0x40000000);
 8000b3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b42:	2005      	movs	r0, #5
 8000b44:	f7ff ff6e 	bl	8000a24 <mpu_setaddr>
    mpu_setattr(5, MPUSIZE_512M | MPU_RASR_ENABLE | MPU_RASR_ATTR_S |
 8000b48:	4915      	ldr	r1, [pc, #84]	; (8000ba0 <mpu_init+0xc8>)
 8000b4a:	2005      	movs	r0, #5
 8000b4c:	f7ff ff7a 	bl	8000a44 <mpu_setattr>
    mpu_setaddr(6, 0xA0000000);
 8000b50:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8000b54:	2006      	movs	r0, #6
 8000b56:	f7ff ff65 	bl	8000a24 <mpu_setaddr>
    mpu_setattr(6, MPUSIZE_1G | MPU_RASR_ENABLE | MPU_RASR_ATTR_S |
 8000b5a:	4912      	ldr	r1, [pc, #72]	; (8000ba4 <mpu_init+0xcc>)
 8000b5c:	2006      	movs	r0, #6
 8000b5e:	f7ff ff71 	bl	8000a44 <mpu_setattr>
    mpu_setaddr(7, 0xE0000000);
 8000b62:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 8000b66:	2007      	movs	r0, #7
 8000b68:	f7ff ff5c 	bl	8000a24 <mpu_setaddr>
    mpu_setattr(7, MPUSIZE_256M | MPU_RASR_ENABLE | MPU_RASR_ATTR_S |
 8000b6c:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <mpu_init+0xd0>)
 8000b6e:	2007      	movs	r0, #7
 8000b70:	f7ff ff68 	bl	8000a44 <mpu_setattr>
    mpu_on();
 8000b74:	f7ff ff76 	bl	8000a64 <mpu_on>
 8000b78:	e002      	b.n	8000b80 <mpu_init+0xa8>
        return;
 8000b7a:	bf00      	nop
 8000b7c:	e000      	b.n	8000b80 <mpu_init+0xa8>
        return;
 8000b7e:	bf00      	nop
}
 8000b80:	b005      	add	sp, #20
 8000b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b86:	bf00      	nop
 8000b88:	08005ca8 	.word	0x08005ca8
 8000b8c:	08000000 	.word	0x08000000
 8000b90:	20000000 	.word	0x20000000
 8000b94:	e000ed90 	.word	0xe000ed90
 8000b98:	1107003f 	.word	0x1107003f
 8000b9c:	0107001f 	.word	0x0107001f
 8000ba0:	11050039 	.word	0x11050039
 8000ba4:	1105003b 	.word	0x1105003b
 8000ba8:	11050037 	.word	0x11050037

08000bac <isr_reset>:
void isr_reset(void) {
 8000bac:	b538      	push	{r3, r4, r5, lr}
    src = (unsigned int *) &_stored_data;
 8000bae:	4d0c      	ldr	r5, [pc, #48]	; (8000be0 <isr_reset+0x34>)
    dst = (unsigned int *) &_start_data;
 8000bb0:	4c0c      	ldr	r4, [pc, #48]	; (8000be4 <isr_reset+0x38>)
    while (dst < (unsigned int *)&_end_data) {
 8000bb2:	e003      	b.n	8000bbc <isr_reset+0x10>
        *dst = *src;
 8000bb4:	682b      	ldr	r3, [r5, #0]
 8000bb6:	6023      	str	r3, [r4, #0]
        dst++;
 8000bb8:	3404      	adds	r4, #4
        src++;
 8000bba:	3504      	adds	r5, #4
    while (dst < (unsigned int *)&_end_data) {
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <isr_reset+0x3c>)
 8000bbe:	429c      	cmp	r4, r3
 8000bc0:	d3f8      	bcc.n	8000bb4 <isr_reset+0x8>
    dst = &_start_bss;
 8000bc2:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <isr_reset+0x40>)
    while (dst < (unsigned int *)&_end_bss) {
 8000bc4:	e002      	b.n	8000bcc <isr_reset+0x20>
        *dst = 0U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	6023      	str	r3, [r4, #0]
        dst++;
 8000bca:	3404      	adds	r4, #4
    while (dst < (unsigned int *)&_end_bss) {
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <isr_reset+0x44>)
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	d3f9      	bcc.n	8000bc6 <isr_reset+0x1a>
    mpu_init();
 8000bd2:	f7ff ff81 	bl	8000ad8 <mpu_init>
    main();
 8000bd6:	f7ff faae 	bl	8000136 <main>
}
 8000bda:	bf00      	nop
 8000bdc:	bd38      	pop	{r3, r4, r5, pc}
 8000bde:	bf00      	nop
 8000be0:	08005ca8 	.word	0x08005ca8
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000d58 	.word	0x20000d58
 8000bec:	20000d58 	.word	0x20000d58
 8000bf0:	20000d84 	.word	0x20000d84

08000bf4 <isr_fault>:
    wolfBoot_panic();
 8000bf4:	e7fe      	b.n	8000bf4 <isr_fault>
 8000bf6:	e7fd      	b.n	8000bf4 <isr_fault>
 8000bf8:	e7fc      	b.n	8000bf4 <isr_fault>
 8000bfa:	e7fb      	b.n	8000bf4 <isr_fault>
 8000bfc:	e7fa      	b.n	8000bf4 <isr_fault>
}
 8000bfe:	bf00      	nop
 8000c00:	4770      	bx	lr

08000c02 <isr_empty>:
}
 8000c02:	bf00      	nop
 8000c04:	4770      	bx	lr
	...

08000c08 <wolfBoot_check_self_update>:
    hal_flash_lock();
    arch_reboot();
}

void wolfBoot_check_self_update(void)
{
 8000c08:	b500      	push	{lr}
 8000c0a:	b091      	sub	sp, #68	; 0x44
    uint8_t st;
    struct wolfBoot_image update;

    /* Check for self update in the UPDATE partition */
    if ((wolfBoot_get_partition_state(PART_UPDATE, &st) == 0) && (st == IMG_STATE_UPDATING) &&
 8000c0c:	f10d 033b 	add.w	r3, sp, #59	; 0x3b
 8000c10:	4619      	mov	r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	f004 fbd0 	bl	80053b8 <__wolfBoot_get_partition_state_veneer>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f040 80d5 	bne.w	8000dca <wolfBoot_check_self_update+0x1c2>
 8000c20:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8000c24:	2b70      	cmp	r3, #112	; 0x70
 8000c26:	f040 80d0 	bne.w	8000dca <wolfBoot_check_self_update+0x1c2>
            (wolfBoot_open_image(&update, PART_UPDATE) == 0) &&
 8000c2a:	ab01      	add	r3, sp, #4
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fc7e 	bl	8000530 <wolfBoot_open_image>
 8000c34:	4603      	mov	r3, r0
    if ((wolfBoot_get_partition_state(PART_UPDATE, &st) == 0) && (st == IMG_STATE_UPDATING) &&
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 80c7 	bne.w	8000dca <wolfBoot_check_self_update+0x1c2>
            wolfBoot_get_image_type(PART_UPDATE) == (HDR_IMG_TYPE_WOLFBOOT | HDR_IMG_TYPE_AUTH)) {
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff feab 	bl	8000998 <wolfBoot_get_image_type>
 8000c42:	4603      	mov	r3, r0
            (wolfBoot_open_image(&update, PART_UPDATE) == 0) &&
 8000c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c48:	f040 80bf 	bne.w	8000dca <wolfBoot_check_self_update+0x1c2>
        uint32_t update_version = wolfBoot_update_firmware_version();
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff fe83 	bl	8000958 <wolfBoot_get_image_version>
 8000c52:	900f      	str	r0, [sp, #60]	; 0x3c
        if (update_version <= wolfboot_version) {
 8000c54:	4b5e      	ldr	r3, [pc, #376]	; (8000dd0 <wolfBoot_check_self_update+0x1c8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d807      	bhi.n	8000c6e <wolfBoot_check_self_update+0x66>
            hal_flash_unlock();
 8000c5e:	f004 fbaf 	bl	80053c0 <__hal_flash_unlock_veneer>
            wolfBoot_erase_partition(PART_UPDATE);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f004 fb98 	bl	8005398 <__wolfBoot_erase_partition_veneer>
            hal_flash_lock();
 8000c68:	f004 fba2 	bl	80053b0 <__hal_flash_lock_veneer>
            return;
 8000c6c:	e0ad      	b.n	8000dca <wolfBoot_check_self_update+0x1c2>
        }
        if (wolfBoot_verify_integrity(&update) < 0)
 8000c6e:	ab01      	add	r3, sp, #4
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fcd3 	bl	800061c <wolfBoot_verify_integrity>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f2c0 80a3 	blt.w	8000dc4 <wolfBoot_check_self_update+0x1bc>
            return;
        if (wolfBoot_verify_authenticity(&update) < 0)
 8000c7e:	ab01      	add	r3, sp, #4
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd03 	bl	800068c <wolfBoot_verify_authenticity>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f2c0 809d 	blt.w	8000dc8 <wolfBoot_check_self_update+0x1c0>
            return;
        PART_SANITY_CHECK(&update);
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0200 	mov.w	r2, #0
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	9b07      	ldr	r3, [sp, #28]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	2a01      	cmp	r2, #1
 8000ca8:	d1fe      	bne.n	8000ca8 <wolfBoot_check_self_update+0xa0>
 8000caa:	2a01      	cmp	r2, #1
 8000cac:	d1fc      	bne.n	8000ca8 <wolfBoot_check_self_update+0xa0>
 8000cae:	2a01      	cmp	r2, #1
 8000cb0:	d1fa      	bne.n	8000ca8 <wolfBoot_check_self_update+0xa0>
 8000cb2:	2a01      	cmp	r2, #1
 8000cb4:	d1f8      	bne.n	8000ca8 <wolfBoot_check_self_update+0xa0>
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	f04f 0200 	mov.w	r2, #0
 8000cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000ccc:	461a      	mov	r2, r3
 8000cce:	2a01      	cmp	r2, #1
 8000cd0:	d1fe      	bne.n	8000cd0 <wolfBoot_check_self_update+0xc8>
 8000cd2:	2a01      	cmp	r2, #1
 8000cd4:	d1fc      	bne.n	8000cd0 <wolfBoot_check_self_update+0xc8>
 8000cd6:	2a01      	cmp	r2, #1
 8000cd8:	d1fa      	bne.n	8000cd0 <wolfBoot_check_self_update+0xc8>
 8000cda:	2a01      	cmp	r2, #1
 8000cdc:	d1f8      	bne.n	8000cd0 <wolfBoot_check_self_update+0xc8>
 8000cde:	f04f 0200 	mov.w	r2, #0
 8000ce2:	f04f 0200 	mov.w	r2, #0
 8000ce6:	f04f 0200 	mov.w	r2, #0
 8000cea:	f04f 0200 	mov.w	r2, #0
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	2a01      	cmp	r2, #1
 8000cf8:	d1fe      	bne.n	8000cf8 <wolfBoot_check_self_update+0xf0>
 8000cfa:	2a01      	cmp	r2, #1
 8000cfc:	d1fc      	bne.n	8000cf8 <wolfBoot_check_self_update+0xf0>
 8000cfe:	2a01      	cmp	r2, #1
 8000d00:	d1fa      	bne.n	8000cf8 <wolfBoot_check_self_update+0xf0>
 8000d02:	2a01      	cmp	r2, #1
 8000d04:	d1f8      	bne.n	8000cf8 <wolfBoot_check_self_update+0xf0>
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	f04f 0200 	mov.w	r2, #0
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	f04f 0200 	mov.w	r2, #0
 8000d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f112 0f02 	cmn.w	r2, #2
 8000d22:	d1fe      	bne.n	8000d22 <wolfBoot_check_self_update+0x11a>
 8000d24:	f112 0f02 	cmn.w	r2, #2
 8000d28:	d1fc      	bne.n	8000d24 <wolfBoot_check_self_update+0x11c>
 8000d2a:	f112 0f02 	cmn.w	r2, #2
 8000d2e:	d1fa      	bne.n	8000d26 <wolfBoot_check_self_update+0x11e>
 8000d30:	f112 0f02 	cmn.w	r2, #2
 8000d34:	d1f8      	bne.n	8000d28 <wolfBoot_check_self_update+0x120>
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	f04f 0200 	mov.w	r2, #0
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	f04f 0200 	mov.w	r2, #0
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <wolfBoot_check_self_update+0x1cc>)
 8000d50:	4618      	mov	r0, r3
 8000d52:	4282      	cmp	r2, r0
 8000d54:	d1fe      	bne.n	8000d54 <wolfBoot_check_self_update+0x14c>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	d1fc      	bne.n	8000d54 <wolfBoot_check_self_update+0x14c>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	d1fa      	bne.n	8000d54 <wolfBoot_check_self_update+0x14c>
 8000d5e:	4282      	cmp	r2, r0
 8000d60:	d1f8      	bne.n	8000d54 <wolfBoot_check_self_update+0x14c>
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	f04f 0200 	mov.w	r2, #0
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	9b08      	ldr	r3, [sp, #32]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <wolfBoot_check_self_update+0x1d0>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	4282      	cmp	r2, r0
 8000d80:	d1fe      	bne.n	8000d80 <wolfBoot_check_self_update+0x178>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	d1fc      	bne.n	8000d80 <wolfBoot_check_self_update+0x178>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	d1fa      	bne.n	8000d80 <wolfBoot_check_self_update+0x178>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	d1f8      	bne.n	8000d80 <wolfBoot_check_self_update+0x178>
 8000d8e:	f04f 0200 	mov.w	r2, #0
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	f04f 0200 	mov.w	r2, #0
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <wolfBoot_check_self_update+0x1d4>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	4282      	cmp	r2, r0
 8000dac:	d1fe      	bne.n	8000dac <wolfBoot_check_self_update+0x1a4>
 8000dae:	4282      	cmp	r2, r0
 8000db0:	d1fc      	bne.n	8000dac <wolfBoot_check_self_update+0x1a4>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	d1fa      	bne.n	8000dac <wolfBoot_check_self_update+0x1a4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	d1f8      	bne.n	8000dac <wolfBoot_check_self_update+0x1a4>
        wolfBoot_self_update(&update);
 8000dba:	ab01      	add	r3, sp, #4
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <wolfBoot_check_self_update+0x1d8>)
 8000dc0:	4798      	blx	r3
 8000dc2:	e002      	b.n	8000dca <wolfBoot_check_self_update+0x1c2>
            return;
 8000dc4:	bf00      	nop
 8000dc6:	e000      	b.n	8000dca <wolfBoot_check_self_update+0x1c2>
            return;
 8000dc8:	bf00      	nop
    }
}
 8000dca:	b011      	add	sp, #68	; 0x44
 8000dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dd0:	20000018 	.word	0x20000018
 8000dd4:	feed6789 	.word	0xfeed6789
 8000dd8:	feed4567 	.word	0xfeed4567
 8000ddc:	feed89ab 	.word	0xfeed89ab
 8000de0:	20000731 	.word	0x20000731

08000de4 <ByteReverseWords>:
 8000de4:	2300      	movs	r3, #0
 8000de6:	b510      	push	{r4, lr}
 8000de8:	0892      	lsrs	r2, r2, #2
 8000dea:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8000dee:	ba24      	rev	r4, r4
 8000df0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8000df4:	3301      	adds	r3, #1
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d1f7      	bne.n	8000dea <ByteReverseWords+0x6>
 8000dfa:	bd10      	pop	{r4, pc}

08000dfc <Transform_Sha256>:
 8000dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e00:	1f03      	subs	r3, r0, #4
 8000e02:	b0cd      	sub	sp, #308	; 0x134
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	ab04      	add	r3, sp, #16
 8000e08:	9301      	str	r3, [sp, #4]
 8000e0a:	f100 031c 	add.w	r3, r0, #28
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8000e14:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8000e18:	f842 0b04 	str.w	r0, [r2], #4
 8000e1c:	9803      	ldr	r0, [sp, #12]
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d1f8      	bne.n	8000e14 <Transform_Sha256+0x18>
 8000e22:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8000e26:	4662      	mov	r2, ip
 8000e28:	1f0b      	subs	r3, r1, #4
 8000e2a:	313c      	adds	r1, #60	; 0x3c
 8000e2c:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8000e30:	4299      	cmp	r1, r3
 8000e32:	f842 0b04 	str.w	r0, [r2], #4
 8000e36:	d1f9      	bne.n	8000e2c <Transform_Sha256+0x30>
 8000e38:	4662      	mov	r2, ip
 8000e3a:	2010      	movs	r0, #16
 8000e3c:	4615      	mov	r5, r2
 8000e3e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000e40:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8000e44:	ea4f 43f1 	mov.w	r3, r1, ror #19
 8000e48:	ea83 4371 	eor.w	r3, r3, r1, ror #17
 8000e4c:	ea83 2391 	eor.w	r3, r3, r1, lsr #10
 8000e50:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e52:	682d      	ldr	r5, [r5, #0]
 8000e54:	3001      	adds	r0, #1
 8000e56:	4429      	add	r1, r5
 8000e58:	440b      	add	r3, r1
 8000e5a:	ea4f 41b4 	mov.w	r1, r4, ror #18
 8000e5e:	ea81 11f4 	eor.w	r1, r1, r4, ror #7
 8000e62:	ea81 01d4 	eor.w	r1, r1, r4, lsr #3
 8000e66:	440b      	add	r3, r1
 8000e68:	2840      	cmp	r0, #64	; 0x40
 8000e6a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000e6c:	d1e6      	bne.n	8000e3c <Transform_Sha256+0x40>
 8000e6e:	9b01      	ldr	r3, [sp, #4]
 8000e70:	9801      	ldr	r0, [sp, #4]
 8000e72:	9e01      	ldr	r6, [sp, #4]
 8000e74:	f8d3 e01c 	ldr.w	lr, [r3, #28]
 8000e78:	6919      	ldr	r1, [r3, #16]
 8000e7a:	699a      	ldr	r2, [r3, #24]
 8000e7c:	9c01      	ldr	r4, [sp, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	6800      	ldr	r0, [r0, #0]
 8000e82:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8000e86:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800110c <Transform_Sha256+0x310>
 8000e8a:	e9d4 5401 	ldrd	r5, r4, [r4, #4]
 8000e8e:	f8d9 6000 	ldr.w	r6, [r9]
 8000e92:	f8dc 7000 	ldr.w	r7, [ip]
 8000e96:	ea4f 2af1 	mov.w	sl, r1, ror #11
 8000e9a:	ea8a 1ab1 	eor.w	sl, sl, r1, ror #6
 8000e9e:	443e      	add	r6, r7
 8000ea0:	ea8a 6a71 	eor.w	sl, sl, r1, ror #25
 8000ea4:	44b2      	add	sl, r6
 8000ea6:	ea82 0603 	eor.w	r6, r2, r3
 8000eaa:	400e      	ands	r6, r1
 8000eac:	4056      	eors	r6, r2
 8000eae:	44b2      	add	sl, r6
 8000eb0:	ea40 0705 	orr.w	r7, r0, r5
 8000eb4:	ea4f 06b0 	mov.w	r6, r0, ror #2
 8000eb8:	44d6      	add	lr, sl
 8000eba:	ea86 3670 	eor.w	r6, r6, r0, ror #13
 8000ebe:	ea00 0a05 	and.w	sl, r0, r5
 8000ec2:	4027      	ands	r7, r4
 8000ec4:	ea86 56b0 	eor.w	r6, r6, r0, ror #22
 8000ec8:	ea47 070a 	orr.w	r7, r7, sl
 8000ecc:	4437      	add	r7, r6
 8000ece:	44f0      	add	r8, lr
 8000ed0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000ed4:	44be      	add	lr, r7
 8000ed6:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8000eda:	ea81 0a03 	eor.w	sl, r1, r3
 8000ede:	443e      	add	r6, r7
 8000ee0:	4432      	add	r2, r6
 8000ee2:	ea0a 0a08 	and.w	sl, sl, r8
 8000ee6:	ea4f 26f8 	mov.w	r6, r8, ror #11
 8000eea:	ea8a 0a03 	eor.w	sl, sl, r3
 8000eee:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
 8000ef2:	4452      	add	r2, sl
 8000ef4:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8000ef8:	4416      	add	r6, r2
 8000efa:	eb04 0a06 	add.w	sl, r4, r6
 8000efe:	ea4f 327e 	mov.w	r2, lr, ror #13
 8000f02:	ea4e 0400 	orr.w	r4, lr, r0
 8000f06:	ea0e 0700 	and.w	r7, lr, r0
 8000f0a:	ea82 02be 	eor.w	r2, r2, lr, ror #2
 8000f0e:	402c      	ands	r4, r5
 8000f10:	433c      	orrs	r4, r7
 8000f12:	ea82 52be 	eor.w	r2, r2, lr, ror #22
 8000f16:	4422      	add	r2, r4
 8000f18:	4432      	add	r2, r6
 8000f1a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8000f1e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8000f22:	f109 0920 	add.w	r9, r9, #32
 8000f26:	4434      	add	r4, r6
 8000f28:	441c      	add	r4, r3
 8000f2a:	ea81 0308 	eor.w	r3, r1, r8
 8000f2e:	ea03 030a 	and.w	r3, r3, sl
 8000f32:	ea83 0701 	eor.w	r7, r3, r1
 8000f36:	19e3      	adds	r3, r4, r7
 8000f38:	ea4f 24fa 	mov.w	r4, sl, ror #11
 8000f3c:	ea84 14ba 	eor.w	r4, r4, sl, ror #6
 8000f40:	ea84 647a 	eor.w	r4, r4, sl, ror #25
 8000f44:	441c      	add	r4, r3
 8000f46:	192f      	adds	r7, r5, r4
 8000f48:	ea4f 3372 	mov.w	r3, r2, ror #13
 8000f4c:	ea4e 0502 	orr.w	r5, lr, r2
 8000f50:	ea0e 0602 	and.w	r6, lr, r2
 8000f54:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
 8000f58:	4005      	ands	r5, r0
 8000f5a:	4335      	orrs	r5, r6
 8000f5c:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
 8000f60:	442b      	add	r3, r5
 8000f62:	4423      	add	r3, r4
 8000f64:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8000f68:	f859 4c14 	ldr.w	r4, [r9, #-20]
 8000f6c:	f10c 0c20 	add.w	ip, ip, #32
 8000f70:	442c      	add	r4, r5
 8000f72:	440c      	add	r4, r1
 8000f74:	ea88 010a 	eor.w	r1, r8, sl
 8000f78:	4039      	ands	r1, r7
 8000f7a:	ea81 0608 	eor.w	r6, r1, r8
 8000f7e:	19a1      	adds	r1, r4, r6
 8000f80:	ea4f 24f7 	mov.w	r4, r7, ror #11
 8000f84:	ea84 14b7 	eor.w	r4, r4, r7, ror #6
 8000f88:	ea84 6477 	eor.w	r4, r4, r7, ror #25
 8000f8c:	440c      	add	r4, r1
 8000f8e:	eb00 0b04 	add.w	fp, r0, r4
 8000f92:	ea4f 3173 	mov.w	r1, r3, ror #13
 8000f96:	ea42 0003 	orr.w	r0, r2, r3
 8000f9a:	ea02 0503 	and.w	r5, r2, r3
 8000f9e:	ea81 01b3 	eor.w	r1, r1, r3, ror #2
 8000fa2:	ea00 000e 	and.w	r0, r0, lr
 8000fa6:	4328      	orrs	r0, r5
 8000fa8:	ea81 51b3 	eor.w	r1, r1, r3, ror #22
 8000fac:	4401      	add	r1, r0
 8000fae:	4421      	add	r1, r4
 8000fb0:	f859 0c10 	ldr.w	r0, [r9, #-16]
 8000fb4:	f85c 4c10 	ldr.w	r4, [ip, #-16]
 8000fb8:	ea8a 0507 	eor.w	r5, sl, r7
 8000fbc:	4420      	add	r0, r4
 8000fbe:	4480      	add	r8, r0
 8000fc0:	ea05 050b 	and.w	r5, r5, fp
 8000fc4:	ea4f 20fb 	mov.w	r0, fp, ror #11
 8000fc8:	ea85 050a 	eor.w	r5, r5, sl
 8000fcc:	ea80 10bb 	eor.w	r0, r0, fp, ror #6
 8000fd0:	44a8      	add	r8, r5
 8000fd2:	ea80 607b 	eor.w	r0, r0, fp, ror #25
 8000fd6:	4440      	add	r0, r8
 8000fd8:	ea43 0401 	orr.w	r4, r3, r1
 8000fdc:	ea4f 3871 	mov.w	r8, r1, ror #13
 8000fe0:	ea03 0501 	and.w	r5, r3, r1
 8000fe4:	ea88 08b1 	eor.w	r8, r8, r1, ror #2
 8000fe8:	4014      	ands	r4, r2
 8000fea:	432c      	orrs	r4, r5
 8000fec:	ea88 58b1 	eor.w	r8, r8, r1, ror #22
 8000ff0:	44a0      	add	r8, r4
 8000ff2:	4480      	add	r8, r0
 8000ff4:	4486      	add	lr, r0
 8000ff6:	f859 4c0c 	ldr.w	r4, [r9, #-12]
 8000ffa:	f85c 0c0c 	ldr.w	r0, [ip, #-12]
 8000ffe:	4404      	add	r4, r0
 8001000:	44a2      	add	sl, r4
 8001002:	ea87 040b 	eor.w	r4, r7, fp
 8001006:	ea04 040e 	and.w	r4, r4, lr
 800100a:	ea84 0507 	eor.w	r5, r4, r7
 800100e:	eb0a 0405 	add.w	r4, sl, r5
 8001012:	ea4f 2afe 	mov.w	sl, lr, ror #11
 8001016:	ea8a 1abe 	eor.w	sl, sl, lr, ror #6
 800101a:	ea8a 6a7e 	eor.w	sl, sl, lr, ror #25
 800101e:	44a2      	add	sl, r4
 8001020:	ea41 0008 	orr.w	r0, r1, r8
 8001024:	ea4f 3478 	mov.w	r4, r8, ror #13
 8001028:	ea01 0508 	and.w	r5, r1, r8
 800102c:	4018      	ands	r0, r3
 800102e:	ea84 04b8 	eor.w	r4, r4, r8, ror #2
 8001032:	4328      	orrs	r0, r5
 8001034:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
 8001038:	f859 5c08 	ldr.w	r5, [r9, #-8]
 800103c:	4404      	add	r4, r0
 800103e:	f85c 0c08 	ldr.w	r0, [ip, #-8]
 8001042:	4452      	add	r2, sl
 8001044:	4405      	add	r5, r0
 8001046:	442f      	add	r7, r5
 8001048:	ea8b 050e 	eor.w	r5, fp, lr
 800104c:	4015      	ands	r5, r2
 800104e:	ea85 060b 	eor.w	r6, r5, fp
 8001052:	19bd      	adds	r5, r7, r6
 8001054:	ea4f 27f2 	mov.w	r7, r2, ror #11
 8001058:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 800105c:	4454      	add	r4, sl
 800105e:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 8001062:	442f      	add	r7, r5
 8001064:	ea48 0004 	orr.w	r0, r8, r4
 8001068:	ea4f 3574 	mov.w	r5, r4, ror #13
 800106c:	4008      	ands	r0, r1
 800106e:	ea08 0604 	and.w	r6, r8, r4
 8001072:	ea85 05b4 	eor.w	r5, r5, r4, ror #2
 8001076:	4330      	orrs	r0, r6
 8001078:	ea85 55b4 	eor.w	r5, r5, r4, ror #22
 800107c:	f85c 6c04 	ldr.w	r6, [ip, #-4]
 8001080:	4405      	add	r5, r0
 8001082:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8001086:	443b      	add	r3, r7
 8001088:	4430      	add	r0, r6
 800108a:	4483      	add	fp, r0
 800108c:	ea8e 0002 	eor.w	r0, lr, r2
 8001090:	4018      	ands	r0, r3
 8001092:	443d      	add	r5, r7
 8001094:	ea80 070e 	eor.w	r7, r0, lr
 8001098:	eb0b 0007 	add.w	r0, fp, r7
 800109c:	ea4f 2bf3 	mov.w	fp, r3, ror #11
 80010a0:	ea8b 1bb3 	eor.w	fp, fp, r3, ror #6
 80010a4:	ea8b 6b73 	eor.w	fp, fp, r3, ror #25
 80010a8:	4483      	add	fp, r0
 80010aa:	ea44 0605 	orr.w	r6, r4, r5
 80010ae:	ea4f 3075 	mov.w	r0, r5, ror #13
 80010b2:	ea80 00b5 	eor.w	r0, r0, r5, ror #2
 80010b6:	ea06 0608 	and.w	r6, r6, r8
 80010ba:	ea04 0705 	and.w	r7, r4, r5
 80010be:	433e      	orrs	r6, r7
 80010c0:	ea80 50b5 	eor.w	r0, r0, r5, ror #22
 80010c4:	4430      	add	r0, r6
 80010c6:	4e10      	ldr	r6, [pc, #64]	; (8001108 <Transform_Sha256+0x30c>)
 80010c8:	4459      	add	r1, fp
 80010ca:	454e      	cmp	r6, r9
 80010cc:	4458      	add	r0, fp
 80010ce:	f47f aede 	bne.w	8000e8e <Transform_Sha256+0x92>
 80010d2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80010d6:	e9cd 0504 	strd	r0, r5, [sp, #16]
 80010da:	e9cd 4806 	strd	r4, r8, [sp, #24]
 80010de:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80010e2:	9108      	str	r1, [sp, #32]
 80010e4:	9b01      	ldr	r3, [sp, #4]
 80010e6:	9902      	ldr	r1, [sp, #8]
 80010e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80010f2:	4413      	add	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
 80010f6:	9b03      	ldr	r3, [sp, #12]
 80010f8:	9102      	str	r1, [sp, #8]
 80010fa:	428b      	cmp	r3, r1
 80010fc:	d1f2      	bne.n	80010e4 <Transform_Sha256+0x2e8>
 80010fe:	2000      	movs	r0, #0
 8001100:	b04d      	add	sp, #308	; 0x134
 8001102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001106:	bf00      	nop
 8001108:	08005510 	.word	0x08005510
 800110c:	08005410 	.word	0x08005410

08001110 <wc_InitSha256_ex>:
 8001110:	b510      	push	{r4, lr}
 8001112:	4604      	mov	r4, r0
 8001114:	b1f0      	cbz	r0, 8001154 <wc_InitSha256_ex+0x44>
 8001116:	2220      	movs	r2, #32
 8001118:	66c1      	str	r1, [r0, #108]	; 0x6c
 800111a:	2100      	movs	r1, #0
 800111c:	f7ff f81c 	bl	8000158 <memset>
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <wc_InitSha256_ex+0x4c>)
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <wc_InitSha256_ex+0x50>)
 8001124:	490f      	ldr	r1, [pc, #60]	; (8001164 <wc_InitSha256_ex+0x54>)
 8001126:	e9c4 2300 	strd	r2, r3, [r4]
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <wc_InitSha256_ex+0x58>)
 800112c:	480f      	ldr	r0, [pc, #60]	; (800116c <wc_InitSha256_ex+0x5c>)
 800112e:	e9c4 1302 	strd	r1, r3, [r4, #8]
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <wc_InitSha256_ex+0x60>)
 8001134:	e9c4 0304 	strd	r0, r3, [r4, #16]
 8001138:	2000      	movs	r0, #0
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <wc_InitSha256_ex+0x64>)
 800113c:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 8001140:	61a3      	str	r3, [r4, #24]
 8001142:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8001146:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 800114a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 800114e:	61e3      	str	r3, [r4, #28]
 8001150:	66a0      	str	r0, [r4, #104]	; 0x68
 8001152:	bd10      	pop	{r4, pc}
 8001154:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8001158:	e7fb      	b.n	8001152 <wc_InitSha256_ex+0x42>
 800115a:	bf00      	nop
 800115c:	bb67ae85 	.word	0xbb67ae85
 8001160:	6a09e667 	.word	0x6a09e667
 8001164:	3c6ef372 	.word	0x3c6ef372
 8001168:	a54ff53a 	.word	0xa54ff53a
 800116c:	510e527f 	.word	0x510e527f
 8001170:	9b05688c 	.word	0x9b05688c
 8001174:	1f83d9ab 	.word	0x1f83d9ab

08001178 <wc_Sha256Update>:
 8001178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800117c:	460f      	mov	r7, r1
 800117e:	4614      	mov	r4, r2
 8001180:	4605      	mov	r5, r0
 8001182:	2800      	cmp	r0, #0
 8001184:	d049      	beq.n	800121a <wc_Sha256Update+0xa2>
 8001186:	b919      	cbnz	r1, 8001190 <wc_Sha256Update+0x18>
 8001188:	2a00      	cmp	r2, #0
 800118a:	d146      	bne.n	800121a <wc_Sha256Update+0xa2>
 800118c:	2000      	movs	r0, #0
 800118e:	e042      	b.n	8001216 <wc_Sha256Update+0x9e>
 8001190:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8001192:	283f      	cmp	r0, #63	; 0x3f
 8001194:	d844      	bhi.n	8001220 <wc_Sha256Update+0xa8>
 8001196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001198:	f105 0620 	add.w	r6, r5, #32
 800119c:	18d3      	adds	r3, r2, r3
 800119e:	666b      	str	r3, [r5, #100]	; 0x64
 80011a0:	bf22      	ittt	cs
 80011a2:	6eab      	ldrcs	r3, [r5, #104]	; 0x68
 80011a4:	3301      	addcs	r3, #1
 80011a6:	66ab      	strcs	r3, [r5, #104]	; 0x68
 80011a8:	b1c8      	cbz	r0, 80011de <wc_Sha256Update+0x66>
 80011aa:	f1c0 0840 	rsb	r8, r0, #64	; 0x40
 80011ae:	4590      	cmp	r8, r2
 80011b0:	bf28      	it	cs
 80011b2:	4690      	movcs	r8, r2
 80011b4:	4430      	add	r0, r6
 80011b6:	4642      	mov	r2, r8
 80011b8:	f7fe fff6 	bl	80001a8 <memcpy>
 80011bc:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80011be:	4447      	add	r7, r8
 80011c0:	4442      	add	r2, r8
 80011c2:	2a40      	cmp	r2, #64	; 0x40
 80011c4:	662a      	str	r2, [r5, #96]	; 0x60
 80011c6:	eba4 0408 	sub.w	r4, r4, r8
 80011ca:	d108      	bne.n	80011de <wc_Sha256Update+0x66>
 80011cc:	4630      	mov	r0, r6
 80011ce:	4631      	mov	r1, r6
 80011d0:	f7ff fe08 	bl	8000de4 <ByteReverseWords>
 80011d4:	4628      	mov	r0, r5
 80011d6:	f7ff fe11 	bl	8000dfc <Transform_Sha256>
 80011da:	b9e0      	cbnz	r0, 8001216 <wc_Sha256Update+0x9e>
 80011dc:	6628      	str	r0, [r5, #96]	; 0x60
 80011de:	4427      	add	r7, r4
 80011e0:	2c3f      	cmp	r4, #63	; 0x3f
 80011e2:	eba7 0104 	sub.w	r1, r7, r4
 80011e6:	d807      	bhi.n	80011f8 <wc_Sha256Update+0x80>
 80011e8:	2c00      	cmp	r4, #0
 80011ea:	d0cf      	beq.n	800118c <wc_Sha256Update+0x14>
 80011ec:	4622      	mov	r2, r4
 80011ee:	4630      	mov	r0, r6
 80011f0:	f7fe ffda 	bl	80001a8 <memcpy>
 80011f4:	662c      	str	r4, [r5, #96]	; 0x60
 80011f6:	e7c9      	b.n	800118c <wc_Sha256Update+0x14>
 80011f8:	2240      	movs	r2, #64	; 0x40
 80011fa:	4630      	mov	r0, r6
 80011fc:	f7fe ffd4 	bl	80001a8 <memcpy>
 8001200:	4630      	mov	r0, r6
 8001202:	2240      	movs	r2, #64	; 0x40
 8001204:	4631      	mov	r1, r6
 8001206:	f7ff fded 	bl	8000de4 <ByteReverseWords>
 800120a:	4628      	mov	r0, r5
 800120c:	3c40      	subs	r4, #64	; 0x40
 800120e:	f7ff fdf5 	bl	8000dfc <Transform_Sha256>
 8001212:	2800      	cmp	r0, #0
 8001214:	d0e4      	beq.n	80011e0 <wc_Sha256Update+0x68>
 8001216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800121a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800121e:	e7fa      	b.n	8001216 <wc_Sha256Update+0x9e>
 8001220:	f06f 0083 	mvn.w	r0, #131	; 0x83
 8001224:	e7f7      	b.n	8001216 <wc_Sha256Update+0x9e>
	...

08001228 <wc_Sha256Final>:
 8001228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122a:	460f      	mov	r7, r1
 800122c:	4604      	mov	r4, r0
 800122e:	2800      	cmp	r0, #0
 8001230:	d06e      	beq.n	8001310 <wc_Sha256Final+0xe8>
 8001232:	2900      	cmp	r1, #0
 8001234:	d06c      	beq.n	8001310 <wc_Sha256Final+0xe8>
 8001236:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001238:	f100 0620 	add.w	r6, r0, #32
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	6602      	str	r2, [r0, #96]	; 0x60
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	54f2      	strb	r2, [r6, r3]
 8001244:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8001246:	2838      	cmp	r0, #56	; 0x38
 8001248:	d912      	bls.n	8001270 <wc_Sha256Final+0x48>
 800124a:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 800124e:	2100      	movs	r1, #0
 8001250:	4430      	add	r0, r6
 8001252:	f7fe ff81 	bl	8000158 <memset>
 8001256:	2240      	movs	r2, #64	; 0x40
 8001258:	4631      	mov	r1, r6
 800125a:	4630      	mov	r0, r6
 800125c:	6622      	str	r2, [r4, #96]	; 0x60
 800125e:	f7ff fdc1 	bl	8000de4 <ByteReverseWords>
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff fdca 	bl	8000dfc <Transform_Sha256>
 8001268:	4605      	mov	r5, r0
 800126a:	2800      	cmp	r0, #0
 800126c:	d14e      	bne.n	800130c <wc_Sha256Final+0xe4>
 800126e:	6620      	str	r0, [r4, #96]	; 0x60
 8001270:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001272:	2100      	movs	r1, #0
 8001274:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8001278:	4430      	add	r0, r6
 800127a:	f7fe ff6d 	bl	8000158 <memset>
 800127e:	e9d4 3119 	ldrd	r3, r1, [r4, #100]	; 0x64
 8001282:	0f5a      	lsrs	r2, r3, #29
 8001284:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	6663      	str	r3, [r4, #100]	; 0x64
 800128c:	4631      	mov	r1, r6
 800128e:	4630      	mov	r0, r6
 8001290:	66a2      	str	r2, [r4, #104]	; 0x68
 8001292:	2240      	movs	r2, #64	; 0x40
 8001294:	f7ff fda6 	bl	8000de4 <ByteReverseWords>
 8001298:	2204      	movs	r2, #4
 800129a:	f104 0168 	add.w	r1, r4, #104	; 0x68
 800129e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80012a2:	f7fe ff81 	bl	80001a8 <memcpy>
 80012a6:	2204      	movs	r2, #4
 80012a8:	f104 0164 	add.w	r1, r4, #100	; 0x64
 80012ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80012b0:	f7fe ff7a 	bl	80001a8 <memcpy>
 80012b4:	4631      	mov	r1, r6
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff fda0 	bl	8000dfc <Transform_Sha256>
 80012bc:	4605      	mov	r5, r0
 80012be:	bb28      	cbnz	r0, 800130c <wc_Sha256Final+0xe4>
 80012c0:	4621      	mov	r1, r4
 80012c2:	2220      	movs	r2, #32
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff fd8d 	bl	8000de4 <ByteReverseWords>
 80012ca:	2220      	movs	r2, #32
 80012cc:	4638      	mov	r0, r7
 80012ce:	f7fe ff6b 	bl	80001a8 <memcpy>
 80012d2:	2220      	movs	r2, #32
 80012d4:	4629      	mov	r1, r5
 80012d6:	4620      	mov	r0, r4
 80012d8:	f7fe ff3e 	bl	8000158 <memset>
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <wc_Sha256Final+0xf0>)
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <wc_Sha256Final+0xf4>)
 80012e0:	490f      	ldr	r1, [pc, #60]	; (8001320 <wc_Sha256Final+0xf8>)
 80012e2:	e9c4 2300 	strd	r2, r3, [r4]
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <wc_Sha256Final+0xfc>)
 80012e8:	480f      	ldr	r0, [pc, #60]	; (8001328 <wc_Sha256Final+0x100>)
 80012ea:	e9c4 1302 	strd	r1, r3, [r4, #8]
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <wc_Sha256Final+0x104>)
 80012f0:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
 80012f4:	e9c4 0304 	strd	r0, r3, [r4, #16]
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <wc_Sha256Final+0x108>)
 80012fa:	66a5      	str	r5, [r4, #104]	; 0x68
 80012fc:	61a3      	str	r3, [r4, #24]
 80012fe:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8001302:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8001306:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 800130a:	61e3      	str	r3, [r4, #28]
 800130c:	4628      	mov	r0, r5
 800130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001310:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8001314:	e7fa      	b.n	800130c <wc_Sha256Final+0xe4>
 8001316:	bf00      	nop
 8001318:	bb67ae85 	.word	0xbb67ae85
 800131c:	6a09e667 	.word	0x6a09e667
 8001320:	3c6ef372 	.word	0x3c6ef372
 8001324:	a54ff53a 	.word	0xa54ff53a
 8001328:	510e527f 	.word	0x510e527f
 800132c:	9b05688c 	.word	0x9b05688c
 8001330:	1f83d9ab 	.word	0x1f83d9ab

08001334 <wc_InitSha256>:
 8001334:	f06f 0201 	mvn.w	r2, #1
 8001338:	2100      	movs	r1, #0
 800133a:	f7ff bee9 	b.w	8001110 <wc_InitSha256_ex>

0800133e <_sp_zero>:
 *
 * @param  [out]  a  SP integer to set to zero.
 */
static void _sp_zero(sp_int* a)
{
    a->used = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	6003      	str	r3, [r0, #0]
#ifdef WOLFSSL_SP_INT_NEGATIVE
    a->sign = MP_ZPOS;
#endif
}
 8001342:	4770      	bx	lr

08001344 <_sp_cmp_abs>:
 */
static int _sp_cmp_abs(sp_int* a, sp_int* b)
{
    int ret = MP_EQ;

    if (a->used > b->used) {
 8001344:	6803      	ldr	r3, [r0, #0]
 8001346:	680a      	ldr	r2, [r1, #0]
 8001348:	4293      	cmp	r3, r2
 800134a:	dc12      	bgt.n	8001372 <_sp_cmp_abs+0x2e>
        ret = MP_GT;
    }
    else if (a->used < b->used) {
 800134c:	db13      	blt.n	8001376 <_sp_cmp_abs+0x32>
        ret = MP_LT;
    }
    else {
        int i;

        for (i = a->used - 1; i >= 0; i--) {
 800134e:	3b01      	subs	r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	db18      	blt.n	8001386 <_sp_cmp_abs+0x42>
{
 8001354:	b410      	push	{r4}
            if (a->dp[i] > b->dp[i]) {
 8001356:	1c9a      	adds	r2, r3, #2
 8001358:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 800135c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001360:	4294      	cmp	r4, r2
 8001362:	d80b      	bhi.n	800137c <_sp_cmp_abs+0x38>
                ret = MP_GT;
                break;
            }
            else if (a->dp[i] < b->dp[i]) {
 8001364:	d30c      	bcc.n	8001380 <_sp_cmp_abs+0x3c>
        for (i = a->used - 1; i >= 0; i--) {
 8001366:	3b01      	subs	r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	daf4      	bge.n	8001356 <_sp_cmp_abs+0x12>
    int ret = MP_EQ;
 800136c:	2000      	movs	r0, #0
            }
        }
    }

    return ret;
}
 800136e:	bc10      	pop	{r4}
 8001370:	4770      	bx	lr
        ret = MP_GT;
 8001372:	2001      	movs	r0, #1
 8001374:	4770      	bx	lr
        ret = MP_LT;
 8001376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800137a:	4770      	bx	lr
                ret = MP_GT;
 800137c:	2001      	movs	r0, #1
 800137e:	e7f6      	b.n	800136e <_sp_cmp_abs+0x2a>
                ret = MP_LT;
 8001380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ret;
 8001384:	e7f3      	b.n	800136e <_sp_cmp_abs+0x2a>
    int ret = MP_EQ;
 8001386:	2000      	movs	r0, #0
}
 8001388:	4770      	bx	lr
	...

0800138c <_sp_cmp>:
 * @return  MP_GT when a is greater than b.
 * @return  MP_LT when a is less than b.
 * @return  MP_EQ when a is equals b.
 */
static int _sp_cmp(sp_int* a, sp_int* b)
{
 800138c:	b508      	push	{r3, lr}
    int ret;

#ifdef WOLFSSL_SP_INT_NEGATIVE
    if (a->sign == b->sign) {
#endif
        ret = _sp_cmp_abs(a, b);
 800138e:	4b01      	ldr	r3, [pc, #4]	; (8001394 <_sp_cmp+0x8>)
 8001390:	4798      	blx	r3
        ret = MP_GT;
    }
#endif

    return ret;
}
 8001392:	bd08      	pop	{r3, pc}
 8001394:	08001345 	.word	0x08001345

08001398 <_sp_read_radix_16>:
 * @return  MP_OKAY on success.
 * @return  MP_VAL when radix not supported, value is negative, or a character
 *          is not valid.
 */
static int _sp_read_radix_16(sp_int* a, const char* in)
{
 8001398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139a:	4605      	mov	r5, r0
 800139c:	460e      	mov	r6, r1
        a->sign = MP_NEG;
        in++;
    }
#endif

    while (*in == '0') {
 800139e:	7833      	ldrb	r3, [r6, #0]
 80013a0:	2b30      	cmp	r3, #48	; 0x30
 80013a2:	d101      	bne.n	80013a8 <_sp_read_radix_16+0x10>
        in++;
 80013a4:	3601      	adds	r6, #1
 80013a6:	e7fa      	b.n	800139e <_sp_read_radix_16+0x6>
    }

    a->dp[0] = 0;
 80013a8:	2400      	movs	r4, #0
 80013aa:	60ac      	str	r4, [r5, #8]
    for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 80013ac:	4630      	mov	r0, r6
 80013ae:	4b23      	ldr	r3, [pc, #140]	; (800143c <_sp_read_radix_16+0xa4>)
 80013b0:	4798      	blx	r3
 80013b2:	3801      	subs	r0, #1
    int  j = 0;
 80013b4:	4627      	mov	r7, r4
    int  s = 0;
 80013b6:	4622      	mov	r2, r4
    for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 80013b8:	e012      	b.n	80013e0 <_sp_read_radix_16+0x48>
            ch -= '0';
        }
        else if ((ch >= 'A') && (ch <= 'F')) {
            ch -= 'A' - 10;
        }
        else if ((ch >= 'a') && (ch <= 'f')) {
 80013ba:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b05      	cmp	r3, #5
 80013c2:	d82a      	bhi.n	800141a <_sp_read_radix_16+0x82>
            ch -= 'a' - 10;
 80013c4:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 80013c8:	b2db      	uxtb	r3, r3
        else {
            err = MP_VAL;
            break;
        }

        if (s == SP_WORD_SIZE) {
 80013ca:	2a20      	cmp	r2, #32
 80013cc:	d019      	beq.n	8001402 <_sp_read_radix_16+0x6a>
            }
            s = 0;
            a->dp[j] = 0;
        }

        a->dp[j] |= ((sp_int_digit)ch) << s;
 80013ce:	4093      	lsls	r3, r2
 80013d0:	1cbc      	adds	r4, r7, #2
 80013d2:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 80013d6:	430b      	orrs	r3, r1
 80013d8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
        s += 4;
 80013dc:	3204      	adds	r2, #4
    for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 80013de:	3801      	subs	r0, #1
 80013e0:	2800      	cmp	r0, #0
 80013e2:	db17      	blt.n	8001414 <_sp_read_radix_16+0x7c>
        char ch = in[i];
 80013e4:	5c34      	ldrb	r4, [r6, r0]
        if ((ch >= '0') && (ch <= '9')) {
 80013e6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	d9ec      	bls.n	80013ca <_sp_read_radix_16+0x32>
        else if ((ch >= 'A') && (ch <= 'F')) {
 80013f0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d8df      	bhi.n	80013ba <_sp_read_radix_16+0x22>
            ch -= 'A' - 10;
 80013fa:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	e7e3      	b.n	80013ca <_sp_read_radix_16+0x32>
            j++;
 8001402:	3701      	adds	r7, #1
            if (j >= a->size) {
 8001404:	686a      	ldr	r2, [r5, #4]
 8001406:	42ba      	cmp	r2, r7
 8001408:	dd0a      	ble.n	8001420 <_sp_read_radix_16+0x88>
            a->dp[j] = 0;
 800140a:	1cb9      	adds	r1, r7, #2
 800140c:	2200      	movs	r2, #0
 800140e:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
 8001412:	e7dc      	b.n	80013ce <_sp_read_radix_16+0x36>
    int  err = MP_OKAY;
 8001414:	2000      	movs	r0, #0
    }

    if (err == MP_OKAY) {
 8001416:	b130      	cbz	r0, 8001426 <_sp_read_radix_16+0x8e>
            a->sign = MP_ZPOS;
        }
    #endif
    }
    return err;
}
 8001418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            err = MP_VAL;
 800141a:	f06f 0002 	mvn.w	r0, #2
 800141e:	e7fa      	b.n	8001416 <_sp_read_radix_16+0x7e>
                err = MP_VAL;
 8001420:	f06f 0002 	mvn.w	r0, #2
 8001424:	e7f7      	b.n	8001416 <_sp_read_radix_16+0x7e>
        sp_clamp(a);
 8001426:	2f00      	cmp	r7, #0
 8001428:	db05      	blt.n	8001436 <_sp_read_radix_16+0x9e>
 800142a:	1cbb      	adds	r3, r7, #2
 800142c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8001430:	b90b      	cbnz	r3, 8001436 <_sp_read_radix_16+0x9e>
 8001432:	3f01      	subs	r7, #1
 8001434:	e7f7      	b.n	8001426 <_sp_read_radix_16+0x8e>
 8001436:	3701      	adds	r7, #1
 8001438:	602f      	str	r7, [r5, #0]
    return err;
 800143a:	e7ed      	b.n	8001418 <_sp_read_radix_16+0x80>
 800143c:	08000185 	.word	0x08000185

08001440 <sp_init>:
    if (a == NULL) {
 8001440:	b138      	cbz	r0, 8001452 <sp_init+0x12>
{
 8001442:	b510      	push	{r4, lr}
 8001444:	4604      	mov	r4, r0
        _sp_zero(a);
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <sp_init+0x18>)
 8001448:	4798      	blx	r3
        a->size = SP_INT_DIGITS;
 800144a:	2312      	movs	r3, #18
 800144c:	6063      	str	r3, [r4, #4]
    int err = MP_OKAY;
 800144e:	2000      	movs	r0, #0
}
 8001450:	bd10      	pop	{r4, pc}
        err = MP_VAL;
 8001452:	f06f 0002 	mvn.w	r0, #2
}
 8001456:	4770      	bx	lr
 8001458:	0800133f 	.word	0x0800133f

0800145c <sp_init_multi>:
{
 800145c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001460:	460f      	mov	r7, r1
 8001462:	4615      	mov	r5, r2
 8001464:	461c      	mov	r4, r3
 8001466:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800146a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    if (n1 != NULL) {
 800146e:	b130      	cbz	r0, 800147e <sp_init_multi+0x22>
 8001470:	4606      	mov	r6, r0
        _sp_zero(n1);
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <sp_init_multi+0x88>)
 8001474:	4798      	blx	r3
        n1->dp[0] = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60b3      	str	r3, [r6, #8]
        n1->size = SP_INT_DIGITS;
 800147a:	2312      	movs	r3, #18
 800147c:	6073      	str	r3, [r6, #4]
    if (n2 != NULL) {
 800147e:	b137      	cbz	r7, 800148e <sp_init_multi+0x32>
        _sp_zero(n2);
 8001480:	4638      	mov	r0, r7
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <sp_init_multi+0x88>)
 8001484:	4798      	blx	r3
        n2->dp[0] = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
        n2->size = SP_INT_DIGITS;
 800148a:	2312      	movs	r3, #18
 800148c:	607b      	str	r3, [r7, #4]
    if (n3 != NULL) {
 800148e:	b135      	cbz	r5, 800149e <sp_init_multi+0x42>
        _sp_zero(n3);
 8001490:	4628      	mov	r0, r5
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <sp_init_multi+0x88>)
 8001494:	4798      	blx	r3
        n3->dp[0] = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60ab      	str	r3, [r5, #8]
        n3->size = SP_INT_DIGITS;
 800149a:	2312      	movs	r3, #18
 800149c:	606b      	str	r3, [r5, #4]
    if (n4 != NULL) {
 800149e:	b134      	cbz	r4, 80014ae <sp_init_multi+0x52>
        _sp_zero(n4);
 80014a0:	4620      	mov	r0, r4
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <sp_init_multi+0x88>)
 80014a4:	4798      	blx	r3
        n4->dp[0] = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60a3      	str	r3, [r4, #8]
        n4->size = SP_INT_DIGITS;
 80014aa:	2312      	movs	r3, #18
 80014ac:	6063      	str	r3, [r4, #4]
    if (n5 != NULL) {
 80014ae:	f1b9 0f00 	cmp.w	r9, #0
 80014b2:	d008      	beq.n	80014c6 <sp_init_multi+0x6a>
        _sp_zero(n5);
 80014b4:	4648      	mov	r0, r9
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <sp_init_multi+0x88>)
 80014b8:	4798      	blx	r3
        n5->dp[0] = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c9 3008 	str.w	r3, [r9, #8]
        n5->size = SP_INT_DIGITS;
 80014c0:	2312      	movs	r3, #18
 80014c2:	f8c9 3004 	str.w	r3, [r9, #4]
    if (n6 != NULL) {
 80014c6:	f1b8 0f00 	cmp.w	r8, #0
 80014ca:	d008      	beq.n	80014de <sp_init_multi+0x82>
        _sp_zero(n6);
 80014cc:	4640      	mov	r0, r8
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <sp_init_multi+0x88>)
 80014d0:	4798      	blx	r3
        n6->dp[0] = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c8 3008 	str.w	r3, [r8, #8]
        n6->size = SP_INT_DIGITS;
 80014d8:	2312      	movs	r3, #18
 80014da:	f8c8 3004 	str.w	r3, [r8, #4]
}
 80014de:	2000      	movs	r0, #0
 80014e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014e4:	0800133f 	.word	0x0800133f

080014e8 <sp_grow>:
{
 80014e8:	b430      	push	{r4, r5}
    if (a == NULL) {
 80014ea:	4605      	mov	r5, r0
 80014ec:	b130      	cbz	r0, 80014fc <sp_grow+0x14>
    if ((err == MP_OKAY) && (l > a->size)) {
 80014ee:	6843      	ldr	r3, [r0, #4]
 80014f0:	428b      	cmp	r3, r1
 80014f2:	db0f      	blt.n	8001514 <sp_grow+0x2c>
    int err = MP_OKAY;
 80014f4:	2000      	movs	r0, #0
    if (err == MP_OKAY) {
 80014f6:	b958      	cbnz	r0, 8001510 <sp_grow+0x28>
        for (i = a->used; i < l; i++) {
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	e007      	b.n	800150c <sp_grow+0x24>
        err = MP_VAL;
 80014fc:	f06f 0002 	mvn.w	r0, #2
 8001500:	e7f9      	b.n	80014f6 <sp_grow+0xe>
            a->dp[i] = 0;
 8001502:	1c9a      	adds	r2, r3, #2
 8001504:	2400      	movs	r4, #0
 8001506:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
        for (i = a->used; i < l; i++) {
 800150a:	3301      	adds	r3, #1
 800150c:	428b      	cmp	r3, r1
 800150e:	dbf8      	blt.n	8001502 <sp_grow+0x1a>
}
 8001510:	bc30      	pop	{r4, r5}
 8001512:	4770      	bx	lr
        err = MP_MEM;
 8001514:	f06f 0001 	mvn.w	r0, #1
    return err;
 8001518:	e7fa      	b.n	8001510 <sp_grow+0x28>
	...

0800151c <sp_clear>:
    if (a != NULL) {
 800151c:	b118      	cbz	r0, 8001526 <sp_clear+0xa>
{
 800151e:	b508      	push	{r3, lr}
 8001520:	4602      	mov	r2, r0
        for (i = 0; i < a->used; i++) {
 8001522:	2300      	movs	r3, #0
 8001524:	e005      	b.n	8001532 <sp_clear+0x16>
 8001526:	4770      	bx	lr
            a->dp[i] = 0;
 8001528:	1c99      	adds	r1, r3, #2
 800152a:	2000      	movs	r0, #0
 800152c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        for (i = 0; i < a->used; i++) {
 8001530:	3301      	adds	r3, #1
 8001532:	6811      	ldr	r1, [r2, #0]
 8001534:	4299      	cmp	r1, r3
 8001536:	dcf7      	bgt.n	8001528 <sp_clear+0xc>
        _sp_zero(a);
 8001538:	4610      	mov	r0, r2
 800153a:	4b01      	ldr	r3, [pc, #4]	; (8001540 <sp_clear+0x24>)
 800153c:	4798      	blx	r3
}
 800153e:	bd08      	pop	{r3, pc}
 8001540:	0800133f 	.word	0x0800133f

08001544 <sp_cmp>:
    if (a == b) {
 8001544:	4288      	cmp	r0, r1
 8001546:	d005      	beq.n	8001554 <sp_cmp+0x10>
    else if (a == NULL) {
 8001548:	b130      	cbz	r0, 8001558 <sp_cmp+0x14>
    else if (b == NULL) {
 800154a:	b141      	cbz	r1, 800155e <sp_cmp+0x1a>
{
 800154c:	b508      	push	{r3, lr}
        ret = _sp_cmp(a, b);
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <sp_cmp+0x20>)
 8001550:	4798      	blx	r3
}
 8001552:	bd08      	pop	{r3, pc}
        ret = MP_EQ;
 8001554:	2000      	movs	r0, #0
 8001556:	4770      	bx	lr
        ret = MP_LT;
 8001558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800155c:	4770      	bx	lr
        ret = MP_GT;
 800155e:	2001      	movs	r0, #1
}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	0800138d 	.word	0x0800138d

08001568 <sp_set>:
    if (a == NULL) {
 8001568:	b130      	cbz	r0, 8001578 <sp_set+0x10>
        a->dp[0] = d;
 800156a:	6081      	str	r1, [r0, #8]
        a->used = d > 0;
 800156c:	3900      	subs	r1, #0
 800156e:	bf18      	it	ne
 8001570:	2101      	movne	r1, #1
 8001572:	6001      	str	r1, [r0, #0]
    int err = MP_OKAY;
 8001574:	2000      	movs	r0, #0
 8001576:	4770      	bx	lr
        err = MP_VAL;
 8001578:	f06f 0002 	mvn.w	r0, #2
}
 800157c:	4770      	bx	lr

0800157e <sp_read_unsigned_bin>:
{
 800157e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((a == NULL) || ((in == NULL) && (inSz > 0))) {
 8001582:	4606      	mov	r6, r0
 8001584:	b1c0      	cbz	r0, 80015b8 <sp_read_unsigned_bin+0x3a>
 8001586:	b191      	cbz	r1, 80015ae <sp_read_unsigned_bin+0x30>
    if ((err == MP_OKAY) && (inSz > ((word32)a->size - 1) * SP_WORD_SIZEOF)) {
 8001588:	6873      	ldr	r3, [r6, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8001590:	d86a      	bhi.n	8001668 <sp_read_unsigned_bin+0xea>
 8001592:	2000      	movs	r0, #0
    if (err == MP_OKAY) {
 8001594:	2800      	cmp	r0, #0
 8001596:	d165      	bne.n	8001664 <sp_read_unsigned_bin+0xe6>
        a->used = (inSz + SP_WORD_SIZEOF - 1) / SP_WORD_SIZEOF;
 8001598:	f102 0e03 	add.w	lr, r2, #3
 800159c:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80015a0:	f8c6 e000 	str.w	lr, [r6]
        for (i = inSz-1, j = 0; i >= SP_WORD_SIZEOF - 1; i -= SP_WORD_SIZEOF) {
 80015a4:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 80015a8:	4645      	mov	r5, r8
 80015aa:	4684      	mov	ip, r0
 80015ac:	e021      	b.n	80015f2 <sp_read_unsigned_bin+0x74>
    if ((a == NULL) || ((in == NULL) && (inSz > 0))) {
 80015ae:	2a00      	cmp	r2, #0
 80015b0:	d0ea      	beq.n	8001588 <sp_read_unsigned_bin+0xa>
        err = MP_VAL;
 80015b2:	f06f 0002 	mvn.w	r0, #2
 80015b6:	e7ed      	b.n	8001594 <sp_read_unsigned_bin+0x16>
 80015b8:	f06f 0002 	mvn.w	r0, #2
 80015bc:	e7ea      	b.n	8001594 <sp_read_unsigned_bin+0x16>
            a->dp[j]  = ((sp_int_digit)in[i - 0] <<  0);
 80015be:	5d4b      	ldrb	r3, [r1, r5]
 80015c0:	f10c 0702 	add.w	r7, ip, #2
 80015c4:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
            a->dp[j] |= ((sp_int_digit)in[i - 1] <<  8);
 80015c8:	eb01 0905 	add.w	r9, r1, r5
 80015cc:	f819 4c01 	ldrb.w	r4, [r9, #-1]
 80015d0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80015d4:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
            a->dp[j] |= ((sp_int_digit)in[i - 2] << 16) |
 80015d8:	f819 ac02 	ldrb.w	sl, [r9, #-2]
                        ((sp_int_digit)in[i - 3] << 24);
 80015dc:	f819 4c03 	ldrb.w	r4, [r9, #-3]
 80015e0:	0624      	lsls	r4, r4, #24
            a->dp[j] |= ((sp_int_digit)in[i - 2] << 16) |
 80015e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80015e6:	4323      	orrs	r3, r4
 80015e8:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
            j++;
 80015ec:	f10c 0c01 	add.w	ip, ip, #1
        for (i = inSz-1, j = 0; i >= SP_WORD_SIZEOF - 1; i -= SP_WORD_SIZEOF) {
 80015f0:	3d04      	subs	r5, #4
 80015f2:	2d02      	cmp	r5, #2
 80015f4:	dce3      	bgt.n	80015be <sp_read_unsigned_bin+0x40>
        a->dp[j] = 0;
 80015f6:	f10c 0c02 	add.w	ip, ip, #2
 80015fa:	2300      	movs	r3, #0
 80015fc:	f846 302c 	str.w	r3, [r6, ip, lsl #2]
        if (i >= 0) {
 8001600:	429d      	cmp	r5, r3
 8001602:	db23      	blt.n	800164c <sp_read_unsigned_bin+0xce>
            byte *d = (byte*)a->dp;
 8001604:	f106 0308 	add.w	r3, r6, #8
            a->dp[a->used - 1] = 0;
 8001608:	f10e 0e01 	add.w	lr, lr, #1
 800160c:	2400      	movs	r4, #0
 800160e:	f846 402e 	str.w	r4, [r6, lr, lsl #2]
            switch (i) {
 8001612:	2d06      	cmp	r5, #6
 8001614:	d81a      	bhi.n	800164c <sp_read_unsigned_bin+0xce>
 8001616:	e8df f005 	tbb	[pc, r5]
 800161a:	1316      	.short	0x1316
 800161c:	070a0d10 	.word	0x070a0d10
 8001620:	04          	.byte	0x04
 8001621:	00          	.byte	0x00
                case 6: d[inSz - 1 - 6] = in[6]; FALL_THROUGH;
 8001622:	1fd4      	subs	r4, r2, #7
 8001624:	798d      	ldrb	r5, [r1, #6]
 8001626:	551d      	strb	r5, [r3, r4]
                case 5: d[inSz - 1 - 5] = in[5]; FALL_THROUGH;
 8001628:	1f94      	subs	r4, r2, #6
 800162a:	794d      	ldrb	r5, [r1, #5]
 800162c:	551d      	strb	r5, [r3, r4]
                case 4: d[inSz - 1 - 4] = in[4]; FALL_THROUGH;
 800162e:	1f54      	subs	r4, r2, #5
 8001630:	790d      	ldrb	r5, [r1, #4]
 8001632:	551d      	strb	r5, [r3, r4]
                case 3: d[inSz - 1 - 3] = in[3]; FALL_THROUGH;
 8001634:	1f14      	subs	r4, r2, #4
 8001636:	78cd      	ldrb	r5, [r1, #3]
 8001638:	551d      	strb	r5, [r3, r4]
                case 2: d[inSz - 1 - 2] = in[2]; FALL_THROUGH;
 800163a:	1ed4      	subs	r4, r2, #3
 800163c:	788d      	ldrb	r5, [r1, #2]
 800163e:	551d      	strb	r5, [r3, r4]
                case 1: d[inSz - 1 - 1] = in[1]; FALL_THROUGH;
 8001640:	3a02      	subs	r2, #2
 8001642:	784c      	ldrb	r4, [r1, #1]
 8001644:	549c      	strb	r4, [r3, r2]
                case 0: d[inSz - 1 - 0] = in[0];
 8001646:	780a      	ldrb	r2, [r1, #0]
 8001648:	f803 2008 	strb.w	r2, [r3, r8]
        sp_clamp(a);
 800164c:	6833      	ldr	r3, [r6, #0]
 800164e:	3b01      	subs	r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	db05      	blt.n	8001660 <sp_read_unsigned_bin+0xe2>
 8001654:	1c9a      	adds	r2, r3, #2
 8001656:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800165a:	b90a      	cbnz	r2, 8001660 <sp_read_unsigned_bin+0xe2>
 800165c:	3b01      	subs	r3, #1
 800165e:	e7f7      	b.n	8001650 <sp_read_unsigned_bin+0xd2>
 8001660:	3301      	adds	r3, #1
 8001662:	6033      	str	r3, [r6, #0]
}
 8001664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        err = MP_VAL;
 8001668:	f06f 0002 	mvn.w	r0, #2
    return err;
 800166c:	e7fa      	b.n	8001664 <sp_read_unsigned_bin+0xe6>
	...

08001670 <sp_read_radix>:
 */
int sp_read_radix(sp_int* a, const char* in, int radix)
{
    int err = MP_OKAY;

    if ((a == NULL) || (in == NULL)) {
 8001670:	b148      	cbz	r0, 8001686 <sp_read_radix+0x16>
{
 8001672:	b510      	push	{r4, lr}
    if ((a == NULL) || (in == NULL)) {
 8001674:	b151      	cbz	r1, 800168c <sp_read_radix+0x1c>
        err = MP_VAL;
    }

    if (err == MP_OKAY) {
    #ifndef WOLFSSL_SP_INT_NEGATIVE
        if (*in == '-') {
 8001676:	780b      	ldrb	r3, [r1, #0]
 8001678:	2b2d      	cmp	r3, #45	; 0x2d
 800167a:	d00a      	beq.n	8001692 <sp_read_radix+0x22>
            err = MP_VAL;
        }
        else
    #endif
        if (radix == 16) {
 800167c:	2a10      	cmp	r2, #16
 800167e:	d10b      	bne.n	8001698 <sp_read_radix+0x28>
            err = _sp_read_radix_16(a, in);
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <sp_read_radix+0x30>)
 8001682:	4798      	blx	r3
            err = MP_VAL;
        }
    }

    return err;
}
 8001684:	bd10      	pop	{r4, pc}
        err = MP_VAL;
 8001686:	f06f 0002 	mvn.w	r0, #2
}
 800168a:	4770      	bx	lr
        err = MP_VAL;
 800168c:	f06f 0002 	mvn.w	r0, #2
 8001690:	e7f8      	b.n	8001684 <sp_read_radix+0x14>
            err = MP_VAL;
 8001692:	f06f 0002 	mvn.w	r0, #2
 8001696:	e7f5      	b.n	8001684 <sp_read_radix+0x14>
            err = MP_VAL;
 8001698:	f06f 0002 	mvn.w	r0, #2
    return err;
 800169c:	e7f2      	b.n	8001684 <sp_read_radix+0x14>
 800169e:	bf00      	nop
 80016a0:	08001399 	.word	0x08001399

080016a4 <sp_256_mul_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static void sp_256_mul_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 80016a4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 80016a8:	b089      	sub	sp, #36	; 0x24
    sp_digit tmp_arr[8];
    sp_digit* tmp = tmp_arr;

    __asm__ __volatile__ (
 80016aa:	466f      	mov	r7, sp
 80016ac:	680e      	ldr	r6, [r1, #0]
 80016ae:	f8d2 8000 	ldr.w	r8, [r2]
 80016b2:	fba6 3408 	umull	r3, r4, r6, r8
 80016b6:	f04f 0500 	mov.w	r5, #0
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80016c4:	fba6 6808 	umull	r6, r8, r6, r8
 80016c8:	19a4      	adds	r4, r4, r6
 80016ca:	eb45 0508 	adc.w	r5, r5, r8
 80016ce:	684e      	ldr	r6, [r1, #4]
 80016d0:	f8d2 8000 	ldr.w	r8, [r2]
 80016d4:	fba6 6808 	umull	r6, r8, r6, r8
 80016d8:	19a4      	adds	r4, r4, r6
 80016da:	eb55 0508 	adcs.w	r5, r5, r8
 80016de:	f143 0300 	adc.w	r3, r3, #0
 80016e2:	607c      	str	r4, [r7, #4]
 80016e4:	f04f 0400 	mov.w	r4, #0
 80016e8:	680e      	ldr	r6, [r1, #0]
 80016ea:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80016ee:	fba6 6808 	umull	r6, r8, r6, r8
 80016f2:	19ad      	adds	r5, r5, r6
 80016f4:	eb53 0308 	adcs.w	r3, r3, r8
 80016f8:	f144 0400 	adc.w	r4, r4, #0
 80016fc:	684e      	ldr	r6, [r1, #4]
 80016fe:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001702:	fba6 6808 	umull	r6, r8, r6, r8
 8001706:	19ad      	adds	r5, r5, r6
 8001708:	eb53 0308 	adcs.w	r3, r3, r8
 800170c:	f144 0400 	adc.w	r4, r4, #0
 8001710:	688e      	ldr	r6, [r1, #8]
 8001712:	f8d2 8000 	ldr.w	r8, [r2]
 8001716:	fba6 6808 	umull	r6, r8, r6, r8
 800171a:	19ad      	adds	r5, r5, r6
 800171c:	eb53 0308 	adcs.w	r3, r3, r8
 8001720:	f144 0400 	adc.w	r4, r4, #0
 8001724:	60bd      	str	r5, [r7, #8]
 8001726:	f04f 0500 	mov.w	r5, #0
 800172a:	680e      	ldr	r6, [r1, #0]
 800172c:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8001730:	fba6 6808 	umull	r6, r8, r6, r8
 8001734:	199b      	adds	r3, r3, r6
 8001736:	eb54 0408 	adcs.w	r4, r4, r8
 800173a:	f145 0500 	adc.w	r5, r5, #0
 800173e:	684e      	ldr	r6, [r1, #4]
 8001740:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001744:	fba6 6808 	umull	r6, r8, r6, r8
 8001748:	199b      	adds	r3, r3, r6
 800174a:	eb54 0408 	adcs.w	r4, r4, r8
 800174e:	f145 0500 	adc.w	r5, r5, #0
 8001752:	688e      	ldr	r6, [r1, #8]
 8001754:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001758:	fba6 6808 	umull	r6, r8, r6, r8
 800175c:	199b      	adds	r3, r3, r6
 800175e:	eb54 0408 	adcs.w	r4, r4, r8
 8001762:	f145 0500 	adc.w	r5, r5, #0
 8001766:	68ce      	ldr	r6, [r1, #12]
 8001768:	f8d2 8000 	ldr.w	r8, [r2]
 800176c:	fba6 6808 	umull	r6, r8, r6, r8
 8001770:	199b      	adds	r3, r3, r6
 8001772:	eb54 0408 	adcs.w	r4, r4, r8
 8001776:	f145 0500 	adc.w	r5, r5, #0
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	680e      	ldr	r6, [r1, #0]
 8001782:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001786:	fba6 6808 	umull	r6, r8, r6, r8
 800178a:	19a4      	adds	r4, r4, r6
 800178c:	eb55 0508 	adcs.w	r5, r5, r8
 8001790:	f143 0300 	adc.w	r3, r3, #0
 8001794:	684e      	ldr	r6, [r1, #4]
 8001796:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800179a:	fba6 6808 	umull	r6, r8, r6, r8
 800179e:	19a4      	adds	r4, r4, r6
 80017a0:	eb55 0508 	adcs.w	r5, r5, r8
 80017a4:	f143 0300 	adc.w	r3, r3, #0
 80017a8:	688e      	ldr	r6, [r1, #8]
 80017aa:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80017ae:	fba6 6808 	umull	r6, r8, r6, r8
 80017b2:	19a4      	adds	r4, r4, r6
 80017b4:	eb55 0508 	adcs.w	r5, r5, r8
 80017b8:	f143 0300 	adc.w	r3, r3, #0
 80017bc:	68ce      	ldr	r6, [r1, #12]
 80017be:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80017c2:	fba6 6808 	umull	r6, r8, r6, r8
 80017c6:	19a4      	adds	r4, r4, r6
 80017c8:	eb55 0508 	adcs.w	r5, r5, r8
 80017cc:	f143 0300 	adc.w	r3, r3, #0
 80017d0:	690e      	ldr	r6, [r1, #16]
 80017d2:	f8d2 8000 	ldr.w	r8, [r2]
 80017d6:	fba6 6808 	umull	r6, r8, r6, r8
 80017da:	19a4      	adds	r4, r4, r6
 80017dc:	eb55 0508 	adcs.w	r5, r5, r8
 80017e0:	f143 0300 	adc.w	r3, r3, #0
 80017e4:	613c      	str	r4, [r7, #16]
 80017e6:	f04f 0400 	mov.w	r4, #0
 80017ea:	680e      	ldr	r6, [r1, #0]
 80017ec:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80017f0:	fba6 6808 	umull	r6, r8, r6, r8
 80017f4:	19ad      	adds	r5, r5, r6
 80017f6:	eb53 0308 	adcs.w	r3, r3, r8
 80017fa:	f144 0400 	adc.w	r4, r4, #0
 80017fe:	684e      	ldr	r6, [r1, #4]
 8001800:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001804:	fba6 6808 	umull	r6, r8, r6, r8
 8001808:	19ad      	adds	r5, r5, r6
 800180a:	eb53 0308 	adcs.w	r3, r3, r8
 800180e:	f144 0400 	adc.w	r4, r4, #0
 8001812:	688e      	ldr	r6, [r1, #8]
 8001814:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8001818:	fba6 6808 	umull	r6, r8, r6, r8
 800181c:	19ad      	adds	r5, r5, r6
 800181e:	eb53 0308 	adcs.w	r3, r3, r8
 8001822:	f144 0400 	adc.w	r4, r4, #0
 8001826:	68ce      	ldr	r6, [r1, #12]
 8001828:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800182c:	fba6 6808 	umull	r6, r8, r6, r8
 8001830:	19ad      	adds	r5, r5, r6
 8001832:	eb53 0308 	adcs.w	r3, r3, r8
 8001836:	f144 0400 	adc.w	r4, r4, #0
 800183a:	690e      	ldr	r6, [r1, #16]
 800183c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001840:	fba6 6808 	umull	r6, r8, r6, r8
 8001844:	19ad      	adds	r5, r5, r6
 8001846:	eb53 0308 	adcs.w	r3, r3, r8
 800184a:	f144 0400 	adc.w	r4, r4, #0
 800184e:	694e      	ldr	r6, [r1, #20]
 8001850:	f8d2 8000 	ldr.w	r8, [r2]
 8001854:	fba6 6808 	umull	r6, r8, r6, r8
 8001858:	19ad      	adds	r5, r5, r6
 800185a:	eb53 0308 	adcs.w	r3, r3, r8
 800185e:	f144 0400 	adc.w	r4, r4, #0
 8001862:	617d      	str	r5, [r7, #20]
 8001864:	f04f 0500 	mov.w	r5, #0
 8001868:	680e      	ldr	r6, [r1, #0]
 800186a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800186e:	fba6 6808 	umull	r6, r8, r6, r8
 8001872:	199b      	adds	r3, r3, r6
 8001874:	eb54 0408 	adcs.w	r4, r4, r8
 8001878:	f145 0500 	adc.w	r5, r5, #0
 800187c:	684e      	ldr	r6, [r1, #4]
 800187e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001882:	fba6 6808 	umull	r6, r8, r6, r8
 8001886:	199b      	adds	r3, r3, r6
 8001888:	eb54 0408 	adcs.w	r4, r4, r8
 800188c:	f145 0500 	adc.w	r5, r5, #0
 8001890:	688e      	ldr	r6, [r1, #8]
 8001892:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001896:	fba6 6808 	umull	r6, r8, r6, r8
 800189a:	199b      	adds	r3, r3, r6
 800189c:	eb54 0408 	adcs.w	r4, r4, r8
 80018a0:	f145 0500 	adc.w	r5, r5, #0
 80018a4:	68ce      	ldr	r6, [r1, #12]
 80018a6:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80018aa:	fba6 6808 	umull	r6, r8, r6, r8
 80018ae:	199b      	adds	r3, r3, r6
 80018b0:	eb54 0408 	adcs.w	r4, r4, r8
 80018b4:	f145 0500 	adc.w	r5, r5, #0
 80018b8:	690e      	ldr	r6, [r1, #16]
 80018ba:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80018be:	fba6 6808 	umull	r6, r8, r6, r8
 80018c2:	199b      	adds	r3, r3, r6
 80018c4:	eb54 0408 	adcs.w	r4, r4, r8
 80018c8:	f145 0500 	adc.w	r5, r5, #0
 80018cc:	694e      	ldr	r6, [r1, #20]
 80018ce:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80018d2:	fba6 6808 	umull	r6, r8, r6, r8
 80018d6:	199b      	adds	r3, r3, r6
 80018d8:	eb54 0408 	adcs.w	r4, r4, r8
 80018dc:	f145 0500 	adc.w	r5, r5, #0
 80018e0:	698e      	ldr	r6, [r1, #24]
 80018e2:	f8d2 8000 	ldr.w	r8, [r2]
 80018e6:	fba6 6808 	umull	r6, r8, r6, r8
 80018ea:	199b      	adds	r3, r3, r6
 80018ec:	eb54 0408 	adcs.w	r4, r4, r8
 80018f0:	f145 0500 	adc.w	r5, r5, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	680e      	ldr	r6, [r1, #0]
 80018fc:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8001900:	fba6 6808 	umull	r6, r8, r6, r8
 8001904:	19a4      	adds	r4, r4, r6
 8001906:	eb55 0508 	adcs.w	r5, r5, r8
 800190a:	f143 0300 	adc.w	r3, r3, #0
 800190e:	684e      	ldr	r6, [r1, #4]
 8001910:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001914:	fba6 6808 	umull	r6, r8, r6, r8
 8001918:	19a4      	adds	r4, r4, r6
 800191a:	eb55 0508 	adcs.w	r5, r5, r8
 800191e:	f143 0300 	adc.w	r3, r3, #0
 8001922:	688e      	ldr	r6, [r1, #8]
 8001924:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001928:	fba6 6808 	umull	r6, r8, r6, r8
 800192c:	19a4      	adds	r4, r4, r6
 800192e:	eb55 0508 	adcs.w	r5, r5, r8
 8001932:	f143 0300 	adc.w	r3, r3, #0
 8001936:	68ce      	ldr	r6, [r1, #12]
 8001938:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800193c:	fba6 6808 	umull	r6, r8, r6, r8
 8001940:	19a4      	adds	r4, r4, r6
 8001942:	eb55 0508 	adcs.w	r5, r5, r8
 8001946:	f143 0300 	adc.w	r3, r3, #0
 800194a:	690e      	ldr	r6, [r1, #16]
 800194c:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8001950:	fba6 6808 	umull	r6, r8, r6, r8
 8001954:	19a4      	adds	r4, r4, r6
 8001956:	eb55 0508 	adcs.w	r5, r5, r8
 800195a:	f143 0300 	adc.w	r3, r3, #0
 800195e:	694e      	ldr	r6, [r1, #20]
 8001960:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001964:	fba6 6808 	umull	r6, r8, r6, r8
 8001968:	19a4      	adds	r4, r4, r6
 800196a:	eb55 0508 	adcs.w	r5, r5, r8
 800196e:	f143 0300 	adc.w	r3, r3, #0
 8001972:	698e      	ldr	r6, [r1, #24]
 8001974:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001978:	fba6 6808 	umull	r6, r8, r6, r8
 800197c:	19a4      	adds	r4, r4, r6
 800197e:	eb55 0508 	adcs.w	r5, r5, r8
 8001982:	f143 0300 	adc.w	r3, r3, #0
 8001986:	69ce      	ldr	r6, [r1, #28]
 8001988:	f8d2 8000 	ldr.w	r8, [r2]
 800198c:	fba6 6808 	umull	r6, r8, r6, r8
 8001990:	19a4      	adds	r4, r4, r6
 8001992:	eb55 0508 	adcs.w	r5, r5, r8
 8001996:	f143 0300 	adc.w	r3, r3, #0
 800199a:	61fc      	str	r4, [r7, #28]
 800199c:	f04f 0400 	mov.w	r4, #0
 80019a0:	684e      	ldr	r6, [r1, #4]
 80019a2:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80019a6:	fba6 6808 	umull	r6, r8, r6, r8
 80019aa:	19ad      	adds	r5, r5, r6
 80019ac:	eb53 0308 	adcs.w	r3, r3, r8
 80019b0:	f144 0400 	adc.w	r4, r4, #0
 80019b4:	688e      	ldr	r6, [r1, #8]
 80019b6:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80019ba:	fba6 6808 	umull	r6, r8, r6, r8
 80019be:	19ad      	adds	r5, r5, r6
 80019c0:	eb53 0308 	adcs.w	r3, r3, r8
 80019c4:	f144 0400 	adc.w	r4, r4, #0
 80019c8:	68ce      	ldr	r6, [r1, #12]
 80019ca:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80019ce:	fba6 6808 	umull	r6, r8, r6, r8
 80019d2:	19ad      	adds	r5, r5, r6
 80019d4:	eb53 0308 	adcs.w	r3, r3, r8
 80019d8:	f144 0400 	adc.w	r4, r4, #0
 80019dc:	690e      	ldr	r6, [r1, #16]
 80019de:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80019e2:	fba6 6808 	umull	r6, r8, r6, r8
 80019e6:	19ad      	adds	r5, r5, r6
 80019e8:	eb53 0308 	adcs.w	r3, r3, r8
 80019ec:	f144 0400 	adc.w	r4, r4, #0
 80019f0:	694e      	ldr	r6, [r1, #20]
 80019f2:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80019f6:	fba6 6808 	umull	r6, r8, r6, r8
 80019fa:	19ad      	adds	r5, r5, r6
 80019fc:	eb53 0308 	adcs.w	r3, r3, r8
 8001a00:	f144 0400 	adc.w	r4, r4, #0
 8001a04:	698e      	ldr	r6, [r1, #24]
 8001a06:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001a0a:	fba6 6808 	umull	r6, r8, r6, r8
 8001a0e:	19ad      	adds	r5, r5, r6
 8001a10:	eb53 0308 	adcs.w	r3, r3, r8
 8001a14:	f144 0400 	adc.w	r4, r4, #0
 8001a18:	69ce      	ldr	r6, [r1, #28]
 8001a1a:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001a1e:	fba6 6808 	umull	r6, r8, r6, r8
 8001a22:	19ad      	adds	r5, r5, r6
 8001a24:	eb53 0308 	adcs.w	r3, r3, r8
 8001a28:	f144 0400 	adc.w	r4, r4, #0
 8001a2c:	6205      	str	r5, [r0, #32]
 8001a2e:	f04f 0500 	mov.w	r5, #0
 8001a32:	688e      	ldr	r6, [r1, #8]
 8001a34:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8001a38:	fba6 6808 	umull	r6, r8, r6, r8
 8001a3c:	199b      	adds	r3, r3, r6
 8001a3e:	eb54 0408 	adcs.w	r4, r4, r8
 8001a42:	f145 0500 	adc.w	r5, r5, #0
 8001a46:	68ce      	ldr	r6, [r1, #12]
 8001a48:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001a4c:	fba6 6808 	umull	r6, r8, r6, r8
 8001a50:	199b      	adds	r3, r3, r6
 8001a52:	eb54 0408 	adcs.w	r4, r4, r8
 8001a56:	f145 0500 	adc.w	r5, r5, #0
 8001a5a:	690e      	ldr	r6, [r1, #16]
 8001a5c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001a60:	fba6 6808 	umull	r6, r8, r6, r8
 8001a64:	199b      	adds	r3, r3, r6
 8001a66:	eb54 0408 	adcs.w	r4, r4, r8
 8001a6a:	f145 0500 	adc.w	r5, r5, #0
 8001a6e:	694e      	ldr	r6, [r1, #20]
 8001a70:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001a74:	fba6 6808 	umull	r6, r8, r6, r8
 8001a78:	199b      	adds	r3, r3, r6
 8001a7a:	eb54 0408 	adcs.w	r4, r4, r8
 8001a7e:	f145 0500 	adc.w	r5, r5, #0
 8001a82:	698e      	ldr	r6, [r1, #24]
 8001a84:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8001a88:	fba6 6808 	umull	r6, r8, r6, r8
 8001a8c:	199b      	adds	r3, r3, r6
 8001a8e:	eb54 0408 	adcs.w	r4, r4, r8
 8001a92:	f145 0500 	adc.w	r5, r5, #0
 8001a96:	69ce      	ldr	r6, [r1, #28]
 8001a98:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001a9c:	fba6 6808 	umull	r6, r8, r6, r8
 8001aa0:	199b      	adds	r3, r3, r6
 8001aa2:	eb54 0408 	adcs.w	r4, r4, r8
 8001aa6:	f145 0500 	adc.w	r5, r5, #0
 8001aaa:	6243      	str	r3, [r0, #36]	; 0x24
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	68ce      	ldr	r6, [r1, #12]
 8001ab2:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8001ab6:	fba6 6808 	umull	r6, r8, r6, r8
 8001aba:	19a4      	adds	r4, r4, r6
 8001abc:	eb55 0508 	adcs.w	r5, r5, r8
 8001ac0:	f143 0300 	adc.w	r3, r3, #0
 8001ac4:	690e      	ldr	r6, [r1, #16]
 8001ac6:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001aca:	fba6 6808 	umull	r6, r8, r6, r8
 8001ace:	19a4      	adds	r4, r4, r6
 8001ad0:	eb55 0508 	adcs.w	r5, r5, r8
 8001ad4:	f143 0300 	adc.w	r3, r3, #0
 8001ad8:	694e      	ldr	r6, [r1, #20]
 8001ada:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001ade:	fba6 6808 	umull	r6, r8, r6, r8
 8001ae2:	19a4      	adds	r4, r4, r6
 8001ae4:	eb55 0508 	adcs.w	r5, r5, r8
 8001ae8:	f143 0300 	adc.w	r3, r3, #0
 8001aec:	698e      	ldr	r6, [r1, #24]
 8001aee:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001af2:	fba6 6808 	umull	r6, r8, r6, r8
 8001af6:	19a4      	adds	r4, r4, r6
 8001af8:	eb55 0508 	adcs.w	r5, r5, r8
 8001afc:	f143 0300 	adc.w	r3, r3, #0
 8001b00:	69ce      	ldr	r6, [r1, #28]
 8001b02:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8001b06:	fba6 6808 	umull	r6, r8, r6, r8
 8001b0a:	19a4      	adds	r4, r4, r6
 8001b0c:	eb55 0508 	adcs.w	r5, r5, r8
 8001b10:	f143 0300 	adc.w	r3, r3, #0
 8001b14:	6284      	str	r4, [r0, #40]	; 0x28
 8001b16:	f04f 0400 	mov.w	r4, #0
 8001b1a:	690e      	ldr	r6, [r1, #16]
 8001b1c:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8001b20:	fba6 6808 	umull	r6, r8, r6, r8
 8001b24:	19ad      	adds	r5, r5, r6
 8001b26:	eb53 0308 	adcs.w	r3, r3, r8
 8001b2a:	f144 0400 	adc.w	r4, r4, #0
 8001b2e:	694e      	ldr	r6, [r1, #20]
 8001b30:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001b34:	fba6 6808 	umull	r6, r8, r6, r8
 8001b38:	19ad      	adds	r5, r5, r6
 8001b3a:	eb53 0308 	adcs.w	r3, r3, r8
 8001b3e:	f144 0400 	adc.w	r4, r4, #0
 8001b42:	698e      	ldr	r6, [r1, #24]
 8001b44:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001b48:	fba6 6808 	umull	r6, r8, r6, r8
 8001b4c:	19ad      	adds	r5, r5, r6
 8001b4e:	eb53 0308 	adcs.w	r3, r3, r8
 8001b52:	f144 0400 	adc.w	r4, r4, #0
 8001b56:	69ce      	ldr	r6, [r1, #28]
 8001b58:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001b5c:	fba6 6808 	umull	r6, r8, r6, r8
 8001b60:	19ad      	adds	r5, r5, r6
 8001b62:	eb53 0308 	adcs.w	r3, r3, r8
 8001b66:	f144 0400 	adc.w	r4, r4, #0
 8001b6a:	62c5      	str	r5, [r0, #44]	; 0x2c
 8001b6c:	f04f 0500 	mov.w	r5, #0
 8001b70:	694e      	ldr	r6, [r1, #20]
 8001b72:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8001b76:	fba6 6808 	umull	r6, r8, r6, r8
 8001b7a:	199b      	adds	r3, r3, r6
 8001b7c:	eb54 0408 	adcs.w	r4, r4, r8
 8001b80:	f145 0500 	adc.w	r5, r5, #0
 8001b84:	698e      	ldr	r6, [r1, #24]
 8001b86:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001b8a:	fba6 6808 	umull	r6, r8, r6, r8
 8001b8e:	199b      	adds	r3, r3, r6
 8001b90:	eb54 0408 	adcs.w	r4, r4, r8
 8001b94:	f145 0500 	adc.w	r5, r5, #0
 8001b98:	69ce      	ldr	r6, [r1, #28]
 8001b9a:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001b9e:	fba6 6808 	umull	r6, r8, r6, r8
 8001ba2:	199b      	adds	r3, r3, r6
 8001ba4:	eb54 0408 	adcs.w	r4, r4, r8
 8001ba8:	f145 0500 	adc.w	r5, r5, #0
 8001bac:	6303      	str	r3, [r0, #48]	; 0x30
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	698e      	ldr	r6, [r1, #24]
 8001bb4:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8001bb8:	fba6 6808 	umull	r6, r8, r6, r8
 8001bbc:	19a4      	adds	r4, r4, r6
 8001bbe:	eb55 0508 	adcs.w	r5, r5, r8
 8001bc2:	f143 0300 	adc.w	r3, r3, #0
 8001bc6:	69ce      	ldr	r6, [r1, #28]
 8001bc8:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001bcc:	fba6 6808 	umull	r6, r8, r6, r8
 8001bd0:	19a4      	adds	r4, r4, r6
 8001bd2:	eb55 0508 	adcs.w	r5, r5, r8
 8001bd6:	f143 0300 	adc.w	r3, r3, #0
 8001bda:	6344      	str	r4, [r0, #52]	; 0x34
 8001bdc:	f04f 0400 	mov.w	r4, #0
 8001be0:	69ce      	ldr	r6, [r1, #28]
 8001be2:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8001be6:	fba6 6808 	umull	r6, r8, r6, r8
 8001bea:	19ad      	adds	r5, r5, r6
 8001bec:	eb43 0308 	adc.w	r3, r3, r8
 8001bf0:	6385      	str	r5, [r0, #56]	; 0x38
 8001bf2:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	687c      	ldr	r4, [r7, #4]
 8001bf8:	68bd      	ldr	r5, [r7, #8]
 8001bfa:	68fe      	ldr	r6, [r7, #12]
 8001bfc:	6003      	str	r3, [r0, #0]
 8001bfe:	6044      	str	r4, [r0, #4]
 8001c00:	6085      	str	r5, [r0, #8]
 8001c02:	60c6      	str	r6, [r0, #12]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	697c      	ldr	r4, [r7, #20]
 8001c08:	69bd      	ldr	r5, [r7, #24]
 8001c0a:	69fe      	ldr	r6, [r7, #28]
 8001c0c:	6103      	str	r3, [r0, #16]
 8001c0e:	6144      	str	r4, [r0, #20]
 8001c10:	6185      	str	r5, [r0, #24]
 8001c12:	61c6      	str	r6, [r0, #28]
        "str	r6, [%[r], #28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [tmp] "r" (tmp)
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );
}
 8001c14:	b009      	add	sp, #36	; 0x24
 8001c16:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001c1a:	4770      	bx	lr

08001c1c <sp_256_sqr_8>:
 *
 * r  A single precision integer.
 * a  A single precision integer.
 */
SP_NOINLINE static void sp_256_sqr_8(sp_digit* r, const sp_digit* a)
{
 8001c1c:	e92d 0f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp}
 8001c20:	b089      	sub	sp, #36	; 0x24
    sp_digit tmp_arr[8];
    sp_digit* tmp = tmp_arr;
    __asm__ __volatile__ (
 8001c22:	466a      	mov	r2, sp
 8001c24:	680e      	ldr	r6, [r1, #0]
 8001c26:	fba6 3406 	umull	r3, r4, r6, r6
 8001c2a:	f04f 0500 	mov.w	r5, #0
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001c38:	fba6 6808 	umull	r6, r8, r6, r8
 8001c3c:	19a4      	adds	r4, r4, r6
 8001c3e:	eb45 0508 	adc.w	r5, r5, r8
 8001c42:	19a4      	adds	r4, r4, r6
 8001c44:	eb55 0508 	adcs.w	r5, r5, r8
 8001c48:	f143 0300 	adc.w	r3, r3, #0
 8001c4c:	6054      	str	r4, [r2, #4]
 8001c4e:	f04f 0400 	mov.w	r4, #0
 8001c52:	680e      	ldr	r6, [r1, #0]
 8001c54:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8001c58:	fba6 6808 	umull	r6, r8, r6, r8
 8001c5c:	19ad      	adds	r5, r5, r6
 8001c5e:	eb43 0308 	adc.w	r3, r3, r8
 8001c62:	19ad      	adds	r5, r5, r6
 8001c64:	eb53 0308 	adcs.w	r3, r3, r8
 8001c68:	f144 0400 	adc.w	r4, r4, #0
 8001c6c:	684e      	ldr	r6, [r1, #4]
 8001c6e:	fba6 6806 	umull	r6, r8, r6, r6
 8001c72:	19ad      	adds	r5, r5, r6
 8001c74:	eb53 0308 	adcs.w	r3, r3, r8
 8001c78:	f144 0400 	adc.w	r4, r4, #0
 8001c7c:	6095      	str	r5, [r2, #8]
 8001c7e:	f04f 0500 	mov.w	r5, #0
 8001c82:	680e      	ldr	r6, [r1, #0]
 8001c84:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8001c88:	fba6 9a08 	umull	r9, sl, r6, r8
 8001c8c:	f04f 0b00 	mov.w	fp, #0
 8001c90:	684e      	ldr	r6, [r1, #4]
 8001c92:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8001c96:	fba6 6808 	umull	r6, r8, r6, r8
 8001c9a:	eb19 0906 	adds.w	r9, r9, r6
 8001c9e:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001ca2:	f14b 0b00 	adc.w	fp, fp, #0
 8001ca6:	eb19 0909 	adds.w	r9, r9, r9
 8001caa:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001cae:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001cb2:	eb13 0309 	adds.w	r3, r3, r9
 8001cb6:	eb54 040a 	adcs.w	r4, r4, sl
 8001cba:	eb45 050b 	adc.w	r5, r5, fp
 8001cbe:	60d3      	str	r3, [r2, #12]
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	680e      	ldr	r6, [r1, #0]
 8001cc6:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8001cca:	fba6 9a08 	umull	r9, sl, r6, r8
 8001cce:	f04f 0b00 	mov.w	fp, #0
 8001cd2:	684e      	ldr	r6, [r1, #4]
 8001cd4:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8001cd8:	fba6 6808 	umull	r6, r8, r6, r8
 8001cdc:	eb19 0906 	adds.w	r9, r9, r6
 8001ce0:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001ce4:	f14b 0b00 	adc.w	fp, fp, #0
 8001ce8:	688e      	ldr	r6, [r1, #8]
 8001cea:	fba6 6806 	umull	r6, r8, r6, r6
 8001cee:	19a4      	adds	r4, r4, r6
 8001cf0:	eb55 0508 	adcs.w	r5, r5, r8
 8001cf4:	f143 0300 	adc.w	r3, r3, #0
 8001cf8:	eb19 0909 	adds.w	r9, r9, r9
 8001cfc:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001d00:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001d04:	eb14 0409 	adds.w	r4, r4, r9
 8001d08:	eb55 050a 	adcs.w	r5, r5, sl
 8001d0c:	eb43 030b 	adc.w	r3, r3, fp
 8001d10:	6114      	str	r4, [r2, #16]
 8001d12:	f04f 0400 	mov.w	r4, #0
 8001d16:	680e      	ldr	r6, [r1, #0]
 8001d18:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001d1c:	fba6 9a08 	umull	r9, sl, r6, r8
 8001d20:	f04f 0b00 	mov.w	fp, #0
 8001d24:	684e      	ldr	r6, [r1, #4]
 8001d26:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8001d2a:	fba6 6808 	umull	r6, r8, r6, r8
 8001d2e:	eb19 0906 	adds.w	r9, r9, r6
 8001d32:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001d36:	f14b 0b00 	adc.w	fp, fp, #0
 8001d3a:	688e      	ldr	r6, [r1, #8]
 8001d3c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8001d40:	fba6 6808 	umull	r6, r8, r6, r8
 8001d44:	eb19 0906 	adds.w	r9, r9, r6
 8001d48:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001d4c:	f14b 0b00 	adc.w	fp, fp, #0
 8001d50:	eb19 0909 	adds.w	r9, r9, r9
 8001d54:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001d58:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001d5c:	eb15 0509 	adds.w	r5, r5, r9
 8001d60:	eb53 030a 	adcs.w	r3, r3, sl
 8001d64:	eb44 040b 	adc.w	r4, r4, fp
 8001d68:	6155      	str	r5, [r2, #20]
 8001d6a:	f04f 0500 	mov.w	r5, #0
 8001d6e:	680e      	ldr	r6, [r1, #0]
 8001d70:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001d74:	fba6 9a08 	umull	r9, sl, r6, r8
 8001d78:	f04f 0b00 	mov.w	fp, #0
 8001d7c:	684e      	ldr	r6, [r1, #4]
 8001d7e:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001d82:	fba6 6808 	umull	r6, r8, r6, r8
 8001d86:	eb19 0906 	adds.w	r9, r9, r6
 8001d8a:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001d8e:	f14b 0b00 	adc.w	fp, fp, #0
 8001d92:	688e      	ldr	r6, [r1, #8]
 8001d94:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8001d98:	fba6 6808 	umull	r6, r8, r6, r8
 8001d9c:	eb19 0906 	adds.w	r9, r9, r6
 8001da0:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001da4:	f14b 0b00 	adc.w	fp, fp, #0
 8001da8:	68ce      	ldr	r6, [r1, #12]
 8001daa:	fba6 6806 	umull	r6, r8, r6, r6
 8001dae:	199b      	adds	r3, r3, r6
 8001db0:	eb54 0408 	adcs.w	r4, r4, r8
 8001db4:	f145 0500 	adc.w	r5, r5, #0
 8001db8:	eb19 0909 	adds.w	r9, r9, r9
 8001dbc:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001dc0:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001dc4:	eb13 0309 	adds.w	r3, r3, r9
 8001dc8:	eb54 040a 	adcs.w	r4, r4, sl
 8001dcc:	eb45 050b 	adc.w	r5, r5, fp
 8001dd0:	6193      	str	r3, [r2, #24]
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	680e      	ldr	r6, [r1, #0]
 8001dd8:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001ddc:	fba6 9a08 	umull	r9, sl, r6, r8
 8001de0:	f04f 0b00 	mov.w	fp, #0
 8001de4:	684e      	ldr	r6, [r1, #4]
 8001de6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001dea:	fba6 6808 	umull	r6, r8, r6, r8
 8001dee:	eb19 0906 	adds.w	r9, r9, r6
 8001df2:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001df6:	f14b 0b00 	adc.w	fp, fp, #0
 8001dfa:	688e      	ldr	r6, [r1, #8]
 8001dfc:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001e00:	fba6 6808 	umull	r6, r8, r6, r8
 8001e04:	eb19 0906 	adds.w	r9, r9, r6
 8001e08:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001e0c:	f14b 0b00 	adc.w	fp, fp, #0
 8001e10:	68ce      	ldr	r6, [r1, #12]
 8001e12:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8001e16:	fba6 6808 	umull	r6, r8, r6, r8
 8001e1a:	eb19 0906 	adds.w	r9, r9, r6
 8001e1e:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001e22:	f14b 0b00 	adc.w	fp, fp, #0
 8001e26:	eb19 0909 	adds.w	r9, r9, r9
 8001e2a:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001e2e:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001e32:	eb14 0409 	adds.w	r4, r4, r9
 8001e36:	eb55 050a 	adcs.w	r5, r5, sl
 8001e3a:	eb43 030b 	adc.w	r3, r3, fp
 8001e3e:	61d4      	str	r4, [r2, #28]
 8001e40:	f04f 0400 	mov.w	r4, #0
 8001e44:	684e      	ldr	r6, [r1, #4]
 8001e46:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001e4a:	fba6 9a08 	umull	r9, sl, r6, r8
 8001e4e:	f04f 0b00 	mov.w	fp, #0
 8001e52:	688e      	ldr	r6, [r1, #8]
 8001e54:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001e58:	fba6 6808 	umull	r6, r8, r6, r8
 8001e5c:	eb19 0906 	adds.w	r9, r9, r6
 8001e60:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001e64:	f14b 0b00 	adc.w	fp, fp, #0
 8001e68:	68ce      	ldr	r6, [r1, #12]
 8001e6a:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001e6e:	fba6 6808 	umull	r6, r8, r6, r8
 8001e72:	eb19 0906 	adds.w	r9, r9, r6
 8001e76:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001e7a:	f14b 0b00 	adc.w	fp, fp, #0
 8001e7e:	690e      	ldr	r6, [r1, #16]
 8001e80:	fba6 6806 	umull	r6, r8, r6, r6
 8001e84:	19ad      	adds	r5, r5, r6
 8001e86:	eb53 0308 	adcs.w	r3, r3, r8
 8001e8a:	f144 0400 	adc.w	r4, r4, #0
 8001e8e:	eb19 0909 	adds.w	r9, r9, r9
 8001e92:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001e96:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001e9a:	eb15 0509 	adds.w	r5, r5, r9
 8001e9e:	eb53 030a 	adcs.w	r3, r3, sl
 8001ea2:	eb44 040b 	adc.w	r4, r4, fp
 8001ea6:	6205      	str	r5, [r0, #32]
 8001ea8:	f04f 0500 	mov.w	r5, #0
 8001eac:	688e      	ldr	r6, [r1, #8]
 8001eae:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001eb2:	fba6 9a08 	umull	r9, sl, r6, r8
 8001eb6:	f04f 0b00 	mov.w	fp, #0
 8001eba:	68ce      	ldr	r6, [r1, #12]
 8001ebc:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001ec0:	fba6 6808 	umull	r6, r8, r6, r8
 8001ec4:	eb19 0906 	adds.w	r9, r9, r6
 8001ec8:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001ecc:	f14b 0b00 	adc.w	fp, fp, #0
 8001ed0:	690e      	ldr	r6, [r1, #16]
 8001ed2:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001ed6:	fba6 6808 	umull	r6, r8, r6, r8
 8001eda:	eb19 0906 	adds.w	r9, r9, r6
 8001ede:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001ee2:	f14b 0b00 	adc.w	fp, fp, #0
 8001ee6:	eb19 0909 	adds.w	r9, r9, r9
 8001eea:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001eee:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001ef2:	eb13 0309 	adds.w	r3, r3, r9
 8001ef6:	eb54 040a 	adcs.w	r4, r4, sl
 8001efa:	eb45 050b 	adc.w	r5, r5, fp
 8001efe:	6243      	str	r3, [r0, #36]	; 0x24
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	68ce      	ldr	r6, [r1, #12]
 8001f06:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001f0a:	fba6 9a08 	umull	r9, sl, r6, r8
 8001f0e:	f04f 0b00 	mov.w	fp, #0
 8001f12:	690e      	ldr	r6, [r1, #16]
 8001f14:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001f18:	fba6 6808 	umull	r6, r8, r6, r8
 8001f1c:	eb19 0906 	adds.w	r9, r9, r6
 8001f20:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001f24:	f14b 0b00 	adc.w	fp, fp, #0
 8001f28:	694e      	ldr	r6, [r1, #20]
 8001f2a:	fba6 6806 	umull	r6, r8, r6, r6
 8001f2e:	19a4      	adds	r4, r4, r6
 8001f30:	eb55 0508 	adcs.w	r5, r5, r8
 8001f34:	f143 0300 	adc.w	r3, r3, #0
 8001f38:	eb19 0909 	adds.w	r9, r9, r9
 8001f3c:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001f40:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001f44:	eb14 0409 	adds.w	r4, r4, r9
 8001f48:	eb55 050a 	adcs.w	r5, r5, sl
 8001f4c:	eb43 030b 	adc.w	r3, r3, fp
 8001f50:	6284      	str	r4, [r0, #40]	; 0x28
 8001f52:	f04f 0400 	mov.w	r4, #0
 8001f56:	690e      	ldr	r6, [r1, #16]
 8001f58:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001f5c:	fba6 6808 	umull	r6, r8, r6, r8
 8001f60:	19ad      	adds	r5, r5, r6
 8001f62:	eb53 0308 	adcs.w	r3, r3, r8
 8001f66:	f144 0400 	adc.w	r4, r4, #0
 8001f6a:	19ad      	adds	r5, r5, r6
 8001f6c:	eb53 0308 	adcs.w	r3, r3, r8
 8001f70:	f144 0400 	adc.w	r4, r4, #0
 8001f74:	694e      	ldr	r6, [r1, #20]
 8001f76:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001f7a:	fba6 6808 	umull	r6, r8, r6, r8
 8001f7e:	19ad      	adds	r5, r5, r6
 8001f80:	eb53 0308 	adcs.w	r3, r3, r8
 8001f84:	f144 0400 	adc.w	r4, r4, #0
 8001f88:	19ad      	adds	r5, r5, r6
 8001f8a:	eb53 0308 	adcs.w	r3, r3, r8
 8001f8e:	f144 0400 	adc.w	r4, r4, #0
 8001f92:	62c5      	str	r5, [r0, #44]	; 0x2c
 8001f94:	f04f 0500 	mov.w	r5, #0
 8001f98:	694e      	ldr	r6, [r1, #20]
 8001f9a:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001f9e:	fba6 6808 	umull	r6, r8, r6, r8
 8001fa2:	199b      	adds	r3, r3, r6
 8001fa4:	eb54 0408 	adcs.w	r4, r4, r8
 8001fa8:	f145 0500 	adc.w	r5, r5, #0
 8001fac:	199b      	adds	r3, r3, r6
 8001fae:	eb54 0408 	adcs.w	r4, r4, r8
 8001fb2:	f145 0500 	adc.w	r5, r5, #0
 8001fb6:	698e      	ldr	r6, [r1, #24]
 8001fb8:	fba6 6806 	umull	r6, r8, r6, r6
 8001fbc:	199b      	adds	r3, r3, r6
 8001fbe:	eb54 0408 	adcs.w	r4, r4, r8
 8001fc2:	f145 0500 	adc.w	r5, r5, #0
 8001fc6:	6303      	str	r3, [r0, #48]	; 0x30
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	698e      	ldr	r6, [r1, #24]
 8001fce:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001fd2:	fba6 6808 	umull	r6, r8, r6, r8
 8001fd6:	19a4      	adds	r4, r4, r6
 8001fd8:	eb55 0508 	adcs.w	r5, r5, r8
 8001fdc:	f143 0300 	adc.w	r3, r3, #0
 8001fe0:	19a4      	adds	r4, r4, r6
 8001fe2:	eb55 0508 	adcs.w	r5, r5, r8
 8001fe6:	f143 0300 	adc.w	r3, r3, #0
 8001fea:	6344      	str	r4, [r0, #52]	; 0x34
 8001fec:	f04f 0400 	mov.w	r4, #0
 8001ff0:	69ce      	ldr	r6, [r1, #28]
 8001ff2:	fba6 6806 	umull	r6, r8, r6, r6
 8001ff6:	19ad      	adds	r5, r5, r6
 8001ff8:	eb43 0308 	adc.w	r3, r3, r8
 8001ffc:	6385      	str	r5, [r0, #56]	; 0x38
 8001ffe:	63c3      	str	r3, [r0, #60]	; 0x3c
 8002000:	6813      	ldr	r3, [r2, #0]
 8002002:	6854      	ldr	r4, [r2, #4]
 8002004:	6895      	ldr	r5, [r2, #8]
 8002006:	68d6      	ldr	r6, [r2, #12]
 8002008:	6003      	str	r3, [r0, #0]
 800200a:	6044      	str	r4, [r0, #4]
 800200c:	6085      	str	r5, [r0, #8]
 800200e:	60c6      	str	r6, [r0, #12]
 8002010:	6913      	ldr	r3, [r2, #16]
 8002012:	6954      	ldr	r4, [r2, #20]
 8002014:	6995      	ldr	r5, [r2, #24]
 8002016:	69d6      	ldr	r6, [r2, #28]
 8002018:	6103      	str	r3, [r0, #16]
 800201a:	6144      	str	r4, [r0, #20]
 800201c:	6185      	str	r5, [r0, #24]
 800201e:	61c6      	str	r6, [r0, #28]
        "str	r6, [%[r], #28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [tmp] "r" (tmp)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11"
    );
}
 8002020:	b009      	add	sp, #36	; 0x24
 8002022:	e8bd 0f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp}
 8002026:	4770      	bx	lr

08002028 <sp_256_add_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_add_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8002028:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
 800202c:	4603      	mov	r3, r0
    sp_digit c = 0;

    __asm__ __volatile__ (
 800202e:	2000      	movs	r0, #0
 8002030:	460e      	mov	r6, r1
 8002032:	f04f 0800 	mov.w	r8, #0
 8002036:	f106 0620 	add.w	r6, r6, #32
 800203a:	f1a8 0801 	sub.w	r8, r8, #1
 800203e:	eb10 0008 	adds.w	r0, r0, r8
 8002042:	680c      	ldr	r4, [r1, #0]
 8002044:	6815      	ldr	r5, [r2, #0]
 8002046:	416c      	adcs	r4, r5
 8002048:	601c      	str	r4, [r3, #0]
 800204a:	f04f 0000 	mov.w	r0, #0
 800204e:	eb40 0000 	adc.w	r0, r0, r0
 8002052:	f101 0104 	add.w	r1, r1, #4
 8002056:	f102 0204 	add.w	r2, r2, #4
 800205a:	f103 0304 	add.w	r3, r3, #4
 800205e:	42b1      	cmp	r1, r6
 8002060:	d1ed      	bne.n	800203e <sp_256_add_8+0x16>
        :
        : "memory", "r4", "r5", "r6", "r8"
    );

    return c;
}
 8002062:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8002066:	4770      	bx	lr

08002068 <sp_256_sub_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_sub_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8002068:	b470      	push	{r4, r5, r6}
 800206a:	4603      	mov	r3, r0
    sp_digit c = 0;

    __asm__ __volatile__ (
 800206c:	2000      	movs	r0, #0
 800206e:	460e      	mov	r6, r1
 8002070:	f106 0620 	add.w	r6, r6, #32
 8002074:	f04f 0500 	mov.w	r5, #0
 8002078:	1a2d      	subs	r5, r5, r0
 800207a:	680c      	ldr	r4, [r1, #0]
 800207c:	6815      	ldr	r5, [r2, #0]
 800207e:	41ac      	sbcs	r4, r5
 8002080:	601c      	str	r4, [r3, #0]
 8002082:	eb60 0000 	sbc.w	r0, r0, r0
 8002086:	f101 0104 	add.w	r1, r1, #4
 800208a:	f102 0204 	add.w	r2, r2, #4
 800208e:	f103 0304 	add.w	r3, r3, #4
 8002092:	42b1      	cmp	r1, r6
 8002094:	d1ee      	bne.n	8002074 <sp_256_sub_8+0xc>
        :
        : "memory", "r4", "r5", "r6"
    );

    return c;
}
 8002096:	bc70      	pop	{r4, r5, r6}
 8002098:	4770      	bx	lr

0800209a <sp_256_mod_mul_norm_8>:
 * r  The resulting Montgomery form number.
 * a  The number to convert.
 * m  The modulus (prime).
 */
static int sp_256_mod_mul_norm_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 800209a:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   (void)m;

    __asm__ __volatile__ (
 800209e:	b086      	sub	sp, #24
 80020a0:	680a      	ldr	r2, [r1, #0]
 80020a2:	684b      	ldr	r3, [r1, #4]
 80020a4:	688c      	ldr	r4, [r1, #8]
 80020a6:	68cd      	ldr	r5, [r1, #12]
 80020a8:	690e      	ldr	r6, [r1, #16]
 80020aa:	f8d1 8014 	ldr.w	r8, [r1, #20]
 80020ae:	f8d1 9018 	ldr.w	r9, [r1, #24]
 80020b2:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 80020b6:	f04f 0e00 	mov.w	lr, #0
 80020ba:	f04f 0c00 	mov.w	ip, #0
 80020be:	eb12 0b03 	adds.w	fp, r2, r3
 80020c2:	f14e 0e00 	adc.w	lr, lr, #0
 80020c6:	ebbb 0b05 	subs.w	fp, fp, r5
 80020ca:	f16c 0c00 	sbc.w	ip, ip, #0
 80020ce:	ebbb 0b06 	subs.w	fp, fp, r6
 80020d2:	f16c 0c00 	sbc.w	ip, ip, #0
 80020d6:	ebbb 0b08 	subs.w	fp, fp, r8
 80020da:	f16c 0c00 	sbc.w	ip, ip, #0
 80020de:	ebbb 0b09 	subs.w	fp, fp, r9
 80020e2:	f16c 0c00 	sbc.w	ip, ip, #0
 80020e6:	f8cd b000 	str.w	fp, [sp]
 80020ea:	f1cc 0c00 	rsb	ip, ip, #0
 80020ee:	f04f 0b00 	mov.w	fp, #0
 80020f2:	eb1e 0e03 	adds.w	lr, lr, r3
 80020f6:	f14b 0b00 	adc.w	fp, fp, #0
 80020fa:	eb1e 0e04 	adds.w	lr, lr, r4
 80020fe:	f14b 0b00 	adc.w	fp, fp, #0
 8002102:	ebbe 0e0c 	subs.w	lr, lr, ip
 8002106:	f04f 0c00 	mov.w	ip, #0
 800210a:	f16c 0c00 	sbc.w	ip, ip, #0
 800210e:	ebbe 0e06 	subs.w	lr, lr, r6
 8002112:	f16c 0c00 	sbc.w	ip, ip, #0
 8002116:	ebbe 0e08 	subs.w	lr, lr, r8
 800211a:	f16c 0c00 	sbc.w	ip, ip, #0
 800211e:	ebbe 0e09 	subs.w	lr, lr, r9
 8002122:	f16c 0c00 	sbc.w	ip, ip, #0
 8002126:	ebbe 0e0a 	subs.w	lr, lr, sl
 800212a:	f16c 0c00 	sbc.w	ip, ip, #0
 800212e:	f8cd e004 	str.w	lr, [sp, #4]
 8002132:	f1cc 0c00 	rsb	ip, ip, #0
 8002136:	f04f 0e00 	mov.w	lr, #0
 800213a:	eb1b 0b04 	adds.w	fp, fp, r4
 800213e:	f14e 0e00 	adc.w	lr, lr, #0
 8002142:	eb1b 0b05 	adds.w	fp, fp, r5
 8002146:	f14e 0e00 	adc.w	lr, lr, #0
 800214a:	ebbb 0b0c 	subs.w	fp, fp, ip
 800214e:	f04f 0c00 	mov.w	ip, #0
 8002152:	f16c 0c00 	sbc.w	ip, ip, #0
 8002156:	ebbb 0b08 	subs.w	fp, fp, r8
 800215a:	f16c 0c00 	sbc.w	ip, ip, #0
 800215e:	ebbb 0b09 	subs.w	fp, fp, r9
 8002162:	f16c 0c00 	sbc.w	ip, ip, #0
 8002166:	ebbb 0b0a 	subs.w	fp, fp, sl
 800216a:	f16c 0c00 	sbc.w	ip, ip, #0
 800216e:	f8cd b008 	str.w	fp, [sp, #8]
 8002172:	f1cc 0c00 	rsb	ip, ip, #0
 8002176:	f04f 0b00 	mov.w	fp, #0
 800217a:	eb1e 0e05 	adds.w	lr, lr, r5
 800217e:	f14b 0b00 	adc.w	fp, fp, #0
 8002182:	eb1e 0e05 	adds.w	lr, lr, r5
 8002186:	f14b 0b00 	adc.w	fp, fp, #0
 800218a:	eb1e 0e06 	adds.w	lr, lr, r6
 800218e:	f14b 0b00 	adc.w	fp, fp, #0
 8002192:	eb1e 0e06 	adds.w	lr, lr, r6
 8002196:	f14b 0b00 	adc.w	fp, fp, #0
 800219a:	eb1e 0e08 	adds.w	lr, lr, r8
 800219e:	f14b 0b00 	adc.w	fp, fp, #0
 80021a2:	ebbe 0e0c 	subs.w	lr, lr, ip
 80021a6:	f04f 0c00 	mov.w	ip, #0
 80021aa:	f16c 0c00 	sbc.w	ip, ip, #0
 80021ae:	ebbe 0e02 	subs.w	lr, lr, r2
 80021b2:	f16c 0c00 	sbc.w	ip, ip, #0
 80021b6:	ebbe 0e03 	subs.w	lr, lr, r3
 80021ba:	f16c 0c00 	sbc.w	ip, ip, #0
 80021be:	ebbe 0e0a 	subs.w	lr, lr, sl
 80021c2:	f16c 0c00 	sbc.w	ip, ip, #0
 80021c6:	f8cd e00c 	str.w	lr, [sp, #12]
 80021ca:	f1cc 0c00 	rsb	ip, ip, #0
 80021ce:	f04f 0e00 	mov.w	lr, #0
 80021d2:	eb1b 0b06 	adds.w	fp, fp, r6
 80021d6:	f14e 0e00 	adc.w	lr, lr, #0
 80021da:	eb1b 0b06 	adds.w	fp, fp, r6
 80021de:	f14e 0e00 	adc.w	lr, lr, #0
 80021e2:	eb1b 0b08 	adds.w	fp, fp, r8
 80021e6:	f14e 0e00 	adc.w	lr, lr, #0
 80021ea:	eb1b 0b08 	adds.w	fp, fp, r8
 80021ee:	f14e 0e00 	adc.w	lr, lr, #0
 80021f2:	eb1b 0b09 	adds.w	fp, fp, r9
 80021f6:	f14e 0e00 	adc.w	lr, lr, #0
 80021fa:	ebbb 0b0c 	subs.w	fp, fp, ip
 80021fe:	f04f 0c00 	mov.w	ip, #0
 8002202:	f16c 0c00 	sbc.w	ip, ip, #0
 8002206:	ebbb 0b03 	subs.w	fp, fp, r3
 800220a:	f16c 0c00 	sbc.w	ip, ip, #0
 800220e:	ebbb 0b04 	subs.w	fp, fp, r4
 8002212:	f16c 0c00 	sbc.w	ip, ip, #0
 8002216:	f8cd b010 	str.w	fp, [sp, #16]
 800221a:	f1cc 0c00 	rsb	ip, ip, #0
 800221e:	f04f 0b00 	mov.w	fp, #0
 8002222:	eb1e 0e08 	adds.w	lr, lr, r8
 8002226:	f14b 0b00 	adc.w	fp, fp, #0
 800222a:	eb1e 0e08 	adds.w	lr, lr, r8
 800222e:	f14b 0b00 	adc.w	fp, fp, #0
 8002232:	eb1e 0e09 	adds.w	lr, lr, r9
 8002236:	f14b 0b00 	adc.w	fp, fp, #0
 800223a:	eb1e 0e09 	adds.w	lr, lr, r9
 800223e:	f14b 0b00 	adc.w	fp, fp, #0
 8002242:	eb1e 0e0a 	adds.w	lr, lr, sl
 8002246:	f14b 0b00 	adc.w	fp, fp, #0
 800224a:	ebbe 0e0c 	subs.w	lr, lr, ip
 800224e:	f04f 0c00 	mov.w	ip, #0
 8002252:	f16c 0c00 	sbc.w	ip, ip, #0
 8002256:	ebbe 0e04 	subs.w	lr, lr, r4
 800225a:	f16c 0c00 	sbc.w	ip, ip, #0
 800225e:	ebbe 0e05 	subs.w	lr, lr, r5
 8002262:	f16c 0c00 	sbc.w	ip, ip, #0
 8002266:	f8cd e014 	str.w	lr, [sp, #20]
 800226a:	f1cc 0c00 	rsb	ip, ip, #0
 800226e:	f04f 0e00 	mov.w	lr, #0
 8002272:	eb1b 0b08 	adds.w	fp, fp, r8
 8002276:	f14e 0e00 	adc.w	lr, lr, #0
 800227a:	eb1b 0b09 	adds.w	fp, fp, r9
 800227e:	f14e 0e00 	adc.w	lr, lr, #0
 8002282:	eb1b 0b09 	adds.w	fp, fp, r9
 8002286:	f14e 0e00 	adc.w	lr, lr, #0
 800228a:	eb1b 0b09 	adds.w	fp, fp, r9
 800228e:	f14e 0e00 	adc.w	lr, lr, #0
 8002292:	eb1b 0b0a 	adds.w	fp, fp, sl
 8002296:	f14e 0e00 	adc.w	lr, lr, #0
 800229a:	eb1b 0b0a 	adds.w	fp, fp, sl
 800229e:	f14e 0e00 	adc.w	lr, lr, #0
 80022a2:	ebbb 0b0c 	subs.w	fp, fp, ip
 80022a6:	f04f 0c00 	mov.w	ip, #0
 80022aa:	f16c 0c00 	sbc.w	ip, ip, #0
 80022ae:	ebbb 0b02 	subs.w	fp, fp, r2
 80022b2:	f16c 0c00 	sbc.w	ip, ip, #0
 80022b6:	ebbb 0b03 	subs.w	fp, fp, r3
 80022ba:	f16c 0c00 	sbc.w	ip, ip, #0
 80022be:	46d9      	mov	r9, fp
 80022c0:	f1cc 0c00 	rsb	ip, ip, #0
 80022c4:	f04f 0b00 	mov.w	fp, #0
 80022c8:	eb1e 0e02 	adds.w	lr, lr, r2
 80022cc:	f14b 0b00 	adc.w	fp, fp, #0
 80022d0:	eb1e 0e0a 	adds.w	lr, lr, sl
 80022d4:	f14b 0b00 	adc.w	fp, fp, #0
 80022d8:	eb1e 0e0a 	adds.w	lr, lr, sl
 80022dc:	f14b 0b00 	adc.w	fp, fp, #0
 80022e0:	eb1e 0e0a 	adds.w	lr, lr, sl
 80022e4:	f14b 0b00 	adc.w	fp, fp, #0
 80022e8:	ebbe 0e0c 	subs.w	lr, lr, ip
 80022ec:	f04f 0c00 	mov.w	ip, #0
 80022f0:	f16c 0c00 	sbc.w	ip, ip, #0
 80022f4:	ebbe 0e04 	subs.w	lr, lr, r4
 80022f8:	f16c 0c00 	sbc.w	ip, ip, #0
 80022fc:	ebbe 0e05 	subs.w	lr, lr, r5
 8002300:	f16c 0c00 	sbc.w	ip, ip, #0
 8002304:	ebbe 0e06 	subs.w	lr, lr, r6
 8002308:	f16c 0c00 	sbc.w	ip, ip, #0
 800230c:	ebbe 0e08 	subs.w	lr, lr, r8
 8002310:	f16c 0c00 	sbc.w	ip, ip, #0
 8002314:	9a00      	ldr	r2, [sp, #0]
 8002316:	9b01      	ldr	r3, [sp, #4]
 8002318:	9c02      	ldr	r4, [sp, #8]
 800231a:	9d03      	ldr	r5, [sp, #12]
 800231c:	9e04      	ldr	r6, [sp, #16]
 800231e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8002322:	f1cc 0c00 	rsb	ip, ip, #0
 8002326:	eb12 020b 	adds.w	r2, r2, fp
 800232a:	f153 0300 	adcs.w	r3, r3, #0
 800232e:	f154 0400 	adcs.w	r4, r4, #0
 8002332:	eb15 050c 	adds.w	r5, r5, ip
 8002336:	f156 0600 	adcs.w	r6, r6, #0
 800233a:	f158 0800 	adcs.w	r8, r8, #0
 800233e:	eb59 090c 	adcs.w	r9, r9, ip
 8002342:	eb4e 0e0b 	adc.w	lr, lr, fp
 8002346:	ebb2 020c 	subs.w	r2, r2, ip
 800234a:	f173 0300 	sbcs.w	r3, r3, #0
 800234e:	f174 0400 	sbcs.w	r4, r4, #0
 8002352:	ebb5 050b 	subs.w	r5, r5, fp
 8002356:	f176 0600 	sbcs.w	r6, r6, #0
 800235a:	f178 0800 	sbcs.w	r8, r8, #0
 800235e:	eb79 090b 	sbcs.w	r9, r9, fp
 8002362:	eb6e 0e0c 	sbc.w	lr, lr, ip
 8002366:	6002      	str	r2, [r0, #0]
 8002368:	6043      	str	r3, [r0, #4]
 800236a:	6084      	str	r4, [r0, #8]
 800236c:	60c5      	str	r5, [r0, #12]
 800236e:	6106      	str	r6, [r0, #16]
 8002370:	f8c0 8014 	str.w	r8, [r0, #20]
 8002374:	f8c0 9018 	str.w	r9, [r0, #24]
 8002378:	f8c0 e01c 	str.w	lr, [r0, #28]
 800237c:	b006      	add	sp, #24
        : [r] "r" (r), [a] "r" (a)
        : "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r12"
    );

    return MP_OKAY;
}
 800237e:	2000      	movs	r0, #0
 8002380:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08002384 <sp_256_mont_mul_8>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
SP_NOINLINE static void sp_256_mont_mul_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m, sp_digit mp)
{
 8002384:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 8002388:	b091      	sub	sp, #68	; 0x44
 800238a:	f04f 0500 	mov.w	r5, #0
 800238e:	680e      	ldr	r6, [r1, #0]
 8002390:	f8d2 8000 	ldr.w	r8, [r2]
 8002394:	fba6 9a08 	umull	r9, sl, r6, r8
 8002398:	f8cd 9000 	str.w	r9, [sp]
 800239c:	680e      	ldr	r6, [r1, #0]
 800239e:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80023a2:	fba6 3408 	umull	r3, r4, r6, r8
 80023a6:	eb13 0a0a 	adds.w	sl, r3, sl
 80023aa:	f144 0b00 	adc.w	fp, r4, #0
 80023ae:	684e      	ldr	r6, [r1, #4]
 80023b0:	f8d2 8000 	ldr.w	r8, [r2]
 80023b4:	fba6 3408 	umull	r3, r4, r6, r8
 80023b8:	eb13 0a0a 	adds.w	sl, r3, sl
 80023bc:	eb54 0b0b 	adcs.w	fp, r4, fp
 80023c0:	f145 0e00 	adc.w	lr, r5, #0
 80023c4:	f8cd a004 	str.w	sl, [sp, #4]
 80023c8:	680e      	ldr	r6, [r1, #0]
 80023ca:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80023ce:	fba6 3408 	umull	r3, r4, r6, r8
 80023d2:	eb13 0b0b 	adds.w	fp, r3, fp
 80023d6:	eb44 0e0e 	adc.w	lr, r4, lr
 80023da:	684e      	ldr	r6, [r1, #4]
 80023dc:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80023e0:	fba6 3408 	umull	r3, r4, r6, r8
 80023e4:	eb13 0b0b 	adds.w	fp, r3, fp
 80023e8:	eb54 0e0e 	adcs.w	lr, r4, lr
 80023ec:	f145 0900 	adc.w	r9, r5, #0
 80023f0:	688e      	ldr	r6, [r1, #8]
 80023f2:	f8d2 8000 	ldr.w	r8, [r2]
 80023f6:	fba6 3408 	umull	r3, r4, r6, r8
 80023fa:	eb13 0b0b 	adds.w	fp, r3, fp
 80023fe:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002402:	eb45 0909 	adc.w	r9, r5, r9
 8002406:	f8cd b008 	str.w	fp, [sp, #8]
 800240a:	680e      	ldr	r6, [r1, #0]
 800240c:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8002410:	fba6 3408 	umull	r3, r4, r6, r8
 8002414:	eb13 0e0e 	adds.w	lr, r3, lr
 8002418:	eb54 0909 	adcs.w	r9, r4, r9
 800241c:	f145 0a00 	adc.w	sl, r5, #0
 8002420:	684e      	ldr	r6, [r1, #4]
 8002422:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002426:	fba6 3408 	umull	r3, r4, r6, r8
 800242a:	eb13 0e0e 	adds.w	lr, r3, lr
 800242e:	eb54 0909 	adcs.w	r9, r4, r9
 8002432:	eb45 0a0a 	adc.w	sl, r5, sl
 8002436:	688e      	ldr	r6, [r1, #8]
 8002438:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800243c:	fba6 3408 	umull	r3, r4, r6, r8
 8002440:	eb13 0e0e 	adds.w	lr, r3, lr
 8002444:	eb54 0909 	adcs.w	r9, r4, r9
 8002448:	eb45 0a0a 	adc.w	sl, r5, sl
 800244c:	68ce      	ldr	r6, [r1, #12]
 800244e:	f8d2 8000 	ldr.w	r8, [r2]
 8002452:	fba6 3408 	umull	r3, r4, r6, r8
 8002456:	eb13 0e0e 	adds.w	lr, r3, lr
 800245a:	eb54 0909 	adcs.w	r9, r4, r9
 800245e:	eb45 0a0a 	adc.w	sl, r5, sl
 8002462:	f8cd e00c 	str.w	lr, [sp, #12]
 8002466:	680e      	ldr	r6, [r1, #0]
 8002468:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800246c:	fba6 3408 	umull	r3, r4, r6, r8
 8002470:	eb13 0909 	adds.w	r9, r3, r9
 8002474:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002478:	f145 0b00 	adc.w	fp, r5, #0
 800247c:	684e      	ldr	r6, [r1, #4]
 800247e:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8002482:	fba6 3408 	umull	r3, r4, r6, r8
 8002486:	eb13 0909 	adds.w	r9, r3, r9
 800248a:	eb54 0a0a 	adcs.w	sl, r4, sl
 800248e:	eb45 0b0b 	adc.w	fp, r5, fp
 8002492:	688e      	ldr	r6, [r1, #8]
 8002494:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002498:	fba6 3408 	umull	r3, r4, r6, r8
 800249c:	eb13 0909 	adds.w	r9, r3, r9
 80024a0:	eb54 0a0a 	adcs.w	sl, r4, sl
 80024a4:	eb45 0b0b 	adc.w	fp, r5, fp
 80024a8:	68ce      	ldr	r6, [r1, #12]
 80024aa:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80024ae:	fba6 3408 	umull	r3, r4, r6, r8
 80024b2:	eb13 0909 	adds.w	r9, r3, r9
 80024b6:	eb54 0a0a 	adcs.w	sl, r4, sl
 80024ba:	eb45 0b0b 	adc.w	fp, r5, fp
 80024be:	690e      	ldr	r6, [r1, #16]
 80024c0:	f8d2 8000 	ldr.w	r8, [r2]
 80024c4:	fba6 3408 	umull	r3, r4, r6, r8
 80024c8:	eb13 0909 	adds.w	r9, r3, r9
 80024cc:	eb54 0a0a 	adcs.w	sl, r4, sl
 80024d0:	eb45 0b0b 	adc.w	fp, r5, fp
 80024d4:	f8cd 9010 	str.w	r9, [sp, #16]
 80024d8:	680e      	ldr	r6, [r1, #0]
 80024da:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80024de:	fba6 3408 	umull	r3, r4, r6, r8
 80024e2:	eb13 0a0a 	adds.w	sl, r3, sl
 80024e6:	eb54 0b0b 	adcs.w	fp, r4, fp
 80024ea:	f145 0e00 	adc.w	lr, r5, #0
 80024ee:	684e      	ldr	r6, [r1, #4]
 80024f0:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80024f4:	fba6 3408 	umull	r3, r4, r6, r8
 80024f8:	eb13 0a0a 	adds.w	sl, r3, sl
 80024fc:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002500:	eb45 0e0e 	adc.w	lr, r5, lr
 8002504:	688e      	ldr	r6, [r1, #8]
 8002506:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800250a:	fba6 3408 	umull	r3, r4, r6, r8
 800250e:	eb13 0a0a 	adds.w	sl, r3, sl
 8002512:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002516:	eb45 0e0e 	adc.w	lr, r5, lr
 800251a:	68ce      	ldr	r6, [r1, #12]
 800251c:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002520:	fba6 3408 	umull	r3, r4, r6, r8
 8002524:	eb13 0a0a 	adds.w	sl, r3, sl
 8002528:	eb54 0b0b 	adcs.w	fp, r4, fp
 800252c:	eb45 0e0e 	adc.w	lr, r5, lr
 8002530:	690e      	ldr	r6, [r1, #16]
 8002532:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8002536:	fba6 3408 	umull	r3, r4, r6, r8
 800253a:	eb13 0a0a 	adds.w	sl, r3, sl
 800253e:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002542:	eb45 0e0e 	adc.w	lr, r5, lr
 8002546:	694e      	ldr	r6, [r1, #20]
 8002548:	f8d2 8000 	ldr.w	r8, [r2]
 800254c:	fba6 3408 	umull	r3, r4, r6, r8
 8002550:	eb13 0a0a 	adds.w	sl, r3, sl
 8002554:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002558:	eb45 0e0e 	adc.w	lr, r5, lr
 800255c:	f8cd a014 	str.w	sl, [sp, #20]
 8002560:	680e      	ldr	r6, [r1, #0]
 8002562:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8002566:	fba6 3408 	umull	r3, r4, r6, r8
 800256a:	eb13 0b0b 	adds.w	fp, r3, fp
 800256e:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002572:	f145 0900 	adc.w	r9, r5, #0
 8002576:	684e      	ldr	r6, [r1, #4]
 8002578:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800257c:	fba6 3408 	umull	r3, r4, r6, r8
 8002580:	eb13 0b0b 	adds.w	fp, r3, fp
 8002584:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002588:	eb45 0909 	adc.w	r9, r5, r9
 800258c:	688e      	ldr	r6, [r1, #8]
 800258e:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8002592:	fba6 3408 	umull	r3, r4, r6, r8
 8002596:	eb13 0b0b 	adds.w	fp, r3, fp
 800259a:	eb54 0e0e 	adcs.w	lr, r4, lr
 800259e:	eb45 0909 	adc.w	r9, r5, r9
 80025a2:	68ce      	ldr	r6, [r1, #12]
 80025a4:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80025a8:	fba6 3408 	umull	r3, r4, r6, r8
 80025ac:	eb13 0b0b 	adds.w	fp, r3, fp
 80025b0:	eb54 0e0e 	adcs.w	lr, r4, lr
 80025b4:	eb45 0909 	adc.w	r9, r5, r9
 80025b8:	690e      	ldr	r6, [r1, #16]
 80025ba:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80025be:	fba6 3408 	umull	r3, r4, r6, r8
 80025c2:	eb13 0b0b 	adds.w	fp, r3, fp
 80025c6:	eb54 0e0e 	adcs.w	lr, r4, lr
 80025ca:	eb45 0909 	adc.w	r9, r5, r9
 80025ce:	694e      	ldr	r6, [r1, #20]
 80025d0:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80025d4:	fba6 3408 	umull	r3, r4, r6, r8
 80025d8:	eb13 0b0b 	adds.w	fp, r3, fp
 80025dc:	eb54 0e0e 	adcs.w	lr, r4, lr
 80025e0:	eb45 0909 	adc.w	r9, r5, r9
 80025e4:	698e      	ldr	r6, [r1, #24]
 80025e6:	f8d2 8000 	ldr.w	r8, [r2]
 80025ea:	fba6 3408 	umull	r3, r4, r6, r8
 80025ee:	eb13 0b0b 	adds.w	fp, r3, fp
 80025f2:	eb54 0e0e 	adcs.w	lr, r4, lr
 80025f6:	eb45 0909 	adc.w	r9, r5, r9
 80025fa:	f8cd b018 	str.w	fp, [sp, #24]
 80025fe:	680e      	ldr	r6, [r1, #0]
 8002600:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8002604:	fba6 3408 	umull	r3, r4, r6, r8
 8002608:	eb13 0e0e 	adds.w	lr, r3, lr
 800260c:	eb54 0909 	adcs.w	r9, r4, r9
 8002610:	f145 0a00 	adc.w	sl, r5, #0
 8002614:	684e      	ldr	r6, [r1, #4]
 8002616:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800261a:	fba6 3408 	umull	r3, r4, r6, r8
 800261e:	eb13 0e0e 	adds.w	lr, r3, lr
 8002622:	eb54 0909 	adcs.w	r9, r4, r9
 8002626:	eb45 0a0a 	adc.w	sl, r5, sl
 800262a:	688e      	ldr	r6, [r1, #8]
 800262c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8002630:	fba6 3408 	umull	r3, r4, r6, r8
 8002634:	eb13 0e0e 	adds.w	lr, r3, lr
 8002638:	eb54 0909 	adcs.w	r9, r4, r9
 800263c:	eb45 0a0a 	adc.w	sl, r5, sl
 8002640:	68ce      	ldr	r6, [r1, #12]
 8002642:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8002646:	fba6 3408 	umull	r3, r4, r6, r8
 800264a:	eb13 0e0e 	adds.w	lr, r3, lr
 800264e:	eb54 0909 	adcs.w	r9, r4, r9
 8002652:	eb45 0a0a 	adc.w	sl, r5, sl
 8002656:	690e      	ldr	r6, [r1, #16]
 8002658:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800265c:	fba6 3408 	umull	r3, r4, r6, r8
 8002660:	eb13 0e0e 	adds.w	lr, r3, lr
 8002664:	eb54 0909 	adcs.w	r9, r4, r9
 8002668:	eb45 0a0a 	adc.w	sl, r5, sl
 800266c:	694e      	ldr	r6, [r1, #20]
 800266e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002672:	fba6 3408 	umull	r3, r4, r6, r8
 8002676:	eb13 0e0e 	adds.w	lr, r3, lr
 800267a:	eb54 0909 	adcs.w	r9, r4, r9
 800267e:	eb45 0a0a 	adc.w	sl, r5, sl
 8002682:	698e      	ldr	r6, [r1, #24]
 8002684:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8002688:	fba6 3408 	umull	r3, r4, r6, r8
 800268c:	eb13 0e0e 	adds.w	lr, r3, lr
 8002690:	eb54 0909 	adcs.w	r9, r4, r9
 8002694:	eb45 0a0a 	adc.w	sl, r5, sl
 8002698:	69ce      	ldr	r6, [r1, #28]
 800269a:	f8d2 8000 	ldr.w	r8, [r2]
 800269e:	fba6 3408 	umull	r3, r4, r6, r8
 80026a2:	eb13 0e0e 	adds.w	lr, r3, lr
 80026a6:	eb54 0909 	adcs.w	r9, r4, r9
 80026aa:	eb45 0a0a 	adc.w	sl, r5, sl
 80026ae:	f8cd e01c 	str.w	lr, [sp, #28]
 80026b2:	684e      	ldr	r6, [r1, #4]
 80026b4:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80026b8:	fba6 3408 	umull	r3, r4, r6, r8
 80026bc:	eb13 0909 	adds.w	r9, r3, r9
 80026c0:	eb54 0a0a 	adcs.w	sl, r4, sl
 80026c4:	f145 0b00 	adc.w	fp, r5, #0
 80026c8:	688e      	ldr	r6, [r1, #8]
 80026ca:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80026ce:	fba6 3408 	umull	r3, r4, r6, r8
 80026d2:	eb13 0909 	adds.w	r9, r3, r9
 80026d6:	eb54 0a0a 	adcs.w	sl, r4, sl
 80026da:	eb45 0b0b 	adc.w	fp, r5, fp
 80026de:	68ce      	ldr	r6, [r1, #12]
 80026e0:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80026e4:	fba6 3408 	umull	r3, r4, r6, r8
 80026e8:	eb13 0909 	adds.w	r9, r3, r9
 80026ec:	eb54 0a0a 	adcs.w	sl, r4, sl
 80026f0:	eb45 0b0b 	adc.w	fp, r5, fp
 80026f4:	690e      	ldr	r6, [r1, #16]
 80026f6:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80026fa:	fba6 3408 	umull	r3, r4, r6, r8
 80026fe:	eb13 0909 	adds.w	r9, r3, r9
 8002702:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002706:	eb45 0b0b 	adc.w	fp, r5, fp
 800270a:	694e      	ldr	r6, [r1, #20]
 800270c:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8002710:	fba6 3408 	umull	r3, r4, r6, r8
 8002714:	eb13 0909 	adds.w	r9, r3, r9
 8002718:	eb54 0a0a 	adcs.w	sl, r4, sl
 800271c:	eb45 0b0b 	adc.w	fp, r5, fp
 8002720:	698e      	ldr	r6, [r1, #24]
 8002722:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002726:	fba6 3408 	umull	r3, r4, r6, r8
 800272a:	eb13 0909 	adds.w	r9, r3, r9
 800272e:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002732:	eb45 0b0b 	adc.w	fp, r5, fp
 8002736:	69ce      	ldr	r6, [r1, #28]
 8002738:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800273c:	fba6 3408 	umull	r3, r4, r6, r8
 8002740:	eb13 0909 	adds.w	r9, r3, r9
 8002744:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002748:	eb45 0b0b 	adc.w	fp, r5, fp
 800274c:	f8cd 9020 	str.w	r9, [sp, #32]
 8002750:	688e      	ldr	r6, [r1, #8]
 8002752:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8002756:	fba6 3408 	umull	r3, r4, r6, r8
 800275a:	eb13 0a0a 	adds.w	sl, r3, sl
 800275e:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002762:	f145 0e00 	adc.w	lr, r5, #0
 8002766:	68ce      	ldr	r6, [r1, #12]
 8002768:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800276c:	fba6 3408 	umull	r3, r4, r6, r8
 8002770:	eb13 0a0a 	adds.w	sl, r3, sl
 8002774:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002778:	eb45 0e0e 	adc.w	lr, r5, lr
 800277c:	690e      	ldr	r6, [r1, #16]
 800277e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8002782:	fba6 3408 	umull	r3, r4, r6, r8
 8002786:	eb13 0a0a 	adds.w	sl, r3, sl
 800278a:	eb54 0b0b 	adcs.w	fp, r4, fp
 800278e:	eb45 0e0e 	adc.w	lr, r5, lr
 8002792:	694e      	ldr	r6, [r1, #20]
 8002794:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8002798:	fba6 3408 	umull	r3, r4, r6, r8
 800279c:	eb13 0a0a 	adds.w	sl, r3, sl
 80027a0:	eb54 0b0b 	adcs.w	fp, r4, fp
 80027a4:	eb45 0e0e 	adc.w	lr, r5, lr
 80027a8:	698e      	ldr	r6, [r1, #24]
 80027aa:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80027ae:	fba6 3408 	umull	r3, r4, r6, r8
 80027b2:	eb13 0a0a 	adds.w	sl, r3, sl
 80027b6:	eb54 0b0b 	adcs.w	fp, r4, fp
 80027ba:	eb45 0e0e 	adc.w	lr, r5, lr
 80027be:	69ce      	ldr	r6, [r1, #28]
 80027c0:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80027c4:	fba6 3408 	umull	r3, r4, r6, r8
 80027c8:	eb13 0a0a 	adds.w	sl, r3, sl
 80027cc:	eb54 0b0b 	adcs.w	fp, r4, fp
 80027d0:	eb45 0e0e 	adc.w	lr, r5, lr
 80027d4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80027d8:	68ce      	ldr	r6, [r1, #12]
 80027da:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80027de:	fba6 3408 	umull	r3, r4, r6, r8
 80027e2:	eb13 0b0b 	adds.w	fp, r3, fp
 80027e6:	eb54 0e0e 	adcs.w	lr, r4, lr
 80027ea:	f145 0900 	adc.w	r9, r5, #0
 80027ee:	690e      	ldr	r6, [r1, #16]
 80027f0:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80027f4:	fba6 3408 	umull	r3, r4, r6, r8
 80027f8:	eb13 0b0b 	adds.w	fp, r3, fp
 80027fc:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002800:	eb45 0909 	adc.w	r9, r5, r9
 8002804:	694e      	ldr	r6, [r1, #20]
 8002806:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800280a:	fba6 3408 	umull	r3, r4, r6, r8
 800280e:	eb13 0b0b 	adds.w	fp, r3, fp
 8002812:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002816:	eb45 0909 	adc.w	r9, r5, r9
 800281a:	698e      	ldr	r6, [r1, #24]
 800281c:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8002820:	fba6 3408 	umull	r3, r4, r6, r8
 8002824:	eb13 0b0b 	adds.w	fp, r3, fp
 8002828:	eb54 0e0e 	adcs.w	lr, r4, lr
 800282c:	eb45 0909 	adc.w	r9, r5, r9
 8002830:	69ce      	ldr	r6, [r1, #28]
 8002832:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8002836:	fba6 3408 	umull	r3, r4, r6, r8
 800283a:	eb13 0b0b 	adds.w	fp, r3, fp
 800283e:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002842:	eb45 0909 	adc.w	r9, r5, r9
 8002846:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800284a:	690e      	ldr	r6, [r1, #16]
 800284c:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8002850:	fba6 3408 	umull	r3, r4, r6, r8
 8002854:	eb13 0e0e 	adds.w	lr, r3, lr
 8002858:	eb54 0909 	adcs.w	r9, r4, r9
 800285c:	f145 0a00 	adc.w	sl, r5, #0
 8002860:	694e      	ldr	r6, [r1, #20]
 8002862:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8002866:	fba6 3408 	umull	r3, r4, r6, r8
 800286a:	eb13 0e0e 	adds.w	lr, r3, lr
 800286e:	eb54 0909 	adcs.w	r9, r4, r9
 8002872:	eb45 0a0a 	adc.w	sl, r5, sl
 8002876:	698e      	ldr	r6, [r1, #24]
 8002878:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800287c:	fba6 3408 	umull	r3, r4, r6, r8
 8002880:	eb13 0e0e 	adds.w	lr, r3, lr
 8002884:	eb54 0909 	adcs.w	r9, r4, r9
 8002888:	eb45 0a0a 	adc.w	sl, r5, sl
 800288c:	69ce      	ldr	r6, [r1, #28]
 800288e:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8002892:	fba6 3408 	umull	r3, r4, r6, r8
 8002896:	eb13 0e0e 	adds.w	lr, r3, lr
 800289a:	eb54 0909 	adcs.w	r9, r4, r9
 800289e:	eb45 0a0a 	adc.w	sl, r5, sl
 80028a2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80028a6:	694e      	ldr	r6, [r1, #20]
 80028a8:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80028ac:	fba6 3408 	umull	r3, r4, r6, r8
 80028b0:	eb13 0909 	adds.w	r9, r3, r9
 80028b4:	eb54 0a0a 	adcs.w	sl, r4, sl
 80028b8:	f145 0b00 	adc.w	fp, r5, #0
 80028bc:	698e      	ldr	r6, [r1, #24]
 80028be:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80028c2:	fba6 3408 	umull	r3, r4, r6, r8
 80028c6:	eb13 0909 	adds.w	r9, r3, r9
 80028ca:	eb54 0a0a 	adcs.w	sl, r4, sl
 80028ce:	eb45 0b0b 	adc.w	fp, r5, fp
 80028d2:	69ce      	ldr	r6, [r1, #28]
 80028d4:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80028d8:	fba6 3408 	umull	r3, r4, r6, r8
 80028dc:	eb13 0909 	adds.w	r9, r3, r9
 80028e0:	eb54 0a0a 	adcs.w	sl, r4, sl
 80028e4:	eb45 0b0b 	adc.w	fp, r5, fp
 80028e8:	698e      	ldr	r6, [r1, #24]
 80028ea:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80028ee:	fba6 3408 	umull	r3, r4, r6, r8
 80028f2:	eb13 0a0a 	adds.w	sl, r3, sl
 80028f6:	eb54 0b0b 	adcs.w	fp, r4, fp
 80028fa:	f145 0e00 	adc.w	lr, r5, #0
 80028fe:	69ce      	ldr	r6, [r1, #28]
 8002900:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8002904:	fba6 3408 	umull	r3, r4, r6, r8
 8002908:	eb13 0a0a 	adds.w	sl, r3, sl
 800290c:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002910:	eb45 0e0e 	adc.w	lr, r5, lr
 8002914:	69ce      	ldr	r6, [r1, #28]
 8002916:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800291a:	fba6 3408 	umull	r3, r4, r6, r8
 800291e:	eb13 0b0b 	adds.w	fp, r3, fp
 8002922:	eb44 0e0e 	adc.w	lr, r4, lr
 8002926:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800292a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800292e:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8002932:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8002936:	9c00      	ldr	r4, [sp, #0]
 8002938:	9d01      	ldr	r5, [sp, #4]
 800293a:	9e02      	ldr	r6, [sp, #8]
 800293c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002940:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002944:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002948:	f8dd b018 	ldr.w	fp, [sp, #24]
 800294c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002950:	eb1b 0b04 	adds.w	fp, fp, r4
 8002954:	eb4e 0e05 	adc.w	lr, lr, r5
 8002958:	eb1b 0b04 	adds.w	fp, fp, r4
 800295c:	eb4e 0e05 	adc.w	lr, lr, r5
 8002960:	ebae 0e04 	sub.w	lr, lr, r4
 8002964:	4641      	mov	r1, r8
 8002966:	464a      	mov	r2, r9
 8002968:	eb18 0804 	adds.w	r8, r8, r4
 800296c:	eb59 0905 	adcs.w	r9, r9, r5
 8002970:	eb5a 0a06 	adcs.w	sl, sl, r6
 8002974:	eb5b 0b01 	adcs.w	fp, fp, r1
 8002978:	eb4e 0e02 	adc.w	lr, lr, r2
 800297c:	9400      	str	r4, [sp, #0]
 800297e:	9501      	str	r5, [sp, #4]
 8002980:	9602      	str	r6, [sp, #8]
 8002982:	f8cd 800c 	str.w	r8, [sp, #12]
 8002986:	f8cd 9010 	str.w	r9, [sp, #16]
 800298a:	f8cd a014 	str.w	sl, [sp, #20]
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	9b06      	ldr	r3, [sp, #24]
 8002994:	191b      	adds	r3, r3, r4
 8002996:	f141 0200 	adc.w	r2, r1, #0
 800299a:	eb13 0308 	adds.w	r3, r3, r8
 800299e:	f142 0200 	adc.w	r2, r2, #0
 80029a2:	f8cd b018 	str.w	fp, [sp, #24]
 80029a6:	9b07      	ldr	r3, [sp, #28]
 80029a8:	189b      	adds	r3, r3, r2
 80029aa:	f141 0200 	adc.w	r2, r1, #0
 80029ae:	195b      	adds	r3, r3, r5
 80029b0:	f142 0200 	adc.w	r2, r2, #0
 80029b4:	eb13 0309 	adds.w	r3, r3, r9
 80029b8:	f142 0200 	adc.w	r2, r2, #0
 80029bc:	f8cd e01c 	str.w	lr, [sp, #28]
 80029c0:	9310      	str	r3, [sp, #64]	; 0x40
 80029c2:	9b08      	ldr	r3, [sp, #32]
 80029c4:	189b      	adds	r3, r3, r2
 80029c6:	f141 0200 	adc.w	r2, r1, #0
 80029ca:	191b      	adds	r3, r3, r4
 80029cc:	f142 0200 	adc.w	r2, r2, #0
 80029d0:	199b      	adds	r3, r3, r6
 80029d2:	f142 0200 	adc.w	r2, r2, #0
 80029d6:	eb13 030a 	adds.w	r3, r3, sl
 80029da:	f142 0200 	adc.w	r2, r2, #0
 80029de:	9308      	str	r3, [sp, #32]
 80029e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80029e4:	189b      	adds	r3, r3, r2
 80029e6:	f154 0400 	adcs.w	r4, r4, #0
 80029ea:	f141 0200 	adc.w	r2, r1, #0
 80029ee:	195b      	adds	r3, r3, r5
 80029f0:	4174      	adcs	r4, r6
 80029f2:	f142 0200 	adc.w	r2, r2, #0
 80029f6:	eb13 0308 	adds.w	r3, r3, r8
 80029fa:	eb54 0409 	adcs.w	r4, r4, r9
 80029fe:	f142 0200 	adc.w	r2, r2, #0
 8002a02:	eb13 030b 	adds.w	r3, r3, fp
 8002a06:	eb54 040e 	adcs.w	r4, r4, lr
 8002a0a:	f142 0200 	adc.w	r2, r2, #0
 8002a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a10:	940a      	str	r4, [sp, #40]	; 0x28
 8002a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002a16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002a18:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002a1a:	189b      	adds	r3, r3, r2
 8002a1c:	f154 0400 	adcs.w	r4, r4, #0
 8002a20:	f155 0500 	adcs.w	r5, r5, #0
 8002a24:	f156 0600 	adcs.w	r6, r6, #0
 8002a28:	f141 0200 	adc.w	r2, r1, #0
 8002a2c:	eb13 0308 	adds.w	r3, r3, r8
 8002a30:	eb54 0409 	adcs.w	r4, r4, r9
 8002a34:	eb55 050a 	adcs.w	r5, r5, sl
 8002a38:	eb56 060b 	adcs.w	r6, r6, fp
 8002a3c:	f142 0200 	adc.w	r2, r2, #0
 8002a40:	eb13 030a 	adds.w	r3, r3, sl
 8002a44:	eb54 040b 	adcs.w	r4, r4, fp
 8002a48:	eb55 050e 	adcs.w	r5, r5, lr
 8002a4c:	f156 0600 	adcs.w	r6, r6, #0
 8002a50:	f142 0200 	adc.w	r2, r2, #0
 8002a54:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a56:	940c      	str	r4, [sp, #48]	; 0x30
 8002a58:	950d      	str	r5, [sp, #52]	; 0x34
 8002a5a:	960e      	str	r6, [sp, #56]	; 0x38
 8002a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002a5e:	189b      	adds	r3, r3, r2
 8002a60:	f141 0200 	adc.w	r2, r1, #0
 8002a64:	eb13 030e 	adds.w	r3, r3, lr
 8002a68:	f142 0200 	adc.w	r2, r2, #0
 8002a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002a6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002a70:	9c08      	ldr	r4, [sp, #32]
 8002a72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002a74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002a76:	f8dd 9000 	ldr.w	r9, [sp]
 8002a7a:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002a7e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002a82:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8002a86:	ebb3 0309 	subs.w	r3, r3, r9
 8002a8a:	eb74 040a 	sbcs.w	r4, r4, sl
 8002a8e:	eb75 050b 	sbcs.w	r5, r5, fp
 8002a92:	eb76 060e 	sbcs.w	r6, r6, lr
 8002a96:	9408      	str	r4, [sp, #32]
 8002a98:	9509      	str	r5, [sp, #36]	; 0x24
 8002a9a:	960a      	str	r6, [sp, #40]	; 0x28
 8002a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002aa0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002aa2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002aa4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002aa8:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002aac:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002ab0:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002ab4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002ab8:	eb73 0309 	sbcs.w	r3, r3, r9
 8002abc:	eb74 040a 	sbcs.w	r4, r4, sl
 8002ac0:	eb75 050b 	sbcs.w	r5, r5, fp
 8002ac4:	eb76 060e 	sbcs.w	r6, r6, lr
 8002ac8:	f168 0800 	sbc.w	r8, r8, #0
 8002acc:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ace:	940c      	str	r4, [sp, #48]	; 0x30
 8002ad0:	950d      	str	r5, [sp, #52]	; 0x34
 8002ad2:	960e      	str	r6, [sp, #56]	; 0x38
 8002ad4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8002ad8:	eba1 0202 	sub.w	r2, r1, r2
 8002adc:	f002 0101 	and.w	r1, r2, #1
 8002ae0:	9b08      	ldr	r3, [sp, #32]
 8002ae2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002ae4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002ae6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002ae8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002aec:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8002af0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8002af4:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	4194      	sbcs	r4, r2
 8002afc:	4195      	sbcs	r5, r2
 8002afe:	f176 0600 	sbcs.w	r6, r6, #0
 8002b02:	f178 0800 	sbcs.w	r8, r8, #0
 8002b06:	f179 0900 	sbcs.w	r9, r9, #0
 8002b0a:	eb7a 0a01 	sbcs.w	sl, sl, r1
 8002b0e:	eb6b 0b02 	sbc.w	fp, fp, r2
 8002b12:	6003      	str	r3, [r0, #0]
 8002b14:	6044      	str	r4, [r0, #4]
 8002b16:	6085      	str	r5, [r0, #8]
 8002b18:	60c6      	str	r6, [r0, #12]
 8002b1a:	f8c0 8010 	str.w	r8, [r0, #16]
 8002b1e:	f8c0 9014 	str.w	r9, [r0, #20]
 8002b22:	f8c0 a018 	str.w	sl, [r0, #24]
 8002b26:	f8c0 b01c 	str.w	fp, [r0, #28]
 8002b2a:	b011      	add	sp, #68	; 0x44
        "add   sp, sp, #68\n\t"
        : [a] "+r" (a), [b] "+r" (b)
        : [r] "r" (r)
        : "memory", "r9", "r10", "r11", "r14", "r3", "r4", "r5", "r6", "r8"
    );
}
 8002b2c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08002b30 <sp_256_mont_sqr_8>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
SP_NOINLINE static void sp_256_mont_sqr_8(sp_digit* r, const sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 8002b30:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 8002b34:	b091      	sub	sp, #68	; 0x44
 8002b36:	f04f 0500 	mov.w	r5, #0
 8002b3a:	680e      	ldr	r6, [r1, #0]
 8002b3c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002b40:	fba6 ab08 	umull	sl, fp, r6, r8
 8002b44:	f8cd a004 	str.w	sl, [sp, #4]
 8002b48:	680e      	ldr	r6, [r1, #0]
 8002b4a:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8002b4e:	fba6 3408 	umull	r3, r4, r6, r8
 8002b52:	eb13 0b0b 	adds.w	fp, r3, fp
 8002b56:	f144 0e00 	adc.w	lr, r4, #0
 8002b5a:	f8cd b008 	str.w	fp, [sp, #8]
 8002b5e:	680e      	ldr	r6, [r1, #0]
 8002b60:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002b64:	fba6 3408 	umull	r3, r4, r6, r8
 8002b68:	eb13 0e0e 	adds.w	lr, r3, lr
 8002b6c:	f144 0900 	adc.w	r9, r4, #0
 8002b70:	684e      	ldr	r6, [r1, #4]
 8002b72:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8002b76:	fba6 3408 	umull	r3, r4, r6, r8
 8002b7a:	eb13 0e0e 	adds.w	lr, r3, lr
 8002b7e:	eb54 0909 	adcs.w	r9, r4, r9
 8002b82:	f145 0a00 	adc.w	sl, r5, #0
 8002b86:	f8cd e00c 	str.w	lr, [sp, #12]
 8002b8a:	680e      	ldr	r6, [r1, #0]
 8002b8c:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8002b90:	fba6 3408 	umull	r3, r4, r6, r8
 8002b94:	eb13 0909 	adds.w	r9, r3, r9
 8002b98:	eb44 0a0a 	adc.w	sl, r4, sl
 8002b9c:	684e      	ldr	r6, [r1, #4]
 8002b9e:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002ba2:	fba6 3408 	umull	r3, r4, r6, r8
 8002ba6:	eb13 0909 	adds.w	r9, r3, r9
 8002baa:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002bae:	f145 0b00 	adc.w	fp, r5, #0
 8002bb2:	f8cd 9010 	str.w	r9, [sp, #16]
 8002bb6:	680e      	ldr	r6, [r1, #0]
 8002bb8:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002bbc:	fba6 3408 	umull	r3, r4, r6, r8
 8002bc0:	eb13 0a0a 	adds.w	sl, r3, sl
 8002bc4:	eb44 0b0b 	adc.w	fp, r4, fp
 8002bc8:	684e      	ldr	r6, [r1, #4]
 8002bca:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8002bce:	fba6 3408 	umull	r3, r4, r6, r8
 8002bd2:	eb13 0a0a 	adds.w	sl, r3, sl
 8002bd6:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002bda:	f145 0e00 	adc.w	lr, r5, #0
 8002bde:	688e      	ldr	r6, [r1, #8]
 8002be0:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002be4:	fba6 3408 	umull	r3, r4, r6, r8
 8002be8:	eb13 0a0a 	adds.w	sl, r3, sl
 8002bec:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002bf0:	eb45 0e0e 	adc.w	lr, r5, lr
 8002bf4:	f8cd a014 	str.w	sl, [sp, #20]
 8002bf8:	680e      	ldr	r6, [r1, #0]
 8002bfa:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002bfe:	fba6 3408 	umull	r3, r4, r6, r8
 8002c02:	eb13 0b0b 	adds.w	fp, r3, fp
 8002c06:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002c0a:	f145 0900 	adc.w	r9, r5, #0
 8002c0e:	684e      	ldr	r6, [r1, #4]
 8002c10:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002c14:	fba6 3408 	umull	r3, r4, r6, r8
 8002c18:	eb13 0b0b 	adds.w	fp, r3, fp
 8002c1c:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002c20:	eb45 0909 	adc.w	r9, r5, r9
 8002c24:	688e      	ldr	r6, [r1, #8]
 8002c26:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8002c2a:	fba6 3408 	umull	r3, r4, r6, r8
 8002c2e:	eb13 0b0b 	adds.w	fp, r3, fp
 8002c32:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002c36:	eb45 0909 	adc.w	r9, r5, r9
 8002c3a:	f8cd b018 	str.w	fp, [sp, #24]
 8002c3e:	680e      	ldr	r6, [r1, #0]
 8002c40:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002c44:	fba6 3408 	umull	r3, r4, r6, r8
 8002c48:	eb13 0e0e 	adds.w	lr, r3, lr
 8002c4c:	eb54 0909 	adcs.w	r9, r4, r9
 8002c50:	f145 0a00 	adc.w	sl, r5, #0
 8002c54:	684e      	ldr	r6, [r1, #4]
 8002c56:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002c5a:	fba6 3408 	umull	r3, r4, r6, r8
 8002c5e:	eb13 0e0e 	adds.w	lr, r3, lr
 8002c62:	eb54 0909 	adcs.w	r9, r4, r9
 8002c66:	eb45 0a0a 	adc.w	sl, r5, sl
 8002c6a:	688e      	ldr	r6, [r1, #8]
 8002c6c:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002c70:	fba6 3408 	umull	r3, r4, r6, r8
 8002c74:	eb13 0e0e 	adds.w	lr, r3, lr
 8002c78:	eb54 0909 	adcs.w	r9, r4, r9
 8002c7c:	eb45 0a0a 	adc.w	sl, r5, sl
 8002c80:	68ce      	ldr	r6, [r1, #12]
 8002c82:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8002c86:	fba6 3408 	umull	r3, r4, r6, r8
 8002c8a:	eb13 0e0e 	adds.w	lr, r3, lr
 8002c8e:	eb54 0909 	adcs.w	r9, r4, r9
 8002c92:	eb45 0a0a 	adc.w	sl, r5, sl
 8002c96:	f8cd e01c 	str.w	lr, [sp, #28]
 8002c9a:	684e      	ldr	r6, [r1, #4]
 8002c9c:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002ca0:	fba6 3408 	umull	r3, r4, r6, r8
 8002ca4:	eb13 0909 	adds.w	r9, r3, r9
 8002ca8:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002cac:	f145 0b00 	adc.w	fp, r5, #0
 8002cb0:	688e      	ldr	r6, [r1, #8]
 8002cb2:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002cb6:	fba6 3408 	umull	r3, r4, r6, r8
 8002cba:	eb13 0909 	adds.w	r9, r3, r9
 8002cbe:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002cc2:	eb45 0b0b 	adc.w	fp, r5, fp
 8002cc6:	68ce      	ldr	r6, [r1, #12]
 8002cc8:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002ccc:	fba6 3408 	umull	r3, r4, r6, r8
 8002cd0:	eb13 0909 	adds.w	r9, r3, r9
 8002cd4:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002cd8:	eb45 0b0b 	adc.w	fp, r5, fp
 8002cdc:	f8cd 9020 	str.w	r9, [sp, #32]
 8002ce0:	688e      	ldr	r6, [r1, #8]
 8002ce2:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002ce6:	fba6 3408 	umull	r3, r4, r6, r8
 8002cea:	eb13 0a0a 	adds.w	sl, r3, sl
 8002cee:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002cf2:	f145 0e00 	adc.w	lr, r5, #0
 8002cf6:	68ce      	ldr	r6, [r1, #12]
 8002cf8:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002cfc:	fba6 3408 	umull	r3, r4, r6, r8
 8002d00:	eb13 0a0a 	adds.w	sl, r3, sl
 8002d04:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002d08:	eb45 0e0e 	adc.w	lr, r5, lr
 8002d0c:	690e      	ldr	r6, [r1, #16]
 8002d0e:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002d12:	fba6 3408 	umull	r3, r4, r6, r8
 8002d16:	eb13 0a0a 	adds.w	sl, r3, sl
 8002d1a:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002d1e:	eb45 0e0e 	adc.w	lr, r5, lr
 8002d22:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8002d26:	68ce      	ldr	r6, [r1, #12]
 8002d28:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002d2c:	fba6 3408 	umull	r3, r4, r6, r8
 8002d30:	eb13 0b0b 	adds.w	fp, r3, fp
 8002d34:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002d38:	f145 0900 	adc.w	r9, r5, #0
 8002d3c:	690e      	ldr	r6, [r1, #16]
 8002d3e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002d42:	fba6 3408 	umull	r3, r4, r6, r8
 8002d46:	eb13 0b0b 	adds.w	fp, r3, fp
 8002d4a:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002d4e:	eb45 0909 	adc.w	r9, r5, r9
 8002d52:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8002d56:	690e      	ldr	r6, [r1, #16]
 8002d58:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002d5c:	fba6 3408 	umull	r3, r4, r6, r8
 8002d60:	eb13 0e0e 	adds.w	lr, r3, lr
 8002d64:	eb54 0909 	adcs.w	r9, r4, r9
 8002d68:	f145 0a00 	adc.w	sl, r5, #0
 8002d6c:	694e      	ldr	r6, [r1, #20]
 8002d6e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002d72:	fba6 3408 	umull	r3, r4, r6, r8
 8002d76:	eb13 0e0e 	adds.w	lr, r3, lr
 8002d7a:	eb54 0909 	adcs.w	r9, r4, r9
 8002d7e:	eb45 0a0a 	adc.w	sl, r5, sl
 8002d82:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8002d86:	694e      	ldr	r6, [r1, #20]
 8002d88:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002d8c:	fba6 3408 	umull	r3, r4, r6, r8
 8002d90:	eb13 0909 	adds.w	r9, r3, r9
 8002d94:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002d98:	f145 0b00 	adc.w	fp, r5, #0
 8002d9c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8002da0:	698e      	ldr	r6, [r1, #24]
 8002da2:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002da6:	fba6 3408 	umull	r3, r4, r6, r8
 8002daa:	eb13 0a0a 	adds.w	sl, r3, sl
 8002dae:	eb44 0b0b 	adc.w	fp, r4, fp
 8002db2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8002db6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8002dba:	9c01      	ldr	r4, [sp, #4]
 8002dbc:	9e02      	ldr	r6, [sp, #8]
 8002dbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002dc2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002dc6:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002dca:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002dce:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002dd2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8002dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd8:	1924      	adds	r4, r4, r4
 8002dda:	4176      	adcs	r6, r6
 8002ddc:	eb58 0808 	adcs.w	r8, r8, r8
 8002de0:	eb59 0909 	adcs.w	r9, r9, r9
 8002de4:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8002de8:	eb5b 0b0b 	adcs.w	fp, fp, fp
 8002dec:	eb5e 0e0e 	adcs.w	lr, lr, lr
 8002df0:	eb5c 0c0c 	adcs.w	ip, ip, ip
 8002df4:	415b      	adcs	r3, r3
 8002df6:	9401      	str	r4, [sp, #4]
 8002df8:	9602      	str	r6, [sp, #8]
 8002dfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dfe:	f8cd 9010 	str.w	r9, [sp, #16]
 8002e02:	f8cd a014 	str.w	sl, [sp, #20]
 8002e06:	f8cd b018 	str.w	fp, [sp, #24]
 8002e0a:	f8cd e01c 	str.w	lr, [sp, #28]
 8002e0e:	f8cd c020 	str.w	ip, [sp, #32]
 8002e12:	9309      	str	r3, [sp, #36]	; 0x24
 8002e14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002e16:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002e18:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002e1c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8002e20:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8002e24:	4164      	adcs	r4, r4
 8002e26:	4176      	adcs	r6, r6
 8002e28:	eb58 0808 	adcs.w	r8, r8, r8
 8002e2c:	eb59 0909 	adcs.w	r9, r9, r9
 8002e30:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8002e34:	940a      	str	r4, [sp, #40]	; 0x28
 8002e36:	960b      	str	r6, [sp, #44]	; 0x2c
 8002e38:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8002e3c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8002e40:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8002e44:	f145 0b00 	adc.w	fp, r5, #0
 8002e48:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8002e4c:	9c01      	ldr	r4, [sp, #4]
 8002e4e:	9d02      	ldr	r5, [sp, #8]
 8002e50:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002e54:	680e      	ldr	r6, [r1, #0]
 8002e56:	fba6 9a06 	umull	r9, sl, r6, r6
 8002e5a:	684e      	ldr	r6, [r1, #4]
 8002e5c:	fba6 be06 	umull	fp, lr, r6, r6
 8002e60:	eb1a 0a04 	adds.w	sl, sl, r4
 8002e64:	eb5b 0b05 	adcs.w	fp, fp, r5
 8002e68:	eb5e 0e0c 	adcs.w	lr, lr, ip
 8002e6c:	f8cd 9000 	str.w	r9, [sp]
 8002e70:	f8cd a004 	str.w	sl, [sp, #4]
 8002e74:	f8cd b008 	str.w	fp, [sp, #8]
 8002e78:	f8cd e00c 	str.w	lr, [sp, #12]
 8002e7c:	9b04      	ldr	r3, [sp, #16]
 8002e7e:	9c05      	ldr	r4, [sp, #20]
 8002e80:	9d06      	ldr	r5, [sp, #24]
 8002e82:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8002e86:	688e      	ldr	r6, [r1, #8]
 8002e88:	fba6 9a06 	umull	r9, sl, r6, r6
 8002e8c:	68ce      	ldr	r6, [r1, #12]
 8002e8e:	fba6 be06 	umull	fp, lr, r6, r6
 8002e92:	eb59 0903 	adcs.w	r9, r9, r3
 8002e96:	eb5a 0a04 	adcs.w	sl, sl, r4
 8002e9a:	eb5b 0b05 	adcs.w	fp, fp, r5
 8002e9e:	eb5e 0e0c 	adcs.w	lr, lr, ip
 8002ea2:	f8cd 9010 	str.w	r9, [sp, #16]
 8002ea6:	f8cd a014 	str.w	sl, [sp, #20]
 8002eaa:	f8cd b018 	str.w	fp, [sp, #24]
 8002eae:	f8cd e01c 	str.w	lr, [sp, #28]
 8002eb2:	9b08      	ldr	r3, [sp, #32]
 8002eb4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002eb6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002eb8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002ebc:	690e      	ldr	r6, [r1, #16]
 8002ebe:	fba6 9a06 	umull	r9, sl, r6, r6
 8002ec2:	694e      	ldr	r6, [r1, #20]
 8002ec4:	fba6 be06 	umull	fp, lr, r6, r6
 8002ec8:	eb59 0903 	adcs.w	r9, r9, r3
 8002ecc:	eb5a 0a04 	adcs.w	sl, sl, r4
 8002ed0:	eb5b 0b05 	adcs.w	fp, fp, r5
 8002ed4:	eb5e 0e0c 	adcs.w	lr, lr, ip
 8002ed8:	f8cd 9020 	str.w	r9, [sp, #32]
 8002edc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8002ee0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8002ee4:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8002ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002eea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002eec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002eee:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8002ef2:	698e      	ldr	r6, [r1, #24]
 8002ef4:	fba6 9a06 	umull	r9, sl, r6, r6
 8002ef8:	69ce      	ldr	r6, [r1, #28]
 8002efa:	fba6 be06 	umull	fp, lr, r6, r6
 8002efe:	eb59 0903 	adcs.w	r9, r9, r3
 8002f02:	eb5a 0a04 	adcs.w	sl, sl, r4
 8002f06:	eb5b 0b05 	adcs.w	fp, fp, r5
 8002f0a:	eb4e 0e0c 	adc.w	lr, lr, ip
 8002f0e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8002f12:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8002f16:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8002f1a:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8002f1e:	9c00      	ldr	r4, [sp, #0]
 8002f20:	9d01      	ldr	r5, [sp, #4]
 8002f22:	9e02      	ldr	r6, [sp, #8]
 8002f24:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002f28:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002f2c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002f30:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002f34:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002f38:	eb1b 0b04 	adds.w	fp, fp, r4
 8002f3c:	eb4e 0e05 	adc.w	lr, lr, r5
 8002f40:	eb1b 0b04 	adds.w	fp, fp, r4
 8002f44:	eb4e 0e05 	adc.w	lr, lr, r5
 8002f48:	ebae 0e04 	sub.w	lr, lr, r4
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	46cc      	mov	ip, r9
 8002f50:	eb18 0804 	adds.w	r8, r8, r4
 8002f54:	eb59 0905 	adcs.w	r9, r9, r5
 8002f58:	eb5a 0a06 	adcs.w	sl, sl, r6
 8002f5c:	eb5b 0b01 	adcs.w	fp, fp, r1
 8002f60:	eb4e 0e0c 	adc.w	lr, lr, ip
 8002f64:	9400      	str	r4, [sp, #0]
 8002f66:	9501      	str	r5, [sp, #4]
 8002f68:	9602      	str	r6, [sp, #8]
 8002f6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f6e:	f8cd 9010 	str.w	r9, [sp, #16]
 8002f72:	f8cd a014 	str.w	sl, [sp, #20]
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	9b06      	ldr	r3, [sp, #24]
 8002f7c:	191b      	adds	r3, r3, r4
 8002f7e:	f141 0c00 	adc.w	ip, r1, #0
 8002f82:	eb13 0308 	adds.w	r3, r3, r8
 8002f86:	f14c 0c00 	adc.w	ip, ip, #0
 8002f8a:	f8cd b018 	str.w	fp, [sp, #24]
 8002f8e:	9b07      	ldr	r3, [sp, #28]
 8002f90:	eb13 030c 	adds.w	r3, r3, ip
 8002f94:	f141 0c00 	adc.w	ip, r1, #0
 8002f98:	195b      	adds	r3, r3, r5
 8002f9a:	f14c 0c00 	adc.w	ip, ip, #0
 8002f9e:	eb13 0309 	adds.w	r3, r3, r9
 8002fa2:	f14c 0c00 	adc.w	ip, ip, #0
 8002fa6:	f8cd e01c 	str.w	lr, [sp, #28]
 8002faa:	9310      	str	r3, [sp, #64]	; 0x40
 8002fac:	9b08      	ldr	r3, [sp, #32]
 8002fae:	eb13 030c 	adds.w	r3, r3, ip
 8002fb2:	f141 0c00 	adc.w	ip, r1, #0
 8002fb6:	191b      	adds	r3, r3, r4
 8002fb8:	f14c 0c00 	adc.w	ip, ip, #0
 8002fbc:	199b      	adds	r3, r3, r6
 8002fbe:	f14c 0c00 	adc.w	ip, ip, #0
 8002fc2:	eb13 030a 	adds.w	r3, r3, sl
 8002fc6:	f14c 0c00 	adc.w	ip, ip, #0
 8002fca:	9308      	str	r3, [sp, #32]
 8002fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002fd0:	eb13 030c 	adds.w	r3, r3, ip
 8002fd4:	f154 0400 	adcs.w	r4, r4, #0
 8002fd8:	f141 0c00 	adc.w	ip, r1, #0
 8002fdc:	195b      	adds	r3, r3, r5
 8002fde:	4174      	adcs	r4, r6
 8002fe0:	f14c 0c00 	adc.w	ip, ip, #0
 8002fe4:	eb13 0308 	adds.w	r3, r3, r8
 8002fe8:	eb54 0409 	adcs.w	r4, r4, r9
 8002fec:	f14c 0c00 	adc.w	ip, ip, #0
 8002ff0:	eb13 030b 	adds.w	r3, r3, fp
 8002ff4:	eb54 040e 	adcs.w	r4, r4, lr
 8002ff8:	f14c 0c00 	adc.w	ip, ip, #0
 8002ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8002ffe:	940a      	str	r4, [sp, #40]	; 0x28
 8003000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003002:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003004:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003006:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8003008:	eb13 030c 	adds.w	r3, r3, ip
 800300c:	f154 0400 	adcs.w	r4, r4, #0
 8003010:	f155 0500 	adcs.w	r5, r5, #0
 8003014:	f156 0600 	adcs.w	r6, r6, #0
 8003018:	f141 0c00 	adc.w	ip, r1, #0
 800301c:	eb13 0308 	adds.w	r3, r3, r8
 8003020:	eb54 0409 	adcs.w	r4, r4, r9
 8003024:	eb55 050a 	adcs.w	r5, r5, sl
 8003028:	eb56 060b 	adcs.w	r6, r6, fp
 800302c:	f14c 0c00 	adc.w	ip, ip, #0
 8003030:	eb13 030a 	adds.w	r3, r3, sl
 8003034:	eb54 040b 	adcs.w	r4, r4, fp
 8003038:	eb55 050e 	adcs.w	r5, r5, lr
 800303c:	f156 0600 	adcs.w	r6, r6, #0
 8003040:	f14c 0c00 	adc.w	ip, ip, #0
 8003044:	930b      	str	r3, [sp, #44]	; 0x2c
 8003046:	940c      	str	r4, [sp, #48]	; 0x30
 8003048:	950d      	str	r5, [sp, #52]	; 0x34
 800304a:	960e      	str	r6, [sp, #56]	; 0x38
 800304c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800304e:	eb13 030c 	adds.w	r3, r3, ip
 8003052:	f141 0c00 	adc.w	ip, r1, #0
 8003056:	eb13 030e 	adds.w	r3, r3, lr
 800305a:	f14c 0c00 	adc.w	ip, ip, #0
 800305e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003060:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003062:	9c08      	ldr	r4, [sp, #32]
 8003064:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003066:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003068:	f8dd 9000 	ldr.w	r9, [sp]
 800306c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8003070:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003074:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8003078:	ebb3 0309 	subs.w	r3, r3, r9
 800307c:	eb74 040a 	sbcs.w	r4, r4, sl
 8003080:	eb75 050b 	sbcs.w	r5, r5, fp
 8003084:	eb76 060e 	sbcs.w	r6, r6, lr
 8003088:	9408      	str	r4, [sp, #32]
 800308a:	9509      	str	r5, [sp, #36]	; 0x24
 800308c:	960a      	str	r6, [sp, #40]	; 0x28
 800308e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003090:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003092:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003094:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8003096:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800309a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800309e:	f8dd a014 	ldr.w	sl, [sp, #20]
 80030a2:	f8dd b018 	ldr.w	fp, [sp, #24]
 80030a6:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80030aa:	eb73 0309 	sbcs.w	r3, r3, r9
 80030ae:	eb74 040a 	sbcs.w	r4, r4, sl
 80030b2:	eb75 050b 	sbcs.w	r5, r5, fp
 80030b6:	eb76 060e 	sbcs.w	r6, r6, lr
 80030ba:	f168 0800 	sbc.w	r8, r8, #0
 80030be:	930b      	str	r3, [sp, #44]	; 0x2c
 80030c0:	940c      	str	r4, [sp, #48]	; 0x30
 80030c2:	950d      	str	r5, [sp, #52]	; 0x34
 80030c4:	960e      	str	r6, [sp, #56]	; 0x38
 80030c6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80030ca:	eba1 0c0c 	sub.w	ip, r1, ip
 80030ce:	f00c 0101 	and.w	r1, ip, #1
 80030d2:	9b08      	ldr	r3, [sp, #32]
 80030d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80030d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80030d8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80030da:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80030de:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80030e2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80030e6:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80030ea:	ebb3 030c 	subs.w	r3, r3, ip
 80030ee:	eb74 040c 	sbcs.w	r4, r4, ip
 80030f2:	eb75 050c 	sbcs.w	r5, r5, ip
 80030f6:	f176 0600 	sbcs.w	r6, r6, #0
 80030fa:	f178 0800 	sbcs.w	r8, r8, #0
 80030fe:	f179 0900 	sbcs.w	r9, r9, #0
 8003102:	eb7a 0a01 	sbcs.w	sl, sl, r1
 8003106:	eb6b 0b0c 	sbc.w	fp, fp, ip
 800310a:	6003      	str	r3, [r0, #0]
 800310c:	6044      	str	r4, [r0, #4]
 800310e:	6085      	str	r5, [r0, #8]
 8003110:	60c6      	str	r6, [r0, #12]
 8003112:	f8c0 8010 	str.w	r8, [r0, #16]
 8003116:	f8c0 9014 	str.w	r9, [r0, #20]
 800311a:	f8c0 a018 	str.w	sl, [r0, #24]
 800311e:	f8c0 b01c 	str.w	fp, [r0, #28]
 8003122:	b011      	add	sp, #68	; 0x44
        "add   sp, sp, #68\n\t"
        : [a] "+r" (a)
        : [r] "r" (r)
        : "memory", "r9", "r10", "r11", "r14", "r3", "r4", "r5", "r6", "r8", "r12"
    );
}
 8003124:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003128 <sp_256_cmp_8>:
 * b  A single precision integer.
 * return -ve, 0 or +ve if a is less than, equal to or greater than b
 * respectively.
 */
SP_NOINLINE static int32_t sp_256_cmp_8(const sp_digit* a, const sp_digit* b)
{
 8003128:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
    sp_digit r = 0;


    __asm__ __volatile__ (
 800312c:	2200      	movs	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	ea6f 0303 	mvn.w	r3, r3
 8003136:	f04f 061c 	mov.w	r6, #28
 800313a:	f850 8006 	ldr.w	r8, [r0, r6]
 800313e:	598d      	ldr	r5, [r1, r6]
 8003140:	ea08 0803 	and.w	r8, r8, r3
 8003144:	ea05 0503 	and.w	r5, r5, r3
 8003148:	4644      	mov	r4, r8
 800314a:	ebb8 0805 	subs.w	r8, r8, r5
 800314e:	eb68 0808 	sbc.w	r8, r8, r8
 8003152:	4442      	add	r2, r8
 8003154:	ea6f 0808 	mvn.w	r8, r8
 8003158:	ea03 0308 	and.w	r3, r3, r8
 800315c:	1b2d      	subs	r5, r5, r4
 800315e:	eb68 0808 	sbc.w	r8, r8, r8
 8003162:	eba2 0208 	sub.w	r2, r2, r8
 8003166:	ea6f 0808 	mvn.w	r8, r8
 800316a:	ea03 0308 	and.w	r3, r3, r8
 800316e:	f1a6 0604 	sub.w	r6, r6, #4
 8003172:	2e00      	cmp	r6, #0
 8003174:	dae1      	bge.n	800313a <sp_256_cmp_8+0x12>
        : [a] "r" (a), [b] "r" (b)
        : "r3", "r4", "r5", "r6", "r8"
    );

    return r;
}
 8003176:	4610      	mov	r0, r2
 8003178:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 800317c:	4770      	bx	lr

0800317e <sp_256_cond_sub_8>:
 * b  A single precision number to subtract.
 * m  Mask value to apply.
 */
SP_NOINLINE static sp_digit sp_256_cond_sub_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b, sp_digit m)
{
 800317e:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
 8003182:	4604      	mov	r4, r0
    sp_digit c = 0;

    __asm__ __volatile__ (
 8003184:	2000      	movs	r0, #0
 8003186:	f04f 0520 	mov.w	r5, #32
 800318a:	46a9      	mov	r9, r5
 800318c:	f04f 0800 	mov.w	r8, #0
 8003190:	f852 6008 	ldr.w	r6, [r2, r8]
 8003194:	ea06 0603 	and.w	r6, r6, r3
 8003198:	f04f 0500 	mov.w	r5, #0
 800319c:	1a2d      	subs	r5, r5, r0
 800319e:	f851 5008 	ldr.w	r5, [r1, r8]
 80031a2:	41b5      	sbcs	r5, r6
 80031a4:	4180      	sbcs	r0, r0
 80031a6:	f844 5008 	str.w	r5, [r4, r8]
 80031aa:	f108 0804 	add.w	r8, r8, #4
 80031ae:	45c8      	cmp	r8, r9
 80031b0:	dbee      	blt.n	8003190 <sp_256_cond_sub_8+0x12>
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [m] "r" (m)
        : "memory", "r5", "r6", "r8", "r9"
    );

    return c;
}
 80031b2:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
 80031b6:	4770      	bx	lr

080031b8 <sp_256_mont_reduce_8>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_256_mont_reduce_8(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 80031b8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	4691      	mov	r9, r2
 80031c6:	f04f 0400 	mov.w	r4, #0
 80031ca:	6803      	ldr	r3, [r0, #0]
 80031cc:	6846      	ldr	r6, [r0, #4]
 80031ce:	f04f 0500 	mov.w	r5, #0
 80031d2:	19a4      	adds	r4, r4, r6
 80031d4:	eb45 0502 	adc.w	r5, r5, r2
 80031d8:	6044      	str	r4, [r0, #4]
 80031da:	6886      	ldr	r6, [r0, #8]
 80031dc:	f04f 0400 	mov.w	r4, #0
 80031e0:	19ad      	adds	r5, r5, r6
 80031e2:	eb44 0402 	adc.w	r4, r4, r2
 80031e6:	6085      	str	r5, [r0, #8]
 80031e8:	68c6      	ldr	r6, [r0, #12]
 80031ea:	f04f 0500 	mov.w	r5, #0
 80031ee:	18e4      	adds	r4, r4, r3
 80031f0:	eb45 0502 	adc.w	r5, r5, r2
 80031f4:	19a4      	adds	r4, r4, r6
 80031f6:	eb45 0502 	adc.w	r5, r5, r2
 80031fa:	60c4      	str	r4, [r0, #12]
 80031fc:	6906      	ldr	r6, [r0, #16]
 80031fe:	f04f 0400 	mov.w	r4, #0
 8003202:	19ad      	adds	r5, r5, r6
 8003204:	eb44 0402 	adc.w	r4, r4, r2
 8003208:	6105      	str	r5, [r0, #16]
 800320a:	6946      	ldr	r6, [r0, #20]
 800320c:	f04f 0500 	mov.w	r5, #0
 8003210:	19a4      	adds	r4, r4, r6
 8003212:	eb45 0502 	adc.w	r5, r5, r2
 8003216:	6144      	str	r4, [r0, #20]
 8003218:	6986      	ldr	r6, [r0, #24]
 800321a:	f04f 0400 	mov.w	r4, #0
 800321e:	18ed      	adds	r5, r5, r3
 8003220:	eb44 0402 	adc.w	r4, r4, r2
 8003224:	19ad      	adds	r5, r5, r6
 8003226:	eb44 0402 	adc.w	r4, r4, r2
 800322a:	6185      	str	r5, [r0, #24]
 800322c:	69c6      	ldr	r6, [r0, #28]
 800322e:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8003232:	18cd      	adds	r5, r1, r3
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	eb41 0102 	adc.w	r1, r1, r2
 800323c:	1ae4      	subs	r4, r4, r3
 800323e:	4195      	sbcs	r5, r2
 8003240:	eb61 0102 	sbc.w	r1, r1, r2
 8003244:	19a4      	adds	r4, r4, r6
 8003246:	eb55 0508 	adcs.w	r5, r5, r8
 800324a:	eb41 0102 	adc.w	r1, r1, r2
 800324e:	61c4      	str	r4, [r0, #28]
 8003250:	6205      	str	r5, [r0, #32]
 8003252:	f109 0901 	add.w	r9, r9, #1
 8003256:	f100 0004 	add.w	r0, r0, #4
 800325a:	f04f 0608 	mov.w	r6, #8
 800325e:	45b1      	cmp	r9, r6
 8003260:	dbb1      	blt.n	80031c6 <sp_256_mont_reduce_8+0xe>
 8003262:	f1a0 0020 	sub.w	r0, r0, #32
 8003266:	460b      	mov	r3, r1
 8003268:	f1a1 0101 	sub.w	r1, r1, #1
 800326c:	ea6f 0101 	mvn.w	r1, r1
 8003270:	6a04      	ldr	r4, [r0, #32]
 8003272:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003274:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8003276:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 800327a:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 800327e:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 8003282:	f8d0 b038 	ldr.w	fp, [r0, #56]	; 0x38
 8003286:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800328a:	1a64      	subs	r4, r4, r1
 800328c:	418d      	sbcs	r5, r1
 800328e:	418e      	sbcs	r6, r1
 8003290:	eb78 0802 	sbcs.w	r8, r8, r2
 8003294:	eb79 0902 	sbcs.w	r9, r9, r2
 8003298:	eb7a 0a02 	sbcs.w	sl, sl, r2
 800329c:	eb7b 0b03 	sbcs.w	fp, fp, r3
 80032a0:	eb6e 0e01 	sbc.w	lr, lr, r1
 80032a4:	6004      	str	r4, [r0, #0]
 80032a6:	6045      	str	r5, [r0, #4]
 80032a8:	6086      	str	r6, [r0, #8]
 80032aa:	f8c0 800c 	str.w	r8, [r0, #12]
 80032ae:	f8c0 9010 	str.w	r9, [r0, #16]
 80032b2:	f8c0 a014 	str.w	sl, [r0, #20]
 80032b6:	f8c0 b018 	str.w	fp, [r0, #24]
 80032ba:	f8c0 e01c 	str.w	lr, [r0, #28]
    );


    (void)m;
    (void)mp;
}
 80032be:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
	...

080032c4 <sp_256_mont_reduce_order_8>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_256_mont_reduce_order_8(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 80032c4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    sp_digit ca = 0;

    __asm__ __volatile__ (
 80032c8:	2300      	movs	r3, #0
 80032ca:	4691      	mov	r9, r2
 80032cc:	468c      	mov	ip, r1
 80032ce:	4682      	mov	sl, r0
 80032d0:	f04f 0400 	mov.w	r4, #0
 80032d4:	f10a 0b20 	add.w	fp, sl, #32
 80032d8:	464a      	mov	r2, r9
 80032da:	f8da 0000 	ldr.w	r0, [sl]
 80032de:	fb02 f200 	mul.w	r2, r2, r0
 80032e2:	4661      	mov	r1, ip
 80032e4:	f10a 0e18 	add.w	lr, sl, #24
 80032e8:	f8da 0000 	ldr.w	r0, [sl]
 80032ec:	f04f 0500 	mov.w	r5, #0
 80032f0:	f851 8b04 	ldr.w	r8, [r1], #4
 80032f4:	fba2 6808 	umull	r6, r8, r2, r8
 80032f8:	1980      	adds	r0, r0, r6
 80032fa:	eb45 0508 	adc.w	r5, r5, r8
 80032fe:	1824      	adds	r4, r4, r0
 8003300:	f145 0500 	adc.w	r5, r5, #0
 8003304:	f84a 4b04 	str.w	r4, [sl], #4
 8003308:	f8da 0000 	ldr.w	r0, [sl]
 800330c:	f04f 0400 	mov.w	r4, #0
 8003310:	f851 8b04 	ldr.w	r8, [r1], #4
 8003314:	fba2 6808 	umull	r6, r8, r2, r8
 8003318:	1980      	adds	r0, r0, r6
 800331a:	eb44 0408 	adc.w	r4, r4, r8
 800331e:	182d      	adds	r5, r5, r0
 8003320:	f144 0400 	adc.w	r4, r4, #0
 8003324:	f84a 5b04 	str.w	r5, [sl], #4
 8003328:	45f2      	cmp	sl, lr
 800332a:	dbdd      	blt.n	80032e8 <sp_256_mont_reduce_order_8+0x24>
 800332c:	f8da 0000 	ldr.w	r0, [sl]
 8003330:	f04f 0500 	mov.w	r5, #0
 8003334:	f851 8b04 	ldr.w	r8, [r1], #4
 8003338:	fba2 6808 	umull	r6, r8, r2, r8
 800333c:	1980      	adds	r0, r0, r6
 800333e:	eb45 0508 	adc.w	r5, r5, r8
 8003342:	1824      	adds	r4, r4, r0
 8003344:	f145 0500 	adc.w	r5, r5, #0
 8003348:	f84a 4b04 	str.w	r4, [sl], #4
 800334c:	461c      	mov	r4, r3
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	f8d1 8000 	ldr.w	r8, [r1]
 8003356:	fba2 6808 	umull	r6, r8, r2, r8
 800335a:	19ad      	adds	r5, r5, r6
 800335c:	eb54 0408 	adcs.w	r4, r4, r8
 8003360:	f143 0300 	adc.w	r3, r3, #0
 8003364:	f8da 6000 	ldr.w	r6, [sl]
 8003368:	f8da 8004 	ldr.w	r8, [sl, #4]
 800336c:	1976      	adds	r6, r6, r5
 800336e:	eb58 0804 	adcs.w	r8, r8, r4
 8003372:	f143 0300 	adc.w	r3, r3, #0
 8003376:	f8ca 6000 	str.w	r6, [sl]
 800337a:	f8ca 8004 	str.w	r8, [sl, #4]
 800337e:	f1aa 0a18 	sub.w	sl, sl, #24
 8003382:	45da      	cmp	sl, fp
 8003384:	dba8      	blt.n	80032d8 <sp_256_mont_reduce_order_8+0x14>
 8003386:	4650      	mov	r0, sl
 8003388:	4661      	mov	r1, ip
        : [ca] "+r" (ca), [a] "+r" (a)
        : [m] "r" (m), [mp] "r" (mp)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    sp_256_cond_sub_8(a - 8, a, m, (sp_digit)0 - ca);
 800338a:	425b      	negs	r3, r3
 800338c:	460a      	mov	r2, r1
 800338e:	4601      	mov	r1, r0
 8003390:	3820      	subs	r0, #32
 8003392:	4c02      	ldr	r4, [pc, #8]	; (800339c <sp_256_mont_reduce_order_8+0xd8>)
 8003394:	47a0      	blx	r4
}
 8003396:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800339a:	bf00      	nop
 800339c:	0800317f 	.word	0x0800317f

080033a0 <sp_256_mont_add_8>:
 * b   Second number to add in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_add_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m)
{
 80033a0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 80033a4:	f04f 0c00 	mov.w	ip, #0
 80033a8:	680c      	ldr	r4, [r1, #0]
 80033aa:	684d      	ldr	r5, [r1, #4]
 80033ac:	688e      	ldr	r6, [r1, #8]
 80033ae:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80033b2:	f8d2 9000 	ldr.w	r9, [r2]
 80033b6:	f8d2 a004 	ldr.w	sl, [r2, #4]
 80033ba:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80033be:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80033c2:	eb14 0409 	adds.w	r4, r4, r9
 80033c6:	eb55 050a 	adcs.w	r5, r5, sl
 80033ca:	eb56 060b 	adcs.w	r6, r6, fp
 80033ce:	eb58 080e 	adcs.w	r8, r8, lr
 80033d2:	6004      	str	r4, [r0, #0]
 80033d4:	6045      	str	r5, [r0, #4]
 80033d6:	6086      	str	r6, [r0, #8]
 80033d8:	f8c0 800c 	str.w	r8, [r0, #12]
 80033dc:	690c      	ldr	r4, [r1, #16]
 80033de:	694d      	ldr	r5, [r1, #20]
 80033e0:	698e      	ldr	r6, [r1, #24]
 80033e2:	f8d1 801c 	ldr.w	r8, [r1, #28]
 80033e6:	f8d2 9010 	ldr.w	r9, [r2, #16]
 80033ea:	f8d2 a014 	ldr.w	sl, [r2, #20]
 80033ee:	f8d2 b018 	ldr.w	fp, [r2, #24]
 80033f2:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 80033f6:	eb54 0409 	adcs.w	r4, r4, r9
 80033fa:	eb55 050a 	adcs.w	r5, r5, sl
 80033fe:	eb56 060b 	adcs.w	r6, r6, fp
 8003402:	eb58 080e 	adcs.w	r8, r8, lr
 8003406:	f14c 0300 	adc.w	r3, ip, #0
 800340a:	ebac 0303 	sub.w	r3, ip, r3
 800340e:	f003 0c01 	and.w	ip, r3, #1
 8003412:	f8d0 9000 	ldr.w	r9, [r0]
 8003416:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800341a:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800341e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8003422:	ebb9 0903 	subs.w	r9, r9, r3
 8003426:	eb7a 0a03 	sbcs.w	sl, sl, r3
 800342a:	eb7b 0b03 	sbcs.w	fp, fp, r3
 800342e:	f17e 0e00 	sbcs.w	lr, lr, #0
 8003432:	f174 0400 	sbcs.w	r4, r4, #0
 8003436:	f175 0500 	sbcs.w	r5, r5, #0
 800343a:	eb76 060c 	sbcs.w	r6, r6, ip
 800343e:	eb68 0803 	sbc.w	r8, r8, r3
 8003442:	f8c0 9000 	str.w	r9, [r0]
 8003446:	f8c0 a004 	str.w	sl, [r0, #4]
 800344a:	f8c0 b008 	str.w	fp, [r0, #8]
 800344e:	f8c0 e00c 	str.w	lr, [r0, #12]
 8003452:	6104      	str	r4, [r0, #16]
 8003454:	6145      	str	r5, [r0, #20]
 8003456:	6186      	str	r6, [r0, #24]
 8003458:	f8c0 801c 	str.w	r8, [r0, #28]
        "str   r8, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 800345c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003460 <sp_256_mont_dbl_8>:
 * r   Result of doubling.
 * a   Number to double in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_dbl_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8003460:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 8003464:	f04f 0c00 	mov.w	ip, #0
 8003468:	680c      	ldr	r4, [r1, #0]
 800346a:	684d      	ldr	r5, [r1, #4]
 800346c:	688e      	ldr	r6, [r1, #8]
 800346e:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8003472:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8003476:	f8d1 a014 	ldr.w	sl, [r1, #20]
 800347a:	f8d1 b018 	ldr.w	fp, [r1, #24]
 800347e:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8003482:	1924      	adds	r4, r4, r4
 8003484:	416d      	adcs	r5, r5
 8003486:	4176      	adcs	r6, r6
 8003488:	eb58 0808 	adcs.w	r8, r8, r8
 800348c:	eb59 0909 	adcs.w	r9, r9, r9
 8003490:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8003494:	eb5b 0b0b 	adcs.w	fp, fp, fp
 8003498:	eb5e 0e0e 	adcs.w	lr, lr, lr
 800349c:	f14c 0300 	adc.w	r3, ip, #0
 80034a0:	ebac 0303 	sub.w	r3, ip, r3
 80034a4:	f003 0c01 	and.w	ip, r3, #1
 80034a8:	1ae4      	subs	r4, r4, r3
 80034aa:	419d      	sbcs	r5, r3
 80034ac:	419e      	sbcs	r6, r3
 80034ae:	f178 0800 	sbcs.w	r8, r8, #0
 80034b2:	f179 0900 	sbcs.w	r9, r9, #0
 80034b6:	f17a 0a00 	sbcs.w	sl, sl, #0
 80034ba:	eb7b 0b0c 	sbcs.w	fp, fp, ip
 80034be:	eb6e 0e03 	sbc.w	lr, lr, r3
 80034c2:	6004      	str	r4, [r0, #0]
 80034c4:	6045      	str	r5, [r0, #4]
 80034c6:	6086      	str	r6, [r0, #8]
 80034c8:	f8c0 800c 	str.w	r8, [r0, #12]
 80034cc:	f8c0 9010 	str.w	r9, [r0, #16]
 80034d0:	f8c0 a014 	str.w	sl, [r0, #20]
 80034d4:	f8c0 b018 	str.w	fp, [r0, #24]
 80034d8:	f8c0 e01c 	str.w	lr, [r0, #28]
        "str   r14, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 80034dc:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

080034e0 <sp_256_mont_tpl_8>:
 * r   Result of Tripling.
 * a   Number to triple in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_tpl_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 80034e0:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 80034e4:	680a      	ldr	r2, [r1, #0]
 80034e6:	684b      	ldr	r3, [r1, #4]
 80034e8:	688c      	ldr	r4, [r1, #8]
 80034ea:	68cd      	ldr	r5, [r1, #12]
 80034ec:	690e      	ldr	r6, [r1, #16]
 80034ee:	f8d1 8014 	ldr.w	r8, [r1, #20]
 80034f2:	f8d1 9018 	ldr.w	r9, [r1, #24]
 80034f6:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 80034fa:	1892      	adds	r2, r2, r2
 80034fc:	415b      	adcs	r3, r3
 80034fe:	4164      	adcs	r4, r4
 8003500:	416d      	adcs	r5, r5
 8003502:	4176      	adcs	r6, r6
 8003504:	eb58 0808 	adcs.w	r8, r8, r8
 8003508:	eb59 0909 	adcs.w	r9, r9, r9
 800350c:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8003510:	f04f 0b00 	mov.w	fp, #0
 8003514:	f04f 0e00 	mov.w	lr, #0
 8003518:	eb4b 0b0b 	adc.w	fp, fp, fp
 800351c:	46dc      	mov	ip, fp
 800351e:	f1ab 0b01 	sub.w	fp, fp, #1
 8003522:	ea6f 0b0b 	mvn.w	fp, fp
 8003526:	ebb2 020b 	subs.w	r2, r2, fp
 800352a:	eb73 030b 	sbcs.w	r3, r3, fp
 800352e:	eb74 040b 	sbcs.w	r4, r4, fp
 8003532:	eb75 050e 	sbcs.w	r5, r5, lr
 8003536:	eb76 060e 	sbcs.w	r6, r6, lr
 800353a:	eb78 080e 	sbcs.w	r8, r8, lr
 800353e:	eb79 090c 	sbcs.w	r9, r9, ip
 8003542:	eb6a 0a0b 	sbc.w	sl, sl, fp
 8003546:	f8d1 c000 	ldr.w	ip, [r1]
 800354a:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800354e:	eb12 020c 	adds.w	r2, r2, ip
 8003552:	eb53 030e 	adcs.w	r3, r3, lr
 8003556:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800355a:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800355e:	eb54 040c 	adcs.w	r4, r4, ip
 8003562:	eb55 050e 	adcs.w	r5, r5, lr
 8003566:	f8d1 c010 	ldr.w	ip, [r1, #16]
 800356a:	f8d1 e014 	ldr.w	lr, [r1, #20]
 800356e:	eb56 060c 	adcs.w	r6, r6, ip
 8003572:	eb58 080e 	adcs.w	r8, r8, lr
 8003576:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800357a:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 800357e:	eb59 090c 	adcs.w	r9, r9, ip
 8003582:	eb5a 0a0e 	adcs.w	sl, sl, lr
 8003586:	f04f 0b00 	mov.w	fp, #0
 800358a:	f04f 0e00 	mov.w	lr, #0
 800358e:	eb4b 0b0b 	adc.w	fp, fp, fp
 8003592:	46dc      	mov	ip, fp
 8003594:	f1ab 0b01 	sub.w	fp, fp, #1
 8003598:	ea6f 0b0b 	mvn.w	fp, fp
 800359c:	ebb2 020b 	subs.w	r2, r2, fp
 80035a0:	6002      	str	r2, [r0, #0]
 80035a2:	eb73 030b 	sbcs.w	r3, r3, fp
 80035a6:	6043      	str	r3, [r0, #4]
 80035a8:	eb74 040b 	sbcs.w	r4, r4, fp
 80035ac:	6084      	str	r4, [r0, #8]
 80035ae:	eb75 050e 	sbcs.w	r5, r5, lr
 80035b2:	60c5      	str	r5, [r0, #12]
 80035b4:	eb76 060e 	sbcs.w	r6, r6, lr
 80035b8:	6106      	str	r6, [r0, #16]
 80035ba:	eb78 080e 	sbcs.w	r8, r8, lr
 80035be:	f8c0 8014 	str.w	r8, [r0, #20]
 80035c2:	eb79 090c 	sbcs.w	r9, r9, ip
 80035c6:	f8c0 9018 	str.w	r9, [r0, #24]
 80035ca:	eb6a 0a0b 	sbc.w	sl, sl, fp
 80035ce:	f8c0 a01c 	str.w	sl, [r0, #28]
        "str	r10, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r11", "r12", "r14", "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10"
    );
}
 80035d2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

080035d6 <sp_256_mont_sub_8>:
 * b   Number to subtract with in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_sub_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m)
{
 80035d6:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 80035da:	f04f 0c00 	mov.w	ip, #0
 80035de:	680c      	ldr	r4, [r1, #0]
 80035e0:	684d      	ldr	r5, [r1, #4]
 80035e2:	688e      	ldr	r6, [r1, #8]
 80035e4:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80035e8:	f8d2 9000 	ldr.w	r9, [r2]
 80035ec:	f8d2 a004 	ldr.w	sl, [r2, #4]
 80035f0:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80035f4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80035f8:	ebb4 0409 	subs.w	r4, r4, r9
 80035fc:	eb75 050a 	sbcs.w	r5, r5, sl
 8003600:	eb76 060b 	sbcs.w	r6, r6, fp
 8003604:	eb78 080e 	sbcs.w	r8, r8, lr
 8003608:	6004      	str	r4, [r0, #0]
 800360a:	6045      	str	r5, [r0, #4]
 800360c:	6086      	str	r6, [r0, #8]
 800360e:	f8c0 800c 	str.w	r8, [r0, #12]
 8003612:	690c      	ldr	r4, [r1, #16]
 8003614:	694d      	ldr	r5, [r1, #20]
 8003616:	698e      	ldr	r6, [r1, #24]
 8003618:	f8d1 801c 	ldr.w	r8, [r1, #28]
 800361c:	f8d2 9010 	ldr.w	r9, [r2, #16]
 8003620:	f8d2 a014 	ldr.w	sl, [r2, #20]
 8003624:	f8d2 b018 	ldr.w	fp, [r2, #24]
 8003628:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 800362c:	eb74 0409 	sbcs.w	r4, r4, r9
 8003630:	eb75 050a 	sbcs.w	r5, r5, sl
 8003634:	eb76 060b 	sbcs.w	r6, r6, fp
 8003638:	eb78 080e 	sbcs.w	r8, r8, lr
 800363c:	f16c 0300 	sbc.w	r3, ip, #0
 8003640:	f003 0c01 	and.w	ip, r3, #1
 8003644:	f8d0 9000 	ldr.w	r9, [r0]
 8003648:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800364c:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8003650:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8003654:	eb19 0903 	adds.w	r9, r9, r3
 8003658:	eb5a 0a03 	adcs.w	sl, sl, r3
 800365c:	eb5b 0b03 	adcs.w	fp, fp, r3
 8003660:	f15e 0e00 	adcs.w	lr, lr, #0
 8003664:	f154 0400 	adcs.w	r4, r4, #0
 8003668:	f155 0500 	adcs.w	r5, r5, #0
 800366c:	eb56 060c 	adcs.w	r6, r6, ip
 8003670:	eb48 0803 	adc.w	r8, r8, r3
 8003674:	f8c0 9000 	str.w	r9, [r0]
 8003678:	f8c0 a004 	str.w	sl, [r0, #4]
 800367c:	f8c0 b008 	str.w	fp, [r0, #8]
 8003680:	f8c0 e00c 	str.w	lr, [r0, #12]
 8003684:	6104      	str	r4, [r0, #16]
 8003686:	6145      	str	r5, [r0, #20]
 8003688:	6186      	str	r6, [r0, #24]
 800368a:	f8c0 801c 	str.w	r8, [r0, #28]
        "str   r8, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 800368e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003692 <sp_256_div2_8>:
 * r  Result of division by 2.
 * a  Number to divide.
 * m  Modulus (prime).
 */
SP_NOINLINE static void sp_256_div2_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8003692:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
    __asm__ __volatile__ (
 8003696:	f8d1 8000 	ldr.w	r8, [r1]
 800369a:	ea4f 78c8 	mov.w	r8, r8, lsl #31
 800369e:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 80036a2:	f04f 0500 	mov.w	r5, #0
 80036a6:	eba5 0508 	sub.w	r5, r5, r8
 80036aa:	f04f 0800 	mov.w	r8, #0
 80036ae:	ea4f 76c5 	mov.w	r6, r5, lsl #31
 80036b2:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 80036b6:	680b      	ldr	r3, [r1, #0]
 80036b8:	684c      	ldr	r4, [r1, #4]
 80036ba:	195b      	adds	r3, r3, r5
 80036bc:	416c      	adcs	r4, r5
 80036be:	6003      	str	r3, [r0, #0]
 80036c0:	6044      	str	r4, [r0, #4]
 80036c2:	688b      	ldr	r3, [r1, #8]
 80036c4:	68cc      	ldr	r4, [r1, #12]
 80036c6:	416b      	adcs	r3, r5
 80036c8:	eb54 0408 	adcs.w	r4, r4, r8
 80036cc:	6083      	str	r3, [r0, #8]
 80036ce:	60c4      	str	r4, [r0, #12]
 80036d0:	690b      	ldr	r3, [r1, #16]
 80036d2:	694c      	ldr	r4, [r1, #20]
 80036d4:	eb53 0308 	adcs.w	r3, r3, r8
 80036d8:	eb54 0408 	adcs.w	r4, r4, r8
 80036dc:	6103      	str	r3, [r0, #16]
 80036de:	6144      	str	r4, [r0, #20]
 80036e0:	698b      	ldr	r3, [r1, #24]
 80036e2:	69cc      	ldr	r4, [r1, #28]
 80036e4:	4173      	adcs	r3, r6
 80036e6:	416c      	adcs	r4, r5
 80036e8:	eb48 0808 	adc.w	r8, r8, r8
 80036ec:	ea4f 78c8 	mov.w	r8, r8, lsl #31
 80036f0:	ea4f 0553 	mov.w	r5, r3, lsr #1
 80036f4:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 80036f8:	ea4f 0654 	mov.w	r6, r4, lsr #1
 80036fc:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 8003700:	ea45 0504 	orr.w	r5, r5, r4
 8003704:	ea46 0608 	orr.w	r6, r6, r8
 8003708:	4698      	mov	r8, r3
 800370a:	6185      	str	r5, [r0, #24]
 800370c:	61c6      	str	r6, [r0, #28]
 800370e:	690b      	ldr	r3, [r1, #16]
 8003710:	694c      	ldr	r4, [r1, #20]
 8003712:	ea4f 0553 	mov.w	r5, r3, lsr #1
 8003716:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 800371a:	ea4f 0654 	mov.w	r6, r4, lsr #1
 800371e:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 8003722:	ea45 0504 	orr.w	r5, r5, r4
 8003726:	ea46 0608 	orr.w	r6, r6, r8
 800372a:	4698      	mov	r8, r3
 800372c:	6105      	str	r5, [r0, #16]
 800372e:	6146      	str	r6, [r0, #20]
 8003730:	688b      	ldr	r3, [r1, #8]
 8003732:	68cc      	ldr	r4, [r1, #12]
 8003734:	ea4f 0553 	mov.w	r5, r3, lsr #1
 8003738:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 800373c:	ea4f 0654 	mov.w	r6, r4, lsr #1
 8003740:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 8003744:	ea45 0504 	orr.w	r5, r5, r4
 8003748:	ea46 0608 	orr.w	r6, r6, r8
 800374c:	4698      	mov	r8, r3
 800374e:	6085      	str	r5, [r0, #8]
 8003750:	60c6      	str	r6, [r0, #12]
 8003752:	6803      	ldr	r3, [r0, #0]
 8003754:	6844      	ldr	r4, [r0, #4]
 8003756:	ea4f 0553 	mov.w	r5, r3, lsr #1
 800375a:	ea4f 0654 	mov.w	r6, r4, lsr #1
 800375e:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 8003762:	ea45 0504 	orr.w	r5, r5, r4
 8003766:	ea46 0608 	orr.w	r6, r6, r8
 800376a:	6005      	str	r5, [r0, #0]
 800376c:	6046      	str	r6, [r0, #4]
        "str	r6, [%[r], #4]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [m] "r" (m)
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );
}
 800376e:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8003772:	4770      	bx	lr

08003774 <sp_256_proj_point_dbl_8>:
    return err;
}
#endif /* WOLFSSL_SP_NONBLOCK */

static void sp_256_proj_point_dbl_8(sp_point_256* r, const sp_point_256* p, sp_digit* t)
{
 8003774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003778:	b085      	sub	sp, #20
 800377a:	4606      	mov	r6, r0
 800377c:	4688      	mov	r8, r1
 800377e:	9202      	str	r2, [sp, #8]
    sp_digit* t1 = t;
    sp_digit* t2 = t + 2*8;
 8003780:	f102 0940 	add.w	r9, r2, #64	; 0x40
    sp_digit* x;
    sp_digit* y;
    sp_digit* z;

    x = r->x;
    y = r->y;
 8003784:	f100 0540 	add.w	r5, r0, #64	; 0x40
    z = r->z;
 8003788:	f100 0b80 	add.w	fp, r0, #128	; 0x80
    /* Put infinity into result. */
    if (r != p) {
 800378c:	4288      	cmp	r0, r1
 800378e:	d003      	beq.n	8003798 <sp_256_proj_point_dbl_8+0x24>
        r->infinity = p->infinity;
 8003790:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 8003794:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    }

    /* T1 = Z * Z */
    sp_256_mont_sqr_8(t1, p->z, p256_mod, p256_mp_mod);
 8003798:	f108 0380 	add.w	r3, r8, #128	; 0x80
 800379c:	4619      	mov	r1, r3
 800379e:	4c3d      	ldr	r4, [pc, #244]	; (8003894 <sp_256_proj_point_dbl_8+0x120>)
 80037a0:	2301      	movs	r3, #1
 80037a2:	4622      	mov	r2, r4
 80037a4:	9103      	str	r1, [sp, #12]
 80037a6:	9802      	ldr	r0, [sp, #8]
 80037a8:	4f3b      	ldr	r7, [pc, #236]	; (8003898 <sp_256_proj_point_dbl_8+0x124>)
 80037aa:	47b8      	blx	r7
    /* Z = Y * Z */
    sp_256_mont_mul_8(z, p->y, p->z, p256_mod, p256_mp_mod);
 80037ac:	f108 0340 	add.w	r3, r8, #64	; 0x40
 80037b0:	4618      	mov	r0, r3
 80037b2:	f04f 0a01 	mov.w	sl, #1
 80037b6:	f8cd a000 	str.w	sl, [sp]
 80037ba:	4623      	mov	r3, r4
 80037bc:	9a03      	ldr	r2, [sp, #12]
 80037be:	9003      	str	r0, [sp, #12]
 80037c0:	4601      	mov	r1, r0
 80037c2:	4658      	mov	r0, fp
 80037c4:	4f35      	ldr	r7, [pc, #212]	; (800389c <sp_256_proj_point_dbl_8+0x128>)
 80037c6:	47b8      	blx	r7
    /* Z = 2Z */
    sp_256_mont_dbl_8(z, z, p256_mod);
 80037c8:	4622      	mov	r2, r4
 80037ca:	4659      	mov	r1, fp
 80037cc:	4658      	mov	r0, fp
 80037ce:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <sp_256_proj_point_dbl_8+0x12c>)
 80037d0:	4798      	blx	r3
    /* T2 = X - T1 */
    sp_256_mont_sub_8(t2, p->x, t1, p256_mod);
 80037d2:	4623      	mov	r3, r4
 80037d4:	9f02      	ldr	r7, [sp, #8]
 80037d6:	463a      	mov	r2, r7
 80037d8:	4641      	mov	r1, r8
 80037da:	4648      	mov	r0, r9
 80037dc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80038b0 <sp_256_proj_point_dbl_8+0x13c>
 80037e0:	47d8      	blx	fp
    /* T1 = X + T1 */
    sp_256_mont_add_8(t1, p->x, t1, p256_mod);
 80037e2:	4623      	mov	r3, r4
 80037e4:	463a      	mov	r2, r7
 80037e6:	4641      	mov	r1, r8
 80037e8:	9702      	str	r7, [sp, #8]
 80037ea:	4638      	mov	r0, r7
 80037ec:	4f2d      	ldr	r7, [pc, #180]	; (80038a4 <sp_256_proj_point_dbl_8+0x130>)
 80037ee:	47b8      	blx	r7
    /* T2 = T1 * T2 */
    sp_256_mont_mul_8(t2, t1, t2, p256_mod, p256_mp_mod);
 80037f0:	f8cd a000 	str.w	sl, [sp]
 80037f4:	4623      	mov	r3, r4
 80037f6:	464a      	mov	r2, r9
 80037f8:	9902      	ldr	r1, [sp, #8]
 80037fa:	4648      	mov	r0, r9
 80037fc:	4f27      	ldr	r7, [pc, #156]	; (800389c <sp_256_proj_point_dbl_8+0x128>)
 80037fe:	47b8      	blx	r7
    /* T1 = 3T2 */
    sp_256_mont_tpl_8(t1, t2, p256_mod);
 8003800:	4622      	mov	r2, r4
 8003802:	4649      	mov	r1, r9
 8003804:	9802      	ldr	r0, [sp, #8]
 8003806:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <sp_256_proj_point_dbl_8+0x134>)
 8003808:	4798      	blx	r3
    /* Y = 2Y */
    sp_256_mont_dbl_8(y, p->y, p256_mod);
 800380a:	4622      	mov	r2, r4
 800380c:	9903      	ldr	r1, [sp, #12]
 800380e:	4628      	mov	r0, r5
 8003810:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <sp_256_proj_point_dbl_8+0x12c>)
 8003812:	4798      	blx	r3
    /* Y = Y * Y */
    sp_256_mont_sqr_8(y, y, p256_mod, p256_mp_mod);
 8003814:	4653      	mov	r3, sl
 8003816:	4622      	mov	r2, r4
 8003818:	4629      	mov	r1, r5
 800381a:	4628      	mov	r0, r5
 800381c:	4f1e      	ldr	r7, [pc, #120]	; (8003898 <sp_256_proj_point_dbl_8+0x124>)
 800381e:	47b8      	blx	r7
    /* T2 = Y * Y */
    sp_256_mont_sqr_8(t2, y, p256_mod, p256_mp_mod);
 8003820:	4653      	mov	r3, sl
 8003822:	4622      	mov	r2, r4
 8003824:	4629      	mov	r1, r5
 8003826:	4648      	mov	r0, r9
 8003828:	47b8      	blx	r7
    /* T2 = T2/2 */
    sp_256_div2_8(t2, t2, p256_mod);
 800382a:	4622      	mov	r2, r4
 800382c:	4649      	mov	r1, r9
 800382e:	4648      	mov	r0, r9
 8003830:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <sp_256_proj_point_dbl_8+0x138>)
 8003832:	4798      	blx	r3
    /* Y = Y * X */
    sp_256_mont_mul_8(y, y, p->x, p256_mod, p256_mp_mod);
 8003834:	f8cd a000 	str.w	sl, [sp]
 8003838:	4623      	mov	r3, r4
 800383a:	4642      	mov	r2, r8
 800383c:	4629      	mov	r1, r5
 800383e:	4628      	mov	r0, r5
 8003840:	4f16      	ldr	r7, [pc, #88]	; (800389c <sp_256_proj_point_dbl_8+0x128>)
 8003842:	47b8      	blx	r7
    /* X = T1 * T1 */
    sp_256_mont_sqr_8(x, t1, p256_mod, p256_mp_mod);
 8003844:	4653      	mov	r3, sl
 8003846:	4622      	mov	r2, r4
 8003848:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800384c:	4641      	mov	r1, r8
 800384e:	4630      	mov	r0, r6
 8003850:	4f11      	ldr	r7, [pc, #68]	; (8003898 <sp_256_proj_point_dbl_8+0x124>)
 8003852:	47b8      	blx	r7
    /* X = X - Y */
    sp_256_mont_sub_8(x, x, y, p256_mod);
 8003854:	4623      	mov	r3, r4
 8003856:	462a      	mov	r2, r5
 8003858:	4631      	mov	r1, r6
 800385a:	4630      	mov	r0, r6
 800385c:	47d8      	blx	fp
    /* X = X - Y */
    sp_256_mont_sub_8(x, x, y, p256_mod);
 800385e:	4623      	mov	r3, r4
 8003860:	462a      	mov	r2, r5
 8003862:	4631      	mov	r1, r6
 8003864:	4630      	mov	r0, r6
 8003866:	47d8      	blx	fp
    /* Y = Y - X */
    sp_256_mont_sub_8(y, y, x, p256_mod);
 8003868:	4623      	mov	r3, r4
 800386a:	4632      	mov	r2, r6
 800386c:	4629      	mov	r1, r5
 800386e:	4628      	mov	r0, r5
 8003870:	47d8      	blx	fp
    /* Y = Y * T1 */
    sp_256_mont_mul_8(y, y, t1, p256_mod, p256_mp_mod);
 8003872:	f8cd a000 	str.w	sl, [sp]
 8003876:	4623      	mov	r3, r4
 8003878:	4642      	mov	r2, r8
 800387a:	4629      	mov	r1, r5
 800387c:	4628      	mov	r0, r5
 800387e:	4f07      	ldr	r7, [pc, #28]	; (800389c <sp_256_proj_point_dbl_8+0x128>)
 8003880:	47b8      	blx	r7
    /* Y = Y - T2 */
    sp_256_mont_sub_8(y, y, t2, p256_mod);
 8003882:	4623      	mov	r3, r4
 8003884:	464a      	mov	r2, r9
 8003886:	4629      	mov	r1, r5
 8003888:	4628      	mov	r0, r5
 800388a:	47d8      	blx	fp
}
 800388c:	b005      	add	sp, #20
 800388e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003892:	bf00      	nop
 8003894:	080055d4 	.word	0x080055d4
 8003898:	08002b31 	.word	0x08002b31
 800389c:	08002385 	.word	0x08002385
 80038a0:	08003461 	.word	0x08003461
 80038a4:	080033a1 	.word	0x080033a1
 80038a8:	080034e1 	.word	0x080034e1
 80038ac:	08003693 	.word	0x08003693
 80038b0:	080035d7 	.word	0x080035d7

080038b4 <sp_256_cmp_equal_8>:
 * a  First number to compare.
 * b  Second number to compare.
 * returns 1 when equal and 0 otherwise.
 */
static int sp_256_cmp_equal_8(const sp_digit* a, const sp_digit* b)
{
 80038b4:	b410      	push	{r4}
    return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2]) | (a[3] ^ b[3]) |
 80038b6:	6803      	ldr	r3, [r0, #0]
 80038b8:	680a      	ldr	r2, [r1, #0]
 80038ba:	4053      	eors	r3, r2
 80038bc:	6842      	ldr	r2, [r0, #4]
 80038be:	684c      	ldr	r4, [r1, #4]
 80038c0:	4062      	eors	r2, r4
 80038c2:	4313      	orrs	r3, r2
 80038c4:	6882      	ldr	r2, [r0, #8]
 80038c6:	688c      	ldr	r4, [r1, #8]
 80038c8:	4062      	eors	r2, r4
 80038ca:	4313      	orrs	r3, r2
 80038cc:	68c2      	ldr	r2, [r0, #12]
 80038ce:	68cc      	ldr	r4, [r1, #12]
 80038d0:	4062      	eors	r2, r4
 80038d2:	4313      	orrs	r3, r2
            (a[4] ^ b[4]) | (a[5] ^ b[5]) | (a[6] ^ b[6]) | (a[7] ^ b[7])) == 0;
 80038d4:	6902      	ldr	r2, [r0, #16]
 80038d6:	690c      	ldr	r4, [r1, #16]
 80038d8:	4062      	eors	r2, r4
    return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2]) | (a[3] ^ b[3]) |
 80038da:	4313      	orrs	r3, r2
            (a[4] ^ b[4]) | (a[5] ^ b[5]) | (a[6] ^ b[6]) | (a[7] ^ b[7])) == 0;
 80038dc:	6942      	ldr	r2, [r0, #20]
 80038de:	694c      	ldr	r4, [r1, #20]
 80038e0:	4062      	eors	r2, r4
 80038e2:	4313      	orrs	r3, r2
 80038e4:	6982      	ldr	r2, [r0, #24]
 80038e6:	698c      	ldr	r4, [r1, #24]
 80038e8:	4062      	eors	r2, r4
 80038ea:	4313      	orrs	r3, r2
 80038ec:	69c2      	ldr	r2, [r0, #28]
 80038ee:	69c9      	ldr	r1, [r1, #28]
 80038f0:	404a      	eors	r2, r1
 80038f2:	4313      	orrs	r3, r2
}
 80038f4:	bf0c      	ite	eq
 80038f6:	2001      	moveq	r0, #1
 80038f8:	2000      	movne	r0, #0
 80038fa:	bc10      	pop	{r4}
 80038fc:	4770      	bx	lr

080038fe <sp_256_get_point_16_8>:
 * table  Table - start of the entires to access
 * idx    Index of entry to retrieve.
 */
static void sp_256_get_point_16_8(sp_point_256* r, const sp_point_256* table,
    int idx)
{
 80038fe:	b4f0      	push	{r4, r5, r6, r7}
    int i;
    sp_digit mask;

    r->x[0] = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	6003      	str	r3, [r0, #0]
    r->x[1] = 0;
 8003904:	6043      	str	r3, [r0, #4]
    r->x[2] = 0;
 8003906:	6083      	str	r3, [r0, #8]
    r->x[3] = 0;
 8003908:	60c3      	str	r3, [r0, #12]
    r->x[4] = 0;
 800390a:	6103      	str	r3, [r0, #16]
    r->x[5] = 0;
 800390c:	6143      	str	r3, [r0, #20]
    r->x[6] = 0;
 800390e:	6183      	str	r3, [r0, #24]
    r->x[7] = 0;
 8003910:	61c3      	str	r3, [r0, #28]
    r->y[0] = 0;
 8003912:	6403      	str	r3, [r0, #64]	; 0x40
    r->y[1] = 0;
 8003914:	6443      	str	r3, [r0, #68]	; 0x44
    r->y[2] = 0;
 8003916:	6483      	str	r3, [r0, #72]	; 0x48
    r->y[3] = 0;
 8003918:	64c3      	str	r3, [r0, #76]	; 0x4c
    r->y[4] = 0;
 800391a:	6503      	str	r3, [r0, #80]	; 0x50
    r->y[5] = 0;
 800391c:	6543      	str	r3, [r0, #84]	; 0x54
    r->y[6] = 0;
 800391e:	6583      	str	r3, [r0, #88]	; 0x58
    r->y[7] = 0;
 8003920:	65c3      	str	r3, [r0, #92]	; 0x5c
    r->z[0] = 0;
 8003922:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    r->z[1] = 0;
 8003926:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    r->z[2] = 0;
 800392a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    r->z[3] = 0;
 800392e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    r->z[4] = 0;
 8003932:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    r->z[5] = 0;
 8003936:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    r->z[6] = 0;
 800393a:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    r->z[7] = 0;
 800393e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    for (i = 1; i < 16; i++) {
 8003942:	2501      	movs	r5, #1
 8003944:	e0af      	b.n	8003aa6 <sp_256_get_point_16_8+0x1a8>
        mask = 0 - (i == idx);
 8003946:	4295      	cmp	r5, r2
 8003948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800394c:	bf18      	it	ne
 800394e:	2300      	movne	r3, #0
        r->x[0] |= mask & table[i].x[0];
 8003950:	26c4      	movs	r6, #196	; 0xc4
 8003952:	fb06 f605 	mul.w	r6, r6, r5
 8003956:	198c      	adds	r4, r1, r6
 8003958:	598f      	ldr	r7, [r1, r6]
 800395a:	401f      	ands	r7, r3
 800395c:	6806      	ldr	r6, [r0, #0]
 800395e:	433e      	orrs	r6, r7
 8003960:	6006      	str	r6, [r0, #0]
        r->x[1] |= mask & table[i].x[1];
 8003962:	6866      	ldr	r6, [r4, #4]
 8003964:	ea06 0703 	and.w	r7, r6, r3
 8003968:	6846      	ldr	r6, [r0, #4]
 800396a:	433e      	orrs	r6, r7
 800396c:	6046      	str	r6, [r0, #4]
        r->x[2] |= mask & table[i].x[2];
 800396e:	68a6      	ldr	r6, [r4, #8]
 8003970:	ea06 0703 	and.w	r7, r6, r3
 8003974:	6886      	ldr	r6, [r0, #8]
 8003976:	433e      	orrs	r6, r7
 8003978:	6086      	str	r6, [r0, #8]
        r->x[3] |= mask & table[i].x[3];
 800397a:	68e6      	ldr	r6, [r4, #12]
 800397c:	ea06 0703 	and.w	r7, r6, r3
 8003980:	68c6      	ldr	r6, [r0, #12]
 8003982:	433e      	orrs	r6, r7
 8003984:	60c6      	str	r6, [r0, #12]
        r->x[4] |= mask & table[i].x[4];
 8003986:	6926      	ldr	r6, [r4, #16]
 8003988:	ea06 0703 	and.w	r7, r6, r3
 800398c:	6906      	ldr	r6, [r0, #16]
 800398e:	433e      	orrs	r6, r7
 8003990:	6106      	str	r6, [r0, #16]
        r->x[5] |= mask & table[i].x[5];
 8003992:	6966      	ldr	r6, [r4, #20]
 8003994:	ea06 0703 	and.w	r7, r6, r3
 8003998:	6946      	ldr	r6, [r0, #20]
 800399a:	433e      	orrs	r6, r7
 800399c:	6146      	str	r6, [r0, #20]
        r->x[6] |= mask & table[i].x[6];
 800399e:	69a6      	ldr	r6, [r4, #24]
 80039a0:	ea06 0703 	and.w	r7, r6, r3
 80039a4:	6986      	ldr	r6, [r0, #24]
 80039a6:	433e      	orrs	r6, r7
 80039a8:	6186      	str	r6, [r0, #24]
        r->x[7] |= mask & table[i].x[7];
 80039aa:	69e6      	ldr	r6, [r4, #28]
 80039ac:	ea06 0703 	and.w	r7, r6, r3
 80039b0:	69c6      	ldr	r6, [r0, #28]
 80039b2:	433e      	orrs	r6, r7
 80039b4:	61c6      	str	r6, [r0, #28]
        r->y[0] |= mask & table[i].y[0];
 80039b6:	6c26      	ldr	r6, [r4, #64]	; 0x40
 80039b8:	ea06 0703 	and.w	r7, r6, r3
 80039bc:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80039be:	433e      	orrs	r6, r7
 80039c0:	6406      	str	r6, [r0, #64]	; 0x40
        r->y[1] |= mask & table[i].y[1];
 80039c2:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80039c4:	ea06 0703 	and.w	r7, r6, r3
 80039c8:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80039ca:	433e      	orrs	r6, r7
 80039cc:	6446      	str	r6, [r0, #68]	; 0x44
        r->y[2] |= mask & table[i].y[2];
 80039ce:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80039d0:	ea06 0703 	and.w	r7, r6, r3
 80039d4:	6c86      	ldr	r6, [r0, #72]	; 0x48
 80039d6:	433e      	orrs	r6, r7
 80039d8:	6486      	str	r6, [r0, #72]	; 0x48
        r->y[3] |= mask & table[i].y[3];
 80039da:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 80039dc:	ea06 0703 	and.w	r7, r6, r3
 80039e0:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 80039e2:	433e      	orrs	r6, r7
 80039e4:	64c6      	str	r6, [r0, #76]	; 0x4c
        r->y[4] |= mask & table[i].y[4];
 80039e6:	6d26      	ldr	r6, [r4, #80]	; 0x50
 80039e8:	ea06 0703 	and.w	r7, r6, r3
 80039ec:	6d06      	ldr	r6, [r0, #80]	; 0x50
 80039ee:	433e      	orrs	r6, r7
 80039f0:	6506      	str	r6, [r0, #80]	; 0x50
        r->y[5] |= mask & table[i].y[5];
 80039f2:	6d66      	ldr	r6, [r4, #84]	; 0x54
 80039f4:	ea06 0703 	and.w	r7, r6, r3
 80039f8:	6d46      	ldr	r6, [r0, #84]	; 0x54
 80039fa:	433e      	orrs	r6, r7
 80039fc:	6546      	str	r6, [r0, #84]	; 0x54
        r->y[6] |= mask & table[i].y[6];
 80039fe:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8003a00:	ea06 0703 	and.w	r7, r6, r3
 8003a04:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8003a06:	433e      	orrs	r6, r7
 8003a08:	6586      	str	r6, [r0, #88]	; 0x58
        r->y[7] |= mask & table[i].y[7];
 8003a0a:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8003a0c:	ea06 0703 	and.w	r7, r6, r3
 8003a10:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8003a12:	433e      	orrs	r6, r7
 8003a14:	65c6      	str	r6, [r0, #92]	; 0x5c
        r->z[0] |= mask & table[i].z[0];
 8003a16:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 8003a1a:	ea06 0703 	and.w	r7, r6, r3
 8003a1e:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 8003a22:	433e      	orrs	r6, r7
 8003a24:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
        r->z[1] |= mask & table[i].z[1];
 8003a28:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8003a2c:	ea06 0703 	and.w	r7, r6, r3
 8003a30:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8003a34:	433e      	orrs	r6, r7
 8003a36:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
        r->z[2] |= mask & table[i].z[2];
 8003a3a:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8003a3e:	ea06 0703 	and.w	r7, r6, r3
 8003a42:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 8003a46:	433e      	orrs	r6, r7
 8003a48:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
        r->z[3] |= mask & table[i].z[3];
 8003a4c:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8003a50:	ea06 0703 	and.w	r7, r6, r3
 8003a54:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
 8003a58:	433e      	orrs	r6, r7
 8003a5a:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
        r->z[4] |= mask & table[i].z[4];
 8003a5e:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 8003a62:	ea06 0703 	and.w	r7, r6, r3
 8003a66:	f8d0 6090 	ldr.w	r6, [r0, #144]	; 0x90
 8003a6a:	433e      	orrs	r6, r7
 8003a6c:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
        r->z[5] |= mask & table[i].z[5];
 8003a70:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
 8003a74:	ea06 0703 	and.w	r7, r6, r3
 8003a78:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
 8003a7c:	433e      	orrs	r6, r7
 8003a7e:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
        r->z[6] |= mask & table[i].z[6];
 8003a82:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 8003a86:	ea06 0703 	and.w	r7, r6, r3
 8003a8a:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
 8003a8e:	433e      	orrs	r6, r7
 8003a90:	f8c0 6098 	str.w	r6, [r0, #152]	; 0x98
        r->z[7] |= mask & table[i].z[7];
 8003a94:	f8d4 409c 	ldr.w	r4, [r4, #156]	; 0x9c
 8003a98:	4023      	ands	r3, r4
 8003a9a:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 8003a9e:	431c      	orrs	r4, r3
 8003aa0:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    for (i = 1; i < 16; i++) {
 8003aa4:	3501      	adds	r5, #1
 8003aa6:	2d0f      	cmp	r5, #15
 8003aa8:	f77f af4d 	ble.w	8003946 <sp_256_get_point_16_8+0x48>
    }
}
 8003aac:	bcf0      	pop	{r4, r5, r6, r7}
 8003aae:	4770      	bx	lr

08003ab0 <sp_256_get_entry_16_8>:
 * table  Table - start of the entires to access
 * idx    Index of entry to retrieve.
 */
static void sp_256_get_entry_16_8(sp_point_256* r,
    const sp_table_entry_256* table, int idx)
{
 8003ab0:	b4f0      	push	{r4, r5, r6, r7}
    int i;
    sp_digit mask;

    r->x[0] = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	6003      	str	r3, [r0, #0]
    r->x[1] = 0;
 8003ab6:	6043      	str	r3, [r0, #4]
    r->x[2] = 0;
 8003ab8:	6083      	str	r3, [r0, #8]
    r->x[3] = 0;
 8003aba:	60c3      	str	r3, [r0, #12]
    r->x[4] = 0;
 8003abc:	6103      	str	r3, [r0, #16]
    r->x[5] = 0;
 8003abe:	6143      	str	r3, [r0, #20]
    r->x[6] = 0;
 8003ac0:	6183      	str	r3, [r0, #24]
    r->x[7] = 0;
 8003ac2:	61c3      	str	r3, [r0, #28]
    r->y[0] = 0;
 8003ac4:	6403      	str	r3, [r0, #64]	; 0x40
    r->y[1] = 0;
 8003ac6:	6443      	str	r3, [r0, #68]	; 0x44
    r->y[2] = 0;
 8003ac8:	6483      	str	r3, [r0, #72]	; 0x48
    r->y[3] = 0;
 8003aca:	64c3      	str	r3, [r0, #76]	; 0x4c
    r->y[4] = 0;
 8003acc:	6503      	str	r3, [r0, #80]	; 0x50
    r->y[5] = 0;
 8003ace:	6543      	str	r3, [r0, #84]	; 0x54
    r->y[6] = 0;
 8003ad0:	6583      	str	r3, [r0, #88]	; 0x58
    r->y[7] = 0;
 8003ad2:	65c3      	str	r3, [r0, #92]	; 0x5c
    for (i = 1; i < 16; i++) {
 8003ad4:	2501      	movs	r5, #1
 8003ad6:	e066      	b.n	8003ba6 <sp_256_get_entry_16_8+0xf6>
        mask = 0 - (i == idx);
 8003ad8:	4295      	cmp	r5, r2
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ade:	bf18      	it	ne
 8003ae0:	2300      	movne	r3, #0
        r->x[0] |= mask & table[i].x[0];
 8003ae2:	01ae      	lsls	r6, r5, #6
 8003ae4:	eb01 1485 	add.w	r4, r1, r5, lsl #6
 8003ae8:	598f      	ldr	r7, [r1, r6]
 8003aea:	401f      	ands	r7, r3
 8003aec:	6806      	ldr	r6, [r0, #0]
 8003aee:	433e      	orrs	r6, r7
 8003af0:	6006      	str	r6, [r0, #0]
        r->x[1] |= mask & table[i].x[1];
 8003af2:	6866      	ldr	r6, [r4, #4]
 8003af4:	ea06 0703 	and.w	r7, r6, r3
 8003af8:	6846      	ldr	r6, [r0, #4]
 8003afa:	433e      	orrs	r6, r7
 8003afc:	6046      	str	r6, [r0, #4]
        r->x[2] |= mask & table[i].x[2];
 8003afe:	68a6      	ldr	r6, [r4, #8]
 8003b00:	ea06 0703 	and.w	r7, r6, r3
 8003b04:	6886      	ldr	r6, [r0, #8]
 8003b06:	433e      	orrs	r6, r7
 8003b08:	6086      	str	r6, [r0, #8]
        r->x[3] |= mask & table[i].x[3];
 8003b0a:	68e6      	ldr	r6, [r4, #12]
 8003b0c:	ea06 0703 	and.w	r7, r6, r3
 8003b10:	68c6      	ldr	r6, [r0, #12]
 8003b12:	433e      	orrs	r6, r7
 8003b14:	60c6      	str	r6, [r0, #12]
        r->x[4] |= mask & table[i].x[4];
 8003b16:	6926      	ldr	r6, [r4, #16]
 8003b18:	ea06 0703 	and.w	r7, r6, r3
 8003b1c:	6906      	ldr	r6, [r0, #16]
 8003b1e:	433e      	orrs	r6, r7
 8003b20:	6106      	str	r6, [r0, #16]
        r->x[5] |= mask & table[i].x[5];
 8003b22:	6966      	ldr	r6, [r4, #20]
 8003b24:	ea06 0703 	and.w	r7, r6, r3
 8003b28:	6946      	ldr	r6, [r0, #20]
 8003b2a:	433e      	orrs	r6, r7
 8003b2c:	6146      	str	r6, [r0, #20]
        r->x[6] |= mask & table[i].x[6];
 8003b2e:	69a6      	ldr	r6, [r4, #24]
 8003b30:	ea06 0703 	and.w	r7, r6, r3
 8003b34:	6986      	ldr	r6, [r0, #24]
 8003b36:	433e      	orrs	r6, r7
 8003b38:	6186      	str	r6, [r0, #24]
        r->x[7] |= mask & table[i].x[7];
 8003b3a:	69e6      	ldr	r6, [r4, #28]
 8003b3c:	ea06 0703 	and.w	r7, r6, r3
 8003b40:	69c6      	ldr	r6, [r0, #28]
 8003b42:	433e      	orrs	r6, r7
 8003b44:	61c6      	str	r6, [r0, #28]
        r->y[0] |= mask & table[i].y[0];
 8003b46:	6a26      	ldr	r6, [r4, #32]
 8003b48:	ea06 0703 	and.w	r7, r6, r3
 8003b4c:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003b4e:	433e      	orrs	r6, r7
 8003b50:	6406      	str	r6, [r0, #64]	; 0x40
        r->y[1] |= mask & table[i].y[1];
 8003b52:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003b54:	ea06 0703 	and.w	r7, r6, r3
 8003b58:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003b5a:	433e      	orrs	r6, r7
 8003b5c:	6446      	str	r6, [r0, #68]	; 0x44
        r->y[2] |= mask & table[i].y[2];
 8003b5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b60:	ea06 0703 	and.w	r7, r6, r3
 8003b64:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8003b66:	433e      	orrs	r6, r7
 8003b68:	6486      	str	r6, [r0, #72]	; 0x48
        r->y[3] |= mask & table[i].y[3];
 8003b6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b6c:	ea06 0703 	and.w	r7, r6, r3
 8003b70:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8003b72:	433e      	orrs	r6, r7
 8003b74:	64c6      	str	r6, [r0, #76]	; 0x4c
        r->y[4] |= mask & table[i].y[4];
 8003b76:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003b78:	ea06 0703 	and.w	r7, r6, r3
 8003b7c:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8003b7e:	433e      	orrs	r6, r7
 8003b80:	6506      	str	r6, [r0, #80]	; 0x50
        r->y[5] |= mask & table[i].y[5];
 8003b82:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8003b84:	ea06 0703 	and.w	r7, r6, r3
 8003b88:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8003b8a:	433e      	orrs	r6, r7
 8003b8c:	6546      	str	r6, [r0, #84]	; 0x54
        r->y[6] |= mask & table[i].y[6];
 8003b8e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003b90:	ea06 0703 	and.w	r7, r6, r3
 8003b94:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8003b96:	433e      	orrs	r6, r7
 8003b98:	6586      	str	r6, [r0, #88]	; 0x58
        r->y[7] |= mask & table[i].y[7];
 8003b9a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8003b9c:	4023      	ands	r3, r4
 8003b9e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8003ba0:	431c      	orrs	r4, r3
 8003ba2:	65c4      	str	r4, [r0, #92]	; 0x5c
    for (i = 1; i < 16; i++) {
 8003ba4:	3501      	adds	r5, #1
 8003ba6:	2d0f      	cmp	r5, #15
 8003ba8:	dd96      	ble.n	8003ad8 <sp_256_get_entry_16_8+0x28>
    }
}
 8003baa:	bcf0      	pop	{r4, r5, r6, r7}
 8003bac:	4770      	bx	lr

08003bae <sp_256_iszero_8>:
 * a  Number to check.
 * returns 1 if the number is zero and 0 otherwise.
 */
static int sp_256_iszero_8(const sp_digit* a)
{
    return (a[0] | a[1] | a[2] | a[3] | a[4] | a[5] | a[6] | a[7]) == 0;
 8003bae:	6803      	ldr	r3, [r0, #0]
 8003bb0:	6842      	ldr	r2, [r0, #4]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	6882      	ldr	r2, [r0, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	68c2      	ldr	r2, [r0, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	6902      	ldr	r2, [r0, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	6942      	ldr	r2, [r0, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	6982      	ldr	r2, [r0, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	69c2      	ldr	r2, [r0, #28]
 8003bca:	4313      	orrs	r3, r2
}
 8003bcc:	bf0c      	ite	eq
 8003bce:	2001      	moveq	r0, #1
 8003bd0:	2000      	movne	r0, #0
 8003bd2:	4770      	bx	lr

08003bd4 <sp_256_from_bin>:
 * size  Maximum number of bytes to convert
 * a  Byte array.
 * n  Number of bytes in array to read.
 */
static void sp_256_from_bin(sp_digit* r, int size, const byte* a, int n)
{
 8003bd4:	b4f0      	push	{r4, r5, r6, r7}
    int i;
    int j = 0;
    word32 s = 0;

    r[0] = 0;
 8003bd6:	2400      	movs	r4, #0
 8003bd8:	6004      	str	r4, [r0, #0]
    for (i = n-1; i >= 0; i--) {
 8003bda:	3b01      	subs	r3, #1
    word32 s = 0;
 8003bdc:	4625      	mov	r5, r4
    for (i = n-1; i >= 0; i--) {
 8003bde:	e001      	b.n	8003be4 <sp_256_from_bin+0x10>
            }
            r[++j] = (sp_digit)a[i] >> s;
            s = 8U - s;
        }
        else {
            s += 8U;
 8003be0:	3508      	adds	r5, #8
    for (i = n-1; i >= 0; i--) {
 8003be2:	3b01      	subs	r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	db18      	blt.n	8003c1a <sp_256_from_bin+0x46>
        r[j] |= (((sp_digit)a[i]) << s);
 8003be8:	eb02 0c03 	add.w	ip, r2, r3
 8003bec:	5cd6      	ldrb	r6, [r2, r3]
 8003bee:	fa06 f705 	lsl.w	r7, r6, r5
 8003bf2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8003bf6:	433e      	orrs	r6, r7
 8003bf8:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        if (s >= 24U) {
 8003bfc:	2d17      	cmp	r5, #23
 8003bfe:	d9ef      	bls.n	8003be0 <sp_256_from_bin+0xc>
            s = 32U - s;
 8003c00:	f1c5 0720 	rsb	r7, r5, #32
            if (j + 1 >= size) {
 8003c04:	1c66      	adds	r6, r4, #1
 8003c06:	428e      	cmp	r6, r1
 8003c08:	da07      	bge.n	8003c1a <sp_256_from_bin+0x46>
            r[++j] = (sp_digit)a[i] >> s;
 8003c0a:	f89c 4000 	ldrb.w	r4, [ip]
 8003c0e:	40fc      	lsrs	r4, r7
 8003c10:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
            s = 8U - s;
 8003c14:	3d18      	subs	r5, #24
            r[++j] = (sp_digit)a[i] >> s;
 8003c16:	4634      	mov	r4, r6
 8003c18:	e7e3      	b.n	8003be2 <sp_256_from_bin+0xe>
        }
    }

    for (j++; j < size; j++) {
 8003c1a:	3401      	adds	r4, #1
 8003c1c:	428c      	cmp	r4, r1
 8003c1e:	da04      	bge.n	8003c2a <sp_256_from_bin+0x56>
        r[j] = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
    for (j++; j < size; j++) {
 8003c26:	3401      	adds	r4, #1
 8003c28:	e7f8      	b.n	8003c1c <sp_256_from_bin+0x48>
    }
}
 8003c2a:	bcf0      	pop	{r4, r5, r6, r7}
 8003c2c:	4770      	bx	lr

08003c2e <sp_256_sub_in_place_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_sub_in_place_8(sp_digit* a,
        const sp_digit* b)
{
 8003c2e:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
 8003c32:	4602      	mov	r2, r0
    sp_digit c = 0;
    __asm__ __volatile__ (
 8003c34:	2000      	movs	r0, #0
 8003c36:	4690      	mov	r8, r2
 8003c38:	f108 0820 	add.w	r8, r8, #32
 8003c3c:	f04f 0500 	mov.w	r5, #0
 8003c40:	1a2d      	subs	r5, r5, r0
 8003c42:	6813      	ldr	r3, [r2, #0]
 8003c44:	6854      	ldr	r4, [r2, #4]
 8003c46:	680d      	ldr	r5, [r1, #0]
 8003c48:	684e      	ldr	r6, [r1, #4]
 8003c4a:	41ab      	sbcs	r3, r5
 8003c4c:	41b4      	sbcs	r4, r6
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	6054      	str	r4, [r2, #4]
 8003c52:	eb60 0000 	sbc.w	r0, r0, r0
 8003c56:	f102 0208 	add.w	r2, r2, #8
 8003c5a:	f101 0108 	add.w	r1, r1, #8
 8003c5e:	4542      	cmp	r2, r8
 8003c60:	d1ec      	bne.n	8003c3c <sp_256_sub_in_place_8+0xe>
        :
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );

    return c;
}
 8003c62:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8003c66:	4770      	bx	lr

08003c68 <sp_256_mul_d_8>:
 * a  A single precision integer.
 * b  A single precision digit.
 */
SP_NOINLINE static void sp_256_mul_d_8(sp_digit* r, const sp_digit* a,
        sp_digit b)
{
 8003c68:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    __asm__ __volatile__ (
 8003c6c:	f101 0920 	add.w	r9, r1, #32
 8003c70:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c74:	fba6 5302 	umull	r5, r3, r6, r2
 8003c78:	f04f 0400 	mov.w	r4, #0
 8003c7c:	f840 5b04 	str.w	r5, [r0], #4
 8003c80:	f04f 0500 	mov.w	r5, #0
 8003c84:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c88:	fba6 6802 	umull	r6, r8, r6, r2
 8003c8c:	199b      	adds	r3, r3, r6
 8003c8e:	eb54 0408 	adcs.w	r4, r4, r8
 8003c92:	f145 0500 	adc.w	r5, r5, #0
 8003c96:	f840 3b04 	str.w	r3, [r0], #4
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	462c      	mov	r4, r5
 8003c9e:	4549      	cmp	r1, r9
 8003ca0:	dbee      	blt.n	8003c80 <sp_256_mul_d_8+0x18>
 8003ca2:	6003      	str	r3, [r0, #0]
        "str	r3, [%[r]]\n\t"
        : [r] "+r" (r), [a] "+r" (a)
        : [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9"
    );
}
 8003ca4:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
 8003ca8:	4770      	bx	lr

08003caa <div_256_word_8>:
 *
 * Note that this is an approximate div. It may give an answer 1 larger.
 */
SP_NOINLINE static sp_digit div_256_word_8(sp_digit d1, sp_digit d0,
        sp_digit div)
{
 8003caa:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
    sp_digit r = 0;

    __asm__ __volatile__ (
 8003cae:	2300      	movs	r3, #0
 8003cb0:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8003cb4:	f106 0601 	add.w	r6, r6, #1
 8003cb8:	fbb0 f4f6 	udiv	r4, r0, r6
 8003cbc:	ea4f 4804 	mov.w	r8, r4, lsl #16
 8003cc0:	fba2 4508 	umull	r4, r5, r2, r8
 8003cc4:	1b09      	subs	r1, r1, r4
 8003cc6:	eb60 0005 	sbc.w	r0, r0, r5
 8003cca:	fbb0 f5f6 	udiv	r5, r0, r6
 8003cce:	ea4f 4405 	mov.w	r4, r5, lsl #16
 8003cd2:	44a0      	add	r8, r4
 8003cd4:	fba2 4504 	umull	r4, r5, r2, r4
 8003cd8:	1b09      	subs	r1, r1, r4
 8003cda:	eb60 0005 	sbc.w	r0, r0, r5
 8003cde:	ea4f 4400 	mov.w	r4, r0, lsl #16
 8003ce2:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8003ce6:	fbb4 f4f6 	udiv	r4, r4, r6
 8003cea:	44a0      	add	r8, r4
 8003cec:	fba2 4504 	umull	r4, r5, r2, r4
 8003cf0:	1b09      	subs	r1, r1, r4
 8003cf2:	eb60 0005 	sbc.w	r0, r0, r5
 8003cf6:	ea4f 4400 	mov.w	r4, r0, lsl #16
 8003cfa:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8003cfe:	fbb4 f4f6 	udiv	r4, r4, r6
 8003d02:	44a0      	add	r8, r4
 8003d04:	fba2 4504 	umull	r4, r5, r2, r4
 8003d08:	1b09      	subs	r1, r1, r4
 8003d0a:	eb60 0005 	sbc.w	r0, r0, r5
 8003d0e:	fbb1 f4f2 	udiv	r4, r1, r2
 8003d12:	44a0      	add	r8, r4
 8003d14:	4643      	mov	r3, r8
        : [r] "+r" (r)
        : [d1] "r" (d1), [d0] "r" (d0), [div] "r" (div)
        : "r4", "r5", "r6", "r8"
    );
    return r;
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8003d1c:	4770      	bx	lr

08003d1e <sp_256_mask_8>:
static void sp_256_mask_8(sp_digit* r, const sp_digit* a, sp_digit m)
{
#ifdef WOLFSSL_SP_SMALL
    int i;

    for (i=0; i<8; i++) {
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b07      	cmp	r3, #7
 8003d22:	dc0a      	bgt.n	8003d3a <sp_256_mask_8+0x1c>
{
 8003d24:	b410      	push	{r4}
        r[i] = a[i] & m;
 8003d26:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003d2a:	4014      	ands	r4, r2
 8003d2c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (i=0; i<8; i++) {
 8003d30:	3301      	adds	r3, #1
 8003d32:	2b07      	cmp	r3, #7
 8003d34:	ddf7      	ble.n	8003d26 <sp_256_mask_8+0x8>
    r[4] = a[4] & m;
    r[5] = a[5] & m;
    r[6] = a[6] & m;
    r[7] = a[7] & m;
#endif
}
 8003d36:	bc10      	pop	{r4}
 8003d38:	4770      	bx	lr
 8003d3a:	4770      	bx	lr

08003d3c <sp_256_mont_mul_order_8>:
 * r  Result of the multiplication.
 * a  First operand of the multiplication.
 * b  Second operand of the multiplication.
 */
static void sp_256_mont_mul_order_8(sp_digit* r, const sp_digit* a, const sp_digit* b)
{
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4604      	mov	r4, r0
    sp_256_mul_8(r, a, b);
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <sp_256_mont_mul_order_8+0x14>)
 8003d42:	4798      	blx	r3
    sp_256_mont_reduce_order_8(r, p256_order, p256_mp_order);
 8003d44:	4a03      	ldr	r2, [pc, #12]	; (8003d54 <sp_256_mont_mul_order_8+0x18>)
 8003d46:	4904      	ldr	r1, [pc, #16]	; (8003d58 <sp_256_mont_mul_order_8+0x1c>)
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <sp_256_mont_mul_order_8+0x20>)
 8003d4c:	4798      	blx	r3
}
 8003d4e:	bd10      	pop	{r4, pc}
 8003d50:	080016a5 	.word	0x080016a5
 8003d54:	ee00bc4f 	.word	0xee00bc4f
 8003d58:	08005654 	.word	0x08005654
 8003d5c:	080032c5 	.word	0x080032c5

08003d60 <sp_256_mont_sqr_order_8>:
 *
 * r  Result of the squaring.
 * a  Number to square.
 */
static void sp_256_mont_sqr_order_8(sp_digit* r, const sp_digit* a)
{
 8003d60:	b510      	push	{r4, lr}
 8003d62:	4604      	mov	r4, r0
    sp_256_sqr_8(r, a);
 8003d64:	4b03      	ldr	r3, [pc, #12]	; (8003d74 <sp_256_mont_sqr_order_8+0x14>)
 8003d66:	4798      	blx	r3
    sp_256_mont_reduce_order_8(r, p256_order, p256_mp_order);
 8003d68:	4a03      	ldr	r2, [pc, #12]	; (8003d78 <sp_256_mont_sqr_order_8+0x18>)
 8003d6a:	4904      	ldr	r1, [pc, #16]	; (8003d7c <sp_256_mont_sqr_order_8+0x1c>)
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <sp_256_mont_sqr_order_8+0x20>)
 8003d70:	4798      	blx	r3
}
 8003d72:	bd10      	pop	{r4, pc}
 8003d74:	08001c1d 	.word	0x08001c1d
 8003d78:	ee00bc4f 	.word	0xee00bc4f
 8003d7c:	08005654 	.word	0x08005654
 8003d80:	080032c5 	.word	0x080032c5

08003d84 <sp_256_from_mp>:
{
 8003d84:	b570      	push	{r4, r5, r6, lr}
 8003d86:	4605      	mov	r5, r0
 8003d88:	460c      	mov	r4, r1
 8003d8a:	4616      	mov	r6, r2
    XMEMCPY(r, a->dp, sizeof(sp_digit) * a->used);
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	f851 2b08 	ldr.w	r2, [r1], #8
 8003d92:	0092      	lsls	r2, r2, #2
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <sp_256_from_mp+0x28>)
 8003d96:	4798      	blx	r3
    for (j = a->used; j < size; j++) {
 8003d98:	6833      	ldr	r3, [r6, #0]
 8003d9a:	42a3      	cmp	r3, r4
 8003d9c:	da04      	bge.n	8003da8 <sp_256_from_mp+0x24>
        r[j] = 0;
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (j = a->used; j < size; j++) {
 8003da4:	3301      	adds	r3, #1
 8003da6:	e7f8      	b.n	8003d9a <sp_256_from_mp+0x16>
}
 8003da8:	bd70      	pop	{r4, r5, r6, pc}
 8003daa:	bf00      	nop
 8003dac:	080001a9 	.word	0x080001a9

08003db0 <sp_256_mont_inv_8>:
{
 8003db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	4680      	mov	r8, r0
 8003db8:	460e      	mov	r6, r1
 8003dba:	4615      	mov	r5, r2
    XMEMCPY(t, a, sizeof(sp_digit) * 8);
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <sp_256_mont_inv_8+0x78>)
 8003dc2:	4798      	blx	r3
    for (i=254; i>=0; i--) {
 8003dc4:	24fe      	movs	r4, #254	; 0xfe
 8003dc6:	e00f      	b.n	8003de8 <sp_256_mont_inv_8+0x38>
        if (p256_mod_minus_2[i / 32] & ((sp_digit)1 << (i % 32)))
 8003dc8:	115b      	asrs	r3, r3, #5
 8003dca:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <sp_256_mont_inv_8+0x7c>)
 8003dcc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003dd0:	4263      	negs	r3, r4
 8003dd2:	f004 021f 	and.w	r2, r4, #31
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	bf58      	it	pl
 8003ddc:	425a      	negpl	r2, r3
 8003dde:	2301      	movs	r3, #1
 8003de0:	4093      	lsls	r3, r2
 8003de2:	4219      	tst	r1, r3
 8003de4:	d10e      	bne.n	8003e04 <sp_256_mont_inv_8+0x54>
    for (i=254; i>=0; i--) {
 8003de6:	3c01      	subs	r4, #1
 8003de8:	2c00      	cmp	r4, #0
 8003dea:	db14      	blt.n	8003e16 <sp_256_mont_inv_8+0x66>
        sp_256_mont_sqr_8(t, t, p256_mod, p256_mp_mod);
 8003dec:	2301      	movs	r3, #1
 8003dee:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <sp_256_mont_inv_8+0x80>)
 8003df0:	4629      	mov	r1, r5
 8003df2:	4628      	mov	r0, r5
 8003df4:	4f0f      	ldr	r7, [pc, #60]	; (8003e34 <sp_256_mont_inv_8+0x84>)
 8003df6:	47b8      	blx	r7
        if (p256_mod_minus_2[i / 32] & ((sp_digit)1 << (i % 32)))
 8003df8:	4623      	mov	r3, r4
 8003dfa:	2c00      	cmp	r4, #0
 8003dfc:	dae4      	bge.n	8003dc8 <sp_256_mont_inv_8+0x18>
 8003dfe:	f104 031f 	add.w	r3, r4, #31
 8003e02:	e7e1      	b.n	8003dc8 <sp_256_mont_inv_8+0x18>
            sp_256_mont_mul_8(t, t, a, p256_mod, p256_mp_mod);
 8003e04:	2301      	movs	r3, #1
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <sp_256_mont_inv_8+0x80>)
 8003e0a:	4632      	mov	r2, r6
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	4628      	mov	r0, r5
 8003e10:	4f09      	ldr	r7, [pc, #36]	; (8003e38 <sp_256_mont_inv_8+0x88>)
 8003e12:	47b8      	blx	r7
 8003e14:	e7e7      	b.n	8003de6 <sp_256_mont_inv_8+0x36>
    XMEMCPY(r, t, sizeof(sp_digit) * 8);
 8003e16:	2220      	movs	r2, #32
 8003e18:	4629      	mov	r1, r5
 8003e1a:	4640      	mov	r0, r8
 8003e1c:	4b02      	ldr	r3, [pc, #8]	; (8003e28 <sp_256_mont_inv_8+0x78>)
 8003e1e:	4798      	blx	r3
}
 8003e20:	b002      	add	sp, #8
 8003e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e26:	bf00      	nop
 8003e28:	080001a9 	.word	0x080001a9
 8003e2c:	080055f4 	.word	0x080055f4
 8003e30:	080055d4 	.word	0x080055d4
 8003e34:	08002b31 	.word	0x08002b31
 8003e38:	08002385 	.word	0x08002385

08003e3c <sp_256_mont_inv_order_8>:
}
#endif /* WOLFSSL_SP_NONBLOCK */

static void sp_256_mont_inv_order_8(sp_digit* r, const sp_digit* a,
        sp_digit* td)
{
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	4607      	mov	r7, r0
 8003e40:	460e      	mov	r6, r1
 8003e42:	4615      	mov	r5, r2
#ifdef WOLFSSL_SP_SMALL
    sp_digit* t = td;
    int i;

    XMEMCPY(t, a, sizeof(sp_digit) * 8);
 8003e44:	2220      	movs	r2, #32
 8003e46:	4628      	mov	r0, r5
 8003e48:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <sp_256_mont_inv_order_8+0x64>)
 8003e4a:	4798      	blx	r3
    for (i=254; i>=0; i--) {
 8003e4c:	24fe      	movs	r4, #254	; 0xfe
 8003e4e:	e00f      	b.n	8003e70 <sp_256_mont_inv_order_8+0x34>
        sp_256_mont_sqr_order_8(t, t);
        if ((p256_order_minus_2[i / 32] & ((sp_int_digit)1 << (i % 32))) != 0) {
 8003e50:	115b      	asrs	r3, r3, #5
 8003e52:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <sp_256_mont_inv_order_8+0x68>)
 8003e54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e58:	4263      	negs	r3, r4
 8003e5a:	f004 021f 	and.w	r2, r4, #31
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	bf58      	it	pl
 8003e64:	425a      	negpl	r2, r3
 8003e66:	2301      	movs	r3, #1
 8003e68:	4093      	lsls	r3, r2
 8003e6a:	4219      	tst	r1, r3
 8003e6c:	d10c      	bne.n	8003e88 <sp_256_mont_inv_order_8+0x4c>
    for (i=254; i>=0; i--) {
 8003e6e:	3c01      	subs	r4, #1
 8003e70:	2c00      	cmp	r4, #0
 8003e72:	db0f      	blt.n	8003e94 <sp_256_mont_inv_order_8+0x58>
        sp_256_mont_sqr_order_8(t, t);
 8003e74:	4629      	mov	r1, r5
 8003e76:	4628      	mov	r0, r5
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <sp_256_mont_inv_order_8+0x6c>)
 8003e7a:	4798      	blx	r3
        if ((p256_order_minus_2[i / 32] & ((sp_int_digit)1 << (i % 32))) != 0) {
 8003e7c:	4623      	mov	r3, r4
 8003e7e:	2c00      	cmp	r4, #0
 8003e80:	dae6      	bge.n	8003e50 <sp_256_mont_inv_order_8+0x14>
 8003e82:	f104 031f 	add.w	r3, r4, #31
 8003e86:	e7e3      	b.n	8003e50 <sp_256_mont_inv_order_8+0x14>
            sp_256_mont_mul_order_8(t, t, a);
 8003e88:	4632      	mov	r2, r6
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	4b07      	ldr	r3, [pc, #28]	; (8003eac <sp_256_mont_inv_order_8+0x70>)
 8003e90:	4798      	blx	r3
 8003e92:	e7ec      	b.n	8003e6e <sp_256_mont_inv_order_8+0x32>
        }
    }
    XMEMCPY(r, t, sizeof(sp_digit) * 8U);
 8003e94:	2220      	movs	r2, #32
 8003e96:	4629      	mov	r1, r5
 8003e98:	4638      	mov	r0, r7
 8003e9a:	4b01      	ldr	r3, [pc, #4]	; (8003ea0 <sp_256_mont_inv_order_8+0x64>)
 8003e9c:	4798      	blx	r3
    /* t2= a^ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632540 */
    sp_256_mont_sqr_n_order_8(t2, t2, 4);
    /* r = a^ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f */
    sp_256_mont_mul_order_8(r, t2, t3);
#endif /* WOLFSSL_SP_SMALL */
}
 8003e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ea0:	080001a9 	.word	0x080001a9
 8003ea4:	08005674 	.word	0x08005674
 8003ea8:	08003d61 	.word	0x08003d61
 8003eac:	08003d3d 	.word	0x08003d3d

08003eb0 <sp_256_proj_point_add_8>:
{
 8003eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb4:	b08f      	sub	sp, #60	; 0x3c
 8003eb6:	4606      	mov	r6, r0
 8003eb8:	460d      	mov	r5, r1
 8003eba:	4690      	mov	r8, r2
 8003ebc:	461f      	mov	r7, r3
    sp_digit* t2 = t + 2*8;
 8003ebe:	3340      	adds	r3, #64	; 0x40
 8003ec0:	9306      	str	r3, [sp, #24]
    sp_digit* t3 = t + 4*8;
 8003ec2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ec6:	9304      	str	r3, [sp, #16]
    sp_digit* t4 = t + 6*8;
 8003ec8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ecc:	9303      	str	r3, [sp, #12]
    sp_digit* t5 = t + 8*8;
 8003ece:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003ed2:	9307      	str	r3, [sp, #28]
    if (q == r) {
 8003ed4:	4282      	cmp	r2, r0
 8003ed6:	d02c      	beq.n	8003f32 <sp_256_proj_point_add_8+0x82>
    (void)sp_256_sub_8(t1, p256_mod, q->y);
 8003ed8:	f108 0340 	add.w	r3, r8, #64	; 0x40
 8003edc:	461c      	mov	r4, r3
 8003ede:	9308      	str	r3, [sp, #32]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4992      	ldr	r1, [pc, #584]	; (800412c <sp_256_proj_point_add_8+0x27c>)
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	4b92      	ldr	r3, [pc, #584]	; (8004130 <sp_256_proj_point_add_8+0x280>)
 8003ee8:	4798      	blx	r3
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 8003eea:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8003eee:	4641      	mov	r1, r8
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f8df a250 	ldr.w	sl, [pc, #592]	; 8004144 <sp_256_proj_point_add_8+0x294>
 8003ef6:	47d0      	blx	sl
 8003ef8:	4681      	mov	r9, r0
 8003efa:	f108 0380 	add.w	r3, r8, #128	; 0x80
 8003efe:	9305      	str	r3, [sp, #20]
 8003f00:	4619      	mov	r1, r3
 8003f02:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8003f06:	47d0      	blx	sl
 8003f08:	ea09 0900 	and.w	r9, r9, r0
        (sp_256_cmp_equal_8(p->y, q->y) | sp_256_cmp_equal_8(p->y, t1))) != 0) {
 8003f0c:	f105 0b40 	add.w	fp, r5, #64	; 0x40
 8003f10:	4621      	mov	r1, r4
 8003f12:	4658      	mov	r0, fp
 8003f14:	47d0      	blx	sl
 8003f16:	4604      	mov	r4, r0
 8003f18:	4639      	mov	r1, r7
 8003f1a:	4658      	mov	r0, fp
 8003f1c:	47d0      	blx	sl
 8003f1e:	4304      	orrs	r4, r0
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 8003f20:	ea19 0904 	ands.w	r9, r9, r4
 8003f24:	d008      	beq.n	8003f38 <sp_256_proj_point_add_8+0x88>
        sp_256_proj_point_dbl_8(r, p, t);
 8003f26:	463a      	mov	r2, r7
 8003f28:	4629      	mov	r1, r5
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	4b81      	ldr	r3, [pc, #516]	; (8004134 <sp_256_proj_point_add_8+0x284>)
 8003f2e:	4798      	blx	r3
 8003f30:	e0f9      	b.n	8004126 <sp_256_proj_point_add_8+0x276>
        p = q;
 8003f32:	4615      	mov	r5, r2
        q = a;
 8003f34:	4688      	mov	r8, r1
 8003f36:	e7cf      	b.n	8003ed8 <sp_256_proj_point_add_8+0x28>
        rp[0] = r;
 8003f38:	960a      	str	r6, [sp, #40]	; 0x28
        rp[1] = (sp_point_256*)t; /*lint !e9087 !e740*/
 8003f3a:	970b      	str	r7, [sp, #44]	; 0x2c
        XMEMSET(rp[1], 0, sizeof(sp_point_256));
 8003f3c:	22c4      	movs	r2, #196	; 0xc4
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4638      	mov	r0, r7
 8003f42:	4b7d      	ldr	r3, [pc, #500]	; (8004138 <sp_256_proj_point_add_8+0x288>)
 8003f44:	4798      	blx	r3
        x = rp[p->infinity | q->infinity]->x;
 8003f46:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8003f4a:	f8d8 20c0 	ldr.w	r2, [r8, #192]	; 0xc0
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	aa0e      	add	r2, sp, #56	; 0x38
 8003f52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003f56:	f853 ac10 	ldr.w	sl, [r3, #-16]
        y = rp[p->infinity | q->infinity]->y;
 8003f5a:	f10a 0440 	add.w	r4, sl, #64	; 0x40
        z = rp[p->infinity | q->infinity]->z;
 8003f5e:	f10a 0b80 	add.w	fp, sl, #128	; 0x80
        ap[0] = p;
 8003f62:	950c      	str	r5, [sp, #48]	; 0x30
        ap[1] = q;
 8003f64:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
        for (i=0; i<8; i++) {
 8003f68:	464b      	mov	r3, r9
 8003f6a:	e00b      	b.n	8003f84 <sp_256_proj_point_add_8+0xd4>
            r->x[i] = ap[p->infinity]->x[i];
 8003f6c:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8003f70:	a90e      	add	r1, sp, #56	; 0x38
 8003f72:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003f76:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8003f7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f7e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 8003f82:	3301      	adds	r3, #1
 8003f84:	2b07      	cmp	r3, #7
 8003f86:	ddf1      	ble.n	8003f6c <sp_256_proj_point_add_8+0xbc>
        for (i=0; i<8; i++) {
 8003f88:	464b      	mov	r3, r9
 8003f8a:	e00d      	b.n	8003fa8 <sp_256_proj_point_add_8+0xf8>
            r->y[i] = ap[p->infinity]->y[i];
 8003f8c:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8003f90:	a90e      	add	r1, sp, #56	; 0x38
 8003f92:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003f96:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8003f9a:	f103 0210 	add.w	r2, r3, #16
 8003f9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003fa2:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
        for (i=0; i<8; i++) {
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	2b07      	cmp	r3, #7
 8003faa:	ddef      	ble.n	8003f8c <sp_256_proj_point_add_8+0xdc>
 8003fac:	e00e      	b.n	8003fcc <sp_256_proj_point_add_8+0x11c>
            r->z[i] = ap[p->infinity]->z[i];
 8003fae:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8003fb2:	aa0e      	add	r2, sp, #56	; 0x38
 8003fb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003fb8:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8003fbc:	f109 0320 	add.w	r3, r9, #32
 8003fc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003fc4:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 8003fc8:	f109 0901 	add.w	r9, r9, #1
 8003fcc:	f1b9 0f07 	cmp.w	r9, #7
 8003fd0:	dded      	ble.n	8003fae <sp_256_proj_point_add_8+0xfe>
        r->infinity = ap[p->infinity]->infinity;
 8003fd2:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8003fd6:	aa0e      	add	r2, sp, #56	; 0x38
 8003fd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003fdc:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8003fe0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003fe4:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
        sp_256_mont_sqr_8(t1, q->z, p256_mod, p256_mp_mod);
 8003fe8:	4d50      	ldr	r5, [pc, #320]	; (800412c <sp_256_proj_point_add_8+0x27c>)
 8003fea:	2301      	movs	r3, #1
 8003fec:	462a      	mov	r2, r5
 8003fee:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003ff2:	4641      	mov	r1, r8
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	4e51      	ldr	r6, [pc, #324]	; (800413c <sp_256_proj_point_add_8+0x28c>)
 8003ff8:	47b0      	blx	r6
        sp_256_mont_mul_8(t3, t1, q->z, p256_mod, p256_mp_mod);
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	462b      	mov	r3, r5
 8004000:	f8cd 8014 	str.w	r8, [sp, #20]
 8004004:	4642      	mov	r2, r8
 8004006:	4639      	mov	r1, r7
 8004008:	9804      	ldr	r0, [sp, #16]
 800400a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8004148 <sp_256_proj_point_add_8+0x298>
 800400e:	47c0      	blx	r8
        sp_256_mont_mul_8(t1, t1, x, p256_mod, p256_mp_mod);
 8004010:	2301      	movs	r3, #1
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	462b      	mov	r3, r5
 8004016:	4652      	mov	r2, sl
 8004018:	4639      	mov	r1, r7
 800401a:	4638      	mov	r0, r7
 800401c:	47c0      	blx	r8
        sp_256_mont_sqr_8(t2, z, p256_mod, p256_mp_mod);
 800401e:	2301      	movs	r3, #1
 8004020:	462a      	mov	r2, r5
 8004022:	4659      	mov	r1, fp
 8004024:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8004028:	4648      	mov	r0, r9
 800402a:	47b0      	blx	r6
        sp_256_mont_mul_8(t4, t2, z, p256_mod, p256_mp_mod);
 800402c:	2301      	movs	r3, #1
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	462b      	mov	r3, r5
 8004032:	465a      	mov	r2, fp
 8004034:	4649      	mov	r1, r9
 8004036:	9e03      	ldr	r6, [sp, #12]
 8004038:	4630      	mov	r0, r6
 800403a:	47c0      	blx	r8
        sp_256_mont_mul_8(t2, t2, q->x, p256_mod, p256_mp_mod);
 800403c:	2301      	movs	r3, #1
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	462b      	mov	r3, r5
 8004042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004044:	4649      	mov	r1, r9
 8004046:	4648      	mov	r0, r9
 8004048:	47c0      	blx	r8
        sp_256_mont_mul_8(t3, t3, y, p256_mod, p256_mp_mod);
 800404a:	2301      	movs	r3, #1
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	462b      	mov	r3, r5
 8004050:	4622      	mov	r2, r4
 8004052:	9904      	ldr	r1, [sp, #16]
 8004054:	4608      	mov	r0, r1
 8004056:	47c0      	blx	r8
        sp_256_mont_mul_8(t4, t4, q->y, p256_mod, p256_mp_mod);
 8004058:	2301      	movs	r3, #1
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	462b      	mov	r3, r5
 800405e:	9a08      	ldr	r2, [sp, #32]
 8004060:	4631      	mov	r1, r6
 8004062:	9603      	str	r6, [sp, #12]
 8004064:	4630      	mov	r0, r6
 8004066:	47c0      	blx	r8
        sp_256_mont_sub_8(t2, t2, t1, p256_mod);
 8004068:	462b      	mov	r3, r5
 800406a:	463a      	mov	r2, r7
 800406c:	4649      	mov	r1, r9
 800406e:	464e      	mov	r6, r9
 8004070:	4648      	mov	r0, r9
 8004072:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800414c <sp_256_proj_point_add_8+0x29c>
 8004076:	47c8      	blx	r9
        sp_256_mont_sub_8(t4, t4, t3, p256_mod);
 8004078:	462b      	mov	r3, r5
 800407a:	9a04      	ldr	r2, [sp, #16]
 800407c:	9903      	ldr	r1, [sp, #12]
 800407e:	4608      	mov	r0, r1
 8004080:	47c8      	blx	r9
        sp_256_mont_mul_8(z, z, q->z, p256_mod, p256_mp_mod);
 8004082:	2301      	movs	r3, #1
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	462b      	mov	r3, r5
 8004088:	9a05      	ldr	r2, [sp, #20]
 800408a:	4659      	mov	r1, fp
 800408c:	4658      	mov	r0, fp
 800408e:	47c0      	blx	r8
        sp_256_mont_mul_8(z, z, t2, p256_mod, p256_mp_mod);
 8004090:	2301      	movs	r3, #1
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	462b      	mov	r3, r5
 8004096:	9606      	str	r6, [sp, #24]
 8004098:	4632      	mov	r2, r6
 800409a:	4659      	mov	r1, fp
 800409c:	4658      	mov	r0, fp
 800409e:	47c0      	blx	r8
        sp_256_mont_sqr_8(x, t4, p256_mod, p256_mp_mod);
 80040a0:	2301      	movs	r3, #1
 80040a2:	462a      	mov	r2, r5
 80040a4:	9903      	ldr	r1, [sp, #12]
 80040a6:	4650      	mov	r0, sl
 80040a8:	4e24      	ldr	r6, [pc, #144]	; (800413c <sp_256_proj_point_add_8+0x28c>)
 80040aa:	47b0      	blx	r6
        sp_256_mont_sqr_8(t5, t2, p256_mod, p256_mp_mod);
 80040ac:	2301      	movs	r3, #1
 80040ae:	462a      	mov	r2, r5
 80040b0:	f8dd b018 	ldr.w	fp, [sp, #24]
 80040b4:	4659      	mov	r1, fp
 80040b6:	9807      	ldr	r0, [sp, #28]
 80040b8:	47b0      	blx	r6
        sp_256_mont_mul_8(y, t1, t5, p256_mod, p256_mp_mod);
 80040ba:	2301      	movs	r3, #1
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	462b      	mov	r3, r5
 80040c0:	9e07      	ldr	r6, [sp, #28]
 80040c2:	4632      	mov	r2, r6
 80040c4:	4639      	mov	r1, r7
 80040c6:	4620      	mov	r0, r4
 80040c8:	47c0      	blx	r8
        sp_256_mont_mul_8(t5, t5, t2, p256_mod, p256_mp_mod);
 80040ca:	2301      	movs	r3, #1
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	462b      	mov	r3, r5
 80040d0:	465a      	mov	r2, fp
 80040d2:	4631      	mov	r1, r6
 80040d4:	4630      	mov	r0, r6
 80040d6:	47c0      	blx	r8
        sp_256_mont_sub_8(x, x, t5, p256_mod);
 80040d8:	462b      	mov	r3, r5
 80040da:	4632      	mov	r2, r6
 80040dc:	4651      	mov	r1, sl
 80040de:	4650      	mov	r0, sl
 80040e0:	47c8      	blx	r9
        sp_256_mont_dbl_8(t1, y, p256_mod);
 80040e2:	462a      	mov	r2, r5
 80040e4:	4621      	mov	r1, r4
 80040e6:	4638      	mov	r0, r7
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <sp_256_proj_point_add_8+0x290>)
 80040ea:	4798      	blx	r3
        sp_256_mont_sub_8(x, x, t1, p256_mod);
 80040ec:	462b      	mov	r3, r5
 80040ee:	463a      	mov	r2, r7
 80040f0:	4651      	mov	r1, sl
 80040f2:	4650      	mov	r0, sl
 80040f4:	47c8      	blx	r9
        sp_256_mont_sub_8(y, y, x, p256_mod);
 80040f6:	462b      	mov	r3, r5
 80040f8:	4652      	mov	r2, sl
 80040fa:	4621      	mov	r1, r4
 80040fc:	4620      	mov	r0, r4
 80040fe:	47c8      	blx	r9
        sp_256_mont_mul_8(y, y, t4, p256_mod, p256_mp_mod);
 8004100:	2301      	movs	r3, #1
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	462b      	mov	r3, r5
 8004106:	9a03      	ldr	r2, [sp, #12]
 8004108:	4621      	mov	r1, r4
 800410a:	4620      	mov	r0, r4
 800410c:	47c0      	blx	r8
        sp_256_mont_mul_8(t5, t5, t3, p256_mod, p256_mp_mod);
 800410e:	2301      	movs	r3, #1
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	462b      	mov	r3, r5
 8004114:	9a04      	ldr	r2, [sp, #16]
 8004116:	4631      	mov	r1, r6
 8004118:	4630      	mov	r0, r6
 800411a:	47c0      	blx	r8
        sp_256_mont_sub_8(y, y, t5, p256_mod);
 800411c:	462b      	mov	r3, r5
 800411e:	4632      	mov	r2, r6
 8004120:	4621      	mov	r1, r4
 8004122:	4620      	mov	r0, r4
 8004124:	47c8      	blx	r9
}
 8004126:	b00f      	add	sp, #60	; 0x3c
 8004128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800412c:	080055d4 	.word	0x080055d4
 8004130:	08002069 	.word	0x08002069
 8004134:	08003775 	.word	0x08003775
 8004138:	08000159 	.word	0x08000159
 800413c:	08002b31 	.word	0x08002b31
 8004140:	08003461 	.word	0x08003461
 8004144:	080038b5 	.word	0x080038b5
 8004148:	08002385 	.word	0x08002385
 800414c:	080035d7 	.word	0x080035d7

08004150 <sp_256_add_points_8>:
 * p2   Second point to add.
 * tmp  Temporary storage for intermediate numbers.
 */
static void sp_256_add_points_8(sp_point_256* p1, const sp_point_256* p2,
    sp_digit* tmp)
{
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	4604      	mov	r4, r0
 8004154:	460d      	mov	r5, r1
 8004156:	4616      	mov	r6, r2

        sp_256_proj_point_add_8(p1, p1, p2, tmp);
 8004158:	4613      	mov	r3, r2
 800415a:	460a      	mov	r2, r1
 800415c:	4601      	mov	r1, r0
 800415e:	4f13      	ldr	r7, [pc, #76]	; (80041ac <sp_256_add_points_8+0x5c>)
 8004160:	47b8      	blx	r7
    if (sp_256_iszero_8(p1->z)) {
 8004162:	f104 0780 	add.w	r7, r4, #128	; 0x80
 8004166:	4638      	mov	r0, r7
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <sp_256_add_points_8+0x60>)
 800416a:	4798      	blx	r3
 800416c:	b1b0      	cbz	r0, 800419c <sp_256_add_points_8+0x4c>
        if (sp_256_iszero_8(p1->x) && sp_256_iszero_8(p1->y)) {
 800416e:	4620      	mov	r0, r4
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <sp_256_add_points_8+0x60>)
 8004172:	4798      	blx	r3
 8004174:	b120      	cbz	r0, 8004180 <sp_256_add_points_8+0x30>
 8004176:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800417a:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <sp_256_add_points_8+0x60>)
 800417c:	4798      	blx	r3
 800417e:	b970      	cbnz	r0, 800419e <sp_256_add_points_8+0x4e>
                sp_256_proj_point_dbl_8(p1, p2, tmp);
        }
        else {
            /* Y ordinate is not used from here - don't set. */
            p1->x[0] = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	6023      	str	r3, [r4, #0]
            p1->x[1] = 0;
 8004184:	6063      	str	r3, [r4, #4]
            p1->x[2] = 0;
 8004186:	60a3      	str	r3, [r4, #8]
            p1->x[3] = 0;
 8004188:	60e3      	str	r3, [r4, #12]
            p1->x[4] = 0;
 800418a:	6123      	str	r3, [r4, #16]
            p1->x[5] = 0;
 800418c:	6163      	str	r3, [r4, #20]
            p1->x[6] = 0;
 800418e:	61a3      	str	r3, [r4, #24]
            p1->x[7] = 0;
 8004190:	61e3      	str	r3, [r4, #28]
            XMEMCPY(p1->z, p256_norm_mod, sizeof(p256_norm_mod));
 8004192:	2220      	movs	r2, #32
 8004194:	4907      	ldr	r1, [pc, #28]	; (80041b4 <sp_256_add_points_8+0x64>)
 8004196:	4638      	mov	r0, r7
 8004198:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <sp_256_add_points_8+0x68>)
 800419a:	4798      	blx	r3
        }
    }
}
 800419c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                sp_256_proj_point_dbl_8(p1, p2, tmp);
 800419e:	4632      	mov	r2, r6
 80041a0:	4629      	mov	r1, r5
 80041a2:	4620      	mov	r0, r4
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <sp_256_add_points_8+0x6c>)
 80041a6:	4798      	blx	r3
 80041a8:	e7f8      	b.n	800419c <sp_256_add_points_8+0x4c>
 80041aa:	bf00      	nop
 80041ac:	08003eb1 	.word	0x08003eb1
 80041b0:	08003baf 	.word	0x08003baf
 80041b4:	08005614 	.word	0x08005614
 80041b8:	080001a9 	.word	0x080001a9
 80041bc:	08003775 	.word	0x08003775

080041c0 <sp_256_map_8>:
{
 80041c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	4604      	mov	r4, r0
 80041c8:	460f      	mov	r7, r1
 80041ca:	4615      	mov	r5, r2
    sp_digit* t2 = t + 2*8;
 80041cc:	f102 0840 	add.w	r8, r2, #64	; 0x40
    sp_256_mont_inv_8(t1, p->z, t + 2*8);
 80041d0:	4642      	mov	r2, r8
 80041d2:	3180      	adds	r1, #128	; 0x80
 80041d4:	4628      	mov	r0, r5
 80041d6:	4b35      	ldr	r3, [pc, #212]	; (80042ac <sp_256_map_8+0xec>)
 80041d8:	4798      	blx	r3
    sp_256_mont_sqr_8(t2, t1, p256_mod, p256_mp_mod);
 80041da:	4e35      	ldr	r6, [pc, #212]	; (80042b0 <sp_256_map_8+0xf0>)
 80041dc:	2301      	movs	r3, #1
 80041de:	4632      	mov	r2, r6
 80041e0:	4629      	mov	r1, r5
 80041e2:	4640      	mov	r0, r8
 80041e4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80042c8 <sp_256_map_8+0x108>
 80041e8:	47c8      	blx	r9
    sp_256_mont_mul_8(t1, t2, t1, p256_mod, p256_mp_mod);
 80041ea:	f04f 0901 	mov.w	r9, #1
 80041ee:	f8cd 9000 	str.w	r9, [sp]
 80041f2:	4633      	mov	r3, r6
 80041f4:	462a      	mov	r2, r5
 80041f6:	4641      	mov	r1, r8
 80041f8:	4628      	mov	r0, r5
 80041fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042c4 <sp_256_map_8+0x104>
 80041fe:	47d0      	blx	sl
    sp_256_mont_mul_8(r->x, p->x, t2, p256_mod, p256_mp_mod);
 8004200:	f8cd 9000 	str.w	r9, [sp]
 8004204:	4633      	mov	r3, r6
 8004206:	4642      	mov	r2, r8
 8004208:	4639      	mov	r1, r7
 800420a:	4620      	mov	r0, r4
 800420c:	47d0      	blx	sl
    XMEMSET(r->x + 8, 0, sizeof(r->x) / 2U);
 800420e:	2220      	movs	r2, #32
 8004210:	2100      	movs	r1, #0
 8004212:	18a0      	adds	r0, r4, r2
 8004214:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <sp_256_map_8+0xf4>)
 8004216:	4798      	blx	r3
    sp_256_mont_reduce_8(r->x, p256_mod, p256_mp_mod);
 8004218:	464a      	mov	r2, r9
 800421a:	4631      	mov	r1, r6
 800421c:	4620      	mov	r0, r4
 800421e:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <sp_256_map_8+0xf8>)
 8004220:	4798      	blx	r3
    n = sp_256_cmp_8(r->x, p256_mod);
 8004222:	4631      	mov	r1, r6
 8004224:	4620      	mov	r0, r4
 8004226:	4b25      	ldr	r3, [pc, #148]	; (80042bc <sp_256_map_8+0xfc>)
 8004228:	4798      	blx	r3
    sp_256_cond_sub_8(r->x, r->x, p256_mod, 0 - ((n >= 0) ?
 800422a:	2800      	cmp	r0, #0
 800422c:	db39      	blt.n	80042a2 <sp_256_map_8+0xe2>
 800422e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004232:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80042b0 <sp_256_map_8+0xf0>
 8004236:	4642      	mov	r2, r8
 8004238:	4621      	mov	r1, r4
 800423a:	4620      	mov	r0, r4
 800423c:	4e20      	ldr	r6, [pc, #128]	; (80042c0 <sp_256_map_8+0x100>)
 800423e:	47b0      	blx	r6
    sp_256_mont_mul_8(r->y, p->y, t1, p256_mod, p256_mp_mod);
 8004240:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8004244:	f04f 0901 	mov.w	r9, #1
 8004248:	f8cd 9000 	str.w	r9, [sp]
 800424c:	4643      	mov	r3, r8
 800424e:	462a      	mov	r2, r5
 8004250:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004254:	4630      	mov	r0, r6
 8004256:	4d1b      	ldr	r5, [pc, #108]	; (80042c4 <sp_256_map_8+0x104>)
 8004258:	47a8      	blx	r5
    XMEMSET(r->y + 8, 0, sizeof(r->y) / 2U);
 800425a:	2220      	movs	r2, #32
 800425c:	2100      	movs	r1, #0
 800425e:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <sp_256_map_8+0xf4>)
 8004264:	4798      	blx	r3
    sp_256_mont_reduce_8(r->y, p256_mod, p256_mp_mod);
 8004266:	464a      	mov	r2, r9
 8004268:	4641      	mov	r1, r8
 800426a:	4630      	mov	r0, r6
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <sp_256_map_8+0xf8>)
 800426e:	4798      	blx	r3
    n = sp_256_cmp_8(r->y, p256_mod);
 8004270:	4641      	mov	r1, r8
 8004272:	4630      	mov	r0, r6
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <sp_256_map_8+0xfc>)
 8004276:	4798      	blx	r3
    sp_256_cond_sub_8(r->y, r->y, p256_mod, 0 - ((n >= 0) ?
 8004278:	2800      	cmp	r0, #0
 800427a:	db14      	blt.n	80042a6 <sp_256_map_8+0xe6>
 800427c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004280:	4a0b      	ldr	r2, [pc, #44]	; (80042b0 <sp_256_map_8+0xf0>)
 8004282:	4631      	mov	r1, r6
 8004284:	4630      	mov	r0, r6
 8004286:	4d0e      	ldr	r5, [pc, #56]	; (80042c0 <sp_256_map_8+0x100>)
 8004288:	47a8      	blx	r5
    XMEMSET(r->z, 0, sizeof(r->z));
 800428a:	2240      	movs	r2, #64	; 0x40
 800428c:	2100      	movs	r1, #0
 800428e:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <sp_256_map_8+0xf4>)
 8004294:	4798      	blx	r3
    r->z[0] = 1;
 8004296:	2301      	movs	r3, #1
 8004298:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800429c:	b002      	add	sp, #8
 800429e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sp_256_cond_sub_8(r->x, r->x, p256_mod, 0 - ((n >= 0) ?
 80042a2:	2300      	movs	r3, #0
 80042a4:	e7c5      	b.n	8004232 <sp_256_map_8+0x72>
    sp_256_cond_sub_8(r->y, r->y, p256_mod, 0 - ((n >= 0) ?
 80042a6:	2300      	movs	r3, #0
 80042a8:	e7ea      	b.n	8004280 <sp_256_map_8+0xc0>
 80042aa:	bf00      	nop
 80042ac:	08003db1 	.word	0x08003db1
 80042b0:	080055d4 	.word	0x080055d4
 80042b4:	08000159 	.word	0x08000159
 80042b8:	080031b9 	.word	0x080031b9
 80042bc:	08003129 	.word	0x08003129
 80042c0:	0800317f 	.word	0x0800317f
 80042c4:	08002385 	.word	0x08002385
 80042c8:	08002b31 	.word	0x08002b31

080042cc <sp_256_ecc_mulmod_fast_8>:
{
 80042cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d0:	f6ad 7d14 	subw	sp, sp, #3860	; 0xf14
 80042d4:	9001      	str	r0, [sp, #4]
 80042d6:	460c      	mov	r4, r1
 80042d8:	4692      	mov	sl, r2
 80042da:	469b      	mov	fp, r3
 80042dc:	f8dd 9f38 	ldr.w	r9, [sp, #3896]	; 0xf38
        XMEMSET(&t[0], 0, sizeof(t[0]));
 80042e0:	22c4      	movs	r2, #196	; 0xc4
 80042e2:	2100      	movs	r1, #0
 80042e4:	a883      	add	r0, sp, #524	; 0x20c
 80042e6:	4b93      	ldr	r3, [pc, #588]	; (8004534 <sp_256_ecc_mulmod_fast_8+0x268>)
 80042e8:	4798      	blx	r3
        t[0].infinity = 1;
 80042ea:	2301      	movs	r3, #1
 80042ec:	93b3      	str	r3, [sp, #716]	; 0x2cc
        (void)sp_256_mod_mul_norm_8(t[1].x, g->x, p256_mod);
 80042ee:	4e92      	ldr	r6, [pc, #584]	; (8004538 <sp_256_ecc_mulmod_fast_8+0x26c>)
 80042f0:	4632      	mov	r2, r6
 80042f2:	4621      	mov	r1, r4
 80042f4:	a8b4      	add	r0, sp, #720	; 0x2d0
 80042f6:	4d91      	ldr	r5, [pc, #580]	; (800453c <sp_256_ecc_mulmod_fast_8+0x270>)
 80042f8:	47a8      	blx	r5
        (void)sp_256_mod_mul_norm_8(t[1].y, g->y, p256_mod);
 80042fa:	4632      	mov	r2, r6
 80042fc:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004300:	a8c4      	add	r0, sp, #784	; 0x310
 8004302:	47a8      	blx	r5
        (void)sp_256_mod_mul_norm_8(t[1].z, g->z, p256_mod);
 8004304:	4632      	mov	r2, r6
 8004306:	f104 0180 	add.w	r1, r4, #128	; 0x80
 800430a:	a8d4      	add	r0, sp, #848	; 0x350
 800430c:	47a8      	blx	r5
        t[1].infinity = 0;
 800430e:	2400      	movs	r4, #0
 8004310:	94e4      	str	r4, [sp, #912]	; 0x390
        sp_256_proj_point_dbl_8(&t[ 2], &t[ 1], tmp);
 8004312:	aa33      	add	r2, sp, #204	; 0xcc
 8004314:	a9b4      	add	r1, sp, #720	; 0x2d0
 8004316:	a8e5      	add	r0, sp, #916	; 0x394
 8004318:	4e89      	ldr	r6, [pc, #548]	; (8004540 <sp_256_ecc_mulmod_fast_8+0x274>)
 800431a:	47b0      	blx	r6
        t[ 2].infinity = 0;
 800431c:	f8cd 4454 	str.w	r4, [sp, #1108]	; 0x454
        sp_256_proj_point_add_8(&t[ 3], &t[ 2], &t[ 1], tmp);
 8004320:	ab33      	add	r3, sp, #204	; 0xcc
 8004322:	aab4      	add	r2, sp, #720	; 0x2d0
 8004324:	a9e5      	add	r1, sp, #916	; 0x394
 8004326:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
 800432a:	4d86      	ldr	r5, [pc, #536]	; (8004544 <sp_256_ecc_mulmod_fast_8+0x278>)
 800432c:	47a8      	blx	r5
        t[ 3].infinity = 0;
 800432e:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
        sp_256_proj_point_dbl_8(&t[ 4], &t[ 2], tmp);
 8004332:	aa33      	add	r2, sp, #204	; 0xcc
 8004334:	a9e5      	add	r1, sp, #916	; 0x394
 8004336:	f20d 501c 	addw	r0, sp, #1308	; 0x51c
 800433a:	47b0      	blx	r6
        t[ 4].infinity = 0;
 800433c:	f8cd 45dc 	str.w	r4, [sp, #1500]	; 0x5dc
        sp_256_proj_point_add_8(&t[ 5], &t[ 3], &t[ 2], tmp);
 8004340:	ab33      	add	r3, sp, #204	; 0xcc
 8004342:	aae5      	add	r2, sp, #916	; 0x394
 8004344:	f50d 618b 	add.w	r1, sp, #1112	; 0x458
 8004348:	f50d 60bc 	add.w	r0, sp, #1504	; 0x5e0
 800434c:	47a8      	blx	r5
        t[ 5].infinity = 0;
 800434e:	f8cd 46a0 	str.w	r4, [sp, #1696]	; 0x6a0
        sp_256_proj_point_dbl_8(&t[ 6], &t[ 3], tmp);
 8004352:	aa33      	add	r2, sp, #204	; 0xcc
 8004354:	f50d 618b 	add.w	r1, sp, #1112	; 0x458
 8004358:	f20d 60a4 	addw	r0, sp, #1700	; 0x6a4
 800435c:	47b0      	blx	r6
        t[ 6].infinity = 0;
 800435e:	f8cd 4764 	str.w	r4, [sp, #1892]	; 0x764
        sp_256_proj_point_add_8(&t[ 7], &t[ 4], &t[ 3], tmp);
 8004362:	ab33      	add	r3, sp, #204	; 0xcc
 8004364:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
 8004368:	f20d 511c 	addw	r1, sp, #1308	; 0x51c
 800436c:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
 8004370:	47a8      	blx	r5
        t[ 7].infinity = 0;
 8004372:	f8cd 4828 	str.w	r4, [sp, #2088]	; 0x828
        sp_256_proj_point_dbl_8(&t[ 8], &t[ 4], tmp);
 8004376:	aa33      	add	r2, sp, #204	; 0xcc
 8004378:	f20d 511c 	addw	r1, sp, #1308	; 0x51c
 800437c:	f60d 002c 	addw	r0, sp, #2092	; 0x82c
 8004380:	47b0      	blx	r6
        t[ 8].infinity = 0;
 8004382:	f8cd 48ec 	str.w	r4, [sp, #2284]	; 0x8ec
        sp_256_proj_point_add_8(&t[ 9], &t[ 5], &t[ 4], tmp);
 8004386:	ab33      	add	r3, sp, #204	; 0xcc
 8004388:	f20d 521c 	addw	r2, sp, #1308	; 0x51c
 800438c:	f50d 61bc 	add.w	r1, sp, #1504	; 0x5e0
 8004390:	f50d 600f 	add.w	r0, sp, #2288	; 0x8f0
 8004394:	47a8      	blx	r5
        t[ 9].infinity = 0;
 8004396:	f8cd 49b0 	str.w	r4, [sp, #2480]	; 0x9b0
        sp_256_proj_point_dbl_8(&t[10], &t[ 5], tmp);
 800439a:	aa33      	add	r2, sp, #204	; 0xcc
 800439c:	f50d 61bc 	add.w	r1, sp, #1504	; 0x5e0
 80043a0:	f60d 10b4 	addw	r0, sp, #2484	; 0x9b4
 80043a4:	47b0      	blx	r6
        t[10].infinity = 0;
 80043a6:	f8cd 4a74 	str.w	r4, [sp, #2676]	; 0xa74
        sp_256_proj_point_add_8(&t[11], &t[ 6], &t[ 5], tmp);
 80043aa:	ab33      	add	r3, sp, #204	; 0xcc
 80043ac:	f50d 62bc 	add.w	r2, sp, #1504	; 0x5e0
 80043b0:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
 80043b4:	f60d 2078 	addw	r0, sp, #2680	; 0xa78
 80043b8:	47a8      	blx	r5
        t[11].infinity = 0;
 80043ba:	f8cd 4b38 	str.w	r4, [sp, #2872]	; 0xb38
        sp_256_proj_point_dbl_8(&t[12], &t[ 6], tmp);
 80043be:	aa33      	add	r2, sp, #204	; 0xcc
 80043c0:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
 80043c4:	f60d 303c 	addw	r0, sp, #2876	; 0xb3c
 80043c8:	47b0      	blx	r6
        t[12].infinity = 0;
 80043ca:	f8cd 4bfc 	str.w	r4, [sp, #3068]	; 0xbfc
        sp_256_proj_point_add_8(&t[13], &t[ 7], &t[ 6], tmp);
 80043ce:	ab33      	add	r3, sp, #204	; 0xcc
 80043d0:	f20d 62a4 	addw	r2, sp, #1700	; 0x6a4
 80043d4:	f50d 61ed 	add.w	r1, sp, #1896	; 0x768
 80043d8:	f50d 6040 	add.w	r0, sp, #3072	; 0xc00
 80043dc:	47a8      	blx	r5
        t[13].infinity = 0;
 80043de:	f8cd 4cc0 	str.w	r4, [sp, #3264]	; 0xcc0
        sp_256_proj_point_dbl_8(&t[14], &t[ 7], tmp);
 80043e2:	aa33      	add	r2, sp, #204	; 0xcc
 80043e4:	f50d 61ed 	add.w	r1, sp, #1896	; 0x768
 80043e8:	f60d 40c4 	addw	r0, sp, #3268	; 0xcc4
 80043ec:	47b0      	blx	r6
        t[14].infinity = 0;
 80043ee:	f8cd 4d84 	str.w	r4, [sp, #3460]	; 0xd84
        sp_256_proj_point_add_8(&t[15], &t[ 8], &t[ 7], tmp);
 80043f2:	ab33      	add	r3, sp, #204	; 0xcc
 80043f4:	f50d 62ed 	add.w	r2, sp, #1896	; 0x768
 80043f8:	f60d 012c 	addw	r1, sp, #2092	; 0x82c
 80043fc:	f60d 5088 	addw	r0, sp, #3464	; 0xd88
 8004400:	47a8      	blx	r5
        t[15].infinity = 0;
 8004402:	f8cd 4e48 	str.w	r4, [sp, #3656]	; 0xe48
        n = k[i+1] << 0;
 8004406:	f8da 701c 	ldr.w	r7, [sl, #28]
        y = (int)(n >> 28);
 800440a:	0f3c      	lsrs	r4, r7, #28
        if (ct) {
 800440c:	f1b9 0f00 	cmp.w	r9, #0
 8004410:	d00f      	beq.n	8004432 <sp_256_ecc_mulmod_fast_8+0x166>
            sp_256_get_point_16_8(rt, t, y);
 8004412:	4622      	mov	r2, r4
 8004414:	a983      	add	r1, sp, #524	; 0x20c
 8004416:	f60d 604c 	addw	r0, sp, #3660	; 0xe4c
 800441a:	4b4b      	ldr	r3, [pc, #300]	; (8004548 <sp_256_ecc_mulmod_fast_8+0x27c>)
 800441c:	4798      	blx	r3
            rt->infinity = !y;
 800441e:	fab4 f484 	clz	r4, r4
 8004422:	0964      	lsrs	r4, r4, #5
 8004424:	f8cd 4f0c 	str.w	r4, [sp, #3852]	; 0xf0c
        n <<= 4;
 8004428:	013f      	lsls	r7, r7, #4
        c = 28;
 800442a:	261c      	movs	r6, #28
        i = 6;
 800442c:	f04f 0806 	mov.w	r8, #6
        for (; i>=0 || c>=4; ) {
 8004430:	e012      	b.n	8004458 <sp_256_ecc_mulmod_fast_8+0x18c>
            XMEMCPY(rt, &t[y], sizeof(sp_point_256));
 8004432:	22c4      	movs	r2, #196	; 0xc4
 8004434:	ab83      	add	r3, sp, #524	; 0x20c
 8004436:	fb02 3104 	mla	r1, r2, r4, r3
 800443a:	f60d 604c 	addw	r0, sp, #3660	; 0xe4c
 800443e:	4b43      	ldr	r3, [pc, #268]	; (800454c <sp_256_ecc_mulmod_fast_8+0x280>)
 8004440:	4798      	blx	r3
 8004442:	e7f1      	b.n	8004428 <sp_256_ecc_mulmod_fast_8+0x15c>
                sp_256_proj_point_add_8(rt, rt, &t[y], tmp);
 8004444:	ab33      	add	r3, sp, #204	; 0xcc
 8004446:	22c4      	movs	r2, #196	; 0xc4
 8004448:	a983      	add	r1, sp, #524	; 0x20c
 800444a:	fb02 1205 	mla	r2, r2, r5, r1
 800444e:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8004452:	4608      	mov	r0, r1
 8004454:	4c3b      	ldr	r4, [pc, #236]	; (8004544 <sp_256_ecc_mulmod_fast_8+0x278>)
 8004456:	47a0      	blx	r4
        for (; i>=0 || c>=4; ) {
 8004458:	f1b8 0f00 	cmp.w	r8, #0
 800445c:	db33      	blt.n	80044c6 <sp_256_ecc_mulmod_fast_8+0x1fa>
            if (c < 4) {
 800445e:	2e03      	cmp	r6, #3
 8004460:	dc05      	bgt.n	800446e <sp_256_ecc_mulmod_fast_8+0x1a2>
                n |= k[i--];
 8004462:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
 8004466:	431f      	orrs	r7, r3
                c += 32;
 8004468:	3620      	adds	r6, #32
                n |= k[i--];
 800446a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            y = (n >> 28) & 0xf;
 800446e:	0f3d      	lsrs	r5, r7, #28
            n <<= 4;
 8004470:	013f      	lsls	r7, r7, #4
            c -= 4;
 8004472:	3e04      	subs	r6, #4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8004474:	aa33      	add	r2, sp, #204	; 0xcc
 8004476:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 800447a:	4608      	mov	r0, r1
 800447c:	4c30      	ldr	r4, [pc, #192]	; (8004540 <sp_256_ecc_mulmod_fast_8+0x274>)
 800447e:	47a0      	blx	r4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8004480:	aa33      	add	r2, sp, #204	; 0xcc
 8004482:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8004486:	4608      	mov	r0, r1
 8004488:	47a0      	blx	r4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 800448a:	aa33      	add	r2, sp, #204	; 0xcc
 800448c:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8004490:	4608      	mov	r0, r1
 8004492:	47a0      	blx	r4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8004494:	aa33      	add	r2, sp, #204	; 0xcc
 8004496:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 800449a:	4608      	mov	r0, r1
 800449c:	47a0      	blx	r4
            if (ct) {
 800449e:	f1b9 0f00 	cmp.w	r9, #0
 80044a2:	d0cf      	beq.n	8004444 <sp_256_ecc_mulmod_fast_8+0x178>
                sp_256_get_point_16_8(p, t, y);
 80044a4:	462a      	mov	r2, r5
 80044a6:	a983      	add	r1, sp, #524	; 0x20c
 80044a8:	a802      	add	r0, sp, #8
 80044aa:	4b27      	ldr	r3, [pc, #156]	; (8004548 <sp_256_ecc_mulmod_fast_8+0x27c>)
 80044ac:	4798      	blx	r3
                p->infinity = !y;
 80044ae:	fab5 f585 	clz	r5, r5
 80044b2:	096d      	lsrs	r5, r5, #5
 80044b4:	9532      	str	r5, [sp, #200]	; 0xc8
                sp_256_proj_point_add_8(rt, rt, p, tmp);
 80044b6:	ab33      	add	r3, sp, #204	; 0xcc
 80044b8:	aa02      	add	r2, sp, #8
 80044ba:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 80044be:	4608      	mov	r0, r1
 80044c0:	4c20      	ldr	r4, [pc, #128]	; (8004544 <sp_256_ecc_mulmod_fast_8+0x278>)
 80044c2:	47a0      	blx	r4
 80044c4:	e7c8      	b.n	8004458 <sp_256_ecc_mulmod_fast_8+0x18c>
        for (; i>=0 || c>=4; ) {
 80044c6:	2e03      	cmp	r6, #3
 80044c8:	dcc9      	bgt.n	800445e <sp_256_ecc_mulmod_fast_8+0x192>
        if (map != 0) {
 80044ca:	f1bb 0f00 	cmp.w	fp, #0
 80044ce:	d009      	beq.n	80044e4 <sp_256_ecc_mulmod_fast_8+0x218>
            sp_256_map_8(r, rt, tmp);
 80044d0:	aa33      	add	r2, sp, #204	; 0xcc
 80044d2:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 80044d6:	9801      	ldr	r0, [sp, #4]
 80044d8:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <sp_256_ecc_mulmod_fast_8+0x284>)
 80044da:	4798      	blx	r3
        i = 6;
 80044dc:	ab33      	add	r3, sp, #204	; 0xcc
 80044de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80044e2:	e00a      	b.n	80044fa <sp_256_ecc_mulmod_fast_8+0x22e>
            XMEMCPY(r, rt, sizeof(sp_point_256));
 80044e4:	22c4      	movs	r2, #196	; 0xc4
 80044e6:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 80044ea:	9801      	ldr	r0, [sp, #4]
 80044ec:	4b17      	ldr	r3, [pc, #92]	; (800454c <sp_256_ecc_mulmod_fast_8+0x280>)
 80044ee:	4798      	blx	r3
 80044f0:	e7f4      	b.n	80044dc <sp_256_ecc_mulmod_fast_8+0x210>
    for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
        *w++ = 0;
    z = (volatile byte*)w;
#endif

    while (len--) *z++ = 0;
 80044f2:	2200      	movs	r2, #0
 80044f4:	f803 2b01 	strb.w	r2, [r3], #1
 80044f8:	460a      	mov	r2, r1
 80044fa:	1e51      	subs	r1, r2, #1
 80044fc:	2a00      	cmp	r2, #0
 80044fe:	d1f8      	bne.n	80044f2 <sp_256_ecc_mulmod_fast_8+0x226>
    volatile byte* z = (volatile byte*)mem;
 8004500:	ab02      	add	r3, sp, #8
 8004502:	22c4      	movs	r2, #196	; 0xc4
 8004504:	e003      	b.n	800450e <sp_256_ecc_mulmod_fast_8+0x242>
    while (len--) *z++ = 0;
 8004506:	2200      	movs	r2, #0
 8004508:	f803 2b01 	strb.w	r2, [r3], #1
 800450c:	460a      	mov	r2, r1
 800450e:	1e51      	subs	r1, r2, #1
 8004510:	2a00      	cmp	r2, #0
 8004512:	d1f8      	bne.n	8004506 <sp_256_ecc_mulmod_fast_8+0x23a>
    volatile byte* z = (volatile byte*)mem;
 8004514:	ab83      	add	r3, sp, #524	; 0x20c
 8004516:	f640 5204 	movw	r2, #3332	; 0xd04
 800451a:	e003      	b.n	8004524 <sp_256_ecc_mulmod_fast_8+0x258>
    while (len--) *z++ = 0;
 800451c:	2200      	movs	r2, #0
 800451e:	f803 2b01 	strb.w	r2, [r3], #1
 8004522:	460a      	mov	r2, r1
 8004524:	1e51      	subs	r1, r2, #1
 8004526:	2a00      	cmp	r2, #0
 8004528:	d1f8      	bne.n	800451c <sp_256_ecc_mulmod_fast_8+0x250>
}
 800452a:	2000      	movs	r0, #0
 800452c:	f60d 7d14 	addw	sp, sp, #3860	; 0xf14
 8004530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004534:	08000159 	.word	0x08000159
 8004538:	080055d4 	.word	0x080055d4
 800453c:	0800209b 	.word	0x0800209b
 8004540:	08003775 	.word	0x08003775
 8004544:	08003eb1 	.word	0x08003eb1
 8004548:	080038ff 	.word	0x080038ff
 800454c:	080001a9 	.word	0x080001a9
 8004550:	080041c1 	.word	0x080041c1

08004554 <sp_256_ecc_mulmod_8>:
{
 8004554:	b510      	push	{r4, lr}
 8004556:	b082      	sub	sp, #8
    return sp_256_ecc_mulmod_fast_8(r, g, k, map, ct, heap);
 8004558:	9c05      	ldr	r4, [sp, #20]
 800455a:	9401      	str	r4, [sp, #4]
 800455c:	9c04      	ldr	r4, [sp, #16]
 800455e:	9400      	str	r4, [sp, #0]
 8004560:	4c01      	ldr	r4, [pc, #4]	; (8004568 <sp_256_ecc_mulmod_8+0x14>)
 8004562:	47a0      	blx	r4
}
 8004564:	b002      	add	sp, #8
 8004566:	bd10      	pop	{r4, pc}
 8004568:	080042cd 	.word	0x080042cd

0800456c <sp_256_proj_point_add_qz1_8>:
{
 800456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004570:	b08d      	sub	sp, #52	; 0x34
 8004572:	4606      	mov	r6, r0
 8004574:	460d      	mov	r5, r1
 8004576:	4690      	mov	r8, r2
 8004578:	461f      	mov	r7, r3
    sp_digit* t2 = t + 2*8;
 800457a:	3340      	adds	r3, #64	; 0x40
 800457c:	9303      	str	r3, [sp, #12]
    sp_digit* t3 = t + 4*8;
 800457e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004582:	9304      	str	r3, [sp, #16]
    sp_digit* t4 = t + 6*8;
 8004584:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004588:	9302      	str	r3, [sp, #8]
    sp_digit* t5 = t + 8*8;
 800458a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800458e:	9305      	str	r3, [sp, #20]
    (void)sp_256_sub_8(t1, p256_mod, q->y);
 8004590:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004594:	461c      	mov	r4, r3
 8004596:	9306      	str	r3, [sp, #24]
 8004598:	461a      	mov	r2, r3
 800459a:	497b      	ldr	r1, [pc, #492]	; (8004788 <sp_256_proj_point_add_qz1_8+0x21c>)
 800459c:	4638      	mov	r0, r7
 800459e:	4b7b      	ldr	r3, [pc, #492]	; (800478c <sp_256_proj_point_add_qz1_8+0x220>)
 80045a0:	4798      	blx	r3
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 80045a2:	4641      	mov	r1, r8
 80045a4:	4628      	mov	r0, r5
 80045a6:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 80047a0 <sp_256_proj_point_add_qz1_8+0x234>
 80045aa:	47d0      	blx	sl
 80045ac:	4681      	mov	r9, r0
 80045ae:	f108 0180 	add.w	r1, r8, #128	; 0x80
 80045b2:	f105 0080 	add.w	r0, r5, #128	; 0x80
 80045b6:	47d0      	blx	sl
 80045b8:	ea09 0900 	and.w	r9, r9, r0
        (sp_256_cmp_equal_8(p->y, q->y) | sp_256_cmp_equal_8(p->y, t1))) != 0) {
 80045bc:	f105 0b40 	add.w	fp, r5, #64	; 0x40
 80045c0:	4621      	mov	r1, r4
 80045c2:	4658      	mov	r0, fp
 80045c4:	47d0      	blx	sl
 80045c6:	4604      	mov	r4, r0
 80045c8:	4639      	mov	r1, r7
 80045ca:	4658      	mov	r0, fp
 80045cc:	47d0      	blx	sl
 80045ce:	4304      	orrs	r4, r0
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 80045d0:	ea19 0904 	ands.w	r9, r9, r4
 80045d4:	d005      	beq.n	80045e2 <sp_256_proj_point_add_qz1_8+0x76>
        sp_256_proj_point_dbl_8(r, p, t);
 80045d6:	463a      	mov	r2, r7
 80045d8:	4629      	mov	r1, r5
 80045da:	4630      	mov	r0, r6
 80045dc:	4b6c      	ldr	r3, [pc, #432]	; (8004790 <sp_256_proj_point_add_qz1_8+0x224>)
 80045de:	4798      	blx	r3
 80045e0:	e0cf      	b.n	8004782 <sp_256_proj_point_add_qz1_8+0x216>
        rp[0] = r;
 80045e2:	9608      	str	r6, [sp, #32]
        rp[1] = (sp_point_256*)t; /*lint !e9087 !e740*/
 80045e4:	9709      	str	r7, [sp, #36]	; 0x24
        XMEMSET(rp[1], 0, sizeof(sp_point_256));
 80045e6:	22c4      	movs	r2, #196	; 0xc4
 80045e8:	2100      	movs	r1, #0
 80045ea:	4638      	mov	r0, r7
 80045ec:	4b69      	ldr	r3, [pc, #420]	; (8004794 <sp_256_proj_point_add_qz1_8+0x228>)
 80045ee:	4798      	blx	r3
        x = rp[p->infinity | q->infinity]->x;
 80045f0:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 80045f4:	f8d8 20c0 	ldr.w	r2, [r8, #192]	; 0xc0
 80045f8:	4313      	orrs	r3, r2
 80045fa:	aa0c      	add	r2, sp, #48	; 0x30
 80045fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004600:	f853 ac10 	ldr.w	sl, [r3, #-16]
        y = rp[p->infinity | q->infinity]->y;
 8004604:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 8004608:	9307      	str	r3, [sp, #28]
        z = rp[p->infinity | q->infinity]->z;
 800460a:	f10a 0b80 	add.w	fp, sl, #128	; 0x80
        ap[0] = p;
 800460e:	950a      	str	r5, [sp, #40]	; 0x28
        ap[1] = q;
 8004610:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
        for (i=0; i<8; i++) {
 8004614:	464b      	mov	r3, r9
 8004616:	e00b      	b.n	8004630 <sp_256_proj_point_add_qz1_8+0xc4>
            r->x[i] = ap[p->infinity]->x[i];
 8004618:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 800461c:	a90c      	add	r1, sp, #48	; 0x30
 800461e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004622:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8004626:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800462a:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 800462e:	3301      	adds	r3, #1
 8004630:	2b07      	cmp	r3, #7
 8004632:	ddf1      	ble.n	8004618 <sp_256_proj_point_add_qz1_8+0xac>
        for (i=0; i<8; i++) {
 8004634:	464b      	mov	r3, r9
 8004636:	e00d      	b.n	8004654 <sp_256_proj_point_add_qz1_8+0xe8>
            r->y[i] = ap[p->infinity]->y[i];
 8004638:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 800463c:	a90c      	add	r1, sp, #48	; 0x30
 800463e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004642:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8004646:	f103 0210 	add.w	r2, r3, #16
 800464a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800464e:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
        for (i=0; i<8; i++) {
 8004652:	3301      	adds	r3, #1
 8004654:	2b07      	cmp	r3, #7
 8004656:	ddef      	ble.n	8004638 <sp_256_proj_point_add_qz1_8+0xcc>
 8004658:	e00e      	b.n	8004678 <sp_256_proj_point_add_qz1_8+0x10c>
            r->z[i] = ap[p->infinity]->z[i];
 800465a:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 800465e:	aa0c      	add	r2, sp, #48	; 0x30
 8004660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004664:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8004668:	f109 0320 	add.w	r3, r9, #32
 800466c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004670:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 8004674:	f109 0901 	add.w	r9, r9, #1
 8004678:	f1b9 0f07 	cmp.w	r9, #7
 800467c:	dded      	ble.n	800465a <sp_256_proj_point_add_qz1_8+0xee>
        r->infinity = ap[p->infinity]->infinity;
 800467e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8004682:	aa0c      	add	r2, sp, #48	; 0x30
 8004684:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004688:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800468c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004690:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
        sp_256_mont_sqr_8(t2, z, p256_mod, p256_mp_mod);
 8004694:	4c3c      	ldr	r4, [pc, #240]	; (8004788 <sp_256_proj_point_add_qz1_8+0x21c>)
 8004696:	2301      	movs	r3, #1
 8004698:	4622      	mov	r2, r4
 800469a:	4659      	mov	r1, fp
 800469c:	9e03      	ldr	r6, [sp, #12]
 800469e:	4630      	mov	r0, r6
 80046a0:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80047a4 <sp_256_proj_point_add_qz1_8+0x238>
 80046a4:	47c8      	blx	r9
        sp_256_mont_mul_8(t4, t2, z, p256_mod, p256_mp_mod);
 80046a6:	2501      	movs	r5, #1
 80046a8:	9500      	str	r5, [sp, #0]
 80046aa:	4623      	mov	r3, r4
 80046ac:	465a      	mov	r2, fp
 80046ae:	9603      	str	r6, [sp, #12]
 80046b0:	4631      	mov	r1, r6
 80046b2:	9802      	ldr	r0, [sp, #8]
 80046b4:	4e38      	ldr	r6, [pc, #224]	; (8004798 <sp_256_proj_point_add_qz1_8+0x22c>)
 80046b6:	47b0      	blx	r6
        sp_256_mont_mul_8(t2, t2, q->x, p256_mod, p256_mp_mod);
 80046b8:	9500      	str	r5, [sp, #0]
 80046ba:	4623      	mov	r3, r4
 80046bc:	4642      	mov	r2, r8
 80046be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80046c2:	4641      	mov	r1, r8
 80046c4:	4640      	mov	r0, r8
 80046c6:	47b0      	blx	r6
        sp_256_mont_mul_8(t4, t4, q->y, p256_mod, p256_mp_mod);
 80046c8:	9500      	str	r5, [sp, #0]
 80046ca:	4623      	mov	r3, r4
 80046cc:	9a06      	ldr	r2, [sp, #24]
 80046ce:	9902      	ldr	r1, [sp, #8]
 80046d0:	4608      	mov	r0, r1
 80046d2:	47b0      	blx	r6
        sp_256_mont_sub_8(t2, t2, x, p256_mod);
 80046d4:	4623      	mov	r3, r4
 80046d6:	4652      	mov	r2, sl
 80046d8:	4641      	mov	r1, r8
 80046da:	f8cd 800c 	str.w	r8, [sp, #12]
 80046de:	4640      	mov	r0, r8
 80046e0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80047a8 <sp_256_proj_point_add_qz1_8+0x23c>
 80046e4:	47c0      	blx	r8
        sp_256_mont_sub_8(t4, t4, y, p256_mod);
 80046e6:	4623      	mov	r3, r4
 80046e8:	9a07      	ldr	r2, [sp, #28]
 80046ea:	9902      	ldr	r1, [sp, #8]
 80046ec:	4608      	mov	r0, r1
 80046ee:	47c0      	blx	r8
        sp_256_mont_mul_8(z, z, t2, p256_mod, p256_mp_mod);
 80046f0:	9500      	str	r5, [sp, #0]
 80046f2:	4623      	mov	r3, r4
 80046f4:	9a03      	ldr	r2, [sp, #12]
 80046f6:	4659      	mov	r1, fp
 80046f8:	4658      	mov	r0, fp
 80046fa:	47b0      	blx	r6
        sp_256_mont_sqr_8(t1, t4, p256_mod, p256_mp_mod);
 80046fc:	462b      	mov	r3, r5
 80046fe:	4622      	mov	r2, r4
 8004700:	9902      	ldr	r1, [sp, #8]
 8004702:	4638      	mov	r0, r7
 8004704:	47c8      	blx	r9
        sp_256_mont_sqr_8(t5, t2, p256_mod, p256_mp_mod);
 8004706:	462b      	mov	r3, r5
 8004708:	4622      	mov	r2, r4
 800470a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800470e:	4659      	mov	r1, fp
 8004710:	9805      	ldr	r0, [sp, #20]
 8004712:	47c8      	blx	r9
        sp_256_mont_mul_8(t3, x, t5, p256_mod, p256_mp_mod);
 8004714:	9500      	str	r5, [sp, #0]
 8004716:	4623      	mov	r3, r4
 8004718:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800471c:	464a      	mov	r2, r9
 800471e:	4651      	mov	r1, sl
 8004720:	9804      	ldr	r0, [sp, #16]
 8004722:	47b0      	blx	r6
        sp_256_mont_mul_8(t5, t5, t2, p256_mod, p256_mp_mod);
 8004724:	9500      	str	r5, [sp, #0]
 8004726:	4623      	mov	r3, r4
 8004728:	465a      	mov	r2, fp
 800472a:	4649      	mov	r1, r9
 800472c:	4648      	mov	r0, r9
 800472e:	47b0      	blx	r6
        sp_256_mont_sub_8(x, t1, t5, p256_mod);
 8004730:	4623      	mov	r3, r4
 8004732:	464a      	mov	r2, r9
 8004734:	4639      	mov	r1, r7
 8004736:	4650      	mov	r0, sl
 8004738:	47c0      	blx	r8
        sp_256_mont_dbl_8(t1, t3, p256_mod);
 800473a:	4622      	mov	r2, r4
 800473c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8004740:	4659      	mov	r1, fp
 8004742:	4638      	mov	r0, r7
 8004744:	4b15      	ldr	r3, [pc, #84]	; (800479c <sp_256_proj_point_add_qz1_8+0x230>)
 8004746:	4798      	blx	r3
        sp_256_mont_sub_8(x, x, t1, p256_mod);
 8004748:	4623      	mov	r3, r4
 800474a:	463a      	mov	r2, r7
 800474c:	4651      	mov	r1, sl
 800474e:	4650      	mov	r0, sl
 8004750:	47c0      	blx	r8
        sp_256_mont_sub_8(t3, t3, x, p256_mod);
 8004752:	4623      	mov	r3, r4
 8004754:	4652      	mov	r2, sl
 8004756:	4659      	mov	r1, fp
 8004758:	4658      	mov	r0, fp
 800475a:	47c0      	blx	r8
        sp_256_mont_mul_8(t3, t3, t4, p256_mod, p256_mp_mod);
 800475c:	9500      	str	r5, [sp, #0]
 800475e:	4623      	mov	r3, r4
 8004760:	9a02      	ldr	r2, [sp, #8]
 8004762:	4659      	mov	r1, fp
 8004764:	4658      	mov	r0, fp
 8004766:	47b0      	blx	r6
        sp_256_mont_mul_8(t5, t5, y, p256_mod, p256_mp_mod);
 8004768:	9500      	str	r5, [sp, #0]
 800476a:	4623      	mov	r3, r4
 800476c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004770:	4652      	mov	r2, sl
 8004772:	4649      	mov	r1, r9
 8004774:	4648      	mov	r0, r9
 8004776:	47b0      	blx	r6
        sp_256_mont_sub_8(y, t3, t5, p256_mod);
 8004778:	4623      	mov	r3, r4
 800477a:	464a      	mov	r2, r9
 800477c:	4659      	mov	r1, fp
 800477e:	4650      	mov	r0, sl
 8004780:	47c0      	blx	r8
}
 8004782:	b00d      	add	sp, #52	; 0x34
 8004784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004788:	080055d4 	.word	0x080055d4
 800478c:	08002069 	.word	0x08002069
 8004790:	08003775 	.word	0x08003775
 8004794:	08000159 	.word	0x08000159
 8004798:	08002385 	.word	0x08002385
 800479c:	08003461 	.word	0x08003461
 80047a0:	080038b5 	.word	0x080038b5
 80047a4:	08002b31 	.word	0x08002b31
 80047a8:	080035d7 	.word	0x080035d7

080047ac <sp_256_ecc_mulmod_stripe_8>:
{
 80047ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b0:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 80047b4:	4683      	mov	fp, r0
 80047b6:	4691      	mov	r9, r2
 80047b8:	461d      	mov	r5, r3
 80047ba:	f8dd a2f4 	ldr.w	sl, [sp, #756]	; 0x2f4
        XMEMCPY(p->z, p256_norm_mod, sizeof(p256_norm_mod));
 80047be:	4e4b      	ldr	r6, [pc, #300]	; (80048ec <sp_256_ecc_mulmod_stripe_8+0x140>)
 80047c0:	2220      	movs	r2, #32
 80047c2:	4631      	mov	r1, r6
 80047c4:	a8a1      	add	r0, sp, #644	; 0x284
 80047c6:	4c4a      	ldr	r4, [pc, #296]	; (80048f0 <sp_256_ecc_mulmod_stripe_8+0x144>)
 80047c8:	47a0      	blx	r4
        XMEMCPY(rt->z, p256_norm_mod, sizeof(p256_norm_mod));
 80047ca:	2220      	movs	r2, #32
 80047cc:	4631      	mov	r1, r6
 80047ce:	a870      	add	r0, sp, #448	; 0x1c0
 80047d0:	47a0      	blx	r4
        x = 63;
 80047d2:	223f      	movs	r2, #63	; 0x3f
        y = 0;
 80047d4:	2400      	movs	r4, #0
        for (j=0; j<4; j++) {
 80047d6:	4621      	mov	r1, r4
 80047d8:	e010      	b.n	80047fc <sp_256_ecc_mulmod_stripe_8+0x50>
            y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 80047da:	115b      	asrs	r3, r3, #5
 80047dc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80047e0:	4256      	negs	r6, r2
 80047e2:	f002 001f 	and.w	r0, r2, #31
 80047e6:	f006 061f 	and.w	r6, r6, #31
 80047ea:	bf58      	it	pl
 80047ec:	4270      	negpl	r0, r6
 80047ee:	40c3      	lsrs	r3, r0
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	408b      	lsls	r3, r1
 80047f6:	431c      	orrs	r4, r3
            x += 64;
 80047f8:	3240      	adds	r2, #64	; 0x40
        for (j=0; j<4; j++) {
 80047fa:	3101      	adds	r1, #1
 80047fc:	2903      	cmp	r1, #3
 80047fe:	dc05      	bgt.n	800480c <sp_256_ecc_mulmod_stripe_8+0x60>
            y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 8004800:	4613      	mov	r3, r2
 8004802:	2a00      	cmp	r2, #0
 8004804:	dae9      	bge.n	80047da <sp_256_ecc_mulmod_stripe_8+0x2e>
 8004806:	f102 031f 	add.w	r3, r2, #31
 800480a:	e7e6      	b.n	80047da <sp_256_ecc_mulmod_stripe_8+0x2e>
        if (ct) {
 800480c:	f1ba 0f00 	cmp.w	sl, #0
 8004810:	d00a      	beq.n	8004828 <sp_256_ecc_mulmod_stripe_8+0x7c>
            sp_256_get_entry_16_8(rt, table, y);
 8004812:	4622      	mov	r2, r4
 8004814:	4649      	mov	r1, r9
 8004816:	a850      	add	r0, sp, #320	; 0x140
 8004818:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <sp_256_ecc_mulmod_stripe_8+0x148>)
 800481a:	4798      	blx	r3
        rt->infinity = !y;
 800481c:	fab4 f484 	clz	r4, r4
 8004820:	0964      	lsrs	r4, r4, #5
 8004822:	9480      	str	r4, [sp, #512]	; 0x200
        for (i=62; i>=0; i--) {
 8004824:	263e      	movs	r6, #62	; 0x3e
 8004826:	e03c      	b.n	80048a2 <sp_256_ecc_mulmod_stripe_8+0xf6>
            XMEMCPY(rt->x, table[y].x, sizeof(table[y].x));
 8004828:	eb09 1684 	add.w	r6, r9, r4, lsl #6
 800482c:	2220      	movs	r2, #32
 800482e:	4631      	mov	r1, r6
 8004830:	a850      	add	r0, sp, #320	; 0x140
 8004832:	4f2f      	ldr	r7, [pc, #188]	; (80048f0 <sp_256_ecc_mulmod_stripe_8+0x144>)
 8004834:	47b8      	blx	r7
            XMEMCPY(rt->y, table[y].y, sizeof(table[y].y));
 8004836:	2220      	movs	r2, #32
 8004838:	18b1      	adds	r1, r6, r2
 800483a:	a860      	add	r0, sp, #384	; 0x180
 800483c:	47b8      	blx	r7
 800483e:	e7ed      	b.n	800481c <sp_256_ecc_mulmod_stripe_8+0x70>
                y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 8004840:	115b      	asrs	r3, r3, #5
 8004842:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004846:	4257      	negs	r7, r2
 8004848:	f002 001f 	and.w	r0, r2, #31
 800484c:	f007 071f 	and.w	r7, r7, #31
 8004850:	bf58      	it	pl
 8004852:	4278      	negpl	r0, r7
 8004854:	40c3      	lsrs	r3, r0
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	408b      	lsls	r3, r1
 800485c:	431c      	orrs	r4, r3
                x += 64;
 800485e:	3240      	adds	r2, #64	; 0x40
            for (j=0; j<4; j++) {
 8004860:	3101      	adds	r1, #1
 8004862:	2903      	cmp	r1, #3
 8004864:	dc05      	bgt.n	8004872 <sp_256_ecc_mulmod_stripe_8+0xc6>
                y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 8004866:	4613      	mov	r3, r2
 8004868:	2a00      	cmp	r2, #0
 800486a:	dae9      	bge.n	8004840 <sp_256_ecc_mulmod_stripe_8+0x94>
 800486c:	f102 031f 	add.w	r3, r2, #31
 8004870:	e7e6      	b.n	8004840 <sp_256_ecc_mulmod_stripe_8+0x94>
            sp_256_proj_point_dbl_8(rt, rt, t);
 8004872:	466a      	mov	r2, sp
 8004874:	a950      	add	r1, sp, #320	; 0x140
 8004876:	4608      	mov	r0, r1
 8004878:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <sp_256_ecc_mulmod_stripe_8+0x14c>)
 800487a:	4798      	blx	r3
            if (ct) {
 800487c:	f1ba 0f00 	cmp.w	sl, #0
 8004880:	d015      	beq.n	80048ae <sp_256_ecc_mulmod_stripe_8+0x102>
                sp_256_get_entry_16_8(p, table, y);
 8004882:	4622      	mov	r2, r4
 8004884:	4649      	mov	r1, r9
 8004886:	a881      	add	r0, sp, #516	; 0x204
 8004888:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <sp_256_ecc_mulmod_stripe_8+0x148>)
 800488a:	4798      	blx	r3
            p->infinity = !y;
 800488c:	fab4 f484 	clz	r4, r4
 8004890:	0964      	lsrs	r4, r4, #5
 8004892:	94b1      	str	r4, [sp, #708]	; 0x2c4
            sp_256_proj_point_add_qz1_8(rt, rt, p, t);
 8004894:	466b      	mov	r3, sp
 8004896:	aa81      	add	r2, sp, #516	; 0x204
 8004898:	a950      	add	r1, sp, #320	; 0x140
 800489a:	4608      	mov	r0, r1
 800489c:	4c17      	ldr	r4, [pc, #92]	; (80048fc <sp_256_ecc_mulmod_stripe_8+0x150>)
 800489e:	47a0      	blx	r4
        for (i=62; i>=0; i--) {
 80048a0:	3e01      	subs	r6, #1
 80048a2:	2e00      	cmp	r6, #0
 80048a4:	db10      	blt.n	80048c8 <sp_256_ecc_mulmod_stripe_8+0x11c>
            x = i;
 80048a6:	4632      	mov	r2, r6
            y = 0;
 80048a8:	2400      	movs	r4, #0
            for (j=0; j<4; j++) {
 80048aa:	4621      	mov	r1, r4
 80048ac:	e7d9      	b.n	8004862 <sp_256_ecc_mulmod_stripe_8+0xb6>
                XMEMCPY(p->x, table[y].x, sizeof(table[y].x));
 80048ae:	eb09 1784 	add.w	r7, r9, r4, lsl #6
 80048b2:	2220      	movs	r2, #32
 80048b4:	4639      	mov	r1, r7
 80048b6:	a881      	add	r0, sp, #516	; 0x204
 80048b8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80048f0 <sp_256_ecc_mulmod_stripe_8+0x144>
 80048bc:	47c0      	blx	r8
                XMEMCPY(p->y, table[y].y, sizeof(table[y].y));
 80048be:	2220      	movs	r2, #32
 80048c0:	18b9      	adds	r1, r7, r2
 80048c2:	a891      	add	r0, sp, #580	; 0x244
 80048c4:	47c0      	blx	r8
 80048c6:	e7e1      	b.n	800488c <sp_256_ecc_mulmod_stripe_8+0xe0>
        if (map != 0) {
 80048c8:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 80048ca:	b14b      	cbz	r3, 80048e0 <sp_256_ecc_mulmod_stripe_8+0x134>
            sp_256_map_8(r, rt, t);
 80048cc:	466a      	mov	r2, sp
 80048ce:	a950      	add	r1, sp, #320	; 0x140
 80048d0:	4658      	mov	r0, fp
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <sp_256_ecc_mulmod_stripe_8+0x154>)
 80048d4:	4798      	blx	r3
}
 80048d6:	2000      	movs	r0, #0
 80048d8:	f50d 7d33 	add.w	sp, sp, #716	; 0x2cc
 80048dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            XMEMCPY(r, rt, sizeof(sp_point_256));
 80048e0:	22c4      	movs	r2, #196	; 0xc4
 80048e2:	a950      	add	r1, sp, #320	; 0x140
 80048e4:	4658      	mov	r0, fp
 80048e6:	4b02      	ldr	r3, [pc, #8]	; (80048f0 <sp_256_ecc_mulmod_stripe_8+0x144>)
 80048e8:	4798      	blx	r3
 80048ea:	e7f4      	b.n	80048d6 <sp_256_ecc_mulmod_stripe_8+0x12a>
 80048ec:	08005614 	.word	0x08005614
 80048f0:	080001a9 	.word	0x080001a9
 80048f4:	08003ab1 	.word	0x08003ab1
 80048f8:	08003775 	.word	0x08003775
 80048fc:	0800456d 	.word	0x0800456d
 8004900:	080041c1 	.word	0x080041c1

08004904 <sp_256_ecc_mulmod_base_8>:
{
 8004904:	b510      	push	{r4, lr}
 8004906:	b084      	sub	sp, #16
    return sp_256_ecc_mulmod_stripe_8(r, &p256_base, p256_table,
 8004908:	9c06      	ldr	r4, [sp, #24]
 800490a:	9402      	str	r4, [sp, #8]
 800490c:	9301      	str	r3, [sp, #4]
 800490e:	9200      	str	r2, [sp, #0]
 8004910:	460b      	mov	r3, r1
 8004912:	4a03      	ldr	r2, [pc, #12]	; (8004920 <sp_256_ecc_mulmod_base_8+0x1c>)
 8004914:	4903      	ldr	r1, [pc, #12]	; (8004924 <sp_256_ecc_mulmod_base_8+0x20>)
 8004916:	4c04      	ldr	r4, [pc, #16]	; (8004928 <sp_256_ecc_mulmod_base_8+0x24>)
 8004918:	47a0      	blx	r4
}
 800491a:	b004      	add	sp, #16
 800491c:	bd10      	pop	{r4, pc}
 800491e:	bf00      	nop
 8004920:	08005694 	.word	0x08005694
 8004924:	08005510 	.word	0x08005510
 8004928:	080047ad 	.word	0x080047ad

0800492c <sp_256_to_mp>:
{
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4605      	mov	r5, r0
 8004930:	460c      	mov	r4, r1
    err = mp_grow(r, (256 + DIGIT_BIT - 1) / DIGIT_BIT);
 8004932:	2108      	movs	r1, #8
 8004934:	4620      	mov	r0, r4
 8004936:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <sp_256_to_mp+0x3c>)
 8004938:	4798      	blx	r3
    if (err == MP_OKAY) { /*lint !e774 case where err is always MP_OKAY*/
 800493a:	4606      	mov	r6, r0
 800493c:	b108      	cbz	r0, 8004942 <sp_256_to_mp+0x16>
}
 800493e:	4630      	mov	r0, r6
 8004940:	bd70      	pop	{r4, r5, r6, pc}
        XMEMCPY(r->dp, a, sizeof(sp_digit) * 8);
 8004942:	2220      	movs	r2, #32
 8004944:	4629      	mov	r1, r5
 8004946:	f104 0008 	add.w	r0, r4, #8
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <sp_256_to_mp+0x40>)
 800494c:	4798      	blx	r3
        mp_clamp(r);
 800494e:	2307      	movs	r3, #7
 8004950:	e000      	b.n	8004954 <sp_256_to_mp+0x28>
 8004952:	3b01      	subs	r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	db04      	blt.n	8004962 <sp_256_to_mp+0x36>
 8004958:	1c9a      	adds	r2, r3, #2
 800495a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800495e:	2a00      	cmp	r2, #0
 8004960:	d0f7      	beq.n	8004952 <sp_256_to_mp+0x26>
 8004962:	3301      	adds	r3, #1
 8004964:	6023      	str	r3, [r4, #0]
    return err;
 8004966:	e7ea      	b.n	800493e <sp_256_to_mp+0x12>
 8004968:	080014e9 	.word	0x080014e9
 800496c:	080001a9 	.word	0x080001a9

08004970 <sp_256_point_to_ecc_point_8>:
{
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4604      	mov	r4, r0
 8004974:	460d      	mov	r5, r1
    err = sp_256_to_mp(p->x, pm->x);
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <sp_256_point_to_ecc_point_8+0x2c>)
 8004978:	4798      	blx	r3
    if (err == MP_OKAY) {
 800497a:	b108      	cbz	r0, 8004980 <sp_256_point_to_ecc_point_8+0x10>
    if (err == MP_OKAY) {
 800497c:	b138      	cbz	r0, 800498e <sp_256_point_to_ecc_point_8+0x1e>
}
 800497e:	bd38      	pop	{r3, r4, r5, pc}
        err = sp_256_to_mp(p->y, pm->y);
 8004980:	f105 0150 	add.w	r1, r5, #80	; 0x50
 8004984:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8004988:	4b04      	ldr	r3, [pc, #16]	; (800499c <sp_256_point_to_ecc_point_8+0x2c>)
 800498a:	4798      	blx	r3
 800498c:	e7f6      	b.n	800497c <sp_256_point_to_ecc_point_8+0xc>
        err = sp_256_to_mp(p->z, pm->z);
 800498e:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
 8004992:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8004996:	4b01      	ldr	r3, [pc, #4]	; (800499c <sp_256_point_to_ecc_point_8+0x2c>)
 8004998:	4798      	blx	r3
    return err;
 800499a:	e7f0      	b.n	800497e <sp_256_point_to_ecc_point_8+0xe>
 800499c:	0800492d 	.word	0x0800492d

080049a0 <sp_256_calc_vfy_point_8>:
 * heap  Heap to use for allocation.
 * returns MEMORY_E when memory allocation fails and MP_OKAY on success.
 */
static int sp_256_calc_vfy_point_8(sp_point_256* p1, sp_point_256* p2,
    sp_digit* s, sp_digit* u1, sp_digit* u2, sp_digit* tmp, void* heap)
{
 80049a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	b09f      	sub	sp, #124	; 0x7c
 80049a6:	4682      	mov	sl, r0
 80049a8:	9102      	str	r1, [sp, #8]
 80049aa:	4614      	mov	r4, r2
 80049ac:	4698      	mov	r8, r3
    {
        sp_256_mod_inv_8(s, s, p256_order);
    }
#endif /* !WOLFSSL_SP_SMALL */
    {
        sp_256_mul_8(s, s, p256_norm_order);
 80049ae:	4a53      	ldr	r2, [pc, #332]	; (8004afc <sp_256_calc_vfy_point_8+0x15c>)
 80049b0:	4621      	mov	r1, r4
 80049b2:	4620      	mov	r0, r4
 80049b4:	4b52      	ldr	r3, [pc, #328]	; (8004b00 <sp_256_calc_vfy_point_8+0x160>)
 80049b6:	4798      	blx	r3
    XMEMCPY(t1, a, sizeof(*t1) * 2 * 8);
 80049b8:	2240      	movs	r2, #64	; 0x40
 80049ba:	4621      	mov	r1, r4
 80049bc:	a80e      	add	r0, sp, #56	; 0x38
 80049be:	4b51      	ldr	r3, [pc, #324]	; (8004b04 <sp_256_calc_vfy_point_8+0x164>)
 80049c0:	4798      	blx	r3
    for (i=7; i>=0; i--) {
 80049c2:	2707      	movs	r7, #7
 80049c4:	46a3      	mov	fp, r4
 80049c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80049ca:	e044      	b.n	8004a56 <sp_256_calc_vfy_point_8+0xb6>
        sp_digit hi = t1[8 + i] - (t1[8 + i] == div);
 80049cc:	f107 0508 	add.w	r5, r7, #8
 80049d0:	ab1e      	add	r3, sp, #120	; 0x78
 80049d2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80049d6:	f855 0c40 	ldr.w	r0, [r5, #-64]
        r1 = div_256_word_8(hi, t1[8 + i - 1], div);
 80049da:	1dfb      	adds	r3, r7, #7
 80049dc:	aa1e      	add	r2, sp, #120	; 0x78
 80049de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80049e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049e6:	f853 1c40 	ldr.w	r1, [r3, #-64]
 80049ea:	4290      	cmp	r0, r2
 80049ec:	bf08      	it	eq
 80049ee:	3801      	subeq	r0, #1
 80049f0:	4b45      	ldr	r3, [pc, #276]	; (8004b08 <sp_256_calc_vfy_point_8+0x168>)
 80049f2:	4798      	blx	r3
 80049f4:	4602      	mov	r2, r0
        sp_256_mul_d_8(t2, d, r1);
 80049f6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8004b18 <sp_256_calc_vfy_point_8+0x178>
 80049fa:	4649      	mov	r1, r9
 80049fc:	a805      	add	r0, sp, #20
 80049fe:	4b43      	ldr	r3, [pc, #268]	; (8004b0c <sp_256_calc_vfy_point_8+0x16c>)
 8004a00:	4798      	blx	r3
        t1[8 + i] += sp_256_sub_in_place_8(&t1[i], t2);
 8004a02:	ab0e      	add	r3, sp, #56	; 0x38
 8004a04:	eb03 0687 	add.w	r6, r3, r7, lsl #2
 8004a08:	a905      	add	r1, sp, #20
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	4b40      	ldr	r3, [pc, #256]	; (8004b10 <sp_256_calc_vfy_point_8+0x170>)
 8004a0e:	4798      	blx	r3
 8004a10:	f855 2c40 	ldr.w	r2, [r5, #-64]
 8004a14:	4402      	add	r2, r0
        t1[8 + i] -= t2[8];
 8004a16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004a18:	1a12      	subs	r2, r2, r0
 8004a1a:	f845 2c40 	str.w	r2, [r5, #-64]
        sp_256_mask_8(t2, d, t1[8 + i]);
 8004a1e:	4649      	mov	r1, r9
 8004a20:	a805      	add	r0, sp, #20
 8004a22:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8004b3c <sp_256_calc_vfy_point_8+0x19c>
 8004a26:	47c0      	blx	r8
        t1[8 + i] += sp_256_add_8(&t1[i], &t1[i], t2);
 8004a28:	aa05      	add	r2, sp, #20
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	4c39      	ldr	r4, [pc, #228]	; (8004b14 <sp_256_calc_vfy_point_8+0x174>)
 8004a30:	47a0      	blx	r4
 8004a32:	f855 2c40 	ldr.w	r2, [r5, #-64]
 8004a36:	4402      	add	r2, r0
 8004a38:	f845 2c40 	str.w	r2, [r5, #-64]
        sp_256_mask_8(t2, d, t1[8 + i]);
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	a805      	add	r0, sp, #20
 8004a40:	47c0      	blx	r8
        t1[8 + i] += sp_256_add_8(&t1[i], &t1[i], t2);
 8004a42:	aa05      	add	r2, sp, #20
 8004a44:	4631      	mov	r1, r6
 8004a46:	4630      	mov	r0, r6
 8004a48:	47a0      	blx	r4
 8004a4a:	f855 3c40 	ldr.w	r3, [r5, #-64]
 8004a4e:	4403      	add	r3, r0
 8004a50:	f845 3c40 	str.w	r3, [r5, #-64]
    for (i=7; i>=0; i--) {
 8004a54:	3f01      	subs	r7, #1
 8004a56:	2f00      	cmp	r7, #0
 8004a58:	dab8      	bge.n	80049cc <sp_256_calc_vfy_point_8+0x2c>
 8004a5a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    r1 = sp_256_cmp_8(t1, d) >= 0;
 8004a5e:	4d2e      	ldr	r5, [pc, #184]	; (8004b18 <sp_256_calc_vfy_point_8+0x178>)
 8004a60:	4629      	mov	r1, r5
 8004a62:	a80e      	add	r0, sp, #56	; 0x38
 8004a64:	4b2d      	ldr	r3, [pc, #180]	; (8004b1c <sp_256_calc_vfy_point_8+0x17c>)
 8004a66:	4798      	blx	r3
 8004a68:	43c3      	mvns	r3, r0
 8004a6a:	0fdb      	lsrs	r3, r3, #31
    sp_256_cond_sub_8(r, t1, d, (sp_digit)0 - r1);
 8004a6c:	425b      	negs	r3, r3
 8004a6e:	462a      	mov	r2, r5
 8004a70:	a90e      	add	r1, sp, #56	; 0x38
 8004a72:	4658      	mov	r0, fp
 8004a74:	4d2a      	ldr	r5, [pc, #168]	; (8004b20 <sp_256_calc_vfy_point_8+0x180>)
 8004a76:	47a8      	blx	r5
    err = sp_256_mod_8(s, s, p256_order);
    if (err == MP_OKAY) {
        sp_256_norm_8(s);
#ifdef WOLFSSL_SP_SMALL
        {
            sp_256_mont_inv_order_8(s, s, tmp);
 8004a78:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	4658      	mov	r0, fp
 8004a7e:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <sp_256_calc_vfy_point_8+0x184>)
 8004a80:	4798      	blx	r3
            sp_256_mont_mul_order_8(u1, u1, s);
 8004a82:	465a      	mov	r2, fp
 8004a84:	4641      	mov	r1, r8
 8004a86:	4640      	mov	r0, r8
 8004a88:	4d27      	ldr	r5, [pc, #156]	; (8004b28 <sp_256_calc_vfy_point_8+0x188>)
 8004a8a:	47a8      	blx	r5
            sp_256_mont_mul_order_8(u2, u2, s);
 8004a8c:	465a      	mov	r2, fp
 8004a8e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8004a90:	4608      	mov	r0, r1
 8004a92:	47a8      	blx	r5
            sp_256_mont_mul_order_8(u1, u1, s);
            sp_256_mont_mul_order_8(u2, u2, s);
        }

#endif /* WOLFSSL_SP_SMALL */
            err = sp_256_ecc_mulmod_base_8(p1, u1, 0, 0, heap);
 8004a94:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	4650      	mov	r0, sl
 8004aa0:	4c22      	ldr	r4, [pc, #136]	; (8004b2c <sp_256_calc_vfy_point_8+0x18c>)
 8004aa2:	47a0      	blx	r4
    }
    if ((err == MP_OKAY) && sp_256_iszero_8(p1->z)) {
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	b938      	cbnz	r0, 8004ab8 <sp_256_calc_vfy_point_8+0x118>
 8004aa8:	f10a 0080 	add.w	r0, sl, #128	; 0x80
 8004aac:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <sp_256_calc_vfy_point_8+0x190>)
 8004aae:	4798      	blx	r3
 8004ab0:	b110      	cbz	r0, 8004ab8 <sp_256_calc_vfy_point_8+0x118>
        p1->infinity = 1;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
    }
    if (err == MP_OKAY) {
 8004ab8:	b174      	cbz	r4, 8004ad8 <sp_256_calc_vfy_point_8+0x138>
            err = sp_256_ecc_mulmod_8(p2, p2, u2, 0, 0, heap);
    }
    if ((err == MP_OKAY) && sp_256_iszero_8(p2->z)) {
 8004aba:	b944      	cbnz	r4, 8004ace <sp_256_calc_vfy_point_8+0x12e>
 8004abc:	9d02      	ldr	r5, [sp, #8]
 8004abe:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <sp_256_calc_vfy_point_8+0x190>)
 8004ac4:	4798      	blx	r3
 8004ac6:	b110      	cbz	r0, 8004ace <sp_256_calc_vfy_point_8+0x12e>
        p2->infinity = 1;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
    }

    if (err == MP_OKAY) {
 8004ace:	b174      	cbz	r4, 8004aee <sp_256_calc_vfy_point_8+0x14e>
        sp_256_add_points_8(p1, p2, tmp);
    }

    return err;
}
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	b01f      	add	sp, #124	; 0x7c
 8004ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            err = sp_256_ecc_mulmod_8(p2, p2, u2, 0, 0, heap);
 8004ad8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004ada:	9301      	str	r3, [sp, #4]
 8004adc:	2300      	movs	r3, #0
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004ae2:	9902      	ldr	r1, [sp, #8]
 8004ae4:	4608      	mov	r0, r1
 8004ae6:	4c13      	ldr	r4, [pc, #76]	; (8004b34 <sp_256_calc_vfy_point_8+0x194>)
 8004ae8:	47a0      	blx	r4
 8004aea:	4604      	mov	r4, r0
 8004aec:	e7e5      	b.n	8004aba <sp_256_calc_vfy_point_8+0x11a>
        sp_256_add_points_8(p1, p2, tmp);
 8004aee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004af0:	9902      	ldr	r1, [sp, #8]
 8004af2:	4650      	mov	r0, sl
 8004af4:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <sp_256_calc_vfy_point_8+0x198>)
 8004af6:	4798      	blx	r3
    return err;
 8004af8:	e7ea      	b.n	8004ad0 <sp_256_calc_vfy_point_8+0x130>
 8004afa:	bf00      	nop
 8004afc:	08005634 	.word	0x08005634
 8004b00:	080016a5 	.word	0x080016a5
 8004b04:	080001a9 	.word	0x080001a9
 8004b08:	08003cab 	.word	0x08003cab
 8004b0c:	08003c69 	.word	0x08003c69
 8004b10:	08003c2f 	.word	0x08003c2f
 8004b14:	08002029 	.word	0x08002029
 8004b18:	08005654 	.word	0x08005654
 8004b1c:	08003129 	.word	0x08003129
 8004b20:	0800317f 	.word	0x0800317f
 8004b24:	08003e3d 	.word	0x08003e3d
 8004b28:	08003d3d 	.word	0x08003d3d
 8004b2c:	08004905 	.word	0x08004905
 8004b30:	08003baf 	.word	0x08003baf
 8004b34:	08004555 	.word	0x08004555
 8004b38:	08004151 	.word	0x08004151
 8004b3c:	08003d1f 	.word	0x08003d1f

08004b40 <sp_ecc_mulmod_base_256>:
{
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	b0bc      	sub	sp, #240	; 0xf0
 8004b44:	460e      	mov	r6, r1
 8004b46:	4614      	mov	r4, r2
 8004b48:	461d      	mov	r5, r3
        sp_256_from_mp(k, 8, km);
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	2108      	movs	r1, #8
 8004b4e:	a803      	add	r0, sp, #12
 8004b50:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <sp_ecc_mulmod_base_256+0x34>)
 8004b52:	4798      	blx	r3
            err = sp_256_ecc_mulmod_base_8(point, k, map, 1, heap);
 8004b54:	9500      	str	r5, [sp, #0]
 8004b56:	2301      	movs	r3, #1
 8004b58:	4622      	mov	r2, r4
 8004b5a:	a903      	add	r1, sp, #12
 8004b5c:	a80b      	add	r0, sp, #44	; 0x2c
 8004b5e:	4c06      	ldr	r4, [pc, #24]	; (8004b78 <sp_ecc_mulmod_base_256+0x38>)
 8004b60:	47a0      	blx	r4
    if (err == MP_OKAY) {
 8004b62:	b108      	cbz	r0, 8004b68 <sp_ecc_mulmod_base_256+0x28>
}
 8004b64:	b03c      	add	sp, #240	; 0xf0
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
        err = sp_256_point_to_ecc_point_8(point, r);
 8004b68:	4631      	mov	r1, r6
 8004b6a:	a80b      	add	r0, sp, #44	; 0x2c
 8004b6c:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <sp_ecc_mulmod_base_256+0x3c>)
 8004b6e:	4798      	blx	r3
    return err;
 8004b70:	e7f8      	b.n	8004b64 <sp_ecc_mulmod_base_256+0x24>
 8004b72:	bf00      	nop
 8004b74:	08003d85 	.word	0x08003d85
 8004b78:	08004905 	.word	0x08004905
 8004b7c:	08004971 	.word	0x08004971

08004b80 <sp_ecc_verify_256>:
#endif /* WOLFSSL_SP_NONBLOCK */

int sp_ecc_verify_256(const byte* hash, word32 hashLen, const mp_int* pX,
    const mp_int* pY, const mp_int* pZ, const mp_int* rm, const mp_int* sm,
    int* res, void* heap)
{
 8004b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b84:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
 8004b88:	4690      	mov	r8, r2
 8004b8a:	461f      	mov	r7, r3
 8004b8c:	9ded      	ldr	r5, [sp, #948]	; 0x3b4
        u2  = u1 + 2 * 8;
        s   = u1 + 4 * 8;
        tmp = u1 + 6 * 8;
        p2 = p1 + 1;

        if (hashLen > 32U) {
 8004b8e:	2920      	cmp	r1, #32
 8004b90:	d900      	bls.n	8004b94 <sp_ecc_verify_256+0x14>
            hashLen = 32U;
 8004b92:	2120      	movs	r1, #32
        }

        sp_256_from_bin(u1, 8, hash, (int)hashLen);
 8004b94:	460b      	mov	r3, r1
 8004b96:	4602      	mov	r2, r0
 8004b98:	2108      	movs	r1, #8
 8004b9a:	a866      	add	r0, sp, #408	; 0x198
 8004b9c:	4c41      	ldr	r4, [pc, #260]	; (8004ca4 <sp_ecc_verify_256+0x124>)
 8004b9e:	47a0      	blx	r4
        sp_256_from_mp(u2, 8, rm);
 8004ba0:	ae76      	add	r6, sp, #472	; 0x1d8
 8004ba2:	462a      	mov	r2, r5
 8004ba4:	2108      	movs	r1, #8
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	4c3f      	ldr	r4, [pc, #252]	; (8004ca8 <sp_ecc_verify_256+0x128>)
 8004baa:	47a0      	blx	r4
        sp_256_from_mp(s, 8, sm);
 8004bac:	9aee      	ldr	r2, [sp, #952]	; 0x3b8
 8004bae:	2108      	movs	r1, #8
 8004bb0:	a886      	add	r0, sp, #536	; 0x218
 8004bb2:	47a0      	blx	r4
        sp_256_from_mp(p2->x, 8, pX);
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	2108      	movs	r1, #8
 8004bb8:	a835      	add	r0, sp, #212	; 0xd4
 8004bba:	47a0      	blx	r4
        sp_256_from_mp(p2->y, 8, pY);
 8004bbc:	463a      	mov	r2, r7
 8004bbe:	2108      	movs	r1, #8
 8004bc0:	a845      	add	r0, sp, #276	; 0x114
 8004bc2:	47a0      	blx	r4
        sp_256_from_mp(p2->z, 8, pZ);
 8004bc4:	9aec      	ldr	r2, [sp, #944]	; 0x3b0
 8004bc6:	2108      	movs	r1, #8
 8004bc8:	a855      	add	r0, sp, #340	; 0x154
 8004bca:	47a0      	blx	r4

        err = sp_256_calc_vfy_point_8(p1, p2, s, u1, u2, tmp, heap);
 8004bcc:	9bf0      	ldr	r3, [sp, #960]	; 0x3c0
 8004bce:	9302      	str	r3, [sp, #8]
 8004bd0:	ab96      	add	r3, sp, #600	; 0x258
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	9600      	str	r6, [sp, #0]
 8004bd6:	ab66      	add	r3, sp, #408	; 0x198
 8004bd8:	aa86      	add	r2, sp, #536	; 0x218
 8004bda:	a935      	add	r1, sp, #212	; 0xd4
 8004bdc:	a804      	add	r0, sp, #16
 8004bde:	4c33      	ldr	r4, [pc, #204]	; (8004cac <sp_ecc_verify_256+0x12c>)
 8004be0:	47a0      	blx	r4
    }
    if (err == MP_OKAY) {
 8004be2:	4604      	mov	r4, r0
 8004be4:	b128      	cbz	r0, 8004bf2 <sp_ecc_verify_256+0x72>
        /* Reload r and convert to Montgomery form. */
        sp_256_from_mp(u2, 8, rm);
        err = sp_256_mod_mul_norm_8(u2, u2, p256_mod);
    }

    if (err == MP_OKAY) {
 8004be6:	b184      	cbz	r4, 8004c0a <sp_ecc_verify_256+0x8a>
    if (p1 != NULL)
        XFREE(p1, heap, DYNAMIC_TYPE_ECC);
#endif

    return err;
}
 8004be8:	4620      	mov	r0, r4
 8004bea:	f50d 7d66 	add.w	sp, sp, #920	; 0x398
 8004bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sp_256_from_mp(u2, 8, rm);
 8004bf2:	462a      	mov	r2, r5
 8004bf4:	2108      	movs	r1, #8
 8004bf6:	a876      	add	r0, sp, #472	; 0x1d8
 8004bf8:	4b2b      	ldr	r3, [pc, #172]	; (8004ca8 <sp_ecc_verify_256+0x128>)
 8004bfa:	4798      	blx	r3
        err = sp_256_mod_mul_norm_8(u2, u2, p256_mod);
 8004bfc:	4a2c      	ldr	r2, [pc, #176]	; (8004cb0 <sp_ecc_verify_256+0x130>)
 8004bfe:	a976      	add	r1, sp, #472	; 0x1d8
 8004c00:	4608      	mov	r0, r1
 8004c02:	4b2c      	ldr	r3, [pc, #176]	; (8004cb4 <sp_ecc_verify_256+0x134>)
 8004c04:	4798      	blx	r3
 8004c06:	4604      	mov	r4, r0
 8004c08:	e7ed      	b.n	8004be6 <sp_ecc_verify_256+0x66>
        sp_256_mont_sqr_8(p1->z, p1->z, p256_mod, p256_mp_mod);
 8004c0a:	4f29      	ldr	r7, [pc, #164]	; (8004cb0 <sp_ecc_verify_256+0x130>)
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	463a      	mov	r2, r7
 8004c10:	a924      	add	r1, sp, #144	; 0x90
 8004c12:	4608      	mov	r0, r1
 8004c14:	4e28      	ldr	r6, [pc, #160]	; (8004cb8 <sp_ecc_verify_256+0x138>)
 8004c16:	47b0      	blx	r6
        sp_256_mont_mul_8(u1, u2, p1->z, p256_mod, p256_mp_mod);
 8004c18:	2301      	movs	r3, #1
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	aa24      	add	r2, sp, #144	; 0x90
 8004c20:	a976      	add	r1, sp, #472	; 0x1d8
 8004c22:	a866      	add	r0, sp, #408	; 0x198
 8004c24:	4f25      	ldr	r7, [pc, #148]	; (8004cbc <sp_ecc_verify_256+0x13c>)
 8004c26:	47b8      	blx	r7
        *res = (int)(sp_256_cmp_8(p1->x, u1) == 0);
 8004c28:	a966      	add	r1, sp, #408	; 0x198
 8004c2a:	a804      	add	r0, sp, #16
 8004c2c:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <sp_ecc_verify_256+0x140>)
 8004c2e:	4798      	blx	r3
 8004c30:	fab0 f780 	clz	r7, r0
 8004c34:	097f      	lsrs	r7, r7, #5
 8004c36:	9bef      	ldr	r3, [sp, #956]	; 0x3bc
 8004c38:	601f      	str	r7, [r3, #0]
        if (*res == 0) {
 8004c3a:	b307      	cbz	r7, 8004c7e <sp_ecc_verify_256+0xfe>
    int32_t c = 0;
 8004c3c:	4627      	mov	r7, r4
        if ((*res == 0) && (c < 0)) {
 8004c3e:	9bef      	ldr	r3, [sp, #956]	; 0x3bc
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1d0      	bne.n	8004be8 <sp_ecc_verify_256+0x68>
 8004c46:	2f00      	cmp	r7, #0
 8004c48:	dace      	bge.n	8004be8 <sp_ecc_verify_256+0x68>
            err = sp_256_mod_mul_norm_8(u2, u2, p256_mod);
 8004c4a:	4a19      	ldr	r2, [pc, #100]	; (8004cb0 <sp_ecc_verify_256+0x130>)
 8004c4c:	a976      	add	r1, sp, #472	; 0x1d8
 8004c4e:	4608      	mov	r0, r1
 8004c50:	4b18      	ldr	r3, [pc, #96]	; (8004cb4 <sp_ecc_verify_256+0x134>)
 8004c52:	4798      	blx	r3
            if (err == MP_OKAY) {
 8004c54:	4604      	mov	r4, r0
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d1c6      	bne.n	8004be8 <sp_ecc_verify_256+0x68>
                sp_256_mont_mul_8(u1, u2, p1->z, p256_mod,
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <sp_ecc_verify_256+0x130>)
 8004c60:	aa24      	add	r2, sp, #144	; 0x90
 8004c62:	a976      	add	r1, sp, #472	; 0x1d8
 8004c64:	a866      	add	r0, sp, #408	; 0x198
 8004c66:	4d15      	ldr	r5, [pc, #84]	; (8004cbc <sp_ecc_verify_256+0x13c>)
 8004c68:	47a8      	blx	r5
                *res = (sp_256_cmp_8(p1->x, u1) == 0);
 8004c6a:	a966      	add	r1, sp, #408	; 0x198
 8004c6c:	a804      	add	r0, sp, #16
 8004c6e:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <sp_ecc_verify_256+0x140>)
 8004c70:	4798      	blx	r3
 8004c72:	fab0 f080 	clz	r0, r0
 8004c76:	0940      	lsrs	r0, r0, #5
 8004c78:	9bef      	ldr	r3, [sp, #956]	; 0x3bc
 8004c7a:	6018      	str	r0, [r3, #0]
    return err;
 8004c7c:	e7b4      	b.n	8004be8 <sp_ecc_verify_256+0x68>
            sp_256_from_mp(u2, 8, rm);
 8004c7e:	462a      	mov	r2, r5
 8004c80:	2108      	movs	r1, #8
 8004c82:	a876      	add	r0, sp, #472	; 0x1d8
 8004c84:	4b08      	ldr	r3, [pc, #32]	; (8004ca8 <sp_ecc_verify_256+0x128>)
 8004c86:	4798      	blx	r3
            carry = sp_256_add_8(u2, u2, p256_order);
 8004c88:	4a0e      	ldr	r2, [pc, #56]	; (8004cc4 <sp_ecc_verify_256+0x144>)
 8004c8a:	a976      	add	r1, sp, #472	; 0x1d8
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <sp_ecc_verify_256+0x148>)
 8004c90:	4798      	blx	r3
            if (carry == 0) {
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d1d3      	bne.n	8004c3e <sp_ecc_verify_256+0xbe>
                c = sp_256_cmp_8(u2, p256_mod);
 8004c96:	4906      	ldr	r1, [pc, #24]	; (8004cb0 <sp_ecc_verify_256+0x130>)
 8004c98:	a876      	add	r0, sp, #472	; 0x1d8
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <sp_ecc_verify_256+0x140>)
 8004c9c:	4798      	blx	r3
 8004c9e:	4607      	mov	r7, r0
 8004ca0:	e7cd      	b.n	8004c3e <sp_ecc_verify_256+0xbe>
 8004ca2:	bf00      	nop
 8004ca4:	08003bd5 	.word	0x08003bd5
 8004ca8:	08003d85 	.word	0x08003d85
 8004cac:	080049a1 	.word	0x080049a1
 8004cb0:	080055d4 	.word	0x080055d4
 8004cb4:	0800209b 	.word	0x0800209b
 8004cb8:	08002b31 	.word	0x08002b31
 8004cbc:	08002385 	.word	0x08002385
 8004cc0:	08003129 	.word	0x08003129
 8004cc4:	08005654 	.word	0x08005654
 8004cc8:	08002029 	.word	0x08002029

08004ccc <wc_ecc_curve_cache_free_spec_item>:
    #define FREE_CURVE_SPECS()
#endif /* ECC_CACHE_CURVE */

static void wc_ecc_curve_cache_free_spec_item(ecc_curve_spec* curve, mp_int* item,
    byte mask)
{
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4615      	mov	r5, r2
    if (item) {
 8004cd2:	b111      	cbz	r1, 8004cda <wc_ecc_curve_cache_free_spec_item+0xe>
 8004cd4:	4608      	mov	r0, r1
    #ifdef HAVE_WOLF_BIGINT
        wc_bigint_free(&item->raw);
    #endif
        mp_clear(item);
 8004cd6:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <wc_ecc_curve_cache_free_spec_item+0x1c>)
 8004cd8:	4798      	blx	r3
    }
    curve->load_mask &= ~mask;
 8004cda:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004cde:	ea23 0205 	bic.w	r2, r3, r5
 8004ce2:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
}
 8004ce6:	bd38      	pop	{r3, r4, r5, pc}
 8004ce8:	0800151d 	.word	0x0800151d

08004cec <wc_ecc_curve_cache_free_spec>:
static void wc_ecc_curve_cache_free_spec(ecc_curve_spec* curve)
{
    if (curve == NULL) {
 8004cec:	2800      	cmp	r0, #0
 8004cee:	d03b      	beq.n	8004d68 <wc_ecc_curve_cache_free_spec+0x7c>
{
 8004cf0:	b510      	push	{r4, lr}
 8004cf2:	4604      	mov	r4, r0
        return;
    }

    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
 8004cf4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004cf8:	f013 0f01 	tst.w	r3, #1
 8004cfc:	d117      	bne.n	8004d2e <wc_ecc_curve_cache_free_spec+0x42>
        wc_ecc_curve_cache_free_spec_item(curve, curve->prime, ECC_CURVE_FIELD_PRIME);
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
 8004cfe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004d02:	f013 0f02 	tst.w	r3, #2
 8004d06:	d117      	bne.n	8004d38 <wc_ecc_curve_cache_free_spec+0x4c>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Af, ECC_CURVE_FIELD_AF);
#ifdef USE_ECC_B_PARAM
    if (curve->load_mask & ECC_CURVE_FIELD_BF)
        wc_ecc_curve_cache_free_spec_item(curve, curve->Bf, ECC_CURVE_FIELD_BF);
#endif
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
 8004d08:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004d0c:	f013 0f08 	tst.w	r3, #8
 8004d10:	d118      	bne.n	8004d44 <wc_ecc_curve_cache_free_spec+0x58>
        wc_ecc_curve_cache_free_spec_item(curve, curve->order, ECC_CURVE_FIELD_ORDER);
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
 8004d12:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004d16:	f013 0f10 	tst.w	r3, #16
 8004d1a:	d119      	bne.n	8004d50 <wc_ecc_curve_cache_free_spec+0x64>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gx, ECC_CURVE_FIELD_GX);
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
 8004d1c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004d20:	f013 0f20 	tst.w	r3, #32
 8004d24:	d11a      	bne.n	8004d5c <wc_ecc_curve_cache_free_spec+0x70>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gy, ECC_CURVE_FIELD_GY);

    curve->load_mask = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8004d2c:	bd10      	pop	{r4, pc}
        wc_ecc_curve_cache_free_spec_item(curve, curve->prime, ECC_CURVE_FIELD_PRIME);
 8004d2e:	2201      	movs	r2, #1
 8004d30:	6841      	ldr	r1, [r0, #4]
 8004d32:	4b0e      	ldr	r3, [pc, #56]	; (8004d6c <wc_ecc_curve_cache_free_spec+0x80>)
 8004d34:	4798      	blx	r3
 8004d36:	e7e2      	b.n	8004cfe <wc_ecc_curve_cache_free_spec+0x12>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Af, ECC_CURVE_FIELD_AF);
 8004d38:	2202      	movs	r2, #2
 8004d3a:	68a1      	ldr	r1, [r4, #8]
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <wc_ecc_curve_cache_free_spec+0x80>)
 8004d40:	4798      	blx	r3
 8004d42:	e7e1      	b.n	8004d08 <wc_ecc_curve_cache_free_spec+0x1c>
        wc_ecc_curve_cache_free_spec_item(curve, curve->order, ECC_CURVE_FIELD_ORDER);
 8004d44:	2208      	movs	r2, #8
 8004d46:	68e1      	ldr	r1, [r4, #12]
 8004d48:	4620      	mov	r0, r4
 8004d4a:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <wc_ecc_curve_cache_free_spec+0x80>)
 8004d4c:	4798      	blx	r3
 8004d4e:	e7e0      	b.n	8004d12 <wc_ecc_curve_cache_free_spec+0x26>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gx, ECC_CURVE_FIELD_GX);
 8004d50:	2210      	movs	r2, #16
 8004d52:	6921      	ldr	r1, [r4, #16]
 8004d54:	4620      	mov	r0, r4
 8004d56:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <wc_ecc_curve_cache_free_spec+0x80>)
 8004d58:	4798      	blx	r3
 8004d5a:	e7df      	b.n	8004d1c <wc_ecc_curve_cache_free_spec+0x30>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gy, ECC_CURVE_FIELD_GY);
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	6961      	ldr	r1, [r4, #20]
 8004d60:	4620      	mov	r0, r4
 8004d62:	4b02      	ldr	r3, [pc, #8]	; (8004d6c <wc_ecc_curve_cache_free_spec+0x80>)
 8004d64:	4798      	blx	r3
 8004d66:	e7de      	b.n	8004d26 <wc_ecc_curve_cache_free_spec+0x3a>
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	08004ccd 	.word	0x08004ccd

08004d70 <wc_ecc_curve_free>:

static void wc_ecc_curve_free(ecc_curve_spec* curve)
{
    if (curve) {
 8004d70:	b118      	cbz	r0, 8004d7a <wc_ecc_curve_free+0xa>
{
 8004d72:	b508      	push	{r3, lr}
            wc_ecc_curve_cache_free_spec(curve);
            XFREE(curve, NULL, DYNAMIC_TYPE_ECC);
        }
        #endif
    #else
        wc_ecc_curve_cache_free_spec(curve);
 8004d74:	4b01      	ldr	r3, [pc, #4]	; (8004d7c <wc_ecc_curve_free+0xc>)
 8004d76:	4798      	blx	r3
    #endif
    }
}
 8004d78:	bd08      	pop	{r3, pc}
 8004d7a:	4770      	bx	lr
 8004d7c:	08004ced 	.word	0x08004ced

08004d80 <wc_ecc_curve_cache_load_item>:

static int wc_ecc_curve_cache_load_item(ecc_curve_spec* curve, const char* src,
    mp_int** dst, byte mask)
{
 8004d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d84:	461f      	mov	r7, r3
    int err;

#ifndef ECC_CACHE_CURVE
    /* get mp_int from temp */
    if (curve->spec_use >= curve->spec_count) {
 8004d86:	6a05      	ldr	r5, [r0, #32]
 8004d88:	69c3      	ldr	r3, [r0, #28]
 8004d8a:	429d      	cmp	r5, r3
 8004d8c:	d21a      	bcs.n	8004dc4 <wc_ecc_curve_cache_load_item+0x44>
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4688      	mov	r8, r1
 8004d92:	4616      	mov	r6, r2
        WOLFSSL_MSG("Invalid DECLARE_CURVE_SPECS count");
        return ECC_BAD_ARG_E;
    }
    *dst = &curve->spec_ints[curve->spec_use++];
 8004d94:	6980      	ldr	r0, [r0, #24]
 8004d96:	1c6b      	adds	r3, r5, #1
 8004d98:	6223      	str	r3, [r4, #32]
 8004d9a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004d9e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8004da2:	6010      	str	r0, [r2, #0]
#endif

    err = mp_init(*dst);
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <wc_ecc_curve_cache_load_item+0x4c>)
 8004da6:	4798      	blx	r3
    if (err == MP_OKAY) {
 8004da8:	b108      	cbz	r0, 8004dae <wc_ecc_curve_cache_load_item+0x2e>
        if (err == MP_OKAY)
            err = wc_mp_to_bigint(*dst, &(*dst)->raw);
    #endif
    }
    return err;
}
 8004daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        curve->load_mask |= mask;
 8004dae:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004db2:	431f      	orrs	r7, r3
 8004db4:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
 8004db8:	2210      	movs	r2, #16
 8004dba:	4641      	mov	r1, r8
 8004dbc:	6830      	ldr	r0, [r6, #0]
 8004dbe:	4b04      	ldr	r3, [pc, #16]	; (8004dd0 <wc_ecc_curve_cache_load_item+0x50>)
 8004dc0:	4798      	blx	r3
 8004dc2:	e7f2      	b.n	8004daa <wc_ecc_curve_cache_load_item+0x2a>
        return ECC_BAD_ARG_E;
 8004dc4:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8004dc8:	e7ef      	b.n	8004daa <wc_ecc_curve_cache_load_item+0x2a>
 8004dca:	bf00      	nop
 8004dcc:	08001441 	.word	0x08001441
 8004dd0:	08001671 	.word	0x08001671

08004dd4 <wc_ecc_curve_load>:

static int wc_ecc_curve_load(const ecc_set_type* dp, ecc_curve_spec** pCurve,
    byte load_mask)
{
 8004dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    byte load_items = 0; /* mask of items to load */
#ifdef ECC_CACHE_CURVE
    int x;
#endif

    if (dp == NULL || pCurve == NULL)
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d059      	beq.n	8004e90 <wc_ecc_curve_load+0xbc>
 8004ddc:	4607      	mov	r7, r0
 8004dde:	2900      	cmp	r1, #0
 8004de0:	d059      	beq.n	8004e96 <wc_ecc_curve_load+0xc2>
        curve = ecc_curve_spec_cache[x];
    }
    /* return new or cached curve */
    *pCurve = curve;
#else
    curve = *pCurve;
 8004de2:	680e      	ldr	r6, [r1, #0]
#endif /* ECC_CACHE_CURVE */

    /* make sure the curve is initialized */
    if (curve->dp != dp) {
 8004de4:	6833      	ldr	r3, [r6, #0]
 8004de6:	4283      	cmp	r3, r0
 8004de8:	d002      	beq.n	8004df0 <wc_ecc_curve_load+0x1c>
        curve->load_mask = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
        curve->order = &curve->order_lcl;
        curve->Gx = &curve->Gx_lcl;
        curve->Gy = &curve->Gy_lcl;
    #endif
    }
    curve->dp = dp; /* set dp info */
 8004df0:	6037      	str	r7, [r6, #0]

    /* determine items to load */
    load_items = (((byte)~(word32)curve->load_mask) & load_mask);
 8004df2:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8004df6:	ea22 0403 	bic.w	r4, r2, r3
    curve->load_mask |= load_items;
 8004dfa:	4323      	orrs	r3, r4
 8004dfc:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24

    /* load items */
    if (load_items & ECC_CURVE_FIELD_PRIME)
 8004e00:	f014 0f01 	tst.w	r4, #1
 8004e04:	d110      	bne.n	8004e28 <wc_ecc_curve_load+0x54>
    int ret = 0;
 8004e06:	2500      	movs	r5, #0
        ret += wc_ecc_curve_cache_load_item(curve, dp->prime, &curve->prime,
            ECC_CURVE_FIELD_PRIME);
    if (load_items & ECC_CURVE_FIELD_AF)
 8004e08:	f014 0f02 	tst.w	r4, #2
 8004e0c:	d114      	bne.n	8004e38 <wc_ecc_curve_load+0x64>
#ifdef USE_ECC_B_PARAM
    if (load_items & ECC_CURVE_FIELD_BF)
        ret += wc_ecc_curve_cache_load_item(curve, dp->Bf, &curve->Bf,
            ECC_CURVE_FIELD_BF);
#endif
    if (load_items & ECC_CURVE_FIELD_ORDER)
 8004e0e:	f014 0f08 	tst.w	r4, #8
 8004e12:	d11b      	bne.n	8004e4c <wc_ecc_curve_load+0x78>
        ret += wc_ecc_curve_cache_load_item(curve, dp->order, &curve->order,
            ECC_CURVE_FIELD_ORDER);
    if (load_items & ECC_CURVE_FIELD_GX)
 8004e14:	f014 0f10 	tst.w	r4, #16
 8004e18:	d122      	bne.n	8004e60 <wc_ecc_curve_load+0x8c>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gx, &curve->Gx,
            ECC_CURVE_FIELD_GX);
    if (load_items & ECC_CURVE_FIELD_GY)
 8004e1a:	f014 0f20 	tst.w	r4, #32
 8004e1e:	d128      	bne.n	8004e72 <wc_ecc_curve_load+0x9e>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gy, &curve->Gy,
            ECC_CURVE_FIELD_GY);

    /* check for error */
    if (ret != 0) {
 8004e20:	bb85      	cbnz	r5, 8004e84 <wc_ecc_curve_load+0xb0>
#if defined(ECC_CACHE_CURVE) && !defined(SINGLE_THREADED)
    wc_UnLockMutex(&ecc_curve_cache_mutex);
#endif

    return ret;
}
 8004e22:	4628      	mov	r0, r5
 8004e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret += wc_ecc_curve_cache_load_item(curve, dp->prime, &curve->prime,
 8004e28:	2301      	movs	r3, #1
 8004e2a:	1d32      	adds	r2, r6, #4
 8004e2c:	68f9      	ldr	r1, [r7, #12]
 8004e2e:	4630      	mov	r0, r6
 8004e30:	4d1a      	ldr	r5, [pc, #104]	; (8004e9c <wc_ecc_curve_load+0xc8>)
 8004e32:	47a8      	blx	r5
 8004e34:	4605      	mov	r5, r0
 8004e36:	e7e7      	b.n	8004e08 <wc_ecc_curve_load+0x34>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Af, &curve->Af,
 8004e38:	2302      	movs	r3, #2
 8004e3a:	f106 0208 	add.w	r2, r6, #8
 8004e3e:	6939      	ldr	r1, [r7, #16]
 8004e40:	4630      	mov	r0, r6
 8004e42:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004e9c <wc_ecc_curve_load+0xc8>
 8004e46:	47c0      	blx	r8
 8004e48:	4405      	add	r5, r0
 8004e4a:	e7e0      	b.n	8004e0e <wc_ecc_curve_load+0x3a>
        ret += wc_ecc_curve_cache_load_item(curve, dp->order, &curve->order,
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	f106 020c 	add.w	r2, r6, #12
 8004e52:	69b9      	ldr	r1, [r7, #24]
 8004e54:	4630      	mov	r0, r6
 8004e56:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8004e9c <wc_ecc_curve_load+0xc8>
 8004e5a:	47c0      	blx	r8
 8004e5c:	4405      	add	r5, r0
 8004e5e:	e7d9      	b.n	8004e14 <wc_ecc_curve_load+0x40>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gx, &curve->Gx,
 8004e60:	2310      	movs	r3, #16
 8004e62:	18f2      	adds	r2, r6, r3
 8004e64:	69f9      	ldr	r1, [r7, #28]
 8004e66:	4630      	mov	r0, r6
 8004e68:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8004e9c <wc_ecc_curve_load+0xc8>
 8004e6c:	47c0      	blx	r8
 8004e6e:	4405      	add	r5, r0
 8004e70:	e7d3      	b.n	8004e1a <wc_ecc_curve_load+0x46>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gy, &curve->Gy,
 8004e72:	2320      	movs	r3, #32
 8004e74:	f106 0214 	add.w	r2, r6, #20
 8004e78:	6a39      	ldr	r1, [r7, #32]
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	4c07      	ldr	r4, [pc, #28]	; (8004e9c <wc_ecc_curve_load+0xc8>)
 8004e7e:	47a0      	blx	r4
 8004e80:	4405      	add	r5, r0
 8004e82:	e7cd      	b.n	8004e20 <wc_ecc_curve_load+0x4c>
        wc_ecc_curve_free(curve);
 8004e84:	4630      	mov	r0, r6
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <wc_ecc_curve_load+0xcc>)
 8004e88:	4798      	blx	r3
        ret = MP_READ_E;
 8004e8a:	f06f 056e 	mvn.w	r5, #110	; 0x6e
 8004e8e:	e7c8      	b.n	8004e22 <wc_ecc_curve_load+0x4e>
        return BAD_FUNC_ARG;
 8004e90:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8004e94:	e7c5      	b.n	8004e22 <wc_ecc_curve_load+0x4e>
 8004e96:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8004e9a:	e7c2      	b.n	8004e22 <wc_ecc_curve_load+0x4e>
 8004e9c:	08004d81 	.word	0x08004d81
 8004ea0:	08004d71 	.word	0x08004d71

08004ea4 <ecc_make_pub_ex>:
 *
 * returns MP_OKAY on success
 */
static int ecc_make_pub_ex(ecc_key* key, ecc_curve_spec* curveIn,
        ecc_point* pubOut, WC_RNG* rng)
{
 8004ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ea8:	b0f3      	sub	sp, #460	; 0x1cc
 8004eaa:	4604      	mov	r4, r0
 8004eac:	460d      	mov	r5, r1
 8004eae:	4617      	mov	r7, r2
  && !defined(WOLFSSL_SILABS_SE_ACCEL)
#if !defined(WOLFSSL_SP_MATH)
    ecc_point* base = NULL;
#endif
    ecc_point* pub;
    DECLARE_CURVE_SPECS(curve, ECC_CURVE_FIELD_COUNT);
 8004eb0:	a804      	add	r0, sp, #16
 8004eb2:	9003      	str	r0, [sp, #12]
 8004eb4:	2228      	movs	r2, #40	; 0x28
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <ecc_make_pub_ex+0xfc>)
 8004eba:	4798      	blx	r3
 8004ebc:	9b03      	ldr	r3, [sp, #12]
 8004ebe:	aa0e      	add	r2, sp, #56	; 0x38
 8004ec0:	619a      	str	r2, [r3, #24]
 8004ec2:	2205      	movs	r2, #5
 8004ec4:	61da      	str	r2, [r3, #28]
#endif /* !WOLFSSL_ATECC508A */

    (void)rng;

    if (key == NULL) {
 8004ec6:	2c00      	cmp	r4, #0
 8004ec8:	d067      	beq.n	8004f9a <ecc_make_pub_ex+0xf6>

#if !defined(WOLFSSL_ATECC508A) && !defined(WOLFSSL_ATECC608A) \
  && !defined(WOLFSSL_SILABS_SE_ACCEL)

    /* if ecc_point passed in then use it as output for public key point */
    if (pubOut != NULL) {
 8004eca:	b1c7      	cbz	r7, 8004efe <ecc_make_pub_ex+0x5a>
        pub = pubOut;
 8004ecc:	46b8      	mov	r8, r7
        pub = &key->pubkey;
        key->type = ECC_PRIVATEKEY_ONLY;
    }

    /* avoid loading the curve unless it is not passed in */
    if (curveIn != NULL) {
 8004ece:	b1dd      	cbz	r5, 8004f08 <ecc_make_pub_ex+0x64>
        curve = curveIn;
 8004ed0:	9503      	str	r5, [sp, #12]
    int err = MP_OKAY;
 8004ed2:	2600      	movs	r6, #0
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
        }
    }

    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8004ed4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ed8:	bb63      	cbnz	r3, 8004f34 <ecc_make_pub_ex+0x90>
                                      (mp_cmp(&key->k, curve->order) != MP_LT)))
    {
        err = ECC_PRIV_KEY_E;
 8004eda:	f06f 06d7 	mvn.w	r6, #215	; 0xd7
        alt_fp_init(pub->y);
        alt_fp_init(pub->z);
    #endif
    }

    if (err != MP_OKAY) {
 8004ede:	2e00      	cmp	r6, #0
 8004ee0:	d13c      	bne.n	8004f5c <ecc_make_pub_ex+0xb8>
    }
    else
#ifdef WOLFSSL_HAVE_SP_ECC
#ifndef WOLFSSL_SP_NO_256
    if (key->idx != ECC_CUSTOM_IDX && ecc_sets[key->idx].id == ECC_SECP256R1) {
 8004ee2:	6863      	ldr	r3, [r4, #4]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee8:	d04b      	beq.n	8004f82 <ecc_make_pub_ex+0xde>
 8004eea:	4a2e      	ldr	r2, [pc, #184]	; (8004fa4 <ecc_make_pub_ex+0x100>)
 8004eec:	2134      	movs	r1, #52	; 0x34
 8004eee:	fb01 2303 	mla	r3, r1, r3, r2
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b07      	cmp	r3, #7
 8004ef6:	d029      	beq.n	8004f4c <ecc_make_pub_ex+0xa8>
    }
    else
#endif
#endif
#if defined(WOLFSSL_SP_MATH)
        err = WC_KEY_SIZE_E;
 8004ef8:	f06f 06e9 	mvn.w	r6, #233	; 0xe9
 8004efc:	e02f      	b.n	8004f5e <ecc_make_pub_ex+0xba>
        pub = &key->pubkey;
 8004efe:	46a0      	mov	r8, r4
        key->type = ECC_PRIVATEKEY_ONLY;
 8004f00:	2303      	movs	r3, #3
 8004f02:	f848 3b18 	str.w	r3, [r8], #24
 8004f06:	e7e2      	b.n	8004ece <ecc_make_pub_ex+0x2a>
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 8004f08:	223b      	movs	r2, #59	; 0x3b
 8004f0a:	a903      	add	r1, sp, #12
 8004f0c:	6920      	ldr	r0, [r4, #16]
 8004f0e:	4b26      	ldr	r3, [pc, #152]	; (8004fa8 <ecc_make_pub_ex+0x104>)
 8004f10:	4798      	blx	r3
    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8004f12:	4606      	mov	r6, r0
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d0dd      	beq.n	8004ed4 <ecc_make_pub_ex+0x30>
    if (err == MP_OKAY) {
 8004f18:	2e00      	cmp	r6, #0
 8004f1a:	d1e0      	bne.n	8004ede <ecc_make_pub_ex+0x3a>
        err = mp_init_multi(pub->x, pub->y, pub->z, NULL, NULL, NULL);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	f108 02a0 	add.w	r2, r8, #160	; 0xa0
 8004f26:	f108 0150 	add.w	r1, r8, #80	; 0x50
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	4e1f      	ldr	r6, [pc, #124]	; (8004fac <ecc_make_pub_ex+0x108>)
 8004f2e:	47b0      	blx	r6
 8004f30:	4606      	mov	r6, r0
 8004f32:	e7d4      	b.n	8004ede <ecc_make_pub_ex+0x3a>
                                      (mp_cmp(&key->k, curve->order) != MP_LT)))
 8004f34:	9b03      	ldr	r3, [sp, #12]
 8004f36:	68d9      	ldr	r1, [r3, #12]
 8004f38:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8004f3c:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <ecc_make_pub_ex+0x10c>)
 8004f3e:	4798      	blx	r3
    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8004f40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004f44:	d0e8      	beq.n	8004f18 <ecc_make_pub_ex+0x74>
        err = ECC_PRIV_KEY_E;
 8004f46:	f06f 06d7 	mvn.w	r6, #215	; 0xd7
 8004f4a:	e7c8      	b.n	8004ede <ecc_make_pub_ex+0x3a>
        err = sp_ecc_mulmod_base_256(&key->k, pub, 1, key->heap);
 8004f4c:	6963      	ldr	r3, [r4, #20]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4641      	mov	r1, r8
 8004f52:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8004f56:	4e17      	ldr	r6, [pc, #92]	; (8004fb4 <ecc_make_pub_ex+0x110>)
 8004f58:	47b0      	blx	r6
 8004f5a:	4606      	mov	r6, r0
    if (err == MP_OKAY)
        err = ecc_check_pubkey_order(key, pub, curve->Af, curve->prime,
                curve->order);
#endif /* WOLFSSL_VALIDATE_KEYGEN */

    if (err != MP_OKAY) {
 8004f5c:	b14e      	cbz	r6, 8004f72 <ecc_make_pub_ex+0xce>
        /* clean up if failed */
    #ifndef ALT_ECC_SIZE
        mp_clear(pub->x);
 8004f5e:	4640      	mov	r0, r8
 8004f60:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004fbc <ecc_make_pub_ex+0x118>
 8004f64:	47c8      	blx	r9
        mp_clear(pub->y);
 8004f66:	f108 0050 	add.w	r0, r8, #80	; 0x50
 8004f6a:	47c8      	blx	r9
        mp_clear(pub->z);
 8004f6c:	f108 00a0 	add.w	r0, r8, #160	; 0xa0
 8004f70:	47c8      	blx	r9
    #endif
    }

    /* free up local curve */
    if (curveIn == NULL) {
 8004f72:	b14d      	cbz	r5, 8004f88 <ecc_make_pub_ex+0xe4>
    (void)curveIn;
    err = NOT_COMPILED_IN;
#endif /* WOLFSSL_ATECC508A || WOLFSSL_SILABS_SE_ACCEL */

    /* change key state if public part is cached */
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d00a      	beq.n	8004f90 <ecc_make_pub_ex+0xec>
        key->type = ECC_PRIVATEKEY;
    }

    return err;
}
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	b073      	add	sp, #460	; 0x1cc
 8004f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = WC_KEY_SIZE_E;
 8004f82:	f06f 06e9 	mvn.w	r6, #233	; 0xe9
 8004f86:	e7ea      	b.n	8004f5e <ecc_make_pub_ex+0xba>
        wc_ecc_curve_free(curve);
 8004f88:	9803      	ldr	r0, [sp, #12]
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <ecc_make_pub_ex+0x114>)
 8004f8c:	4798      	blx	r3
 8004f8e:	e7f1      	b.n	8004f74 <ecc_make_pub_ex+0xd0>
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
 8004f90:	2f00      	cmp	r7, #0
 8004f92:	d1f2      	bne.n	8004f7a <ecc_make_pub_ex+0xd6>
        key->type = ECC_PRIVATEKEY;
 8004f94:	2302      	movs	r3, #2
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	e7ef      	b.n	8004f7a <ecc_make_pub_ex+0xd6>
        return BAD_FUNC_ARG;
 8004f9a:	f06f 06ac 	mvn.w	r6, #172	; 0xac
 8004f9e:	e7ec      	b.n	8004f7a <ecc_make_pub_ex+0xd6>
 8004fa0:	08000159 	.word	0x08000159
 8004fa4:	08005c40 	.word	0x08005c40
 8004fa8:	08004dd5 	.word	0x08004dd5
 8004fac:	0800145d 	.word	0x0800145d
 8004fb0:	08001545 	.word	0x08001545
 8004fb4:	08004b41 	.word	0x08004b41
 8004fb8:	08004d71 	.word	0x08004d71
 8004fbc:	0800151d 	.word	0x0800151d

08004fc0 <wc_ecc_check_r_s_range>:
    return err;
}
#endif /* !NO_ASN */

static int wc_ecc_check_r_s_range(ecc_key* key, mp_int* r, mp_int* s)
{
 8004fc0:	b570      	push	{r4, r5, r6, lr}
 8004fc2:	b0a0      	sub	sp, #128	; 0x80
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	4616      	mov	r6, r2
    int err;
    DECLARE_CURVE_SPECS(curve, 1);
 8004fca:	a802      	add	r0, sp, #8
 8004fcc:	9001      	str	r0, [sp, #4]
 8004fce:	2228      	movs	r2, #40	; 0x28
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4b1a      	ldr	r3, [pc, #104]	; (800503c <wc_ecc_check_r_s_range+0x7c>)
 8004fd4:	4798      	blx	r3
 8004fd6:	9b01      	ldr	r3, [sp, #4]
 8004fd8:	aa0c      	add	r2, sp, #48	; 0x30
 8004fda:	619a      	str	r2, [r3, #24]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	61da      	str	r2, [r3, #28]

    ALLOC_CURVE_SPECS(1);
    err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	a901      	add	r1, sp, #4
 8004fe4:	6920      	ldr	r0, [r4, #16]
 8004fe6:	4b16      	ldr	r3, [pc, #88]	; (8005040 <wc_ecc_check_r_s_range+0x80>)
 8004fe8:	4798      	blx	r3
    if (err != 0) {
 8004fea:	4604      	mov	r4, r0
 8004fec:	b9b8      	cbnz	r0, 800501e <wc_ecc_check_r_s_range+0x5e>
        FREE_CURVE_SPECS();
        return err;
    }

    if (mp_iszero(r) || mp_iszero(s)) {
 8004fee:	682b      	ldr	r3, [r5, #0]
 8004ff0:	b17b      	cbz	r3, 8005012 <wc_ecc_check_r_s_range+0x52>
 8004ff2:	6833      	ldr	r3, [r6, #0]
 8004ff4:	b913      	cbnz	r3, 8004ffc <wc_ecc_check_r_s_range+0x3c>
        err = MP_ZERO_E;
 8004ff6:	f06f 0478 	mvn.w	r4, #120	; 0x78
 8004ffa:	e00c      	b.n	8005016 <wc_ecc_check_r_s_range+0x56>
    }
    if ((err == 0) && (mp_cmp(r, curve->order) != MP_LT)) {
 8004ffc:	9b01      	ldr	r3, [sp, #4]
 8004ffe:	68d9      	ldr	r1, [r3, #12]
 8005000:	4628      	mov	r0, r5
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <wc_ecc_check_r_s_range+0x84>)
 8005004:	4798      	blx	r3
 8005006:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800500a:	d004      	beq.n	8005016 <wc_ecc_check_r_s_range+0x56>
        err = MP_VAL;
 800500c:	f06f 0402 	mvn.w	r4, #2
 8005010:	e002      	b.n	8005018 <wc_ecc_check_r_s_range+0x58>
        err = MP_ZERO_E;
 8005012:	f06f 0478 	mvn.w	r4, #120	; 0x78
    }
    if ((err == 0) && (mp_cmp(s, curve->order) != MP_LT)) {
 8005016:	b12c      	cbz	r4, 8005024 <wc_ecc_check_r_s_range+0x64>
        err = MP_VAL;
    }

    wc_ecc_curve_free(curve);
 8005018:	9801      	ldr	r0, [sp, #4]
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <wc_ecc_check_r_s_range+0x88>)
 800501c:	4798      	blx	r3
    FREE_CURVE_SPECS();
    return err;
}
 800501e:	4620      	mov	r0, r4
 8005020:	b020      	add	sp, #128	; 0x80
 8005022:	bd70      	pop	{r4, r5, r6, pc}
    if ((err == 0) && (mp_cmp(s, curve->order) != MP_LT)) {
 8005024:	9b01      	ldr	r3, [sp, #4]
 8005026:	68d9      	ldr	r1, [r3, #12]
 8005028:	4630      	mov	r0, r6
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <wc_ecc_check_r_s_range+0x84>)
 800502c:	4798      	blx	r3
 800502e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005032:	d0f1      	beq.n	8005018 <wc_ecc_check_r_s_range+0x58>
        err = MP_VAL;
 8005034:	f06f 0402 	mvn.w	r4, #2
 8005038:	e7ee      	b.n	8005018 <wc_ecc_check_r_s_range+0x58>
 800503a:	bf00      	nop
 800503c:	08000159 	.word	0x08000159
 8005040:	08004dd5 	.word	0x08004dd5
 8005044:	08001545 	.word	0x08001545
 8005048:	08004d71 	.word	0x08004d71

0800504c <wc_ecc_set_curve>:
    if (keysize <= 0 && curve_id < 0) {
 800504c:	2900      	cmp	r1, #0
 800504e:	dd0a      	ble.n	8005066 <wc_ecc_set_curve+0x1a>
    if (keysize > ECC_MAXSIZE) {
 8005050:	2942      	cmp	r1, #66	; 0x42
 8005052:	dc29      	bgt.n	80050a8 <wc_ecc_set_curve+0x5c>
    if (key->idx != ECC_CUSTOM_IDX) {
 8005054:	6843      	ldr	r3, [r0, #4]
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800505a:	d028      	beq.n	80050ae <wc_ecc_set_curve+0x62>
{
 800505c:	b470      	push	{r4, r5, r6}
        key->idx = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	6043      	str	r3, [r0, #4]
        key->dp = NULL;
 8005062:	6103      	str	r3, [r0, #16]
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8005064:	e007      	b.n	8005076 <wc_ecc_set_curve+0x2a>
    if (keysize <= 0 && curve_id < 0) {
 8005066:	2a00      	cmp	r2, #0
 8005068:	daf2      	bge.n	8005050 <wc_ecc_set_curve+0x4>
        return BAD_FUNC_ARG;
 800506a:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 800506e:	4770      	bx	lr
            else if (keysize <= ecc_sets[x].size) {
 8005070:	428c      	cmp	r4, r1
 8005072:	da0f      	bge.n	8005094 <wc_ecc_set_curve+0x48>
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8005074:	3301      	adds	r3, #1
 8005076:	2434      	movs	r4, #52	; 0x34
 8005078:	fb04 f403 	mul.w	r4, r4, r3
 800507c:	4d0e      	ldr	r5, [pc, #56]	; (80050b8 <wc_ecc_set_curve+0x6c>)
 800507e:	592c      	ldr	r4, [r5, r4]
 8005080:	b144      	cbz	r4, 8005094 <wc_ecc_set_curve+0x48>
            if (curve_id > ECC_CURVE_DEF) {
 8005082:	2a00      	cmp	r2, #0
 8005084:	ddf4      	ble.n	8005070 <wc_ecc_set_curve+0x24>
                if (curve_id == ecc_sets[x].id)
 8005086:	4e0c      	ldr	r6, [pc, #48]	; (80050b8 <wc_ecc_set_curve+0x6c>)
 8005088:	2534      	movs	r5, #52	; 0x34
 800508a:	fb05 6503 	mla	r5, r5, r3, r6
 800508e:	686d      	ldr	r5, [r5, #4]
 8005090:	4295      	cmp	r5, r2
 8005092:	d1ef      	bne.n	8005074 <wc_ecc_set_curve+0x28>
        if (ecc_sets[x].size == 0) {
 8005094:	b16c      	cbz	r4, 80050b2 <wc_ecc_set_curve+0x66>
        key->idx = x;
 8005096:	6043      	str	r3, [r0, #4]
        key->dp  = &ecc_sets[x];
 8005098:	4a07      	ldr	r2, [pc, #28]	; (80050b8 <wc_ecc_set_curve+0x6c>)
 800509a:	2134      	movs	r1, #52	; 0x34
 800509c:	fb01 2303 	mla	r3, r1, r3, r2
 80050a0:	6103      	str	r3, [r0, #16]
    return 0;
 80050a2:	2000      	movs	r0, #0
}
 80050a4:	bc70      	pop	{r4, r5, r6}
 80050a6:	4770      	bx	lr
        return ECC_BAD_ARG_E;
 80050a8:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80050ac:	4770      	bx	lr
    return 0;
 80050ae:	2000      	movs	r0, #0
}
 80050b0:	4770      	bx	lr
            return ECC_CURVE_OID_E;
 80050b2:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 80050b6:	e7f5      	b.n	80050a4 <wc_ecc_set_curve+0x58>
 80050b8:	08005c40 	.word	0x08005c40

080050bc <wc_ecc_import_raw_private>:
#endif /* !NO_ASN */

#ifdef HAVE_ECC_KEY_IMPORT
static int wc_ecc_import_raw_private(ecc_key* key, const char* qx,
          const char* qy, const char* d, int curve_id, int encType)
{
 80050bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c0:	b085      	sub	sp, #20
 80050c2:	9303      	str	r3, [sp, #12]
  defined(WOLFSSL_SILABS_SE_ACCEL)
    word32 keySz = 0;
#endif

    /* if d is NULL, only import as public key using Qx,Qy */
    if (key == NULL || qx == NULL || qy == NULL) {
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d07f      	beq.n	80051c8 <wc_ecc_import_raw_private+0x10c>
 80050c8:	460e      	mov	r6, r1
 80050ca:	4617      	mov	r7, r2
 80050cc:	4605      	mov	r5, r0
 80050ce:	2900      	cmp	r1, #0
 80050d0:	d07d      	beq.n	80051ce <wc_ecc_import_raw_private+0x112>
 80050d2:	2a00      	cmp	r2, #0
 80050d4:	d07e      	beq.n	80051d4 <wc_ecc_import_raw_private+0x118>
    key->state = ECC_STATE_NONE;
 80050d6:	2100      	movs	r1, #0
 80050d8:	6081      	str	r1, [r0, #8]

    /* make sure required variables are reset */
    wc_ecc_reset(key);

    /* set curve type and index */
    err = wc_ecc_set_curve(key, 0, curve_id);
 80050da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050dc:	4b42      	ldr	r3, [pc, #264]	; (80051e8 <wc_ecc_import_raw_private+0x12c>)
 80050de:	4798      	blx	r3
    if (err != 0) {
 80050e0:	4604      	mov	r4, r0
 80050e2:	b118      	cbz	r0, 80050ec <wc_ecc_import_raw_private+0x30>
        mp_clear(key->pubkey.z);
        mp_clear(&key->k);
    }

    return err;
}
 80050e4:	4620      	mov	r0, r4
 80050e6:	b005      	add	sp, #20
 80050e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = mp_init_multi(&key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
 80050ec:	f505 7984 	add.w	r9, r5, #264	; 0x108
 80050f0:	f105 0818 	add.w	r8, r5, #24
 80050f4:	f105 0b68 	add.w	fp, r5, #104	; 0x68
 80050f8:	f105 0ab8 	add.w	sl, r5, #184	; 0xb8
 80050fc:	2300      	movs	r3, #0
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	4653      	mov	r3, sl
 8005104:	465a      	mov	r2, fp
 8005106:	4641      	mov	r1, r8
 8005108:	4648      	mov	r0, r9
 800510a:	4c38      	ldr	r4, [pc, #224]	; (80051ec <wc_ecc_import_raw_private+0x130>)
 800510c:	47a0      	blx	r4
    if (err != MP_OKAY)
 800510e:	2800      	cmp	r0, #0
 8005110:	d163      	bne.n	80051da <wc_ecc_import_raw_private+0x11e>
        if (encType == WC_TYPE_HEX_STR)
 8005112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d018      	beq.n	800514a <wc_ecc_import_raw_private+0x8e>
                key->dp->size);
 8005118:	692b      	ldr	r3, [r5, #16]
            err = mp_read_unsigned_bin(key->pubkey.x, (const byte*)qx,
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	4631      	mov	r1, r6
 800511e:	4640      	mov	r0, r8
 8005120:	4b33      	ldr	r3, [pc, #204]	; (80051f0 <wc_ecc_import_raw_private+0x134>)
 8005122:	4798      	blx	r3
 8005124:	4604      	mov	r4, r0
        if (mp_iszero(key->pubkey.x)) {
 8005126:	69ab      	ldr	r3, [r5, #24]
 8005128:	b1eb      	cbz	r3, 8005166 <wc_ecc_import_raw_private+0xaa>
    if (err == MP_OKAY) {
 800512a:	b9f4      	cbnz	r4, 800516a <wc_ecc_import_raw_private+0xae>
        if (encType == WC_TYPE_HEX_STR)
 800512c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800512e:	2b01      	cmp	r3, #1
 8005130:	d012      	beq.n	8005158 <wc_ecc_import_raw_private+0x9c>
                key->dp->size);
 8005132:	692b      	ldr	r3, [r5, #16]
            err = mp_read_unsigned_bin(key->pubkey.y, (const byte*)qy,
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4639      	mov	r1, r7
 8005138:	4658      	mov	r0, fp
 800513a:	4b2d      	ldr	r3, [pc, #180]	; (80051f0 <wc_ecc_import_raw_private+0x134>)
 800513c:	4798      	blx	r3
 800513e:	4604      	mov	r4, r0
        if (mp_iszero(key->pubkey.y)) {
 8005140:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8005142:	b993      	cbnz	r3, 800516a <wc_ecc_import_raw_private+0xae>
            err = BAD_FUNC_ARG;
 8005144:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8005148:	e010      	b.n	800516c <wc_ecc_import_raw_private+0xb0>
            err = mp_read_radix(key->pubkey.x, qx, MP_RADIX_HEX);
 800514a:	2210      	movs	r2, #16
 800514c:	4631      	mov	r1, r6
 800514e:	4640      	mov	r0, r8
 8005150:	4b28      	ldr	r3, [pc, #160]	; (80051f4 <wc_ecc_import_raw_private+0x138>)
 8005152:	4798      	blx	r3
 8005154:	4604      	mov	r4, r0
 8005156:	e7e6      	b.n	8005126 <wc_ecc_import_raw_private+0x6a>
            err = mp_read_radix(key->pubkey.y, qy, MP_RADIX_HEX);
 8005158:	2210      	movs	r2, #16
 800515a:	4639      	mov	r1, r7
 800515c:	4658      	mov	r0, fp
 800515e:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <wc_ecc_import_raw_private+0x138>)
 8005160:	4798      	blx	r3
 8005162:	4604      	mov	r4, r0
 8005164:	e7ec      	b.n	8005140 <wc_ecc_import_raw_private+0x84>
            err = BAD_FUNC_ARG;
 8005166:	f06f 04ac 	mvn.w	r4, #172	; 0xac
    if (err == MP_OKAY)
 800516a:	b1ec      	cbz	r4, 80051a8 <wc_ecc_import_raw_private+0xec>
    if (err == MP_OKAY) {
 800516c:	b984      	cbnz	r4, 8005190 <wc_ecc_import_raw_private+0xd4>
        if (d != NULL) {
 800516e:	9b03      	ldr	r3, [sp, #12]
 8005170:	b33b      	cbz	r3, 80051c2 <wc_ecc_import_raw_private+0x106>
            key->type = ECC_PRIVATEKEY;
 8005172:	2302      	movs	r3, #2
 8005174:	602b      	str	r3, [r5, #0]
            if (encType == WC_TYPE_HEX_STR)
 8005176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d01b      	beq.n	80051b4 <wc_ecc_import_raw_private+0xf8>
                    key->dp->size);
 800517c:	692b      	ldr	r3, [r5, #16]
                err = mp_read_unsigned_bin(&key->k, (const byte*)d,
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	9903      	ldr	r1, [sp, #12]
 8005182:	4648      	mov	r0, r9
 8005184:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <wc_ecc_import_raw_private+0x134>)
 8005186:	4798      	blx	r3
 8005188:	4604      	mov	r4, r0
            if (mp_iszero(&key->k)) {
 800518a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800518e:	b33b      	cbz	r3, 80051e0 <wc_ecc_import_raw_private+0x124>
    if (err != MP_OKAY) {
 8005190:	2c00      	cmp	r4, #0
 8005192:	d0a7      	beq.n	80050e4 <wc_ecc_import_raw_private+0x28>
        mp_clear(key->pubkey.x);
 8005194:	4640      	mov	r0, r8
 8005196:	4d18      	ldr	r5, [pc, #96]	; (80051f8 <wc_ecc_import_raw_private+0x13c>)
 8005198:	47a8      	blx	r5
        mp_clear(key->pubkey.y);
 800519a:	4658      	mov	r0, fp
 800519c:	47a8      	blx	r5
        mp_clear(key->pubkey.z);
 800519e:	4650      	mov	r0, sl
 80051a0:	47a8      	blx	r5
        mp_clear(&key->k);
 80051a2:	4648      	mov	r0, r9
 80051a4:	47a8      	blx	r5
 80051a6:	e79d      	b.n	80050e4 <wc_ecc_import_raw_private+0x28>
        err = mp_set(key->pubkey.z, 1);
 80051a8:	2101      	movs	r1, #1
 80051aa:	4650      	mov	r0, sl
 80051ac:	4b13      	ldr	r3, [pc, #76]	; (80051fc <wc_ecc_import_raw_private+0x140>)
 80051ae:	4798      	blx	r3
 80051b0:	4604      	mov	r4, r0
 80051b2:	e7db      	b.n	800516c <wc_ecc_import_raw_private+0xb0>
                err = mp_read_radix(&key->k, d, MP_RADIX_HEX);
 80051b4:	2210      	movs	r2, #16
 80051b6:	9903      	ldr	r1, [sp, #12]
 80051b8:	4648      	mov	r0, r9
 80051ba:	4b0e      	ldr	r3, [pc, #56]	; (80051f4 <wc_ecc_import_raw_private+0x138>)
 80051bc:	4798      	blx	r3
 80051be:	4604      	mov	r4, r0
 80051c0:	e7e3      	b.n	800518a <wc_ecc_import_raw_private+0xce>
            key->type = ECC_PUBLICKEY;
 80051c2:	2301      	movs	r3, #1
 80051c4:	602b      	str	r3, [r5, #0]
 80051c6:	e7e3      	b.n	8005190 <wc_ecc_import_raw_private+0xd4>
        return BAD_FUNC_ARG;
 80051c8:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 80051cc:	e78a      	b.n	80050e4 <wc_ecc_import_raw_private+0x28>
 80051ce:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 80051d2:	e787      	b.n	80050e4 <wc_ecc_import_raw_private+0x28>
 80051d4:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 80051d8:	e784      	b.n	80050e4 <wc_ecc_import_raw_private+0x28>
        return MEMORY_E;
 80051da:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 80051de:	e781      	b.n	80050e4 <wc_ecc_import_raw_private+0x28>
                return BAD_FUNC_ARG;
 80051e0:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 80051e4:	e77e      	b.n	80050e4 <wc_ecc_import_raw_private+0x28>
 80051e6:	bf00      	nop
 80051e8:	0800504d 	.word	0x0800504d
 80051ec:	0800145d 	.word	0x0800145d
 80051f0:	0800157f 	.word	0x0800157f
 80051f4:	08001671 	.word	0x08001671
 80051f8:	0800151d 	.word	0x0800151d
 80051fc:	08001569 	.word	0x08001569

08005200 <wc_ecc_is_valid_idx>:
{
 8005200:	4601      	mov	r1, r0
   for (x = 0; ecc_sets[x].size != 0; x++)
 8005202:	2200      	movs	r2, #0
 8005204:	2334      	movs	r3, #52	; 0x34
 8005206:	fb03 f302 	mul.w	r3, r3, r2
 800520a:	4806      	ldr	r0, [pc, #24]	; (8005224 <wc_ecc_is_valid_idx+0x24>)
 800520c:	58c0      	ldr	r0, [r0, r3]
 800520e:	b928      	cbnz	r0, 800521c <wc_ecc_is_valid_idx+0x1c>
   if ((n >= ECC_CUSTOM_IDX) && (n < x)) {
 8005210:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8005214:	db01      	blt.n	800521a <wc_ecc_is_valid_idx+0x1a>
 8005216:	428a      	cmp	r2, r1
 8005218:	dc02      	bgt.n	8005220 <wc_ecc_is_valid_idx+0x20>
}
 800521a:	4770      	bx	lr
   for (x = 0; ecc_sets[x].size != 0; x++)
 800521c:	3201      	adds	r2, #1
 800521e:	e7f1      	b.n	8005204 <wc_ecc_is_valid_idx+0x4>
      return 1;
 8005220:	2001      	movs	r0, #1
 8005222:	e7fa      	b.n	800521a <wc_ecc_is_valid_idx+0x1a>
 8005224:	08005c40 	.word	0x08005c40

08005228 <wc_ecc_init_ex>:
    if (key == NULL) {
 8005228:	b1d0      	cbz	r0, 8005260 <wc_ecc_init_ex+0x38>
{
 800522a:	b570      	push	{r4, r5, r6, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	460d      	mov	r5, r1
 8005230:	4604      	mov	r4, r0
    XMEMSET(key, 0, sizeof(ecc_key));
 8005232:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8005236:	2100      	movs	r1, #0
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <wc_ecc_init_ex+0x44>)
 800523a:	4798      	blx	r3
    key->state = ECC_STATE_NONE;
 800523c:	2300      	movs	r3, #0
 800523e:	60a3      	str	r3, [r4, #8]
    ret = mp_init_multi(&key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8005248:	f104 0268 	add.w	r2, r4, #104	; 0x68
 800524c:	f104 0118 	add.w	r1, r4, #24
 8005250:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8005254:	4e06      	ldr	r6, [pc, #24]	; (8005270 <wc_ecc_init_ex+0x48>)
 8005256:	47b0      	blx	r6
    if (ret != MP_OKAY) {
 8005258:	b928      	cbnz	r0, 8005266 <wc_ecc_init_ex+0x3e>
    key->heap = heap;
 800525a:	6165      	str	r5, [r4, #20]
}
 800525c:	b002      	add	sp, #8
 800525e:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 8005260:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8005264:	4770      	bx	lr
        return MEMORY_E;
 8005266:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800526a:	e7f7      	b.n	800525c <wc_ecc_init_ex+0x34>
 800526c:	08000159 	.word	0x08000159
 8005270:	0800145d 	.word	0x0800145d

08005274 <wc_ecc_init>:
{
 8005274:	b508      	push	{r3, lr}
    return wc_ecc_init_ex(key, NULL, INVALID_DEVID);
 8005276:	f06f 0201 	mvn.w	r2, #1
 800527a:	2100      	movs	r1, #0
 800527c:	4b01      	ldr	r3, [pc, #4]	; (8005284 <wc_ecc_init+0x10>)
 800527e:	4798      	blx	r3
}
 8005280:	bd08      	pop	{r3, pc}
 8005282:	bf00      	nop
 8005284:	08005229 	.word	0x08005229

08005288 <wc_ecc_verify_hash_ex>:
{
 8005288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800528c:	b086      	sub	sp, #24
 800528e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005290:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
 8005292:	2800      	cmp	r0, #0
 8005294:	d04c      	beq.n	8005330 <wc_ecc_verify_hash_ex+0xa8>
 8005296:	460d      	mov	r5, r1
 8005298:	4616      	mov	r6, r2
 800529a:	4698      	mov	r8, r3
 800529c:	4681      	mov	r9, r0
 800529e:	2900      	cmp	r1, #0
 80052a0:	d049      	beq.n	8005336 <wc_ecc_verify_hash_ex+0xae>
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	d04a      	beq.n	800533c <wc_ecc_verify_hash_ex+0xb4>
 80052a6:	2f00      	cmp	r7, #0
 80052a8:	d04b      	beq.n	8005342 <wc_ecc_verify_hash_ex+0xba>
 80052aa:	2c00      	cmp	r4, #0
 80052ac:	d04c      	beq.n	8005348 <wc_ecc_verify_hash_ex+0xc0>
   *res = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	603b      	str	r3, [r7, #0]
   if (wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL) {
 80052b2:	6860      	ldr	r0, [r4, #4]
 80052b4:	4b2c      	ldr	r3, [pc, #176]	; (8005368 <wc_ecc_verify_hash_ex+0xe0>)
 80052b6:	4798      	blx	r3
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d048      	beq.n	800534e <wc_ecc_verify_hash_ex+0xc6>
 80052bc:	6923      	ldr	r3, [r4, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d048      	beq.n	8005354 <wc_ecc_verify_hash_ex+0xcc>
   err = wc_ecc_check_r_s_range(key, r, s);
 80052c2:	462a      	mov	r2, r5
 80052c4:	4649      	mov	r1, r9
 80052c6:	4620      	mov	r0, r4
 80052c8:	4b28      	ldr	r3, [pc, #160]	; (800536c <wc_ecc_verify_hash_ex+0xe4>)
 80052ca:	4798      	blx	r3
   if (err != MP_OKAY) {
 80052cc:	b988      	cbnz	r0, 80052f2 <wc_ecc_verify_hash_ex+0x6a>
  if (key->type == ECC_PRIVATEKEY_ONLY) {
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d011      	beq.n	80052f8 <wc_ecc_verify_hash_ex+0x70>
    if (key->idx == ECC_CUSTOM_IDX ||
 80052d4:	6863      	ldr	r3, [r4, #4]
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052da:	d03e      	beq.n	800535a <wc_ecc_verify_hash_ex+0xd2>
            (ecc_sets[key->idx].id != ECC_SECP256R1 &&
 80052dc:	4a24      	ldr	r2, [pc, #144]	; (8005370 <wc_ecc_verify_hash_ex+0xe8>)
 80052de:	2134      	movs	r1, #52	; 0x34
 80052e0:	fb01 2303 	mla	r3, r1, r3, r2
 80052e4:	685b      	ldr	r3, [r3, #4]
    if (key->idx == ECC_CUSTOM_IDX ||
 80052e6:	2b07      	cmp	r3, #7
 80052e8:	d001      	beq.n	80052ee <wc_ecc_verify_hash_ex+0x66>
            (ecc_sets[key->idx].id != ECC_SECP256R1 &&
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	d138      	bne.n	8005360 <wc_ecc_verify_hash_ex+0xd8>
        if (ecc_sets[key->idx].id == ECC_SECP256R1) {
 80052ee:	2b07      	cmp	r3, #7
 80052f0:	d00c      	beq.n	800530c <wc_ecc_verify_hash_ex+0x84>
}
 80052f2:	b006      	add	sp, #24
 80052f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      err = ecc_make_pub_ex(key, NULL, NULL, NULL);
 80052f8:	2300      	movs	r3, #0
 80052fa:	461a      	mov	r2, r3
 80052fc:	4619      	mov	r1, r3
 80052fe:	4620      	mov	r0, r4
 8005300:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005378 <wc_ecc_verify_hash_ex+0xf0>
 8005304:	47d0      	blx	sl
      if (err != MP_OKAY) {
 8005306:	2800      	cmp	r0, #0
 8005308:	d0e4      	beq.n	80052d4 <wc_ecc_verify_hash_ex+0x4c>
 800530a:	e7f2      	b.n	80052f2 <wc_ecc_verify_hash_ex+0x6a>
                key->pubkey.y, key->pubkey.z, r, s, res, key->heap);
 800530c:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
            return sp_ecc_verify_256(hash, hashlen, key->pubkey.x,
 8005310:	6962      	ldr	r2, [r4, #20]
 8005312:	9204      	str	r2, [sp, #16]
 8005314:	9703      	str	r7, [sp, #12]
 8005316:	9502      	str	r5, [sp, #8]
 8005318:	f8cd 9004 	str.w	r9, [sp, #4]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8005322:	f104 0218 	add.w	r2, r4, #24
 8005326:	4641      	mov	r1, r8
 8005328:	4630      	mov	r0, r6
 800532a:	4c12      	ldr	r4, [pc, #72]	; (8005374 <wc_ecc_verify_hash_ex+0xec>)
 800532c:	47a0      	blx	r4
 800532e:	e7e0      	b.n	80052f2 <wc_ecc_verify_hash_ex+0x6a>
       return ECC_BAD_ARG_E;
 8005330:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8005334:	e7dd      	b.n	80052f2 <wc_ecc_verify_hash_ex+0x6a>
 8005336:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800533a:	e7da      	b.n	80052f2 <wc_ecc_verify_hash_ex+0x6a>
 800533c:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8005340:	e7d7      	b.n	80052f2 <wc_ecc_verify_hash_ex+0x6a>
 8005342:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8005346:	e7d4      	b.n	80052f2 <wc_ecc_verify_hash_ex+0x6a>
 8005348:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 800534c:	e7d1      	b.n	80052f2 <wc_ecc_verify_hash_ex+0x6a>
      return ECC_BAD_ARG_E;
 800534e:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8005352:	e7ce      	b.n	80052f2 <wc_ecc_verify_hash_ex+0x6a>
 8005354:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8005358:	e7cb      	b.n	80052f2 <wc_ecc_verify_hash_ex+0x6a>
        return WC_KEY_SIZE_E;
 800535a:	f06f 00e9 	mvn.w	r0, #233	; 0xe9
 800535e:	e7c8      	b.n	80052f2 <wc_ecc_verify_hash_ex+0x6a>
 8005360:	f06f 00e9 	mvn.w	r0, #233	; 0xe9
 8005364:	e7c5      	b.n	80052f2 <wc_ecc_verify_hash_ex+0x6a>
 8005366:	bf00      	nop
 8005368:	08005201 	.word	0x08005201
 800536c:	08004fc1 	.word	0x08004fc1
 8005370:	08005c40 	.word	0x08005c40
 8005374:	08004b81 	.word	0x08004b81
 8005378:	08004ea5 	.word	0x08004ea5

0800537c <wc_ecc_import_unsigned>:
}

/* Import x, y and optional private (d) as unsigned binary */
int wc_ecc_import_unsigned(ecc_key* key, byte* qx, byte* qy,
                   byte* d, int curve_id)
{
 800537c:	b510      	push	{r4, lr}
 800537e:	b082      	sub	sp, #8
    return wc_ecc_import_raw_private(key, (const char*)qx, (const char*)qy,
 8005380:	2402      	movs	r4, #2
 8005382:	9401      	str	r4, [sp, #4]
 8005384:	9c04      	ldr	r4, [sp, #16]
 8005386:	9400      	str	r4, [sp, #0]
 8005388:	4c01      	ldr	r4, [pc, #4]	; (8005390 <wc_ecc_import_unsigned+0x14>)
 800538a:	47a0      	blx	r4
        (const char*)d, curve_id, WC_TYPE_UNSIGNED_BIN);
}
 800538c:	b002      	add	sp, #8
 800538e:	bd10      	pop	{r4, pc}
 8005390:	080050bd 	.word	0x080050bd
 8005394:	00000000 	.word	0x00000000

08005398 <__wolfBoot_erase_partition_veneer>:
 8005398:	f85f f000 	ldr.w	pc, [pc]	; 800539c <__wolfBoot_erase_partition_veneer+0x4>
 800539c:	200005f1 	.word	0x200005f1

080053a0 <__wolfBoot_update_trigger_veneer>:
 80053a0:	f85f f000 	ldr.w	pc, [pc]	; 80053a4 <__wolfBoot_update_trigger_veneer+0x4>
 80053a4:	20000645 	.word	0x20000645

080053a8 <__wolfBoot_start_veneer>:
 80053a8:	f85f f000 	ldr.w	pc, [pc]	; 80053ac <__wolfBoot_start_veneer+0x4>
 80053ac:	20000c11 	.word	0x20000c11

080053b0 <__hal_flash_lock_veneer>:
 80053b0:	f85f f000 	ldr.w	pc, [pc]	; 80053b4 <__hal_flash_lock_veneer+0x4>
 80053b4:	200001a1 	.word	0x200001a1

080053b8 <__wolfBoot_get_partition_state_veneer>:
 80053b8:	f85f f000 	ldr.w	pc, [pc]	; 80053bc <__wolfBoot_get_partition_state_veneer+0x4>
 80053bc:	200005a5 	.word	0x200005a5

080053c0 <__hal_flash_unlock_veneer>:
 80053c0:	f85f f000 	ldr.w	pc, [pc]	; 80053c4 <__hal_flash_unlock_veneer+0x4>
 80053c4:	20000175 	.word	0x20000175

080053c8 <wolfboot_magic_trail>:
 80053c8:	544f4f42                                BOOT

080053cc <ecc256_pub_key>:
 80053cc:	f0c474ed cd19099f 81d3e9f1 0d009588     .t..............
 80053dc:	cb6b46b2 f53bab0d 5abe3f33 eda13144     .Fk...;.3?.ZD1..
 80053ec:	2b612daa 637f3872 f5874c5e 7a21a12d     .-a+r8.c^L..-.!z
 80053fc:	e5b0e9ba 77b682f6 92ce5738 4fd1a785     .......w8W.....O

0800540c <ecc256_pub_key_len>:
 800540c:	00000040                                @...

08005410 <K>:
 8005410:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
 8005420:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
 8005430:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
 8005440:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
 8005450:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
 8005460:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
 8005470:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
 8005480:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
 8005490:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
 80054a0:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
 80054b0:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
 80054c0:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
 80054d0:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
 80054e0:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
 80054f0:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
 8005500:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

08005510 <p256_base>:
 8005510:	d898c296 f4a13945 2deb33a0 77037d81     ....E9...3.-.}.w
 8005520:	63a440f2 f8bce6e5 e12c4247 6b17d1f2     .@.c....GB,....k
	...
 8005550:	37bf51f5 cbb64068 6b315ece 2bce3357     .Q.7h@...^1kW3.+
 8005560:	7c0f9e16 8ee7eb4a fe1a7f9b 4fe342e2     ...|J........B.O
	...
 8005590:	00000001 00000000 00000000 00000000     ................
	...

080055d4 <p256_mod>:
 80055d4:	ffffffff ffffffff ffffffff 00000000     ................
	...
 80055ec:	00000001 ffffffff                       ........

080055f4 <p256_mod_minus_2>:
 80055f4:	fffffffd ffffffff ffffffff 00000000     ................
	...
 800560c:	00000001 ffffffff                       ........

08005614 <p256_norm_mod>:
 8005614:	00000001 00000000 00000000 ffffffff     ................
 8005624:	ffffffff ffffffff fffffffe 00000000     ................

08005634 <p256_norm_order>:
 8005634:	039cdaaf 0c46353d 58e8617b 43190552     ....=5F.{a.XR..C
	...
 800564c:	ffffffff 00000000                       ........

08005654 <p256_order>:
 8005654:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
 8005664:	ffffffff ffffffff 00000000 ffffffff     ................

08005674 <p256_order_minus_2>:
 8005674:	fc63254f f3b9cac2 a7179e84 bce6faad     O%c.............
 8005684:	ffffffff ffffffff 00000000 ffffffff     ................

08005694 <p256_table>:
	...
 80056d4:	18a9143c 79e730d4 5fedb601 75ba95fc     <....0.y..._...u
 80056e4:	77622510 79fb732b a53755c6 18905f76     .%bw+s.y.U7.v_..
 80056f4:	ce95560a ddf25357 ba19e45c 8b4ab8e4     .V..WS..\.....J.
 8005704:	dd21f325 d2e88688 25885d85 8571ff18     %.!......].%..q.
 8005714:	16a0d2bb 4f922fc5 1a623499 0d5cc16c     ...../.O.4b.l.\.
 8005724:	57c62c8b 9241cf3a fd1b667f 2f5e6961     .,.W:.A..f..ai^/
 8005734:	f5a01797 5c15c70b 60956192 3d20b44d     .......\.a.`M. =
 8005744:	071fdb52 04911b37 8d6f0f7b f648f916     R...7...{.o...H.
 8005754:	e137bbbc 9e566847 8a6a0bec e434469e     ..7.GhV...j..F4.
 8005764:	79d73463 b1c42761 133d0015 5abe0285     c4.ya'....=....Z
 8005774:	c04c7dab 92aa837c 43260c07 573d9f4c     .}L.|.....&CL.=W
 8005784:	78e6cc37 0c931562 6b6f7383 94bb725b     7..xb....sok[r..
 8005794:	bfe20925 62a8c244 8fdce867 91c19ac3     %...D..bg.......
 80057a4:	dd387063 5a96a5d5 21d324f6 61d587d4     cp8....Z.$.!...a
 80057b4:	a37173ea e87673a2 53778b65 23848008     .sq..sv.e.wS...#
 80057c4:	05bab43e 10f8441e 4621efbe fa11fe12     >....D....!F....
 80057d4:	2cb19ffd 1c891f2b b1923c23 01ba8d5b     ...,+...#<..[...
 80057e4:	8ac5ca8e b6d03d67 1f13bedc 586eb04c     ....g=......L.nX
 80057f4:	27e8ed09 0c35c6e5 1819ede2 1e81a33c     ...'..5.....<...
 8005804:	56c652fa 278fd6c0 70864f11 19d5ac08     .R.V...'.O.p....
 8005814:	d2b533d5 62577734 a1bdddc0 673b8af6     .3..4wWb......;g
 8005824:	a79ec293 577e7c9a c3b266b1 bb6de651     .....|~W.f..Q.m.
 8005834:	b65259b3 e7e9303a d03a7480 d6a0afd3     .YR.:0...t:.....
 8005844:	9b3cfc27 c5ac83d1 5d18b99b 60b4619a     '.<........].a.`
 8005854:	1ae5aa1c bd6a38e1 49e73658 b8b7652b     .....8j.X6.I+e..
 8005864:	ee5f87ed 0b130014 aeebffcd 9d0f27b2     .._..........'..
 8005874:	7a730a55 ca924631 ddbbc83a 9c955b2f     U.sz1F..:.../[..
 8005884:	ac019a71 07c1dfe0 356ec48d 244a566d     q.........n5mVJ$
 8005894:	f4f8b16a 56f8410e c47b266a 97241afe     j....A.Vj&{...$.
 80058a4:	6d9c87c1 0a406b8e cd42ab1b 803f3e02     ...m.k@...B..>?.
 80058b4:	04dbec69 7f0309a8 3bbad05f a83b85f7     i......._..;..;.
 80058c4:	ad8e197f c6097273 5067adc1 c097440e     ....sr....gP.D..
 80058d4:	c379ab34 846a56f2 841df8d1 a8ee068b     4.y..Vj.........
 80058e4:	176c68ef 20314459 915f1f30 f1af32d5     .hl.YD1 0._..2..
 80058f4:	5d75bd50 99c37531 f72f67bc 837cffba     P.u]1u...g/...|.
 8005904:	48d7723f 0613a418 e2d41c8b 23d0f130     ?r.H........0..#
 8005914:	d5be5a2b ed93e225 5934f3c6 6fe79983     +Z..%.....4Y...o
 8005924:	22626ffc 43140926 7990216a 50bbb4d9     .ob"&..Cj!.y...P
 8005934:	e57ec63e 378191c6 181dcdb2 65422c40     >.~....7....@,Be
 8005944:	0236e0f6 41a8099b 01fe49c3 2b100118     ..6....A.I.....+
 8005954:	9b391593 fc68b5c5 598270fc c385f5a2     ..9...h..p.Y....
 8005964:	d19adcbb 7144f3aa 83fbae0c dd558999     ......Dq......U.
 8005974:	74b82ff4 93b88b8e 71e734c9 d2e03c40     ./.t.....4.q@<..
 8005984:	43c0322a 9a7a9eaf 149d6041 e6e4c551     *2.C..z.A`..Q...
 8005994:	80ec21fe 5fe14bfe c255be82 f6ce116a     .!...K._..U.j...
 80059a4:	2f4a5d67 98bc5a07 db7e63af fad27148     g]J/.Z...c~.Hq..
 80059b4:	29ab05b3 90c0b6ac 4e251ae6 37a9a83c     ...)......%N<..7
 80059c4:	c2aade7d 0a7dc875 9f0e1a84 77387de3     }...u.}......}8w
 80059d4:	a56c0dd7 1e9ecc49 46086c74 a5cffcd8     ..l.I...tl.F....
 80059e4:	f505aece 8f7a1408 bef0c47e b37b85c0     ......z.~.....{.
 80059f4:	cc0e6a8f 3596b6e4 6b388f23 fd6d4bbf     .j.....5#.8k.Km.
 8005a04:	c39cef4e aba453fa f9f628d5 9c135ac8     N....S...(...Z..
 8005a14:	95c8f8be 0a1c7294 3bf362bf 2961c480     .....r...b.;..a)
 8005a24:	df63d4ac 9e418403 91ece900 c109f9cb     ..c...A.........
 8005a34:	58945705 c2d095d0 ddeb85c0 b9083d96     .W.X.........=..
 8005a44:	7a40449b 84692b8d 2eee1ee1 9bc3344f     .D@z.+i.....O4..
 8005a54:	42913074 0d5ae356 48a542b1 55491b27     t0.BV.Z..B.H'.IU
 8005a64:	b310732a 469ca665 5f1a4cc1 29591d52     *s..e..F.L._R.Y)
 8005a74:	b84f983f e76f5b6b 9f5f84e1 be7eef41     ?.O.k[o..._.A.~.
 8005a84:	80baa189 1200d496 18ef332c 6376551f     ........,3...Uvc
 8005a94:	50434553 52363532 00000031 46464646     SECP256R1...FFFF
 8005aa4:	46464646 30303030 31303030 30303030     FFFF000000010000
 8005ab4:	30303030 30303030 30303030 30303030     0000000000000000
 8005ac4:	30303030 46464646 46464646 46464646     0000FFFFFFFFFFFF
 8005ad4:	46464646 46464646 46464646 00000000     FFFFFFFFFFFF....
 8005ae4:	46464646 46464646 30303030 31303030     FFFFFFFF00000001
 8005af4:	30303030 30303030 30303030 30303030     0000000000000000
 8005b04:	30303030 30303030 46464646 46464646     00000000FFFFFFFF
 8005b14:	46464646 46464646 46464646 43464646     FFFFFFFFFFFFFFFC
 8005b24:	00000000 36434135 38443533 41334141     ....5AC635D8AA3A
 8005b34:	37453339 42453342 35354442 38393637     93E7B3EBBD557698
 8005b44:	43423638 44313536 30423630 33354343     86BC651D06B0CC53
 8005b54:	36463042 45434233 45334333 32443732     B0F63BCE3C3E27D2
 8005b64:	42343036 00000000 46464646 46464646     604B....FFFFFFFF
 8005b74:	30303030 30303030 46464646 46464646     00000000FFFFFFFF
 8005b84:	46464646 46464646 36454342 44414146     FFFFFFFFBCE6FAAD
 8005b94:	37313741 34384539 39423346 32434143     A7179E84F3B9CAC2
 8005ba4:	33364346 31353532 00000000 37314236     FC632551....6B17
 8005bb4:	32463144 43323145 37343234 43423846     D1F2E12C4247F8BC
 8005bc4:	35453645 34413336 32463034 33303737     E6E563A440F27703
 8005bd4:	31384437 42454432 30413333 31413446     7D812DEB33A0F4A1
 8005be4:	35343933 38393844 36393243 00000000     3945D898C296....
 8005bf4:	33454634 32453234 41314546 42394637     4FE342E2FE1A7F9B
 8005c04:	37454538 41344245 46304337 36314539     8EE7EB4A7C0F9E16
 8005c14:	45434232 37353333 31334236 45434535     2BCE33576B315ECE
 8005c24:	36424243 38363034 46423733 35463135     CBB6406837BF51F5
 8005c34:	00000000                                ....

08005c38 <ecc_oid_secp256r1>:
 8005c38:	ce48862a 0701033d                       *.H.=...

08005c40 <ecc_sets>:
 8005c40:	00000020 00000007 08005a94 08005aa0      ........Z...Z..
 8005c50:	08005ae4 08005b28 08005b6c 08005bb0     .Z..([..l[...[..
 8005c60:	08005bf4 08005c38 00000008 0000020e     .[..8\..........
 8005c70:	00000001 00000000 ffffffff 00000000     ................
	...

Disassembly of section .data:

20000000 <AHB_ENABLE_REG>:
20000000:	40021014                                ...@

20000004 <GPIOA_MODER>:
20000004:	48000000                                ...H

20000008 <GPIOA_ODR>:
20000008:	48000014                                ...H

2000000c <GPIOA_PUPDR>:
2000000c:	4800000c                                ...H

20000010 <GPIOA_IDR>:
20000010:	48000010                                ...H

20000014 <wolfboot_version>:
20000014:	00000000                                ....

20000018 <wolfboot_version>:
20000018:	00000000                                ....

2000001c <flash_set_waitstates>:
{
2000001c:	b082      	sub	sp, #8
2000001e:	9001      	str	r0, [sp, #4]
}
20000020:	bf00      	nop
20000022:	b002      	add	sp, #8
20000024:	4770      	bx	lr

20000026 <flash_wait_complete>:
    while ((FLASH_SR & FLASH_SR_BSY) == FLASH_SR_BSY)
20000026:	bf00      	nop
20000028:	4b04      	ldr	r3, [pc, #16]	; (2000003c <flash_wait_complete+0x16>)
2000002a:	681b      	ldr	r3, [r3, #0]
2000002c:	f003 0301 	and.w	r3, r3, #1
20000030:	2b01      	cmp	r3, #1
20000032:	d0f9      	beq.n	20000028 <flash_wait_complete+0x2>
}
20000034:	bf00      	nop
20000036:	bf00      	nop
20000038:	4770      	bx	lr
2000003a:	bf00      	nop
2000003c:	4002200c 	.word	0x4002200c

20000040 <clear_errors>:
    FLASH_SR |= 0b110101;
20000040:	4b03      	ldr	r3, [pc, #12]	; (20000050 <clear_errors+0x10>)
20000042:	681b      	ldr	r3, [r3, #0]
20000044:	4a02      	ldr	r2, [pc, #8]	; (20000050 <clear_errors+0x10>)
20000046:	f043 0335 	orr.w	r3, r3, #53	; 0x35
2000004a:	6013      	str	r3, [r2, #0]
}
2000004c:	bf00      	nop
2000004e:	4770      	bx	lr
20000050:	4002200c 	.word	0x4002200c

20000054 <hal_flash_write>:
{
20000054:	b500      	push	{lr}
20000056:	b08b      	sub	sp, #44	; 0x2c
20000058:	9003      	str	r0, [sp, #12]
2000005a:	9102      	str	r1, [sp, #8]
2000005c:	9201      	str	r2, [sp, #4]
    int i = 0;
2000005e:	2300      	movs	r3, #0
20000060:	9309      	str	r3, [sp, #36]	; 0x24
    flash_wait_complete();
20000062:	f7ff ffe0 	bl	20000026 <flash_wait_complete>
    clear_errors();
20000066:	f7ff ffeb 	bl	20000040 <clear_errors>
    if (address & 0x01) {
2000006a:	9b03      	ldr	r3, [sp, #12]
2000006c:	f003 0301 	and.w	r3, r3, #1
20000070:	2b00      	cmp	r3, #0
20000072:	d02b      	beq.n	200000cc <hal_flash_write+0x78>
        volatile uint16_t *flash_mem = (volatile uint16_t *)(address - 1);
20000074:	9b03      	ldr	r3, [sp, #12]
20000076:	3b01      	subs	r3, #1
20000078:	9308      	str	r3, [sp, #32]
        uint16_t half_word = (data[0] << 8) | (flash_mem[0] & 0xFF);
2000007a:	9b02      	ldr	r3, [sp, #8]
2000007c:	781b      	ldrb	r3, [r3, #0]
2000007e:	021b      	lsls	r3, r3, #8
20000080:	b21a      	sxth	r2, r3
20000082:	9b08      	ldr	r3, [sp, #32]
20000084:	881b      	ldrh	r3, [r3, #0]
20000086:	b29b      	uxth	r3, r3
20000088:	b21b      	sxth	r3, r3
2000008a:	b2db      	uxtb	r3, r3
2000008c:	b21b      	sxth	r3, r3
2000008e:	4313      	orrs	r3, r2
20000090:	b21b      	sxth	r3, r3
20000092:	f8ad 301e 	strh.w	r3, [sp, #30]
        FLASH_CR |= FLASH_CR_PG;
20000096:	4b36      	ldr	r3, [pc, #216]	; (20000170 <hal_flash_write+0x11c>)
20000098:	681b      	ldr	r3, [r3, #0]
2000009a:	4a35      	ldr	r2, [pc, #212]	; (20000170 <hal_flash_write+0x11c>)
2000009c:	f043 0301 	orr.w	r3, r3, #1
200000a0:	6013      	str	r3, [r2, #0]
        flash_mem[0] = half_word;
200000a2:	9b08      	ldr	r3, [sp, #32]
200000a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
200000a8:	801a      	strh	r2, [r3, #0]
        flash_wait_complete();
200000aa:	f7ff ffbc 	bl	20000026 <flash_wait_complete>
        FLASH_CR &= ~FLASH_CR_PG;
200000ae:	4b30      	ldr	r3, [pc, #192]	; (20000170 <hal_flash_write+0x11c>)
200000b0:	681b      	ldr	r3, [r3, #0]
200000b2:	4a2f      	ldr	r2, [pc, #188]	; (20000170 <hal_flash_write+0x11c>)
200000b4:	f023 0301 	bic.w	r3, r3, #1
200000b8:	6013      	str	r3, [r2, #0]
        data++;
200000ba:	9b02      	ldr	r3, [sp, #8]
200000bc:	3301      	adds	r3, #1
200000be:	9302      	str	r3, [sp, #8]
        len--;
200000c0:	9b01      	ldr	r3, [sp, #4]
200000c2:	3b01      	subs	r3, #1
200000c4:	9301      	str	r3, [sp, #4]
        address += 1;
200000c6:	9b03      	ldr	r3, [sp, #12]
200000c8:	3301      	adds	r3, #1
200000ca:	9303      	str	r3, [sp, #12]
    volatile uint16_t *flash_mem = (volatile uint16_t *)address;
200000cc:	9b03      	ldr	r3, [sp, #12]
200000ce:	9306      	str	r3, [sp, #24]
    const uint16_t *hw_data = (uint16_t *)data;
200000d0:	9b02      	ldr	r3, [sp, #8]
200000d2:	9305      	str	r3, [sp, #20]
    for (; i < (len/2); i++) {
200000d4:	e01a      	b.n	2000010c <hal_flash_write+0xb8>
        FLASH_CR |= FLASH_CR_PG;
200000d6:	4b26      	ldr	r3, [pc, #152]	; (20000170 <hal_flash_write+0x11c>)
200000d8:	681b      	ldr	r3, [r3, #0]
200000da:	4a25      	ldr	r2, [pc, #148]	; (20000170 <hal_flash_write+0x11c>)
200000dc:	f043 0301 	orr.w	r3, r3, #1
200000e0:	6013      	str	r3, [r2, #0]
        flash_mem[i] = hw_data[i];
200000e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
200000e4:	005b      	lsls	r3, r3, #1
200000e6:	9a05      	ldr	r2, [sp, #20]
200000e8:	441a      	add	r2, r3
200000ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
200000ec:	005b      	lsls	r3, r3, #1
200000ee:	9906      	ldr	r1, [sp, #24]
200000f0:	440b      	add	r3, r1
200000f2:	8812      	ldrh	r2, [r2, #0]
200000f4:	801a      	strh	r2, [r3, #0]
        flash_wait_complete();
200000f6:	f7ff ff96 	bl	20000026 <flash_wait_complete>
        FLASH_CR &= ~FLASH_CR_PG;
200000fa:	4b1d      	ldr	r3, [pc, #116]	; (20000170 <hal_flash_write+0x11c>)
200000fc:	681b      	ldr	r3, [r3, #0]
200000fe:	4a1c      	ldr	r2, [pc, #112]	; (20000170 <hal_flash_write+0x11c>)
20000100:	f023 0301 	bic.w	r3, r3, #1
20000104:	6013      	str	r3, [r2, #0]
    for (; i < (len/2); i++) {
20000106:	9b09      	ldr	r3, [sp, #36]	; 0x24
20000108:	3301      	adds	r3, #1
2000010a:	9309      	str	r3, [sp, #36]	; 0x24
2000010c:	9b01      	ldr	r3, [sp, #4]
2000010e:	0fda      	lsrs	r2, r3, #31
20000110:	4413      	add	r3, r2
20000112:	105b      	asrs	r3, r3, #1
20000114:	461a      	mov	r2, r3
20000116:	9b09      	ldr	r3, [sp, #36]	; 0x24
20000118:	4293      	cmp	r3, r2
2000011a:	dbdc      	blt.n	200000d6 <hal_flash_write+0x82>
    if (len & 1) {
2000011c:	9b01      	ldr	r3, [sp, #4]
2000011e:	f003 0301 	and.w	r3, r3, #1
20000122:	2b00      	cmp	r3, #0
20000124:	d01e      	beq.n	20000164 <hal_flash_write+0x110>
        FLASH_CR |= FLASH_CR_PG;
20000126:	4b12      	ldr	r3, [pc, #72]	; (20000170 <hal_flash_write+0x11c>)
20000128:	681b      	ldr	r3, [r3, #0]
2000012a:	4a11      	ldr	r2, [pc, #68]	; (20000170 <hal_flash_write+0x11c>)
2000012c:	f043 0301 	orr.w	r3, r3, #1
20000130:	6013      	str	r3, [r2, #0]
        volatile uint16_t half_word = hw_data[i] & 0xFF;
20000132:	9b09      	ldr	r3, [sp, #36]	; 0x24
20000134:	005b      	lsls	r3, r3, #1
20000136:	9a05      	ldr	r2, [sp, #20]
20000138:	4413      	add	r3, r2
2000013a:	881b      	ldrh	r3, [r3, #0]
2000013c:	b2db      	uxtb	r3, r3
2000013e:	b29b      	uxth	r3, r3
20000140:	f8ad 3012 	strh.w	r3, [sp, #18]
        flash_mem[i] = (uint16_t)(half_word);
20000144:	9b09      	ldr	r3, [sp, #36]	; 0x24
20000146:	005b      	lsls	r3, r3, #1
20000148:	9a06      	ldr	r2, [sp, #24]
2000014a:	4413      	add	r3, r2
2000014c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
20000150:	b292      	uxth	r2, r2
20000152:	801a      	strh	r2, [r3, #0]
        flash_wait_complete();
20000154:	f7ff ff67 	bl	20000026 <flash_wait_complete>
        FLASH_CR &= ~FLASH_CR_PG;
20000158:	4b05      	ldr	r3, [pc, #20]	; (20000170 <hal_flash_write+0x11c>)
2000015a:	681b      	ldr	r3, [r3, #0]
2000015c:	4a04      	ldr	r2, [pc, #16]	; (20000170 <hal_flash_write+0x11c>)
2000015e:	f023 0301 	bic.w	r3, r3, #1
20000162:	6013      	str	r3, [r2, #0]
    return 0;
20000164:	2300      	movs	r3, #0
}
20000166:	4618      	mov	r0, r3
20000168:	b00b      	add	sp, #44	; 0x2c
2000016a:	f85d fb04 	ldr.w	pc, [sp], #4
2000016e:	bf00      	nop
20000170:	40022010 	.word	0x40022010

20000174 <hal_flash_unlock>:
    if (FLASH_CR & FLASH_CR_LOCK) {
20000174:	4b06      	ldr	r3, [pc, #24]	; (20000190 <hal_flash_unlock+0x1c>)
20000176:	681b      	ldr	r3, [r3, #0]
20000178:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000017c:	2b00      	cmp	r3, #0
2000017e:	d005      	beq.n	2000018c <hal_flash_unlock+0x18>
        FLASH_KEYR = FLASH_KEY1;
20000180:	4b04      	ldr	r3, [pc, #16]	; (20000194 <hal_flash_unlock+0x20>)
20000182:	4a05      	ldr	r2, [pc, #20]	; (20000198 <hal_flash_unlock+0x24>)
20000184:	601a      	str	r2, [r3, #0]
        FLASH_KEYR = FLASH_KEY2;
20000186:	4b03      	ldr	r3, [pc, #12]	; (20000194 <hal_flash_unlock+0x20>)
20000188:	4a04      	ldr	r2, [pc, #16]	; (2000019c <hal_flash_unlock+0x28>)
2000018a:	601a      	str	r2, [r3, #0]
}
2000018c:	bf00      	nop
2000018e:	4770      	bx	lr
20000190:	40022010 	.word	0x40022010
20000194:	40022004 	.word	0x40022004
20000198:	45670123 	.word	0x45670123
2000019c:	cdef89ab 	.word	0xcdef89ab

200001a0 <hal_flash_lock>:
    FLASH_CR |= FLASH_CR_LOCK;
200001a0:	4b03      	ldr	r3, [pc, #12]	; (200001b0 <hal_flash_lock+0x10>)
200001a2:	681b      	ldr	r3, [r3, #0]
200001a4:	4a02      	ldr	r2, [pc, #8]	; (200001b0 <hal_flash_lock+0x10>)
200001a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
200001aa:	6013      	str	r3, [r2, #0]
}
200001ac:	bf00      	nop
200001ae:	4770      	bx	lr
200001b0:	40022010 	.word	0x40022010

200001b4 <flash_erase_page>:
{
200001b4:	b500      	push	{lr}
200001b6:	b085      	sub	sp, #20
200001b8:	9001      	str	r0, [sp, #4]
    uint32_t addr = page*2048;
200001ba:	9b01      	ldr	r3, [sp, #4]
200001bc:	02db      	lsls	r3, r3, #11
200001be:	9303      	str	r3, [sp, #12]
    if (addr < FLASH_OFFSET)
200001c0:	9b03      	ldr	r3, [sp, #12]
200001c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
200001c6:	d203      	bcs.n	200001d0 <flash_erase_page+0x1c>
        addr += FLASH_OFFSET;
200001c8:	9b03      	ldr	r3, [sp, #12]
200001ca:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
200001ce:	9303      	str	r3, [sp, #12]
    flash_wait_complete();
200001d0:	f7ff ff29 	bl	20000026 <flash_wait_complete>
    FLASH_CR |= FLASH_CR_PER;
200001d4:	4b13      	ldr	r3, [pc, #76]	; (20000224 <flash_erase_page+0x70>)
200001d6:	681b      	ldr	r3, [r3, #0]
200001d8:	4a12      	ldr	r2, [pc, #72]	; (20000224 <flash_erase_page+0x70>)
200001da:	f043 0302 	orr.w	r3, r3, #2
200001de:	6013      	str	r3, [r2, #0]
    FLASH_AR = addr;
200001e0:	4a11      	ldr	r2, [pc, #68]	; (20000228 <flash_erase_page+0x74>)
200001e2:	9b03      	ldr	r3, [sp, #12]
200001e4:	6013      	str	r3, [r2, #0]
    FLASH_CR |= FLASH_CR_STRT;
200001e6:	4b0f      	ldr	r3, [pc, #60]	; (20000224 <flash_erase_page+0x70>)
200001e8:	681b      	ldr	r3, [r3, #0]
200001ea:	4a0e      	ldr	r2, [pc, #56]	; (20000224 <flash_erase_page+0x70>)
200001ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
200001f0:	6013      	str	r3, [r2, #0]
    flash_wait_complete();
200001f2:	f7ff ff18 	bl	20000026 <flash_wait_complete>
    while (!(FLASH_SR & (FLASH_SR_EOP)));
200001f6:	bf00      	nop
200001f8:	4b0c      	ldr	r3, [pc, #48]	; (2000022c <flash_erase_page+0x78>)
200001fa:	681b      	ldr	r3, [r3, #0]
200001fc:	f003 0320 	and.w	r3, r3, #32
20000200:	2b00      	cmp	r3, #0
20000202:	d0f9      	beq.n	200001f8 <flash_erase_page+0x44>
    FLASH_SR |= FLASH_SR_EOP;
20000204:	4b09      	ldr	r3, [pc, #36]	; (2000022c <flash_erase_page+0x78>)
20000206:	681b      	ldr	r3, [r3, #0]
20000208:	4a08      	ldr	r2, [pc, #32]	; (2000022c <flash_erase_page+0x78>)
2000020a:	f043 0320 	orr.w	r3, r3, #32
2000020e:	6013      	str	r3, [r2, #0]
    FLASH_CR &= ~FLASH_CR_PER;
20000210:	4b04      	ldr	r3, [pc, #16]	; (20000224 <flash_erase_page+0x70>)
20000212:	681b      	ldr	r3, [r3, #0]
20000214:	4a03      	ldr	r2, [pc, #12]	; (20000224 <flash_erase_page+0x70>)
20000216:	f023 0302 	bic.w	r3, r3, #2
2000021a:	6013      	str	r3, [r2, #0]
}
2000021c:	bf00      	nop
2000021e:	b005      	add	sp, #20
20000220:	f85d fb04 	ldr.w	pc, [sp], #4
20000224:	40022010 	.word	0x40022010
20000228:	40022014 	.word	0x40022014
2000022c:	4002200c 	.word	0x4002200c

20000230 <hal_flash_erase>:
{
20000230:	b500      	push	{lr}
20000232:	b087      	sub	sp, #28
20000234:	9001      	str	r0, [sp, #4]
20000236:	9100      	str	r1, [sp, #0]
    int start = -1, end = -1;
20000238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2000023c:	9305      	str	r3, [sp, #20]
2000023e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20000242:	9304      	str	r3, [sp, #16]
    if (len == 0)
20000244:	9b00      	ldr	r3, [sp, #0]
20000246:	2b00      	cmp	r3, #0
20000248:	d102      	bne.n	20000250 <hal_flash_erase+0x20>
        return -1;
2000024a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2000024e:	e053      	b.n	200002f8 <hal_flash_erase+0xc8>
    if (address >= FLASH_OFFSET)
20000250:	9b01      	ldr	r3, [sp, #4]
20000252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
20000256:	d303      	bcc.n	20000260 <hal_flash_erase+0x30>
        address -= FLASH_OFFSET;
20000258:	9b01      	ldr	r3, [sp, #4]
2000025a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
2000025e:	9301      	str	r3, [sp, #4]
    end_address = address + len - 1;
20000260:	9a00      	ldr	r2, [sp, #0]
20000262:	9b01      	ldr	r3, [sp, #4]
20000264:	4413      	add	r3, r2
20000266:	3b01      	subs	r3, #1
20000268:	9302      	str	r3, [sp, #8]
    for (i = 0; i < 255; i++)
2000026a:	2300      	movs	r3, #0
2000026c:	9303      	str	r3, [sp, #12]
2000026e:	e026      	b.n	200002be <hal_flash_erase+0x8e>
        if ((address >= (2048*i)) && (address < (2048*(i+1)))) {
20000270:	9b03      	ldr	r3, [sp, #12]
20000272:	02db      	lsls	r3, r3, #11
20000274:	461a      	mov	r2, r3
20000276:	9b01      	ldr	r3, [sp, #4]
20000278:	4293      	cmp	r3, r2
2000027a:	d308      	bcc.n	2000028e <hal_flash_erase+0x5e>
2000027c:	9b03      	ldr	r3, [sp, #12]
2000027e:	3301      	adds	r3, #1
20000280:	02db      	lsls	r3, r3, #11
20000282:	461a      	mov	r2, r3
20000284:	9b01      	ldr	r3, [sp, #4]
20000286:	4293      	cmp	r3, r2
20000288:	d201      	bcs.n	2000028e <hal_flash_erase+0x5e>
            start = i;
2000028a:	9b03      	ldr	r3, [sp, #12]
2000028c:	9305      	str	r3, [sp, #20]
        if ((end_address >= (2048*i)) && (end_address < (2048*(i+1)))) {
2000028e:	9b03      	ldr	r3, [sp, #12]
20000290:	02db      	lsls	r3, r3, #11
20000292:	461a      	mov	r2, r3
20000294:	9b02      	ldr	r3, [sp, #8]
20000296:	4293      	cmp	r3, r2
20000298:	d308      	bcc.n	200002ac <hal_flash_erase+0x7c>
2000029a:	9b03      	ldr	r3, [sp, #12]
2000029c:	3301      	adds	r3, #1
2000029e:	02db      	lsls	r3, r3, #11
200002a0:	461a      	mov	r2, r3
200002a2:	9b02      	ldr	r3, [sp, #8]
200002a4:	4293      	cmp	r3, r2
200002a6:	d201      	bcs.n	200002ac <hal_flash_erase+0x7c>
            end = i;
200002a8:	9b03      	ldr	r3, [sp, #12]
200002aa:	9304      	str	r3, [sp, #16]
        if (start > 0 && end > 0)
200002ac:	9b05      	ldr	r3, [sp, #20]
200002ae:	2b00      	cmp	r3, #0
200002b0:	dd02      	ble.n	200002b8 <hal_flash_erase+0x88>
200002b2:	9b04      	ldr	r3, [sp, #16]
200002b4:	2b00      	cmp	r3, #0
200002b6:	dc06      	bgt.n	200002c6 <hal_flash_erase+0x96>
    for (i = 0; i < 255; i++)
200002b8:	9b03      	ldr	r3, [sp, #12]
200002ba:	3301      	adds	r3, #1
200002bc:	9303      	str	r3, [sp, #12]
200002be:	9b03      	ldr	r3, [sp, #12]
200002c0:	2bfe      	cmp	r3, #254	; 0xfe
200002c2:	ddd5      	ble.n	20000270 <hal_flash_erase+0x40>
200002c4:	e000      	b.n	200002c8 <hal_flash_erase+0x98>
            break;
200002c6:	bf00      	nop
    if (start < 0 || end < 0)
200002c8:	9b05      	ldr	r3, [sp, #20]
200002ca:	2b00      	cmp	r3, #0
200002cc:	db02      	blt.n	200002d4 <hal_flash_erase+0xa4>
200002ce:	9b04      	ldr	r3, [sp, #16]
200002d0:	2b00      	cmp	r3, #0
200002d2:	da02      	bge.n	200002da <hal_flash_erase+0xaa>
        return -1;
200002d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200002d8:	e00e      	b.n	200002f8 <hal_flash_erase+0xc8>
    for (i = start; i <= end; i++)
200002da:	9b05      	ldr	r3, [sp, #20]
200002dc:	9303      	str	r3, [sp, #12]
200002de:	e006      	b.n	200002ee <hal_flash_erase+0xbe>
        flash_erase_page(i);
200002e0:	9b03      	ldr	r3, [sp, #12]
200002e2:	4618      	mov	r0, r3
200002e4:	f7ff ff66 	bl	200001b4 <flash_erase_page>
    for (i = start; i <= end; i++)
200002e8:	9b03      	ldr	r3, [sp, #12]
200002ea:	3301      	adds	r3, #1
200002ec:	9303      	str	r3, [sp, #12]
200002ee:	9a03      	ldr	r2, [sp, #12]
200002f0:	9b04      	ldr	r3, [sp, #16]
200002f2:	429a      	cmp	r2, r3
200002f4:	ddf4      	ble.n	200002e0 <hal_flash_erase+0xb0>
    return 0;
200002f6:	2300      	movs	r3, #0
}
200002f8:	4618      	mov	r0, r3
200002fa:	b007      	add	sp, #28
200002fc:	f85d fb04 	ldr.w	pc, [sp], #4

20000300 <get_trailer_at>:
{
20000300:	b082      	sub	sp, #8
20000302:	4603      	mov	r3, r0
20000304:	9100      	str	r1, [sp, #0]
20000306:	f88d 3007 	strb.w	r3, [sp, #7]
    if (part == PART_BOOT)
2000030a:	f89d 3007 	ldrb.w	r3, [sp, #7]
2000030e:	2b00      	cmp	r3, #0
20000310:	d103      	bne.n	2000031a <get_trailer_at+0x1a>
        return (void *)(PART_BOOT_ENDFLAGS - (sizeof(uint32_t) + at));
20000312:	9a00      	ldr	r2, [sp, #0]
20000314:	4b07      	ldr	r3, [pc, #28]	; (20000334 <get_trailer_at+0x34>)
20000316:	1a9b      	subs	r3, r3, r2
20000318:	e008      	b.n	2000032c <get_trailer_at+0x2c>
    else if (part == PART_UPDATE) {
2000031a:	f89d 3007 	ldrb.w	r3, [sp, #7]
2000031e:	2b01      	cmp	r3, #1
20000320:	d103      	bne.n	2000032a <get_trailer_at+0x2a>
        return (void *)(PART_UPDATE_ENDFLAGS - (sizeof(uint32_t) + at));
20000322:	9a00      	ldr	r2, [sp, #0]
20000324:	4b04      	ldr	r3, [pc, #16]	; (20000338 <get_trailer_at+0x38>)
20000326:	1a9b      	subs	r3, r3, r2
20000328:	e000      	b.n	2000032c <get_trailer_at+0x2c>
        return NULL;
2000032a:	2300      	movs	r3, #0
}
2000032c:	4618      	mov	r0, r3
2000032e:	b002      	add	sp, #8
20000330:	4770      	bx	lr
20000332:	bf00      	nop
20000334:	0800fffc 	.word	0x0800fffc
20000338:	08017ffc 	.word	0x08017ffc

2000033c <set_trailer_at>:
{
2000033c:	b500      	push	{lr}
2000033e:	b083      	sub	sp, #12
20000340:	4603      	mov	r3, r0
20000342:	9100      	str	r1, [sp, #0]
20000344:	f88d 3007 	strb.w	r3, [sp, #7]
20000348:	4613      	mov	r3, r2
2000034a:	f88d 3006 	strb.w	r3, [sp, #6]
    if (part == PART_BOOT) {
2000034e:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000352:	2b00      	cmp	r3, #0
20000354:	d109      	bne.n	2000036a <set_trailer_at+0x2e>
        hal_trailer_write(PART_BOOT_ENDFLAGS - (sizeof(uint32_t) + at), val);
20000356:	9a00      	ldr	r2, [sp, #0]
20000358:	4b0c      	ldr	r3, [pc, #48]	; (2000038c <set_trailer_at+0x50>)
2000035a:	1a9b      	subs	r3, r3, r2
2000035c:	f10d 0106 	add.w	r1, sp, #6
20000360:	2201      	movs	r2, #1
20000362:	4618      	mov	r0, r3
20000364:	f7ff fe76 	bl	20000054 <hal_flash_write>
}
20000368:	e00c      	b.n	20000384 <set_trailer_at+0x48>
    else if (part == PART_UPDATE) {
2000036a:	f89d 3007 	ldrb.w	r3, [sp, #7]
2000036e:	2b01      	cmp	r3, #1
20000370:	d108      	bne.n	20000384 <set_trailer_at+0x48>
        hal_trailer_write(PART_UPDATE_ENDFLAGS - (sizeof(uint32_t) + at), val);
20000372:	9a00      	ldr	r2, [sp, #0]
20000374:	4b06      	ldr	r3, [pc, #24]	; (20000390 <set_trailer_at+0x54>)
20000376:	1a9b      	subs	r3, r3, r2
20000378:	f10d 0106 	add.w	r1, sp, #6
2000037c:	2201      	movs	r2, #1
2000037e:	4618      	mov	r0, r3
20000380:	f7ff fe68 	bl	20000054 <hal_flash_write>
}
20000384:	bf00      	nop
20000386:	b003      	add	sp, #12
20000388:	f85d fb04 	ldr.w	pc, [sp], #4
2000038c:	0800fffc 	.word	0x0800fffc
20000390:	08017ffc 	.word	0x08017ffc

20000394 <set_partition_magic>:
{
20000394:	b500      	push	{lr}
20000396:	b083      	sub	sp, #12
20000398:	4603      	mov	r3, r0
2000039a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (part == PART_BOOT) {
2000039e:	f89d 3007 	ldrb.w	r3, [sp, #7]
200003a2:	2b00      	cmp	r3, #0
200003a4:	d105      	bne.n	200003b2 <set_partition_magic+0x1e>
        hal_set_partition_magic(PART_BOOT_ENDFLAGS - sizeof(uint32_t));
200003a6:	2204      	movs	r2, #4
200003a8:	4908      	ldr	r1, [pc, #32]	; (200003cc <set_partition_magic+0x38>)
200003aa:	4809      	ldr	r0, [pc, #36]	; (200003d0 <set_partition_magic+0x3c>)
200003ac:	f7ff fe52 	bl	20000054 <hal_flash_write>
}
200003b0:	e008      	b.n	200003c4 <set_partition_magic+0x30>
    else if (part == PART_UPDATE) {
200003b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
200003b6:	2b01      	cmp	r3, #1
200003b8:	d104      	bne.n	200003c4 <set_partition_magic+0x30>
        hal_set_partition_magic(PART_UPDATE_ENDFLAGS - sizeof(uint32_t));
200003ba:	2204      	movs	r2, #4
200003bc:	4903      	ldr	r1, [pc, #12]	; (200003cc <set_partition_magic+0x38>)
200003be:	4805      	ldr	r0, [pc, #20]	; (200003d4 <set_partition_magic+0x40>)
200003c0:	f7ff fe48 	bl	20000054 <hal_flash_write>
}
200003c4:	bf00      	nop
200003c6:	b003      	add	sp, #12
200003c8:	f85d fb04 	ldr.w	pc, [sp], #4
200003cc:	080053c8 	.word	0x080053c8
200003d0:	0800fffc 	.word	0x0800fffc
200003d4:	08017ffc 	.word	0x08017ffc

200003d8 <get_partition_magic>:
{
200003d8:	b500      	push	{lr}
200003da:	b083      	sub	sp, #12
200003dc:	4603      	mov	r3, r0
200003de:	f88d 3007 	strb.w	r3, [sp, #7]
    return (uint32_t *)get_trailer_at(part, 0);
200003e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
200003e6:	2100      	movs	r1, #0
200003e8:	4618      	mov	r0, r3
200003ea:	f7ff ff89 	bl	20000300 <get_trailer_at>
200003ee:	4603      	mov	r3, r0
}
200003f0:	4618      	mov	r0, r3
200003f2:	b003      	add	sp, #12
200003f4:	f85d fb04 	ldr.w	pc, [sp], #4

200003f8 <get_partition_state>:
{
200003f8:	b500      	push	{lr}
200003fa:	b083      	sub	sp, #12
200003fc:	4603      	mov	r3, r0
200003fe:	f88d 3007 	strb.w	r3, [sp, #7]
    return (uint8_t *)get_trailer_at(part, 1);
20000402:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000406:	2101      	movs	r1, #1
20000408:	4618      	mov	r0, r3
2000040a:	f7ff ff79 	bl	20000300 <get_trailer_at>
2000040e:	4603      	mov	r3, r0
}
20000410:	4618      	mov	r0, r3
20000412:	b003      	add	sp, #12
20000414:	f85d fb04 	ldr.w	pc, [sp], #4

20000418 <set_partition_state>:
{
20000418:	b500      	push	{lr}
2000041a:	b083      	sub	sp, #12
2000041c:	4603      	mov	r3, r0
2000041e:	460a      	mov	r2, r1
20000420:	f88d 3007 	strb.w	r3, [sp, #7]
20000424:	4613      	mov	r3, r2
20000426:	f88d 3006 	strb.w	r3, [sp, #6]
    set_trailer_at(part, 1, val);
2000042a:	f89d 2006 	ldrb.w	r2, [sp, #6]
2000042e:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000432:	2101      	movs	r1, #1
20000434:	4618      	mov	r0, r3
20000436:	f7ff ff81 	bl	2000033c <set_trailer_at>
}
2000043a:	bf00      	nop
2000043c:	b003      	add	sp, #12
2000043e:	f85d fb04 	ldr.w	pc, [sp], #4

20000442 <set_update_sector_flags>:
{
20000442:	b500      	push	{lr}
20000444:	b083      	sub	sp, #12
20000446:	9001      	str	r0, [sp, #4]
20000448:	460b      	mov	r3, r1
2000044a:	f88d 3003 	strb.w	r3, [sp, #3]
    set_trailer_at(PART_UPDATE, 2 + pos, val);
2000044e:	9b01      	ldr	r3, [sp, #4]
20000450:	3302      	adds	r3, #2
20000452:	f89d 2003 	ldrb.w	r2, [sp, #3]
20000456:	4619      	mov	r1, r3
20000458:	2001      	movs	r0, #1
2000045a:	f7ff ff6f 	bl	2000033c <set_trailer_at>
}
2000045e:	bf00      	nop
20000460:	b003      	add	sp, #12
20000462:	f85d fb04 	ldr.w	pc, [sp], #4

20000466 <get_update_sector_flags>:
{
20000466:	b500      	push	{lr}
20000468:	b083      	sub	sp, #12
2000046a:	9001      	str	r0, [sp, #4]
    return (uint8_t *)get_trailer_at(PART_UPDATE, 2 + pos);
2000046c:	9b01      	ldr	r3, [sp, #4]
2000046e:	3302      	adds	r3, #2
20000470:	4619      	mov	r1, r3
20000472:	2001      	movs	r0, #1
20000474:	f7ff ff44 	bl	20000300 <get_trailer_at>
20000478:	4603      	mov	r3, r0
}
2000047a:	4618      	mov	r0, r3
2000047c:	b003      	add	sp, #12
2000047e:	f85d fb04 	ldr.w	pc, [sp], #4

20000482 <wolfBoot_set_partition_state>:
{
20000482:	b500      	push	{lr}
20000484:	b085      	sub	sp, #20
20000486:	4603      	mov	r3, r0
20000488:	460a      	mov	r2, r1
2000048a:	f88d 3007 	strb.w	r3, [sp, #7]
2000048e:	4613      	mov	r3, r2
20000490:	f88d 3006 	strb.w	r3, [sp, #6]
    magic = get_partition_magic(part);
20000494:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000498:	4618      	mov	r0, r3
2000049a:	f7ff ff9d 	bl	200003d8 <get_partition_magic>
2000049e:	9003      	str	r0, [sp, #12]
    if (*magic != WOLFBOOT_MAGIC_TRAIL)
200004a0:	9b03      	ldr	r3, [sp, #12]
200004a2:	681b      	ldr	r3, [r3, #0]
200004a4:	4a10      	ldr	r2, [pc, #64]	; (200004e8 <wolfBoot_set_partition_state+0x66>)
200004a6:	4293      	cmp	r3, r2
200004a8:	d004      	beq.n	200004b4 <wolfBoot_set_partition_state+0x32>
        set_partition_magic(part);
200004aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
200004ae:	4618      	mov	r0, r3
200004b0:	f7ff ff70 	bl	20000394 <set_partition_magic>
    state = get_partition_state(part);
200004b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
200004b8:	4618      	mov	r0, r3
200004ba:	f7ff ff9d 	bl	200003f8 <get_partition_state>
200004be:	9002      	str	r0, [sp, #8]
    if (*state != newst)
200004c0:	9b02      	ldr	r3, [sp, #8]
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
200004c8:	429a      	cmp	r2, r3
200004ca:	d007      	beq.n	200004dc <wolfBoot_set_partition_state+0x5a>
        set_partition_state(part, newst);
200004cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
200004d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
200004d4:	4611      	mov	r1, r2
200004d6:	4618      	mov	r0, r3
200004d8:	f7ff ff9e 	bl	20000418 <set_partition_state>
    return 0;
200004dc:	2300      	movs	r3, #0
}
200004de:	4618      	mov	r0, r3
200004e0:	b005      	add	sp, #20
200004e2:	f85d fb04 	ldr.w	pc, [sp], #4
200004e6:	bf00      	nop
200004e8:	544f4f42 	.word	0x544f4f42

200004ec <wolfBoot_set_update_sector_flag>:
{
200004ec:	b500      	push	{lr}
200004ee:	b087      	sub	sp, #28
200004f0:	4603      	mov	r3, r0
200004f2:	460a      	mov	r2, r1
200004f4:	f8ad 3006 	strh.w	r3, [sp, #6]
200004f8:	4613      	mov	r3, r2
200004fa:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8_t pos = sector >> 1;
200004fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
20000502:	085b      	lsrs	r3, r3, #1
20000504:	b29b      	uxth	r3, r3
20000506:	f88d 3016 	strb.w	r3, [sp, #22]
    magic = get_partition_magic(PART_UPDATE);
2000050a:	2001      	movs	r0, #1
2000050c:	f7ff ff64 	bl	200003d8 <get_partition_magic>
20000510:	9004      	str	r0, [sp, #16]
    if (*magic != wolfboot_magic_trail)
20000512:	9b04      	ldr	r3, [sp, #16]
20000514:	681b      	ldr	r3, [r3, #0]
20000516:	4a22      	ldr	r2, [pc, #136]	; (200005a0 <wolfBoot_set_update_sector_flag+0xb4>)
20000518:	4293      	cmp	r3, r2
2000051a:	d002      	beq.n	20000522 <wolfBoot_set_update_sector_flag+0x36>
        set_partition_magic(PART_UPDATE);
2000051c:	2001      	movs	r0, #1
2000051e:	f7ff ff39 	bl	20000394 <set_partition_magic>
    flags = get_update_sector_flags(pos);
20000522:	f89d 3016 	ldrb.w	r3, [sp, #22]
20000526:	4618      	mov	r0, r3
20000528:	f7ff ff9d 	bl	20000466 <get_update_sector_flags>
2000052c:	9003      	str	r0, [sp, #12]
    if (sector == (pos << 1))
2000052e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
20000532:	f89d 3016 	ldrb.w	r3, [sp, #22]
20000536:	005b      	lsls	r3, r3, #1
20000538:	429a      	cmp	r2, r3
2000053a:	d10f      	bne.n	2000055c <wolfBoot_set_update_sector_flag+0x70>
        fl_value = (*flags & 0xF0) | (newflag & 0x0F);
2000053c:	9b03      	ldr	r3, [sp, #12]
2000053e:	781b      	ldrb	r3, [r3, #0]
20000540:	b25b      	sxtb	r3, r3
20000542:	f023 030f 	bic.w	r3, r3, #15
20000546:	b25a      	sxtb	r2, r3
20000548:	f99d 3005 	ldrsb.w	r3, [sp, #5]
2000054c:	f003 030f 	and.w	r3, r3, #15
20000550:	b25b      	sxtb	r3, r3
20000552:	4313      	orrs	r3, r2
20000554:	b25b      	sxtb	r3, r3
20000556:	f88d 3017 	strb.w	r3, [sp, #23]
2000055a:	e00d      	b.n	20000578 <wolfBoot_set_update_sector_flag+0x8c>
        fl_value = ((newflag & 0x0F) << 4) | (*flags & 0x0F);
2000055c:	f89d 3005 	ldrb.w	r3, [sp, #5]
20000560:	011b      	lsls	r3, r3, #4
20000562:	b25a      	sxtb	r2, r3
20000564:	9b03      	ldr	r3, [sp, #12]
20000566:	781b      	ldrb	r3, [r3, #0]
20000568:	b25b      	sxtb	r3, r3
2000056a:	f003 030f 	and.w	r3, r3, #15
2000056e:	b25b      	sxtb	r3, r3
20000570:	4313      	orrs	r3, r2
20000572:	b25b      	sxtb	r3, r3
20000574:	f88d 3017 	strb.w	r3, [sp, #23]
    if (fl_value != *flags)
20000578:	9b03      	ldr	r3, [sp, #12]
2000057a:	781b      	ldrb	r3, [r3, #0]
2000057c:	f89d 2017 	ldrb.w	r2, [sp, #23]
20000580:	429a      	cmp	r2, r3
20000582:	d007      	beq.n	20000594 <wolfBoot_set_update_sector_flag+0xa8>
        set_update_sector_flags(pos, fl_value);
20000584:	f89d 3016 	ldrb.w	r3, [sp, #22]
20000588:	f89d 2017 	ldrb.w	r2, [sp, #23]
2000058c:	4611      	mov	r1, r2
2000058e:	4618      	mov	r0, r3
20000590:	f7ff ff57 	bl	20000442 <set_update_sector_flags>
    return 0;
20000594:	2300      	movs	r3, #0
}
20000596:	4618      	mov	r0, r3
20000598:	b007      	add	sp, #28
2000059a:	f85d fb04 	ldr.w	pc, [sp], #4
2000059e:	bf00      	nop
200005a0:	544f4f42 	.word	0x544f4f42

200005a4 <wolfBoot_get_partition_state>:
{
200005a4:	b500      	push	{lr}
200005a6:	b085      	sub	sp, #20
200005a8:	4603      	mov	r3, r0
200005aa:	9100      	str	r1, [sp, #0]
200005ac:	f88d 3007 	strb.w	r3, [sp, #7]
    magic = get_partition_magic(part);
200005b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
200005b4:	4618      	mov	r0, r3
200005b6:	f7ff ff0f 	bl	200003d8 <get_partition_magic>
200005ba:	9003      	str	r0, [sp, #12]
    if (*magic != WOLFBOOT_MAGIC_TRAIL)
200005bc:	9b03      	ldr	r3, [sp, #12]
200005be:	681b      	ldr	r3, [r3, #0]
200005c0:	4a0a      	ldr	r2, [pc, #40]	; (200005ec <wolfBoot_get_partition_state+0x48>)
200005c2:	4293      	cmp	r3, r2
200005c4:	d002      	beq.n	200005cc <wolfBoot_get_partition_state+0x28>
        return -1;
200005c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200005ca:	e00a      	b.n	200005e2 <wolfBoot_get_partition_state+0x3e>
    state = get_partition_state(part);
200005cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
200005d0:	4618      	mov	r0, r3
200005d2:	f7ff ff11 	bl	200003f8 <get_partition_state>
200005d6:	9002      	str	r0, [sp, #8]
    *st = *state;
200005d8:	9b02      	ldr	r3, [sp, #8]
200005da:	781a      	ldrb	r2, [r3, #0]
200005dc:	9b00      	ldr	r3, [sp, #0]
200005de:	701a      	strb	r2, [r3, #0]
    return 0;
200005e0:	2300      	movs	r3, #0
}
200005e2:	4618      	mov	r0, r3
200005e4:	b005      	add	sp, #20
200005e6:	f85d fb04 	ldr.w	pc, [sp], #4
200005ea:	bf00      	nop
200005ec:	544f4f42 	.word	0x544f4f42

200005f0 <wolfBoot_erase_partition>:
{
200005f0:	b500      	push	{lr}
200005f2:	b083      	sub	sp, #12
200005f4:	4603      	mov	r3, r0
200005f6:	f88d 3007 	strb.w	r3, [sp, #7]
    if (part == PART_BOOT) {
200005fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
200005fe:	2b00      	cmp	r3, #0
20000600:	d104      	bne.n	2000060c <wolfBoot_erase_partition+0x1c>
            hal_flash_erase(WOLFBOOT_PARTITION_BOOT_ADDRESS, WOLFBOOT_PARTITION_SIZE);
20000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
20000606:	480c      	ldr	r0, [pc, #48]	; (20000638 <wolfBoot_erase_partition+0x48>)
20000608:	f7ff fe12 	bl	20000230 <hal_flash_erase>
    if (part == PART_UPDATE) {
2000060c:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000610:	2b01      	cmp	r3, #1
20000612:	d104      	bne.n	2000061e <wolfBoot_erase_partition+0x2e>
            hal_flash_erase(WOLFBOOT_PARTITION_UPDATE_ADDRESS, WOLFBOOT_PARTITION_SIZE);
20000614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
20000618:	4808      	ldr	r0, [pc, #32]	; (2000063c <wolfBoot_erase_partition+0x4c>)
2000061a:	f7ff fe09 	bl	20000230 <hal_flash_erase>
    if (part == PART_SWAP) {
2000061e:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000622:	2b02      	cmp	r3, #2
20000624:	d104      	bne.n	20000630 <wolfBoot_erase_partition+0x40>
            hal_flash_erase(WOLFBOOT_PARTITION_SWAP_ADDRESS, WOLFBOOT_SECTOR_SIZE);
20000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
2000062a:	4805      	ldr	r0, [pc, #20]	; (20000640 <wolfBoot_erase_partition+0x50>)
2000062c:	f7ff fe00 	bl	20000230 <hal_flash_erase>
}
20000630:	bf00      	nop
20000632:	b003      	add	sp, #12
20000634:	f85d fb04 	ldr.w	pc, [sp], #4
20000638:	08008000 	.word	0x08008000
2000063c:	08010000 	.word	0x08010000
20000640:	08018000 	.word	0x08018000

20000644 <wolfBoot_update_trigger>:
{
20000644:	b500      	push	{lr}
20000646:	b083      	sub	sp, #12
    uint8_t st = IMG_STATE_UPDATING;
20000648:	2370      	movs	r3, #112	; 0x70
2000064a:	f88d 3007 	strb.w	r3, [sp, #7]
        hal_flash_unlock();
2000064e:	f7ff fd91 	bl	20000174 <hal_flash_unlock>
        wolfBoot_set_partition_state(PART_UPDATE, st);
20000652:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000656:	4619      	mov	r1, r3
20000658:	2001      	movs	r0, #1
2000065a:	f7ff ff12 	bl	20000482 <wolfBoot_set_partition_state>
        hal_flash_lock();
2000065e:	f7ff fd9f 	bl	200001a0 <hal_flash_lock>
}
20000662:	bf00      	nop
20000664:	b003      	add	sp, #12
20000666:	f85d fb04 	ldr.w	pc, [sp], #4

2000066a <wolfBoot_success>:
{
2000066a:	b500      	push	{lr}
2000066c:	b083      	sub	sp, #12
    uint8_t st = IMG_STATE_SUCCESS;
2000066e:	2300      	movs	r3, #0
20000670:	f88d 3007 	strb.w	r3, [sp, #7]
        hal_flash_unlock();
20000674:	f7ff fd7e 	bl	20000174 <hal_flash_unlock>
        wolfBoot_set_partition_state(PART_BOOT, st);
20000678:	f89d 3007 	ldrb.w	r3, [sp, #7]
2000067c:	4619      	mov	r1, r3
2000067e:	2000      	movs	r0, #0
20000680:	f7ff feff 	bl	20000482 <wolfBoot_set_partition_state>
        hal_flash_lock();
20000684:	f7ff fd8c 	bl	200001a0 <hal_flash_lock>
}
20000688:	bf00      	nop
2000068a:	b003      	add	sp, #12
2000068c:	f85d fb04 	ldr.w	pc, [sp], #4

20000690 <mpu_off>:
    mpu_is_on = 0;
20000690:	4b03      	ldr	r3, [pc, #12]	; (200006a0 <mpu_off+0x10>)
20000692:	2200      	movs	r2, #0
20000694:	601a      	str	r2, [r3, #0]
    MPU_CTRL = 0;
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <mpu_off+0x14>)
20000698:	2200      	movs	r2, #0
2000069a:	601a      	str	r2, [r3, #0]
}
2000069c:	bf00      	nop
2000069e:	4770      	bx	lr
200006a0:	20000d78 	.word	0x20000d78
200006a4:	e000ed94 	.word	0xe000ed94

200006a8 <do_boot>:
{
200006a8:	b500      	push	{lr}
200006aa:	b083      	sub	sp, #12
200006ac:	9001      	str	r0, [sp, #4]
    mpu_off();
200006ae:	f7ff ffef 	bl	20000690 <mpu_off>
    asm volatile("cpsid i");
200006b2:	b672      	cpsid	i
    VTOR = ((uint32_t)app_offset);
200006b4:	4a0c      	ldr	r2, [pc, #48]	; (200006e8 <do_boot+0x40>)
200006b6:	9b01      	ldr	r3, [sp, #4]
200006b8:	6013      	str	r3, [r2, #0]
    app_end_stack = (*((uint32_t *)(app_offset)));
200006ba:	9b01      	ldr	r3, [sp, #4]
200006bc:	681b      	ldr	r3, [r3, #0]
200006be:	4a0b      	ldr	r2, [pc, #44]	; (200006ec <do_boot+0x44>)
200006c0:	6013      	str	r3, [r2, #0]
    app_entry = (void *)(*((uint32_t *)(app_offset + 1)));
200006c2:	9b01      	ldr	r3, [sp, #4]
200006c4:	3304      	adds	r3, #4
200006c6:	681b      	ldr	r3, [r3, #0]
200006c8:	461a      	mov	r2, r3
200006ca:	4b09      	ldr	r3, [pc, #36]	; (200006f0 <do_boot+0x48>)
200006cc:	601a      	str	r2, [r3, #0]
    asm volatile("msr msp, %0" ::"r"(app_end_stack));
200006ce:	4b07      	ldr	r3, [pc, #28]	; (200006ec <do_boot+0x44>)
200006d0:	681b      	ldr	r3, [r3, #0]
200006d2:	f383 8808 	msr	MSP, r3
    asm volatile("cpsie i");
200006d6:	b662      	cpsie	i
    asm volatile("mov pc, %0" ::"r"(app_entry));
200006d8:	4b05      	ldr	r3, [pc, #20]	; (200006f0 <do_boot+0x48>)
200006da:	681b      	ldr	r3, [r3, #0]
200006dc:	469f      	mov	pc, r3
}
200006de:	bf00      	nop
200006e0:	b003      	add	sp, #12
200006e2:	f85d fb04 	ldr.w	pc, [sp], #4
200006e6:	bf00      	nop
200006e8:	e000ed08 	.word	0xe000ed08
200006ec:	20000d80 	.word	0x20000d80
200006f0:	20000d7c 	.word	0x20000d7c

200006f4 <arch_reboot>:
void RAMFUNCTION arch_reboot(void)
{
#ifdef CORTEX_R5
    SYSECR = ECR_RESET;
#else
    AIRCR = AIRCR_SYSRESETREQ | AIRCR_VKEY;
200006f4:	4b01      	ldr	r3, [pc, #4]	; (200006fc <arch_reboot+0x8>)
200006f6:	4a02      	ldr	r2, [pc, #8]	; (20000700 <arch_reboot+0xc>)
200006f8:	601a      	str	r2, [r3, #0]
#endif
    while(1)
200006fa:	e7fe      	b.n	200006fa <arch_reboot+0x6>
200006fc:	e000ed0c 	.word	0xe000ed0c
20000700:	05fa0004 	.word	0x05fa0004

20000704 <wolfBoot_erase_bootloader>:
{
20000704:	b500      	push	{lr}
20000706:	b083      	sub	sp, #12
    uint32_t *start = (uint32_t *)&_start_text;
20000708:	4b08      	ldr	r3, [pc, #32]	; (2000072c <wolfBoot_erase_bootloader+0x28>)
2000070a:	9301      	str	r3, [sp, #4]
    uint32_t len = WOLFBOOT_PARTITION_BOOT_ADDRESS - (uint32_t)start;
2000070c:	9b01      	ldr	r3, [sp, #4]
2000070e:	f1c3 6300 	rsb	r3, r3, #134217728	; 0x8000000
20000712:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
20000716:	9300      	str	r3, [sp, #0]
    hal_flash_erase((uint32_t)start, len);
20000718:	9b01      	ldr	r3, [sp, #4]
2000071a:	9a00      	ldr	r2, [sp, #0]
2000071c:	4611      	mov	r1, r2
2000071e:	4618      	mov	r0, r3
20000720:	f7ff fd86 	bl	20000230 <hal_flash_erase>
}
20000724:	bf00      	nop
20000726:	b003      	add	sp, #12
20000728:	f85d fb04 	ldr.w	pc, [sp], #4
2000072c:	08000000 	.word	0x08000000

20000730 <wolfBoot_self_update>:
{
20000730:	b500      	push	{lr}
20000732:	b087      	sub	sp, #28
20000734:	9001      	str	r0, [sp, #4]
    uint32_t pos = 0;
20000736:	2300      	movs	r3, #0
20000738:	9305      	str	r3, [sp, #20]
    uint32_t src_offset = IMAGE_HEADER_SIZE;
2000073a:	f44f 7380 	mov.w	r3, #256	; 0x100
2000073e:	9304      	str	r3, [sp, #16]
    hal_flash_unlock();
20000740:	f7ff fd18 	bl	20000174 <hal_flash_unlock>
    wolfBoot_erase_bootloader();
20000744:	f7ff ffde 	bl	20000704 <wolfBoot_erase_bootloader>
    while (pos < src->fw_size) {
20000748:	e01c      	b.n	20000784 <wolfBoot_self_update+0x54>
        if (src_offset + pos < (src->fw_size + IMAGE_HEADER_SIZE + FLASHBUFFER_SIZE))  {
2000074a:	9a04      	ldr	r2, [sp, #16]
2000074c:	9b05      	ldr	r3, [sp, #20]
2000074e:	441a      	add	r2, r3
20000750:	9b01      	ldr	r3, [sp, #4]
20000752:	691b      	ldr	r3, [r3, #16]
20000754:	f503 7300 	add.w	r3, r3, #512	; 0x200
20000758:	429a      	cmp	r2, r3
2000075a:	d20f      	bcs.n	2000077c <wolfBoot_self_update+0x4c>
            uint8_t *orig = (uint8_t*)(src->hdr + src_offset + pos);
2000075c:	9b01      	ldr	r3, [sp, #4]
2000075e:	681a      	ldr	r2, [r3, #0]
20000760:	9904      	ldr	r1, [sp, #16]
20000762:	9b05      	ldr	r3, [sp, #20]
20000764:	440b      	add	r3, r1
20000766:	4413      	add	r3, r2
20000768:	9303      	str	r3, [sp, #12]
            hal_flash_write(pos + (uint32_t)&_start_text, orig, FLASHBUFFER_SIZE);
2000076a:	4a0d      	ldr	r2, [pc, #52]	; (200007a0 <wolfBoot_self_update+0x70>)
2000076c:	9b05      	ldr	r3, [sp, #20]
2000076e:	4413      	add	r3, r2
20000770:	f44f 7280 	mov.w	r2, #256	; 0x100
20000774:	9903      	ldr	r1, [sp, #12]
20000776:	4618      	mov	r0, r3
20000778:	f7ff fc6c 	bl	20000054 <hal_flash_write>
        pos += FLASHBUFFER_SIZE;
2000077c:	9b05      	ldr	r3, [sp, #20]
2000077e:	f503 7380 	add.w	r3, r3, #256	; 0x100
20000782:	9305      	str	r3, [sp, #20]
    while (pos < src->fw_size) {
20000784:	9b01      	ldr	r3, [sp, #4]
20000786:	691b      	ldr	r3, [r3, #16]
20000788:	9a05      	ldr	r2, [sp, #20]
2000078a:	429a      	cmp	r2, r3
2000078c:	d3dd      	bcc.n	2000074a <wolfBoot_self_update+0x1a>
    hal_flash_lock();
2000078e:	f7ff fd07 	bl	200001a0 <hal_flash_lock>
    arch_reboot();
20000792:	f7ff ffaf 	bl	200006f4 <arch_reboot>
}
20000796:	bf00      	nop
20000798:	b007      	add	sp, #28
2000079a:	f85d fb04 	ldr.w	pc, [sp], #4
2000079e:	bf00      	nop
200007a0:	08000000 	.word	0x08000000

200007a4 <wolfBoot_copy_sector>:
#endif /* RAM_CODE for self_update */

static int RAMFUNCTION wolfBoot_copy_sector(struct wolfBoot_image *src, struct wolfBoot_image *dst, uint32_t sector)
{
200007a4:	b500      	push	{lr}
200007a6:	b089      	sub	sp, #36	; 0x24
200007a8:	9003      	str	r0, [sp, #12]
200007aa:	9102      	str	r1, [sp, #8]
200007ac:	9201      	str	r2, [sp, #4]
    uint32_t pos = 0;
200007ae:	2300      	movs	r3, #0
200007b0:	9307      	str	r3, [sp, #28]
    uint32_t src_sector_offset = (sector * WOLFBOOT_SECTOR_SIZE);
200007b2:	9b01      	ldr	r3, [sp, #4]
200007b4:	02db      	lsls	r3, r3, #11
200007b6:	9306      	str	r3, [sp, #24]
    uint32_t dst_sector_offset = (sector * WOLFBOOT_SECTOR_SIZE);
200007b8:	9b01      	ldr	r3, [sp, #4]
200007ba:	02db      	lsls	r3, r3, #11
200007bc:	9305      	str	r3, [sp, #20]
    uint8_t key[ENCRYPT_KEY_SIZE];
    uint8_t nonce[ENCRYPT_NONCE_SIZE];
    uint32_t iv_counter;
#endif

    if (src == dst)
200007be:	9a03      	ldr	r2, [sp, #12]
200007c0:	9b02      	ldr	r3, [sp, #8]
200007c2:	429a      	cmp	r2, r3
200007c4:	d101      	bne.n	200007ca <wolfBoot_copy_sector+0x26>
        return 0;
200007c6:	2300      	movs	r3, #0
200007c8:	e03c      	b.n	20000844 <wolfBoot_copy_sector+0xa0>

    if (src->part == PART_SWAP)
200007ca:	9b03      	ldr	r3, [sp, #12]
200007cc:	695b      	ldr	r3, [r3, #20]
200007ce:	2b02      	cmp	r3, #2
200007d0:	d101      	bne.n	200007d6 <wolfBoot_copy_sector+0x32>
        src_sector_offset = 0;
200007d2:	2300      	movs	r3, #0
200007d4:	9306      	str	r3, [sp, #24]
    if (dst->part == PART_SWAP)
200007d6:	9b02      	ldr	r3, [sp, #8]
200007d8:	695b      	ldr	r3, [r3, #20]
200007da:	2b02      	cmp	r3, #2
200007dc:	d101      	bne.n	200007e2 <wolfBoot_copy_sector+0x3e>
        dst_sector_offset = 0;
200007de:	2300      	movs	r3, #0
200007e0:	9305      	str	r3, [sp, #20]
            pos += FLASHBUFFER_SIZE;
        }
        return pos;
    }
#endif
    wb_flash_erase(dst, dst_sector_offset, WOLFBOOT_SECTOR_SIZE);
200007e2:	9b02      	ldr	r3, [sp, #8]
200007e4:	681b      	ldr	r3, [r3, #0]
200007e6:	461a      	mov	r2, r3
200007e8:	9b05      	ldr	r3, [sp, #20]
200007ea:	4413      	add	r3, r2
200007ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
200007f0:	4618      	mov	r0, r3
200007f2:	f7ff fd1d 	bl	20000230 <hal_flash_erase>
    while (pos < WOLFBOOT_SECTOR_SIZE) {
200007f6:	e020      	b.n	2000083a <wolfBoot_copy_sector+0x96>
        if (src_sector_offset + pos < (src->fw_size + IMAGE_HEADER_SIZE + FLASHBUFFER_SIZE))  {
200007f8:	9a06      	ldr	r2, [sp, #24]
200007fa:	9b07      	ldr	r3, [sp, #28]
200007fc:	441a      	add	r2, r3
200007fe:	9b03      	ldr	r3, [sp, #12]
20000800:	691b      	ldr	r3, [r3, #16]
20000802:	f503 7300 	add.w	r3, r3, #512	; 0x200
20000806:	429a      	cmp	r2, r3
20000808:	d213      	bcs.n	20000832 <wolfBoot_copy_sector+0x8e>
            uint8_t *orig = (uint8_t*)(src->hdr + src_sector_offset + pos);
2000080a:	9b03      	ldr	r3, [sp, #12]
2000080c:	681a      	ldr	r2, [r3, #0]
2000080e:	9906      	ldr	r1, [sp, #24]
20000810:	9b07      	ldr	r3, [sp, #28]
20000812:	440b      	add	r3, r1
20000814:	4413      	add	r3, r2
20000816:	9304      	str	r3, [sp, #16]
            wb_flash_write(dst, dst_sector_offset + pos, orig, FLASHBUFFER_SIZE);
20000818:	9b02      	ldr	r3, [sp, #8]
2000081a:	681b      	ldr	r3, [r3, #0]
2000081c:	461a      	mov	r2, r3
2000081e:	9b05      	ldr	r3, [sp, #20]
20000820:	441a      	add	r2, r3
20000822:	9b07      	ldr	r3, [sp, #28]
20000824:	4413      	add	r3, r2
20000826:	f44f 7280 	mov.w	r2, #256	; 0x100
2000082a:	9904      	ldr	r1, [sp, #16]
2000082c:	4618      	mov	r0, r3
2000082e:	f7ff fc11 	bl	20000054 <hal_flash_write>
        }
        pos += FLASHBUFFER_SIZE;
20000832:	9b07      	ldr	r3, [sp, #28]
20000834:	f503 7380 	add.w	r3, r3, #256	; 0x100
20000838:	9307      	str	r3, [sp, #28]
    while (pos < WOLFBOOT_SECTOR_SIZE) {
2000083a:	9b07      	ldr	r3, [sp, #28]
2000083c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20000840:	d3da      	bcc.n	200007f8 <wolfBoot_copy_sector+0x54>
    }
    return pos;
20000842:	9b07      	ldr	r3, [sp, #28]
}
20000844:	4618      	mov	r0, r3
20000846:	b009      	add	sp, #36	; 0x24
20000848:	f85d fb04 	ldr.w	pc, [sp], #4

2000084c <wolfBoot_update>:
#ifdef WOLFBOOT_ARMORED
#    pragma GCC push_options
#    pragma GCC optimize("O0")
#endif
static int RAMFUNCTION wolfBoot_update(int fallback_allowed)
{
2000084c:	b590      	push	{r4, r7, lr}
2000084e:	b0b1      	sub	sp, #196	; 0xc4
20000850:	af00      	add	r7, sp, #0
20000852:	6078      	str	r0, [r7, #4]
    uint32_t total_size = 0;
20000854:	2300      	movs	r3, #0
20000856:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    const uint32_t sector_size = WOLFBOOT_SECTOR_SIZE;
2000085a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000085e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    uint32_t sector = 0;
20000862:	2300      	movs	r3, #0
20000864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    uint8_t key[ENCRYPT_KEY_SIZE];
    uint8_t nonce[ENCRYPT_NONCE_SIZE];
#endif

    /* No Safety check on open: we might be in the middle of a broken update */
    wolfBoot_open_image(&update, PART_UPDATE);
20000868:	f107 033c 	add.w	r3, r7, #60	; 0x3c
2000086c:	2101      	movs	r1, #1
2000086e:	4618      	mov	r0, r3
20000870:	f000 fa6a 	bl	20000d48 <__wolfBoot_open_image_veneer>
    wolfBoot_open_image(&boot, PART_BOOT);
20000874:	f107 0370 	add.w	r3, r7, #112	; 0x70
20000878:	2100      	movs	r1, #0
2000087a:	4618      	mov	r0, r3
2000087c:	f000 fa64 	bl	20000d48 <__wolfBoot_open_image_veneer>
    wolfBoot_open_image(&swap, PART_SWAP);
20000880:	f107 0308 	add.w	r3, r7, #8
20000884:	2102      	movs	r1, #2
20000886:	4618      	mov	r0, r3
20000888:	f000 fa5e 	bl	20000d48 <__wolfBoot_open_image_veneer>


    /* Use biggest size for the swap */
    total_size = boot.fw_size + IMAGE_HEADER_SIZE;
2000088c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
20000890:	f503 7380 	add.w	r3, r3, #256	; 0x100
20000894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if ((update.fw_size + IMAGE_HEADER_SIZE) > total_size)
20000898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
2000089a:	f503 7380 	add.w	r3, r3, #256	; 0x100
2000089e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
200008a2:	429a      	cmp	r2, r3
200008a4:	d204      	bcs.n	200008b0 <wolfBoot_update+0x64>
            total_size = update.fw_size + IMAGE_HEADER_SIZE;
200008a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
200008a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
200008ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    if (total_size <= IMAGE_HEADER_SIZE)
200008b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
200008b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
200008b8:	d802      	bhi.n	200008c0 <wolfBoot_update+0x74>
        return -1;
200008ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200008be:	e1a3      	b.n	20000c08 <end_check+0x1f0>
    /* In case this is a new update, do the required
     * checks on the firmware update
     * before starting the swap
     */

    update_type = wolfBoot_get_image_type(PART_UPDATE);
200008c0:	2001      	movs	r0, #1
200008c2:	f000 fa25 	bl	20000d10 <__wolfBoot_get_image_type_veneer>
200008c6:	4603      	mov	r3, r0
200008c8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2


    /* Check the first sector to detect interrupted update */
    if ((wolfBoot_get_update_sector_flag(0, &flag) < 0) || (flag == SECT_FLAG_NEW))
200008cc:	f107 03a7 	add.w	r3, r7, #167	; 0xa7
200008d0:	4619      	mov	r1, r3
200008d2:	2000      	movs	r0, #0
200008d4:	f000 fa2c 	bl	20000d30 <__wolfBoot_get_update_sector_flag_veneer>
200008d8:	4603      	mov	r3, r0
200008da:	2b00      	cmp	r3, #0
200008dc:	db04      	blt.n	200008e8 <wolfBoot_update+0x9c>
200008de:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
200008e2:	2b0f      	cmp	r3, #15
200008e4:	f040 809d 	bne.w	20000a22 <end_check+0xa>
    {
        if (((update_type & 0x000F) != HDR_IMG_TYPE_APP) || ((update_type & 0xFF00) != HDR_IMG_TYPE_AUTH))
200008e8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
200008ec:	f003 030f 	and.w	r3, r3, #15
200008f0:	2b01      	cmp	r3, #1
200008f2:	d106      	bne.n	20000902 <wolfBoot_update+0xb6>
200008f4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
200008f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
200008fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
20000900:	d002      	beq.n	20000908 <wolfBoot_update+0xbc>
            return -1;
20000902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20000906:	e17f      	b.n	20000c08 <end_check+0x1f0>
        if (!update.hdr_ok || (wolfBoot_verify_integrity(&update) < 0)) {
20000908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
2000090a:	2b00      	cmp	r3, #0
2000090c:	d007      	beq.n	2000091e <wolfBoot_update+0xd2>
2000090e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
20000912:	4618      	mov	r0, r3
20000914:	f000 fa04 	bl	20000d20 <__wolfBoot_verify_integrity_veneer>
20000918:	4603      	mov	r3, r0
2000091a:	2b00      	cmp	r3, #0
2000091c:	da02      	bge.n	20000924 <wolfBoot_update+0xd8>
                // || (wolfBoot_verify_authenticity(&update) < 0)) {
            return -1;
2000091e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20000922:	e171      	b.n	20000c08 <end_check+0x1f0>
        }
#ifdef WOLFBOOT_ARMORED
        // PART_SANITY_CHECK(&update);
#endif
        trigger_high();
20000924:	f000 fa14 	bl	20000d50 <__trigger_high_veneer>
                        return -1;
                    }
    #endif
#else
    #ifndef ALLOW_DOWNGRADE
            if (((fallback_allowed==1) && (~(uint32_t)fallback_allowed == 0xFFFFFFFE)) ||
20000928:	687b      	ldr	r3, [r7, #4]
2000092a:	2b01      	cmp	r3, #1
2000092c:	d102      	bne.n	20000934 <wolfBoot_update+0xe8>
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	2b01      	cmp	r3, #1
20000932:	d009      	beq.n	20000948 <wolfBoot_update+0xfc>
                    (wolfBoot_current_firmware_version() < wolfBoot_update_firmware_version()) ) {
20000934:	2000      	movs	r0, #0
20000936:	f000 f9ff 	bl	20000d38 <__wolfBoot_get_image_version_veneer>
2000093a:	4604      	mov	r4, r0
2000093c:	2001      	movs	r0, #1
2000093e:	f000 f9fb 	bl	20000d38 <__wolfBoot_get_image_version_veneer>
20000942:	4603      	mov	r3, r0
            if (((fallback_allowed==1) && (~(uint32_t)fallback_allowed == 0xFFFFFFFE)) ||
20000944:	429c      	cmp	r4, r3
20000946:	d269      	bcs.n	20000a1c <end_check+0x4>
                VERIFY_VERSION_ALLOWED(fallback_allowed);
20000948:	b4f0      	push	{r4, r5, r6, r7}
2000094a:	f04f 0000 	mov.w	r0, #0
2000094e:	f04f 0401 	mov.w	r4, #1
20000952:	f04f 0500 	mov.w	r5, #0
20000956:	f04f 0602 	mov.w	r6, #2
2000095a:	f04f 0700 	mov.w	r7, #0
2000095e:	f04f 0000 	mov.w	r0, #0
20000962:	f04f 0401 	mov.w	r4, #1
20000966:	f04f 0500 	mov.w	r5, #0
2000096a:	f04f 0602 	mov.w	r6, #2
2000096e:	f04f 0700 	mov.w	r7, #0
20000972:	687b      	ldr	r3, [r7, #4]
20000974:	4618      	mov	r0, r3
20000976:	2801      	cmp	r0, #1
20000978:	d104      	bne.n	20000984 <do_check>
2000097a:	2801      	cmp	r0, #1
2000097c:	d102      	bne.n	20000984 <do_check>
2000097e:	2801      	cmp	r0, #1
20000980:	d100      	bne.n	20000984 <do_check>
20000982:	e049      	b.n	20000a18 <end_check>

20000984 <do_check>:
20000984:	f04f 0001 	mov.w	r0, #1
20000988:	f04f 0001 	mov.w	r0, #1
2000098c:	f04f 0001 	mov.w	r0, #1
20000990:	f000 f9d2 	bl	20000d38 <__wolfBoot_get_image_version_veneer>
20000994:	4605      	mov	r5, r0
20000996:	4605      	mov	r5, r0
20000998:	4605      	mov	r5, r0
2000099a:	f04f 0001 	mov.w	r0, #1
2000099e:	f04f 0001 	mov.w	r0, #1
200009a2:	f04f 0001 	mov.w	r0, #1
200009a6:	f000 f9c7 	bl	20000d38 <__wolfBoot_get_image_version_veneer>
200009aa:	4607      	mov	r7, r0
200009ac:	4607      	mov	r7, r0
200009ae:	4607      	mov	r7, r0
200009b0:	42bd      	cmp	r5, r7
200009b2:	d1fe      	bne.n	200009b2 <do_check+0x2e>
200009b4:	42bd      	cmp	r5, r7
200009b6:	d1fc      	bne.n	200009b2 <do_check+0x2e>
200009b8:	42bd      	cmp	r5, r7
200009ba:	d1fa      	bne.n	200009b2 <do_check+0x2e>
200009bc:	42bd      	cmp	r5, r7
200009be:	d1f8      	bne.n	200009b2 <do_check+0x2e>
200009c0:	f04f 0000 	mov.w	r0, #0
200009c4:	f04f 0000 	mov.w	r0, #0
200009c8:	f04f 0000 	mov.w	r0, #0
200009cc:	f000 f9b4 	bl	20000d38 <__wolfBoot_get_image_version_veneer>
200009d0:	4604      	mov	r4, r0
200009d2:	4604      	mov	r4, r0
200009d4:	4604      	mov	r4, r0
200009d6:	f04f 0000 	mov.w	r0, #0
200009da:	f04f 0000 	mov.w	r0, #0
200009de:	f04f 0000 	mov.w	r0, #0
200009e2:	f000 f9a9 	bl	20000d38 <__wolfBoot_get_image_version_veneer>
200009e6:	4606      	mov	r6, r0
200009e8:	4606      	mov	r6, r0
200009ea:	4606      	mov	r6, r0
200009ec:	42b4      	cmp	r4, r6
200009ee:	d1fe      	bne.n	200009ee <do_check+0x6a>
200009f0:	42b4      	cmp	r4, r6
200009f2:	d1fc      	bne.n	200009ee <do_check+0x6a>
200009f4:	42b4      	cmp	r4, r6
200009f6:	d1fa      	bne.n	200009ee <do_check+0x6a>
200009f8:	42b4      	cmp	r4, r6
200009fa:	d1f8      	bne.n	200009ee <do_check+0x6a>
200009fc:	f04f 0000 	mov.w	r0, #0
20000a00:	f04f 0000 	mov.w	r0, #0
20000a04:	f04f 0000 	mov.w	r0, #0
20000a08:	42ac      	cmp	r4, r5
20000a0a:	dafe      	bge.n	20000a0a <do_check+0x86>
20000a0c:	42be      	cmp	r6, r7
20000a0e:	dafc      	bge.n	20000a0a <do_check+0x86>
20000a10:	42ac      	cmp	r4, r5
20000a12:	dafa      	bge.n	20000a0a <do_check+0x86>
20000a14:	42be      	cmp	r6, r7
20000a16:	daf8      	bge.n	20000a0a <do_check+0x86>

20000a18 <end_check>:
20000a18:	bcf0      	pop	{r4, r5, r6, r7}
20000a1a:	e002      	b.n	20000a22 <end_check+0xa>
            } else {
                return -1;
20000a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20000a20:	e0f2      	b.n	20000c08 <end_check+0x1f0>
    if ((update_type & 0x00F0) == HDR_IMG_TYPE_DIFF) {
        return wolfBoot_delta_update(&boot, &update, &swap, fallback_allowed);
    }
#endif

    trigger_low();
20000a22:	f000 f971 	bl	20000d08 <__trigger_low_veneer>
    hal_flash_unlock();
20000a26:	f7ff fba5 	bl	20000174 <hal_flash_unlock>
#ifndef DISABLE_BACKUP
    /* Interruptible swap
     * The status is saved in the sector flags of the update partition.
     * If something goes wrong, the operation will be resumed upon reboot.
     */
    while ((sector * sector_size) < total_size) {
20000a2a:	e0a3      	b.n	20000b74 <end_check+0x15c>
        if ((wolfBoot_get_update_sector_flag(sector, &flag) != 0) || (flag == SECT_FLAG_NEW)) {
20000a2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000a30:	b29b      	uxth	r3, r3
20000a32:	f107 02a7 	add.w	r2, r7, #167	; 0xa7
20000a36:	4611      	mov	r1, r2
20000a38:	4618      	mov	r0, r3
20000a3a:	f000 f979 	bl	20000d30 <__wolfBoot_get_update_sector_flag_veneer>
20000a3e:	4603      	mov	r3, r0
20000a40:	2b00      	cmp	r3, #0
20000a42:	d103      	bne.n	20000a4c <end_check+0x34>
20000a44:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
20000a48:	2b0f      	cmp	r3, #15
20000a4a:	d11e      	bne.n	20000a8a <end_check+0x72>
           flag = SECT_FLAG_SWAPPING;
20000a4c:	2307      	movs	r3, #7
20000a4e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
           wolfBoot_copy_sector(&update, &swap, sector);
20000a52:	f107 0108 	add.w	r1, r7, #8
20000a56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
20000a5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
20000a5e:	4618      	mov	r0, r3
20000a60:	f7ff fea0 	bl	200007a4 <wolfBoot_copy_sector>
           if (((sector + 1) * sector_size) < WOLFBOOT_PARTITION_SIZE)
20000a64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000a68:	3301      	adds	r3, #1
20000a6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20000a6e:	fb02 f303 	mul.w	r3, r2, r3
20000a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000a76:	d208      	bcs.n	20000a8a <end_check+0x72>
               wolfBoot_set_update_sector_flag(sector, flag);
20000a78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000a7c:	b29b      	uxth	r3, r3
20000a7e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
20000a82:	4611      	mov	r1, r2
20000a84:	4618      	mov	r0, r3
20000a86:	f7ff fd31 	bl	200004ec <wolfBoot_set_update_sector_flag>
        }
        if (flag == SECT_FLAG_SWAPPING) {
20000a8a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
20000a8e:	2b07      	cmp	r3, #7
20000a90:	d133      	bne.n	20000afa <end_check+0xe2>
            uint32_t size = total_size - (sector * sector_size);
20000a92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20000a9a:	fb02 f303 	mul.w	r3, r2, r3
20000a9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
20000aa2:	1ad3      	subs	r3, r2, r3
20000aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if (size > sector_size)
20000aa8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
20000aac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
20000ab0:	429a      	cmp	r2, r3
20000ab2:	d903      	bls.n	20000abc <end_check+0xa4>
                size = sector_size;
20000ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
20000ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            flag = SECT_FLAG_BACKUP;
20000abc:	2303      	movs	r3, #3
20000abe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            wolfBoot_copy_sector(&boot, &update, sector);
20000ac2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
20000ac6:	f107 0370 	add.w	r3, r7, #112	; 0x70
20000aca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
20000ace:	4618      	mov	r0, r3
20000ad0:	f7ff fe68 	bl	200007a4 <wolfBoot_copy_sector>
           if (((sector + 1) * sector_size) < WOLFBOOT_PARTITION_SIZE)
20000ad4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000ad8:	3301      	adds	r3, #1
20000ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20000ade:	fb02 f303 	mul.w	r3, r2, r3
20000ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000ae6:	d208      	bcs.n	20000afa <end_check+0xe2>
                wolfBoot_set_update_sector_flag(sector, flag);
20000ae8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000aec:	b29b      	uxth	r3, r3
20000aee:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
20000af2:	4611      	mov	r1, r2
20000af4:	4618      	mov	r0, r3
20000af6:	f7ff fcf9 	bl	200004ec <wolfBoot_set_update_sector_flag>
        }
        if (flag == SECT_FLAG_BACKUP) {
20000afa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
20000afe:	2b03      	cmp	r3, #3
20000b00:	d133      	bne.n	20000b6a <end_check+0x152>
            uint32_t size = total_size - (sector * sector_size);
20000b02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20000b0a:	fb02 f303 	mul.w	r3, r2, r3
20000b0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
20000b12:	1ad3      	subs	r3, r2, r3
20000b14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            if (size > sector_size)
20000b18:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
20000b1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
20000b20:	429a      	cmp	r2, r3
20000b22:	d903      	bls.n	20000b2c <end_check+0x114>
                size = sector_size;
20000b24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
20000b28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            flag = SECT_FLAG_UPDATED;
20000b2c:	2300      	movs	r3, #0
20000b2e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            wolfBoot_copy_sector(&swap, &boot, sector);
20000b32:	f107 0170 	add.w	r1, r7, #112	; 0x70
20000b36:	f107 0308 	add.w	r3, r7, #8
20000b3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
20000b3e:	4618      	mov	r0, r3
20000b40:	f7ff fe30 	bl	200007a4 <wolfBoot_copy_sector>
            if (((sector + 1) * sector_size) < WOLFBOOT_PARTITION_SIZE)
20000b44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000b48:	3301      	adds	r3, #1
20000b4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20000b4e:	fb02 f303 	mul.w	r3, r2, r3
20000b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000b56:	d208      	bcs.n	20000b6a <end_check+0x152>
                wolfBoot_set_update_sector_flag(sector, flag);
20000b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000b5c:	b29b      	uxth	r3, r3
20000b5e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
20000b62:	4611      	mov	r1, r2
20000b64:	4618      	mov	r0, r3
20000b66:	f7ff fcc1 	bl	200004ec <wolfBoot_set_update_sector_flag>
        }
        sector++;
20000b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000b6e:	3301      	adds	r3, #1
20000b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    while ((sector * sector_size) < total_size) {
20000b74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000b78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20000b7c:	fb02 f303 	mul.w	r3, r2, r3
20000b80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
20000b84:	429a      	cmp	r2, r3
20000b86:	f63f af51 	bhi.w	20000a2c <end_check+0x14>
    }
    while((sector * sector_size) < WOLFBOOT_PARTITION_SIZE) {
20000b8a:	e022      	b.n	20000bd2 <end_check+0x1ba>
        wb_flash_erase(&boot, sector * sector_size, sector_size);
20000b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
20000b8e:	4619      	mov	r1, r3
20000b90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000b94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20000b98:	fb02 f303 	mul.w	r3, r2, r3
20000b9c:	440b      	add	r3, r1
20000b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20000ba2:	4611      	mov	r1, r2
20000ba4:	4618      	mov	r0, r3
20000ba6:	f7ff fb43 	bl	20000230 <hal_flash_erase>
        wb_flash_erase(&update, sector * sector_size, sector_size);
20000baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000bac:	4619      	mov	r1, r3
20000bae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20000bb6:	fb02 f303 	mul.w	r3, r2, r3
20000bba:	440b      	add	r3, r1
20000bbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20000bc0:	4611      	mov	r1, r2
20000bc2:	4618      	mov	r0, r3
20000bc4:	f7ff fb34 	bl	20000230 <hal_flash_erase>
        sector++;
20000bc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000bcc:	3301      	adds	r3, #1
20000bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    while((sector * sector_size) < WOLFBOOT_PARTITION_SIZE) {
20000bd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
20000bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
20000bda:	fb02 f303 	mul.w	r3, r2, r3
20000bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000be2:	d3d3      	bcc.n	20000b8c <end_check+0x174>
    }
    wb_flash_erase(&swap, 0, WOLFBOOT_SECTOR_SIZE);
20000be4:	68bb      	ldr	r3, [r7, #8]
20000be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
20000bea:	4618      	mov	r0, r3
20000bec:	f7ff fb20 	bl	20000230 <hal_flash_erase>
    st = IMG_STATE_TESTING;
20000bf0:	2310      	movs	r3, #16
20000bf2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
    wolfBoot_set_partition_state(PART_BOOT, st);
20000bf6:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
20000bfa:	4619      	mov	r1, r3
20000bfc:	2000      	movs	r0, #0
20000bfe:	f7ff fc40 	bl	20000482 <wolfBoot_set_partition_state>
#endif

#ifdef EXT_FLASH
    ext_flash_lock();
#endif
    hal_flash_lock();
20000c02:	f7ff facd 	bl	200001a0 <hal_flash_lock>

/* Save the encryption key after swapping */
#ifdef EXT_ENCRYPTED
    wolfBoot_set_encrypt_key(key, nonce);
#endif
    return 0;
20000c06:	2300      	movs	r3, #0
}
20000c08:	4618      	mov	r0, r3
20000c0a:	37c4      	adds	r7, #196	; 0xc4
20000c0c:	46bd      	mov	sp, r7
20000c0e:	bd90      	pop	{r4, r7, pc}

20000c10 <wolfBoot_start>:

void RAMFUNCTION wolfBoot_start(void)
{
20000c10:	b580      	push	{r7, lr}
20000c12:	b08e      	sub	sp, #56	; 0x38
20000c14:	af00      	add	r7, sp, #0
    uint8_t st;
    struct wolfBoot_image boot;

#ifdef RAM_CODE
    wolfBoot_check_self_update();
20000c16:	f000 f887 	bl	20000d28 <__wolfBoot_check_self_update_veneer>
            }
        }
    }
bad_goto_usage:
#else
    if ((wolfBoot_get_partition_state(PART_BOOT, &st) == 0) && (st == IMG_STATE_TESTING)) {
20000c1a:	f107 0337 	add.w	r3, r7, #55	; 0x37
20000c1e:	4619      	mov	r1, r3
20000c20:	2000      	movs	r0, #0
20000c22:	f7ff fcbf 	bl	200005a4 <wolfBoot_get_partition_state>
20000c26:	4603      	mov	r3, r0
20000c28:	2b00      	cmp	r3, #0
20000c2a:	d109      	bne.n	20000c40 <wolfBoot_start+0x30>
20000c2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000c30:	2b10      	cmp	r3, #16
20000c32:	d105      	bne.n	20000c40 <wolfBoot_start+0x30>
        wolfBoot_update_trigger();
20000c34:	f7ff fd06 	bl	20000644 <wolfBoot_update_trigger>
        wolfBoot_update(1);
20000c38:	2001      	movs	r0, #1
20000c3a:	f7ff fe07 	bl	2000084c <wolfBoot_update>
20000c3e:	e011      	b.n	20000c64 <wolfBoot_start+0x54>
    } else if ((wolfBoot_get_partition_state(PART_UPDATE, &st) == 0) && (st == IMG_STATE_UPDATING)) {
20000c40:	f107 0337 	add.w	r3, r7, #55	; 0x37
20000c44:	4619      	mov	r1, r3
20000c46:	2001      	movs	r0, #1
20000c48:	f7ff fcac 	bl	200005a4 <wolfBoot_get_partition_state>
20000c4c:	4603      	mov	r3, r0
20000c4e:	2b00      	cmp	r3, #0
20000c50:	d108      	bne.n	20000c64 <wolfBoot_start+0x54>
20000c52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
20000c56:	2b70      	cmp	r3, #112	; 0x70
20000c58:	d104      	bne.n	20000c64 <wolfBoot_start+0x54>
    /* Check for new updates in the UPDATE partition */
        wolfBoot_update(0);
20000c5a:	2000      	movs	r0, #0
20000c5c:	f7ff fdf6 	bl	2000084c <wolfBoot_update>
        trigger_low();
20000c60:	f000 f852 	bl	20000d08 <__trigger_low_veneer>
    }
#endif
    if ((wolfBoot_open_image(&boot, PART_BOOT) < 0)
20000c64:	463b      	mov	r3, r7
20000c66:	2100      	movs	r1, #0
20000c68:	4618      	mov	r0, r3
20000c6a:	f000 f86d 	bl	20000d48 <__wolfBoot_open_image_veneer>
20000c6e:	4603      	mov	r3, r0
20000c70:	2b00      	cmp	r3, #0
20000c72:	db06      	blt.n	20000c82 <wolfBoot_start+0x72>
            || (wolfBoot_verify_integrity(&boot) < 0)
20000c74:	463b      	mov	r3, r7
20000c76:	4618      	mov	r0, r3
20000c78:	f000 f852 	bl	20000d20 <__wolfBoot_verify_integrity_veneer>
20000c7c:	4603      	mov	r3, r0
20000c7e:	2b00      	cmp	r3, #0
20000c80:	da33      	bge.n	20000cea <wolfBoot_start+0xda>
            // || (wolfBoot_verify_authenticity(&boot) < 0)
            ) {
        if (likely(wolfBoot_update(1) < 0)) {
20000c82:	2001      	movs	r0, #1
20000c84:	f7ff fde2 	bl	2000084c <wolfBoot_update>
20000c88:	4603      	mov	r3, r0
20000c8a:	0fdb      	lsrs	r3, r3, #31
20000c8c:	b2db      	uxtb	r3, r3
20000c8e:	2b00      	cmp	r3, #0
20000c90:	d005      	beq.n	20000c9e <wolfBoot_start+0x8e>
            /* panic: no boot option available. */
                // trigger_low();
            wolfBoot_panic();
20000c92:	e7fe      	b.n	20000c92 <wolfBoot_start+0x82>
20000c94:	e7fd      	b.n	20000c92 <wolfBoot_start+0x82>
20000c96:	e7fc      	b.n	20000c92 <wolfBoot_start+0x82>
20000c98:	e7fb      	b.n	20000c92 <wolfBoot_start+0x82>
20000c9a:	e7fa      	b.n	20000c92 <wolfBoot_start+0x82>
20000c9c:	e025      	b.n	20000cea <wolfBoot_start+0xda>
        } else {
            /* Emergency update successful, try to re-open boot image */
            if (likely(((wolfBoot_open_image(&boot, PART_BOOT) < 0) ||
20000c9e:	463b      	mov	r3, r7
20000ca0:	2100      	movs	r1, #0
20000ca2:	4618      	mov	r0, r3
20000ca4:	f000 f850 	bl	20000d48 <__wolfBoot_open_image_veneer>
20000ca8:	4603      	mov	r3, r0
20000caa:	0fdb      	lsrs	r3, r3, #31
20000cac:	b2db      	uxtb	r3, r3
20000cae:	2b00      	cmp	r3, #0
20000cb0:	d108      	bne.n	20000cc4 <wolfBoot_start+0xb4>
20000cb2:	463b      	mov	r3, r7
20000cb4:	4618      	mov	r0, r3
20000cb6:	f000 f833 	bl	20000d20 <__wolfBoot_verify_integrity_veneer>
20000cba:	4603      	mov	r3, r0
20000cbc:	0fdb      	lsrs	r3, r3, #31
20000cbe:	b2db      	uxtb	r3, r3
20000cc0:	2b00      	cmp	r3, #0
20000cc2:	d001      	beq.n	20000cc8 <wolfBoot_start+0xb8>
20000cc4:	2301      	movs	r3, #1
20000cc6:	e000      	b.n	20000cca <wolfBoot_start+0xba>
20000cc8:	2300      	movs	r3, #0
20000cca:	2b00      	cmp	r3, #0
20000ccc:	d108      	bne.n	20000ce0 <wolfBoot_start+0xd0>
20000cce:	463b      	mov	r3, r7
20000cd0:	4618      	mov	r0, r3
20000cd2:	f000 f821 	bl	20000d18 <__wolfBoot_verify_authenticity_veneer>
20000cd6:	4603      	mov	r3, r0
20000cd8:	0fdb      	lsrs	r3, r3, #31
20000cda:	b2db      	uxtb	r3, r3
20000cdc:	2b00      	cmp	r3, #0
20000cde:	d004      	beq.n	20000cea <wolfBoot_start+0xda>
                    (wolfBoot_verify_integrity(&boot) < 0)  ||
                    (wolfBoot_verify_authenticity(&boot) < 0)))) {
                /* panic: something went wrong after the emergency update */
                // trigger_low();
                wolfBoot_panic();
20000ce0:	e7fe      	b.n	20000ce0 <wolfBoot_start+0xd0>
20000ce2:	e7fd      	b.n	20000ce0 <wolfBoot_start+0xd0>
20000ce4:	e7fc      	b.n	20000ce0 <wolfBoot_start+0xd0>
20000ce6:	e7fb      	b.n	20000ce0 <wolfBoot_start+0xd0>
20000ce8:	e7fa      	b.n	20000ce0 <wolfBoot_start+0xd0>
            }
        }
    }
    trigger_low();
20000cea:	f000 f80d 	bl	20000d08 <__trigger_low_veneer>
#ifdef WOLFBOOT_ARMORED
    // PART_SANITY_CHECK(&boot);
#endif
    hal_prepare_boot();
20000cee:	f000 f827 	bl	20000d40 <__hal_prepare_boot_veneer>
    do_boot((void *)boot.fw_base);
20000cf2:	68fb      	ldr	r3, [r7, #12]
20000cf4:	4618      	mov	r0, r3
20000cf6:	f7ff fcd7 	bl	200006a8 <do_boot>
}
20000cfa:	bf00      	nop
20000cfc:	3738      	adds	r7, #56	; 0x38
20000cfe:	46bd      	mov	sp, r7
20000d00:	bd80      	pop	{r7, pc}
20000d02:	bf00      	nop
20000d04:	0000      	movs	r0, r0
	...

20000d08 <__trigger_low_veneer>:
20000d08:	f85f f000 	ldr.w	pc, [pc]	; 20000d0c <__trigger_low_veneer+0x4>
20000d0c:	08000075 	.word	0x08000075

20000d10 <__wolfBoot_get_image_type_veneer>:
20000d10:	f85f f000 	ldr.w	pc, [pc]	; 20000d14 <__wolfBoot_get_image_type_veneer+0x4>
20000d14:	08000999 	.word	0x08000999

20000d18 <__wolfBoot_verify_authenticity_veneer>:
20000d18:	f85f f000 	ldr.w	pc, [pc]	; 20000d1c <__wolfBoot_verify_authenticity_veneer+0x4>
20000d1c:	0800068d 	.word	0x0800068d

20000d20 <__wolfBoot_verify_integrity_veneer>:
20000d20:	f85f f000 	ldr.w	pc, [pc]	; 20000d24 <__wolfBoot_verify_integrity_veneer+0x4>
20000d24:	0800061d 	.word	0x0800061d

20000d28 <__wolfBoot_check_self_update_veneer>:
20000d28:	f85f f000 	ldr.w	pc, [pc]	; 20000d2c <__wolfBoot_check_self_update_veneer+0x4>
20000d2c:	08000c09 	.word	0x08000c09

20000d30 <__wolfBoot_get_update_sector_flag_veneer>:
20000d30:	f85f f000 	ldr.w	pc, [pc]	; 20000d34 <__wolfBoot_get_update_sector_flag_veneer+0x4>
20000d34:	08000781 	.word	0x08000781

20000d38 <__wolfBoot_get_image_version_veneer>:
20000d38:	f85f f000 	ldr.w	pc, [pc]	; 20000d3c <__wolfBoot_get_image_version_veneer+0x4>
20000d3c:	08000959 	.word	0x08000959

20000d40 <__hal_prepare_boot_veneer>:
20000d40:	f85f f000 	ldr.w	pc, [pc]	; 20000d44 <__hal_prepare_boot_veneer+0x4>
20000d44:	0800012d 	.word	0x0800012d

20000d48 <__wolfBoot_open_image_veneer>:
20000d48:	f85f f000 	ldr.w	pc, [pc]	; 20000d4c <__wolfBoot_open_image_veneer+0x4>
20000d4c:	08000531 	.word	0x08000531

20000d50 <__trigger_high_veneer>:
20000d50:	f85f f000 	ldr.w	pc, [pc]	; 20000d54 <__trigger_high_veneer+0x4>
20000d54:	0800005d 	.word	0x0800005d
