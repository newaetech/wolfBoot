
wolfboot.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <IV>:
 8000000:	00 80 00 20 69 0b 00 08 bb 0b 00 08 b1 0b 00 08     ... i...........
 8000010:	b1 0b 00 08 b1 0b 00 08 b1 0b 00 08 00 00 00 00     ................
	...
 800002c:	bb 0b 00 08 bb 0b 00 08 00 00 00 00 bb 0b 00 08     ................
 800003c:	bb 0b 00 08                                         ....

08000040 <boot_jump>:
};
#endif

__attribute__((section(".boot_jmp")))
void boot_jump(void)
{
 8000040:	b500      	push	{lr}
 8000042:	b083      	sub	sp, #12
    uint32_t x = (uint32_t)(&END_STACK);
 8000044:	4b04      	ldr	r3, [pc, #16]	; (8000058 <boot_jump+0x18>)
 8000046:	9301      	str	r3, [sp, #4]
    asm volatile ("mov r13,%0" :: "r" (x));
 8000048:	9b01      	ldr	r3, [sp, #4]
 800004a:	469d      	mov	sp, r3
    isr_reset();
 800004c:	f000 fd8c 	bl	8000b68 <isr_reset>
}
 8000050:	bf00      	nop
 8000052:	b003      	add	sp, #12
 8000054:	f85d fb04 	ldr.w	pc, [sp], #4
 8000058:	20008000 	.word	0x20008000

0800005c <trigger_high>:
volatile uint32_t *GPIOA_IDR = (uint32_t *)(GPIOA + 0x10);


void trigger_high(void)
{
	*GPIOA_ODR |= 1 << 12;
 800005c:	4b04      	ldr	r3, [pc, #16]	; (8000070 <trigger_high+0x14>)
 800005e:	681b      	ldr	r3, [r3, #0]
 8000060:	681a      	ldr	r2, [r3, #0]
 8000062:	4b03      	ldr	r3, [pc, #12]	; (8000070 <trigger_high+0x14>)
 8000064:	681b      	ldr	r3, [r3, #0]
 8000066:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800006a:	601a      	str	r2, [r3, #0]
}
 800006c:	bf00      	nop
 800006e:	4770      	bx	lr
 8000070:	20000008 	.word	0x20000008

08000074 <trigger_low>:

void trigger_low(void)
{
    *GPIOA_ODR &= ~(1 << 12);
 8000074:	4b04      	ldr	r3, [pc, #16]	; (8000088 <trigger_low+0x14>)
 8000076:	681b      	ldr	r3, [r3, #0]
 8000078:	681a      	ldr	r2, [r3, #0]
 800007a:	4b03      	ldr	r3, [pc, #12]	; (8000088 <trigger_low+0x14>)
 800007c:	681b      	ldr	r3, [r3, #0]
 800007e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000082:	601a      	str	r2, [r3, #0]
}
 8000084:	bf00      	nop
 8000086:	4770      	bx	lr
 8000088:	20000008 	.word	0x20000008

0800008c <trigger_setup>:

void trigger_setup(void)
{
 800008c:	b500      	push	{lr}
 800008e:	b083      	sub	sp, #12
	*AHB_ENABLE_REG |= (1 << 17);
 8000090:	4b0d      	ldr	r3, [pc, #52]	; (80000c8 <trigger_setup+0x3c>)
 8000092:	681b      	ldr	r3, [r3, #0]
 8000094:	681a      	ldr	r2, [r3, #0]
 8000096:	4b0c      	ldr	r3, [pc, #48]	; (80000c8 <trigger_setup+0x3c>)
 8000098:	681b      	ldr	r3, [r3, #0]
 800009a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800009e:	601a      	str	r2, [r3, #0]
    volatile uint32_t x = 0;
 80000a0:	2300      	movs	r3, #0
 80000a2:	9301      	str	r3, [sp, #4]
    x = 0;
 80000a4:	2300      	movs	r3, #0
 80000a6:	9301      	str	r3, [sp, #4]
    x = 0;
 80000a8:	2300      	movs	r3, #0
 80000aa:	9301      	str	r3, [sp, #4]
    trigger_low();
 80000ac:	f7ff ffe2 	bl	8000074 <trigger_low>
	*GPIOA_MODER |= (0b01) << (12*2);
 80000b0:	4b06      	ldr	r3, [pc, #24]	; (80000cc <trigger_setup+0x40>)
 80000b2:	681b      	ldr	r3, [r3, #0]
 80000b4:	681a      	ldr	r2, [r3, #0]
 80000b6:	4b05      	ldr	r3, [pc, #20]	; (80000cc <trigger_setup+0x40>)
 80000b8:	681b      	ldr	r3, [r3, #0]
 80000ba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80000be:	601a      	str	r2, [r3, #0]
}
 80000c0:	bf00      	nop
 80000c2:	b003      	add	sp, #12
 80000c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80000c8:	20000000 	.word	0x20000000
 80000cc:	20000004 	.word	0x20000004

080000d0 <clock_pll_off>:

    return 0;
}

void clock_pll_off(void)
{
 80000d0:	b082      	sub	sp, #8
    uint32_t reg32;
    /* Enable internal high-speed oscillator. */
    RCC_CR |= RCC_CR_HSION;
 80000d2:	4b13      	ldr	r3, [pc, #76]	; (8000120 <clock_pll_off+0x50>)
 80000d4:	681b      	ldr	r3, [r3, #0]
 80000d6:	4a12      	ldr	r2, [pc, #72]	; (8000120 <clock_pll_off+0x50>)
 80000d8:	f043 0301 	orr.w	r3, r3, #1
 80000dc:	6013      	str	r3, [r2, #0]
    DMB();
 80000de:	f3bf 8f5f 	dmb	sy
    while ((RCC_CR & RCC_CR_HSIRDY) == 0) {};
 80000e2:	bf00      	nop
 80000e4:	4b0e      	ldr	r3, [pc, #56]	; (8000120 <clock_pll_off+0x50>)
 80000e6:	681b      	ldr	r3, [r3, #0]
 80000e8:	f003 0302 	and.w	r3, r3, #2
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d0f9      	beq.n	80000e4 <clock_pll_off+0x14>

    /* Select HSI as SYSCLK source. */
    reg32 = RCC_CFGR;
 80000f0:	4b0c      	ldr	r3, [pc, #48]	; (8000124 <clock_pll_off+0x54>)
 80000f2:	681b      	ldr	r3, [r3, #0]
 80000f4:	9301      	str	r3, [sp, #4]
    reg32 &= ~((1 << 1) | (1 << 0));
 80000f6:	9b01      	ldr	r3, [sp, #4]
 80000f8:	f023 0303 	bic.w	r3, r3, #3
 80000fc:	9301      	str	r3, [sp, #4]
    RCC_CFGR = (reg32 | RCC_CFGR_SW_HSI);
 80000fe:	4a09      	ldr	r2, [pc, #36]	; (8000124 <clock_pll_off+0x54>)
 8000100:	9b01      	ldr	r3, [sp, #4]
 8000102:	6013      	str	r3, [r2, #0]
    DMB();
 8000104:	f3bf 8f5f 	dmb	sy

    /* Turn off PLL */
    RCC_CR &= ~RCC_CR_PLLON;
 8000108:	4b05      	ldr	r3, [pc, #20]	; (8000120 <clock_pll_off+0x50>)
 800010a:	681b      	ldr	r3, [r3, #0]
 800010c:	4a04      	ldr	r2, [pc, #16]	; (8000120 <clock_pll_off+0x50>)
 800010e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000112:	6013      	str	r3, [r2, #0]
    DMB();
 8000114:	f3bf 8f5f 	dmb	sy
}
 8000118:	bf00      	nop
 800011a:	b002      	add	sp, #8
 800011c:	4770      	bx	lr
 800011e:	bf00      	nop
 8000120:	40021000 	.word	0x40021000
 8000124:	40021004 	.word	0x40021004

08000128 <hal_init>:
}

void hal_init(void)
{
    //clock_pll_on(0);
}
 8000128:	bf00      	nop
 800012a:	4770      	bx	lr

0800012c <hal_prepare_boot>:

void hal_prepare_boot(void)
{
 800012c:	b508      	push	{r3, lr}
#ifdef SPI_FLASH
    spi_release();
#endif

    clock_pll_off();
 800012e:	f7ff ffcf 	bl	80000d0 <clock_pll_off>
}
 8000132:	bf00      	nop
 8000134:	bd08      	pop	{r3, pc}

08000136 <wolfBoot_panic>:
    asm volatile("b .-8"); 

#else
static inline void wolfBoot_panic(void)
{
    while(1)
 8000136:	e7fe      	b.n	8000136 <wolfBoot_panic>

08000138 <main>:
extern void (** const IV_RAM)(void);
#endif

void trigger_setup(void);
int main(void)
{
 8000138:	b508      	push	{r3, lr}
    hal_init();
 800013a:	f7ff fff5 	bl	8000128 <hal_init>
    // for (volatile uint32_t i = 0; i < 50; i++) {
    //     for (volatile uint32_t j = 0; j < 50; j++) {
    //         k++;
    //     }
    // }
    wolfBoot_update_trigger();
 800013e:	f005 f883 	bl	8005248 <__wolfBoot_update_trigger_veneer>
    trigger_setup();
 8000142:	f7ff ffa3 	bl	800008c <trigger_setup>
#endif
#ifdef WOLFBOOT_TPM
    wolfBoot_tpm2_init();
#endif

    wolfBoot_start();
 8000146:	f005 f877 	bl	8005238 <__wolfBoot_start_veneer>

    /* wolfBoot_start should never return. */
    wolfBoot_panic();
 800014a:	f7ff fff4 	bl	8000136 <wolfBoot_panic>

    return 0;
 800014e:	2300      	movs	r3, #0
}
 8000150:	4618      	mov	r0, r3
 8000152:	bd08      	pop	{r3, pc}

08000154 <memset>:
    return (isupper(c) || islower(c));
}

#if !defined(__IAR_SYSTEMS_ICC__) && !defined(PLATFORM_X86_64_EFI)
void *memset(void *s, int c, size_t n)
{
 8000154:	b086      	sub	sp, #24
 8000156:	9003      	str	r0, [sp, #12]
 8000158:	9102      	str	r1, [sp, #8]
 800015a:	9201      	str	r2, [sp, #4]
	unsigned char *d = (unsigned char *)s;
 800015c:	9b03      	ldr	r3, [sp, #12]
 800015e:	9305      	str	r3, [sp, #20]

	while (n--) {
 8000160:	e005      	b.n	800016e <memset+0x1a>
		*d++ = (unsigned char)c;
 8000162:	9b05      	ldr	r3, [sp, #20]
 8000164:	1c5a      	adds	r2, r3, #1
 8000166:	9205      	str	r2, [sp, #20]
 8000168:	9a02      	ldr	r2, [sp, #8]
 800016a:	b2d2      	uxtb	r2, r2
 800016c:	701a      	strb	r2, [r3, #0]
	while (n--) {
 800016e:	9b01      	ldr	r3, [sp, #4]
 8000170:	1e5a      	subs	r2, r3, #1
 8000172:	9201      	str	r2, [sp, #4]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d1f4      	bne.n	8000162 <memset+0xe>
	}

	return s;
 8000178:	9b03      	ldr	r3, [sp, #12]
}
 800017a:	4618      	mov	r0, r3
 800017c:	b006      	add	sp, #24
 800017e:	4770      	bx	lr

08000180 <strlen>:
    }
	return diff;
}

size_t strlen(const char *s)
{
 8000180:	b084      	sub	sp, #16
 8000182:	9001      	str	r0, [sp, #4]
    size_t i = 0;
 8000184:	2300      	movs	r3, #0
 8000186:	9303      	str	r3, [sp, #12]

    while (s[i] != 0)
 8000188:	e002      	b.n	8000190 <strlen+0x10>
        i++;
 800018a:	9b03      	ldr	r3, [sp, #12]
 800018c:	3301      	adds	r3, #1
 800018e:	9303      	str	r3, [sp, #12]
    while (s[i] != 0)
 8000190:	9a01      	ldr	r2, [sp, #4]
 8000192:	9b03      	ldr	r3, [sp, #12]
 8000194:	4413      	add	r3, r2
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d1f6      	bne.n	800018a <strlen+0xa>

    return i;
 800019c:	9b03      	ldr	r3, [sp, #12]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	b004      	add	sp, #16
 80001a2:	4770      	bx	lr

080001a4 <memcpy>:
    return diff;
}

#if  !defined(__IAR_SYSTEMS_ICC__) && !defined(PLATFORM_X86_64_EFI)
void *memcpy(void *dst, const void *src, size_t n)
{
 80001a4:	b088      	sub	sp, #32
 80001a6:	9003      	str	r0, [sp, #12]
 80001a8:	9102      	str	r1, [sp, #8]
 80001aa:	9201      	str	r2, [sp, #4]
    size_t i;
    const char *s = (const char *)src;
 80001ac:	9b02      	ldr	r3, [sp, #8]
 80001ae:	9306      	str	r3, [sp, #24]
    char *d = (char *)dst;
 80001b0:	9b03      	ldr	r3, [sp, #12]
 80001b2:	9305      	str	r3, [sp, #20]

    for (i = 0; i < n; i++) {
 80001b4:	2300      	movs	r3, #0
 80001b6:	9307      	str	r3, [sp, #28]
 80001b8:	e00a      	b.n	80001d0 <memcpy+0x2c>
        d[i] = s[i];
 80001ba:	9a06      	ldr	r2, [sp, #24]
 80001bc:	9b07      	ldr	r3, [sp, #28]
 80001be:	441a      	add	r2, r3
 80001c0:	9905      	ldr	r1, [sp, #20]
 80001c2:	9b07      	ldr	r3, [sp, #28]
 80001c4:	440b      	add	r3, r1
 80001c6:	7812      	ldrb	r2, [r2, #0]
 80001c8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < n; i++) {
 80001ca:	9b07      	ldr	r3, [sp, #28]
 80001cc:	3301      	adds	r3, #1
 80001ce:	9307      	str	r3, [sp, #28]
 80001d0:	9a07      	ldr	r2, [sp, #28]
 80001d2:	9b01      	ldr	r3, [sp, #4]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	d3f0      	bcc.n	80001ba <memcpy+0x16>
    }

    return dst;
 80001d8:	9b03      	ldr	r3, [sp, #12]
}
 80001da:	4618      	mov	r0, r3
 80001dc:	b008      	add	sp, #32
 80001de:	4770      	bx	lr

080001e0 <memcmp>:
    return dst;
}


int memcmp(const void *_s1, const void *_s2, size_t n)
{
 80001e0:	b088      	sub	sp, #32
 80001e2:	9003      	str	r0, [sp, #12]
 80001e4:	9102      	str	r1, [sp, #8]
 80001e6:	9201      	str	r2, [sp, #4]
    int diff = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	9307      	str	r3, [sp, #28]
    const unsigned char *s1 = (const unsigned char *)_s1;
 80001ec:	9b03      	ldr	r3, [sp, #12]
 80001ee:	9306      	str	r3, [sp, #24]
    const unsigned char *s2 = (const unsigned char *)_s2;
 80001f0:	9b02      	ldr	r3, [sp, #8]
 80001f2:	9305      	str	r3, [sp, #20]

    while (!diff && n) {
 80001f4:	e00f      	b.n	8000216 <memcmp+0x36>
        diff = (int)*s1 - (int)*s2;
 80001f6:	9b06      	ldr	r3, [sp, #24]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	461a      	mov	r2, r3
 80001fc:	9b05      	ldr	r3, [sp, #20]
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	1ad3      	subs	r3, r2, r3
 8000202:	9307      	str	r3, [sp, #28]
        s1++;
 8000204:	9b06      	ldr	r3, [sp, #24]
 8000206:	3301      	adds	r3, #1
 8000208:	9306      	str	r3, [sp, #24]
        s2++;
 800020a:	9b05      	ldr	r3, [sp, #20]
 800020c:	3301      	adds	r3, #1
 800020e:	9305      	str	r3, [sp, #20]
        n--;
 8000210:	9b01      	ldr	r3, [sp, #4]
 8000212:	3b01      	subs	r3, #1
 8000214:	9301      	str	r3, [sp, #4]
    while (!diff && n) {
 8000216:	9b07      	ldr	r3, [sp, #28]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d102      	bne.n	8000222 <memcmp+0x42>
 800021c:	9b01      	ldr	r3, [sp, #4]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d1e9      	bne.n	80001f6 <memcmp+0x16>
    }

	return diff;
 8000222:	9b07      	ldr	r3, [sp, #28]
}
 8000224:	4618      	mov	r0, r3
 8000226:	b008      	add	sp, #32
 8000228:	4770      	bx	lr

0800022a <wolfBoot_image_confirm_signature_ok>:
    uint8_t signature_ok : 1;
    uint8_t sha_ok : 1;
};

static void wolfBoot_image_confirm_signature_ok(struct wolfBoot_image *img)
{
 800022a:	b082      	sub	sp, #8
 800022c:	9001      	str	r0, [sp, #4]
    img->signature_ok = 1;
 800022e:	9a01      	ldr	r2, [sp, #4]
 8000230:	7d53      	ldrb	r3, [r2, #21]
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	7553      	strb	r3, [r2, #21]
}
 8000238:	bf00      	nop
 800023a:	b002      	add	sp, #8
 800023c:	4770      	bx	lr
	...

08000240 <wolfBoot_verify_signature>:
    #define ECC_KEY_SIZE  66
    #define ECC_KEY_TYPE ECC_SECP521R1
#endif

static void wolfBoot_verify_signature(struct wolfBoot_image *img, uint8_t *sig)
{
 8000240:	b500      	push	{lr}
 8000242:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8000246:	ab03      	add	r3, sp, #12
 8000248:	6018      	str	r0, [r3, #0]
 800024a:	ab02      	add	r3, sp, #8
 800024c:	6019      	str	r1, [r3, #0]
    int ret, verify_res = 0;
 800024e:	2300      	movs	r3, #0
 8000250:	9383      	str	r3, [sp, #524]	; 0x20c
#else
    /* wolfCrypt software ECC verify */
    mp_int r, s;
    ecc_key ecc;

    ret = wc_ecc_init(&ecc);
 8000252:	ab04      	add	r3, sp, #16
 8000254:	4618      	mov	r0, r3
 8000256:	f004 ff5f 	bl	8005118 <wc_ecc_init>
 800025a:	9085      	str	r0, [sp, #532]	; 0x214
    if (ret < 0) {
 800025c:	9b85      	ldr	r3, [sp, #532]	; 0x214
 800025e:	2b00      	cmp	r3, #0
 8000260:	db3e      	blt.n	80002e0 <wolfBoot_verify_signature+0xa0>
        /* Failed to initialize key */
        return;
    }

    /* Import public key */
    ret = wc_ecc_import_unsigned(&ecc, (byte*)KEY_BUFFER,
 8000262:	4a23      	ldr	r2, [pc, #140]	; (80002f0 <wolfBoot_verify_signature+0xb0>)
 8000264:	a804      	add	r0, sp, #16
 8000266:	2307      	movs	r3, #7
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	2300      	movs	r3, #0
 800026c:	4921      	ldr	r1, [pc, #132]	; (80002f4 <wolfBoot_verify_signature+0xb4>)
 800026e:	f004 ffd7 	bl	8005220 <wc_ecc_import_unsigned>
 8000272:	9085      	str	r0, [sp, #532]	; 0x214
        (byte*)(KEY_BUFFER + ECC_KEY_SIZE), NULL, ECC_KEY_TYPE);
    if ((ret < 0) || ecc.type != ECC_PUBLICKEY) {
 8000274:	9b85      	ldr	r3, [sp, #532]	; 0x214
 8000276:	2b00      	cmp	r3, #0
 8000278:	db34      	blt.n	80002e4 <wolfBoot_verify_signature+0xa4>
 800027a:	ab04      	add	r3, sp, #16
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d130      	bne.n	80002e4 <wolfBoot_verify_signature+0xa4>
        /* Failed to import ecc key */
        return;
    }

    /* Import signature into r,s */
    mp_init(&r);
 8000282:	ab6f      	add	r3, sp, #444	; 0x1bc
 8000284:	4618      	mov	r0, r3
 8000286:	f001 f82d 	bl	80012e4 <sp_init>
    mp_init(&s);
 800028a:	ab5b      	add	r3, sp, #364	; 0x16c
 800028c:	4618      	mov	r0, r3
 800028e:	f001 f829 	bl	80012e4 <sp_init>
    mp_read_unsigned_bin(&r, sig, ECC_KEY_SIZE);
 8000292:	ab02      	add	r3, sp, #8
 8000294:	a86f      	add	r0, sp, #444	; 0x1bc
 8000296:	2220      	movs	r2, #32
 8000298:	6819      	ldr	r1, [r3, #0]
 800029a:	f001 f8c2 	bl	8001422 <sp_read_unsigned_bin>
    mp_read_unsigned_bin(&s, sig + ECC_KEY_SIZE, ECC_KEY_SIZE);
 800029e:	ab02      	add	r3, sp, #8
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f103 0120 	add.w	r1, r3, #32
 80002a6:	ab5b      	add	r3, sp, #364	; 0x16c
 80002a8:	2220      	movs	r2, #32
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 f8b9 	bl	8001422 <sp_read_unsigned_bin>
    VERIFY_FN(img, &verify_res, wc_ecc_verify_hash_ex, &r, &s, img->sha_hash,
 80002b0:	ab03      	add	r3, sp, #12
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	a95b      	add	r1, sp, #364	; 0x16c
 80002b8:	a86f      	add	r0, sp, #444	; 0x1bc
 80002ba:	ab04      	add	r3, sp, #16
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	ab83      	add	r3, sp, #524	; 0x20c
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2320      	movs	r3, #32
 80002c4:	f004 ff32 	bl	800512c <wc_ecc_verify_hash_ex>
 80002c8:	9084      	str	r0, [sp, #528]	; 0x210
 80002ca:	9b84      	ldr	r3, [sp, #528]	; 0x210
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d10a      	bne.n	80002e6 <wolfBoot_verify_signature+0xa6>
 80002d0:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d107      	bne.n	80002e6 <wolfBoot_verify_signature+0xa6>
 80002d6:	ab03      	add	r3, sp, #12
 80002d8:	6818      	ldr	r0, [r3, #0]
 80002da:	f7ff ffa6 	bl	800022a <wolfBoot_image_confirm_signature_ok>
 80002de:	e002      	b.n	80002e6 <wolfBoot_verify_signature+0xa6>
        return;
 80002e0:	bf00      	nop
 80002e2:	e000      	b.n	80002e6 <wolfBoot_verify_signature+0xa6>
        return;
 80002e4:	bf00      	nop
            WOLFBOOT_SHA_DIGEST_SIZE, &verify_res, &ecc);
#endif /* WOLFBOOT_TPM */
}
 80002e6:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 80002ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80002ee:	bf00      	nop
 80002f0:	0800528c 	.word	0x0800528c
 80002f4:	0800526c 	.word	0x0800526c

080002f8 <get_header>:


static uint16_t get_header_ext(struct wolfBoot_image *img, uint16_t type, uint8_t **ptr);

static uint16_t get_header(struct wolfBoot_image *img, uint16_t type, uint8_t **ptr)
{
 80002f8:	b500      	push	{lr}
 80002fa:	b085      	sub	sp, #20
 80002fc:	9003      	str	r0, [sp, #12]
 80002fe:	460b      	mov	r3, r1
 8000300:	9201      	str	r2, [sp, #4]
 8000302:	f8ad 300a 	strh.w	r3, [sp, #10]
    if (PART_IS_EXT(img))
        return get_header_ext(img, type, ptr);
    else
        return wolfBoot_find_header(img->hdr + IMAGE_HEADER_OFFSET, type, ptr);
 8000306:	9b03      	ldr	r3, [sp, #12]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	3308      	adds	r3, #8
 800030c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8000310:	9a01      	ldr	r2, [sp, #4]
 8000312:	4618      	mov	r0, r3
 8000314:	f000 fa4e 	bl	80007b4 <wolfBoot_find_header>
 8000318:	4603      	mov	r3, r0
}
 800031a:	4618      	mov	r0, r3
 800031c:	b005      	add	sp, #20
 800031e:	f85d fb04 	ldr.w	pc, [sp], #4

08000322 <get_sha_block>:
#ifdef EXT_FLASH
static uint8_t ext_hash_block[WOLFBOOT_SHA_BLOCK_SIZE];
#endif
static uint8_t digest[WOLFBOOT_SHA_DIGEST_SIZE];
static uint8_t *get_sha_block(struct wolfBoot_image *img, uint32_t offset)
{
 8000322:	b082      	sub	sp, #8
 8000324:	9001      	str	r0, [sp, #4]
 8000326:	9100      	str	r1, [sp, #0]
    if (offset > img->fw_size)
 8000328:	9b01      	ldr	r3, [sp, #4]
 800032a:	691b      	ldr	r3, [r3, #16]
 800032c:	9a00      	ldr	r2, [sp, #0]
 800032e:	429a      	cmp	r2, r3
 8000330:	d901      	bls.n	8000336 <get_sha_block+0x14>
        return NULL;
 8000332:	2300      	movs	r3, #0
 8000334:	e003      	b.n	800033e <get_sha_block+0x1c>
    if (PART_IS_EXT(img)) {
        ext_flash_check_read((uintptr_t)(img->fw_base) + offset, ext_hash_block, WOLFBOOT_SHA_BLOCK_SIZE);
        return ext_hash_block;
    } else
#endif
        return (uint8_t *)(img->fw_base + offset);
 8000336:	9b01      	ldr	r3, [sp, #4]
 8000338:	68da      	ldr	r2, [r3, #12]
 800033a:	9b00      	ldr	r3, [sp, #0]
 800033c:	4413      	add	r3, r2
}
 800033e:	4618      	mov	r0, r3
 8000340:	b002      	add	sp, #8
 8000342:	4770      	bx	lr

08000344 <get_img_hdr>:
#   define fetch_hdr_cpy(i) ((uint8_t *)0)
static uint16_t get_header_ext(struct wolfBoot_image *img, uint16_t type, uint8_t **ptr) { return 0; }
#endif

static uint8_t *get_img_hdr(struct wolfBoot_image *img)
{
 8000344:	b082      	sub	sp, #8
 8000346:	9001      	str	r0, [sp, #4]
    if (PART_IS_EXT(img))
        return fetch_hdr_cpy(img);
    else
        return (uint8_t *)(img->hdr);
 8000348:	9b01      	ldr	r3, [sp, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
}
 800034c:	4618      	mov	r0, r3
 800034e:	b002      	add	sp, #8
 8000350:	4770      	bx	lr

08000352 <image_sha256>:

#if defined(WOLFBOOT_HASH_SHA256)
#include <wolfssl/wolfcrypt/sha256.h>
static int image_sha256(struct wolfBoot_image *img, uint8_t *hash)
{
 8000352:	b500      	push	{lr}
 8000354:	b0a5      	sub	sp, #148	; 0x94
 8000356:	9001      	str	r0, [sp, #4]
 8000358:	9100      	str	r1, [sp, #0]
#else
    uint8_t *stored_sha, *end_sha;
    uint16_t stored_sha_len;
    uint8_t *p;
    int blksz;
    uint32_t position = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	9321      	str	r3, [sp, #132]	; 0x84
    wc_Sha256 sha256_ctx;
    if (!img)
 800035e:	9b01      	ldr	r3, [sp, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d102      	bne.n	800036a <image_sha256+0x18>
        return -1;
 8000364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000368:	e064      	b.n	8000434 <image_sha256+0xe2>
    p = get_img_hdr(img);
 800036a:	9801      	ldr	r0, [sp, #4]
 800036c:	f7ff ffea 	bl	8000344 <get_img_hdr>
 8000370:	9023      	str	r0, [sp, #140]	; 0x8c
    stored_sha_len = get_header(img, HDR_SHA256, &stored_sha);
 8000372:	ab1e      	add	r3, sp, #120	; 0x78
 8000374:	461a      	mov	r2, r3
 8000376:	2103      	movs	r1, #3
 8000378:	9801      	ldr	r0, [sp, #4]
 800037a:	f7ff ffbd 	bl	80002f8 <get_header>
 800037e:	4603      	mov	r3, r0
 8000380:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    if (stored_sha_len != WOLFBOOT_SHA_DIGEST_SIZE)
 8000384:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
 8000388:	2b20      	cmp	r3, #32
 800038a:	d002      	beq.n	8000392 <image_sha256+0x40>
        return -1;
 800038c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000390:	e050      	b.n	8000434 <image_sha256+0xe2>
    wc_InitSha256(&sha256_ctx);
 8000392:	ab02      	add	r3, sp, #8
 8000394:	4618      	mov	r0, r3
 8000396:	f000 ff1f 	bl	80011d8 <wc_InitSha256>
    end_sha = stored_sha - (2 * sizeof(uint16_t)); /* Subtract 2 Type + 2 Len */
 800039a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800039c:	3b04      	subs	r3, #4
 800039e:	931f      	str	r3, [sp, #124]	; 0x7c
    while (p < end_sha) {
 80003a0:	e016      	b.n	80003d0 <image_sha256+0x7e>
        blksz = WOLFBOOT_SHA_BLOCK_SIZE;
 80003a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003a6:	9322      	str	r3, [sp, #136]	; 0x88
        if (end_sha - p < blksz)
 80003a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80003aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80003ac:	1ad3      	subs	r3, r2, r3
 80003ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80003b0:	429a      	cmp	r2, r3
 80003b2:	dd03      	ble.n	80003bc <image_sha256+0x6a>
            blksz = end_sha - p;
 80003b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80003b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	9322      	str	r3, [sp, #136]	; 0x88
        wc_Sha256Update(&sha256_ctx, p, blksz);
 80003bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80003be:	ab02      	add	r3, sp, #8
 80003c0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 fe2a 	bl	800101c <wc_Sha256Update>
        p += blksz;
 80003c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80003ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80003cc:	4413      	add	r3, r2
 80003ce:	9323      	str	r3, [sp, #140]	; 0x8c
    while (p < end_sha) {
 80003d0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80003d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d3e4      	bcc.n	80003a2 <image_sha256+0x50>
    }
    do {
        p = get_sha_block(img, position);
 80003d8:	9921      	ldr	r1, [sp, #132]	; 0x84
 80003da:	9801      	ldr	r0, [sp, #4]
 80003dc:	f7ff ffa1 	bl	8000322 <get_sha_block>
 80003e0:	9023      	str	r0, [sp, #140]	; 0x8c
        if (p == NULL)
 80003e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d01e      	beq.n	8000426 <image_sha256+0xd4>
            break;
        blksz = WOLFBOOT_SHA_BLOCK_SIZE;
 80003e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ec:	9322      	str	r3, [sp, #136]	; 0x88
        if (position + blksz > img->fw_size)
 80003ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80003f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80003f2:	441a      	add	r2, r3
 80003f4:	9b01      	ldr	r3, [sp, #4]
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d904      	bls.n	8000406 <image_sha256+0xb4>
            blksz = img->fw_size - position;
 80003fc:	9b01      	ldr	r3, [sp, #4]
 80003fe:	691a      	ldr	r2, [r3, #16]
 8000400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8000402:	1ad3      	subs	r3, r2, r3
 8000404:	9322      	str	r3, [sp, #136]	; 0x88
        wc_Sha256Update(&sha256_ctx, p, blksz);
 8000406:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8000408:	ab02      	add	r3, sp, #8
 800040a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800040c:	4618      	mov	r0, r3
 800040e:	f000 fe05 	bl	800101c <wc_Sha256Update>
        position += blksz;
 8000412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8000414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8000416:	4413      	add	r3, r2
 8000418:	9321      	str	r3, [sp, #132]	; 0x84
    } while(position < img->fw_size);
 800041a:	9b01      	ldr	r3, [sp, #4]
 800041c:	691b      	ldr	r3, [r3, #16]
 800041e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8000420:	429a      	cmp	r2, r3
 8000422:	d3d9      	bcc.n	80003d8 <image_sha256+0x86>
 8000424:	e000      	b.n	8000428 <image_sha256+0xd6>
            break;
 8000426:	bf00      	nop

    wc_Sha256Final(&sha256_ctx, hash);
 8000428:	ab02      	add	r3, sp, #8
 800042a:	9900      	ldr	r1, [sp, #0]
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fe4d 	bl	80010cc <wc_Sha256Final>
    return 0;
 8000432:	2300      	movs	r3, #0
#endif /* WOLFBOOT_TPM && WOLFBOOT_HASH_TPM */
}
 8000434:	4618      	mov	r0, r3
 8000436:	b025      	add	sp, #148	; 0x94
 8000438:	f85d fb04 	ldr.w	pc, [sp], #4

0800043c <key_sha256>:

#ifndef WOLFBOOT_NO_SIGN
static void key_sha256(uint8_t *hash)
{
 800043c:	b500      	push	{lr}
 800043e:	b0a1      	sub	sp, #132	; 0x84
 8000440:	9001      	str	r0, [sp, #4]
        i += blksz;
    }
    wolfTPM2_HashFinish(&wolftpm_dev, &tpmHash, hash, (word32*)&hashSz);
#else
    int blksz;
    unsigned int i = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	931e      	str	r3, [sp, #120]	; 0x78
    wc_Sha256 sha256_ctx;
    wc_InitSha256(&sha256_ctx);
 8000446:	ab02      	add	r3, sp, #8
 8000448:	4618      	mov	r0, r3
 800044a:	f000 fec5 	bl	80011d8 <wc_InitSha256>
    while(i < KEY_LEN)
 800044e:	e01a      	b.n	8000486 <key_sha256+0x4a>
    {
        blksz = WOLFBOOT_SHA_BLOCK_SIZE;
 8000450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000454:	931f      	str	r3, [sp, #124]	; 0x7c
        if ((i + blksz) > KEY_LEN)
 8000456:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8000458:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800045a:	441a      	add	r2, r3
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <key_sha256+0x68>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	429a      	cmp	r2, r3
 8000462:	d904      	bls.n	800046e <key_sha256+0x32>
            blksz = KEY_LEN - i;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <key_sha256+0x68>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800046a:	1ad3      	subs	r3, r2, r3
 800046c:	931f      	str	r3, [sp, #124]	; 0x7c
        wc_Sha256Update(&sha256_ctx, (KEY_BUFFER + i), blksz);
 800046e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <key_sha256+0x6c>)
 8000472:	1899      	adds	r1, r3, r2
 8000474:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8000476:	ab02      	add	r3, sp, #8
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fdcf 	bl	800101c <wc_Sha256Update>
        i += blksz;
 800047e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000480:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8000482:	4413      	add	r3, r2
 8000484:	931e      	str	r3, [sp, #120]	; 0x78
    while(i < KEY_LEN)
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <key_sha256+0x68>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800048c:	429a      	cmp	r2, r3
 800048e:	d3df      	bcc.n	8000450 <key_sha256+0x14>
    }
    wc_Sha256Final(&sha256_ctx, hash);
 8000490:	ab02      	add	r3, sp, #8
 8000492:	9901      	ldr	r1, [sp, #4]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 fe19 	bl	80010cc <wc_Sha256Final>
#endif /* WOLFBOOT_TPM && WOLFBOOT_HASH_TPM */
}
 800049a:	bf00      	nop
 800049c:	b021      	add	sp, #132	; 0x84
 800049e:	f85d fb04 	ldr.w	pc, [sp], #4
 80004a2:	bf00      	nop
 80004a4:	080052ac 	.word	0x080052ac
 80004a8:	0800526c 	.word	0x0800526c

080004ac <im2n>:
}

#endif /* WOLFBOOT_TPM */

static inline uint32_t im2n(uint32_t val)
{
 80004ac:	b082      	sub	sp, #8
 80004ae:	9001      	str	r0, [sp, #4]
    val = (((val & 0x000000FF) << 24) |
           ((val & 0x0000FF00) <<  8) |
           ((val & 0x00FF0000) >>  8) |
           ((val & 0xFF000000) >> 24));
#endif
  return val;
 80004b0:	9b01      	ldr	r3, [sp, #4]
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	b002      	add	sp, #8
 80004b6:	4770      	bx	lr

080004b8 <wolfBoot_image_size>:

uint32_t wolfBoot_image_size(uint8_t *image)
{
 80004b8:	b500      	push	{lr}
 80004ba:	b085      	sub	sp, #20
 80004bc:	9001      	str	r0, [sp, #4]
    uint32_t *size = (uint32_t *)(image + sizeof (uint32_t));
 80004be:	9b01      	ldr	r3, [sp, #4]
 80004c0:	3304      	adds	r3, #4
 80004c2:	9303      	str	r3, [sp, #12]
    return im2n(*size);
 80004c4:	9b03      	ldr	r3, [sp, #12]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ffef 	bl	80004ac <im2n>
 80004ce:	4603      	mov	r3, r0
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	b005      	add	sp, #20
 80004d4:	f85d fb04 	ldr.w	pc, [sp], #4

080004d8 <wolfBoot_open_image>:

int wolfBoot_open_image(struct wolfBoot_image *img, uint8_t part)
{
 80004d8:	b500      	push	{lr}
 80004da:	b085      	sub	sp, #20
 80004dc:	9001      	str	r0, [sp, #4]
 80004de:	460b      	mov	r3, r1
 80004e0:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32_t *magic;
    uint32_t *size;
    uint8_t *image;
    if (!img)
 80004e4:	9b01      	ldr	r3, [sp, #4]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d102      	bne.n	80004f0 <wolfBoot_open_image+0x18>
        return -1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ee:	e061      	b.n	80005b4 <wolfBoot_open_image+0xdc>

#ifdef EXT_FLASH
    hdr_cpy_done = 0; /* reset hdr "open" flag */
#endif

    memset(img, 0, sizeof(struct wolfBoot_image));
 80004f0:	2218      	movs	r2, #24
 80004f2:	2100      	movs	r1, #0
 80004f4:	9801      	ldr	r0, [sp, #4]
 80004f6:	f7ff fe2d 	bl	8000154 <memset>
    img->part = part;
 80004fa:	9b01      	ldr	r3, [sp, #4]
 80004fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000500:	751a      	strb	r2, [r3, #20]
    if (part == PART_SWAP) {
 8000502:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000506:	2b02      	cmp	r3, #2
 8000508:	d111      	bne.n	800052e <wolfBoot_open_image+0x56>
        img->hdr_ok = 1;
 800050a:	9a01      	ldr	r2, [sp, #4]
 800050c:	7d53      	ldrb	r3, [r2, #21]
 800050e:	f043 0301 	orr.w	r3, r3, #1
 8000512:	7553      	strb	r3, [r2, #21]
        img->hdr = (void*)WOLFBOOT_PARTITION_SWAP_ADDRESS;
 8000514:	9b01      	ldr	r3, [sp, #4]
 8000516:	4a29      	ldr	r2, [pc, #164]	; (80005bc <wolfBoot_open_image+0xe4>)
 8000518:	601a      	str	r2, [r3, #0]
        img->fw_base = img->hdr;
 800051a:	9b01      	ldr	r3, [sp, #4]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	9b01      	ldr	r3, [sp, #4]
 8000520:	60da      	str	r2, [r3, #12]
        img->fw_size = WOLFBOOT_SECTOR_SIZE;
 8000522:	9b01      	ldr	r3, [sp, #4]
 8000524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000528:	611a      	str	r2, [r3, #16]
        return 0;
 800052a:	2300      	movs	r3, #0
 800052c:	e042      	b.n	80005b4 <wolfBoot_open_image+0xdc>
                        ((*size & 0x00FF0000) >>  8) |
                        ((*size & 0xFF000000) >> 24));
        return 0;
    }
#endif
    if (part == PART_BOOT) {
 800052e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d103      	bne.n	800053e <wolfBoot_open_image+0x66>
        img->hdr = (void*)WOLFBOOT_PARTITION_BOOT_ADDRESS;
 8000536:	9b01      	ldr	r3, [sp, #4]
 8000538:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <wolfBoot_open_image+0xe8>)
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	e00a      	b.n	8000554 <wolfBoot_open_image+0x7c>
    } else if (part == PART_UPDATE) {
 800053e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d103      	bne.n	800054e <wolfBoot_open_image+0x76>
        img->hdr = (void*)WOLFBOOT_PARTITION_UPDATE_ADDRESS;
 8000546:	9b01      	ldr	r3, [sp, #4]
 8000548:	4a1e      	ldr	r2, [pc, #120]	; (80005c4 <wolfBoot_open_image+0xec>)
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	e002      	b.n	8000554 <wolfBoot_open_image+0x7c>
    } else
        return -1;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000552:	e02f      	b.n	80005b4 <wolfBoot_open_image+0xdc>
     * (or copy from external device to a local buffer via fetch_hdr_cpy)
     */
    if (PART_IS_EXT(img))
        image = fetch_hdr_cpy(img);
    else
        image = (uint8_t *)img->hdr;
 8000554:	9b01      	ldr	r3, [sp, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	9303      	str	r3, [sp, #12]

    magic = (uint32_t *)(image);
 800055a:	9b03      	ldr	r3, [sp, #12]
 800055c:	9302      	str	r3, [sp, #8]
    if (*magic != WOLFBOOT_MAGIC)
 800055e:	9b02      	ldr	r3, [sp, #8]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a19      	ldr	r2, [pc, #100]	; (80005c8 <wolfBoot_open_image+0xf0>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d002      	beq.n	800056e <wolfBoot_open_image+0x96>
        return -1;
 8000568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800056c:	e022      	b.n	80005b4 <wolfBoot_open_image+0xdc>
    img->fw_size = wolfBoot_image_size(image);
 800056e:	9803      	ldr	r0, [sp, #12]
 8000570:	f7ff ffa2 	bl	80004b8 <wolfBoot_image_size>
 8000574:	4602      	mov	r2, r0
 8000576:	9b01      	ldr	r3, [sp, #4]
 8000578:	611a      	str	r2, [r3, #16]
    if (img->fw_size > (WOLFBOOT_PARTITION_SIZE - IMAGE_HEADER_SIZE)) {
 800057a:	9b01      	ldr	r3, [sp, #4]
 800057c:	691b      	ldr	r3, [r3, #16]
 800057e:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
 8000582:	d905      	bls.n	8000590 <wolfBoot_open_image+0xb8>
        img->fw_size = 0;
 8000584:	9b01      	ldr	r3, [sp, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
        return -1;
 800058a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058e:	e011      	b.n	80005b4 <wolfBoot_open_image+0xdc>
    }
    img->hdr_ok = 1;
 8000590:	9a01      	ldr	r2, [sp, #4]
 8000592:	7d53      	ldrb	r3, [r2, #21]
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	7553      	strb	r3, [r2, #21]
    img->fw_base = img->hdr + IMAGE_HEADER_SIZE;
 800059a:	9b01      	ldr	r3, [sp, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80005a2:	9b01      	ldr	r3, [sp, #4]
 80005a4:	60da      	str	r2, [r3, #12]
    img->trailer = img->hdr + WOLFBOOT_PARTITION_SIZE;
 80005a6:	9b01      	ldr	r3, [sp, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80005ae:	9b01      	ldr	r3, [sp, #4]
 80005b0:	605a      	str	r2, [r3, #4]
    return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	b005      	add	sp, #20
 80005b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80005bc:	08018000 	.word	0x08018000
 80005c0:	08008000 	.word	0x08008000
 80005c4:	08010000 	.word	0x08010000
 80005c8:	464c4f57 	.word	0x464c4f57

080005cc <wolfBoot_verify_integrity>:

int wolfBoot_verify_integrity(struct wolfBoot_image *img)
{
 80005cc:	b500      	push	{lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	9001      	str	r0, [sp, #4]
    uint8_t *stored_sha;
    uint16_t stored_sha_len;
    stored_sha_len = get_header(img, WOLFBOOT_SHA_HDR, &stored_sha);
 80005d2:	ab02      	add	r3, sp, #8
 80005d4:	461a      	mov	r2, r3
 80005d6:	2103      	movs	r1, #3
 80005d8:	9801      	ldr	r0, [sp, #4]
 80005da:	f7ff fe8d 	bl	80002f8 <get_header>
 80005de:	4603      	mov	r3, r0
 80005e0:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (stored_sha_len != WOLFBOOT_SHA_DIGEST_SIZE)
 80005e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80005e8:	2b20      	cmp	r3, #32
 80005ea:	d002      	beq.n	80005f2 <wolfBoot_verify_integrity+0x26>
        return -1;
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f0:	e01f      	b.n	8000632 <wolfBoot_verify_integrity+0x66>
    if (image_hash(img, digest) != 0)
 80005f2:	4912      	ldr	r1, [pc, #72]	; (800063c <wolfBoot_verify_integrity+0x70>)
 80005f4:	9801      	ldr	r0, [sp, #4]
 80005f6:	f7ff feac 	bl	8000352 <image_sha256>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <wolfBoot_verify_integrity+0x3a>
        return -1;
 8000600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000604:	e015      	b.n	8000632 <wolfBoot_verify_integrity+0x66>
     * of a Measured Boot is to record the current boot state
     */
    if (measure_boot(digest) != 0)
        return -1;
#endif
    if (memcmp(digest, stored_sha, stored_sha_len) != 0)
 8000606:	9b02      	ldr	r3, [sp, #8]
 8000608:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800060c:	4619      	mov	r1, r3
 800060e:	480b      	ldr	r0, [pc, #44]	; (800063c <wolfBoot_verify_integrity+0x70>)
 8000610:	f7ff fde6 	bl	80001e0 <memcmp>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <wolfBoot_verify_integrity+0x54>
        return -1;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061e:	e008      	b.n	8000632 <wolfBoot_verify_integrity+0x66>
    img->sha_ok = 1;
 8000620:	9a01      	ldr	r2, [sp, #4]
 8000622:	7d53      	ldrb	r3, [r2, #21]
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	7553      	strb	r3, [r2, #21]
    img->sha_hash = stored_sha;
 800062a:	9a02      	ldr	r2, [sp, #8]
 800062c:	9b01      	ldr	r3, [sp, #4]
 800062e:	609a      	str	r2, [r3, #8]
    return 0;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	b005      	add	sp, #20
 8000636:	f85d fb04 	ldr.w	pc, [sp], #4
 800063a:	bf00      	nop
 800063c:	20000be0 	.word	0x20000be0

08000640 <wolfBoot_verify_authenticity>:
{
    return 0;
}
#else
int wolfBoot_verify_authenticity(struct wolfBoot_image *img)
{
 8000640:	b500      	push	{lr}
 8000642:	b089      	sub	sp, #36	; 0x24
 8000644:	9001      	str	r0, [sp, #4]
    uint16_t pubkey_hint_size;
    uint8_t *image_type_buf;
    uint16_t image_type;
    uint16_t image_type_size;

    stored_signature_size = get_header(img, HDR_SIGNATURE, &stored_signature);
 8000646:	ab05      	add	r3, sp, #20
 8000648:	461a      	mov	r2, r3
 800064a:	2120      	movs	r1, #32
 800064c:	9801      	ldr	r0, [sp, #4]
 800064e:	f7ff fe53 	bl	80002f8 <get_header>
 8000652:	4603      	mov	r3, r0
 8000654:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (stored_signature_size != IMAGE_SIGNATURE_SIZE)
 8000658:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800065c:	2b40      	cmp	r3, #64	; 0x40
 800065e:	d002      	beq.n	8000666 <wolfBoot_verify_authenticity+0x26>
       return -1;
 8000660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000664:	e062      	b.n	800072c <wolfBoot_verify_authenticity+0xec>
    pubkey_hint_size = get_header(img, HDR_PUBKEY, &pubkey_hint);
 8000666:	ab04      	add	r3, sp, #16
 8000668:	461a      	mov	r2, r3
 800066a:	2110      	movs	r1, #16
 800066c:	9801      	ldr	r0, [sp, #4]
 800066e:	f7ff fe43 	bl	80002f8 <get_header>
 8000672:	4603      	mov	r3, r0
 8000674:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (pubkey_hint_size == WOLFBOOT_SHA_DIGEST_SIZE) {
 8000678:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800067c:	2b20      	cmp	r3, #32
 800067e:	d10e      	bne.n	800069e <wolfBoot_verify_authenticity+0x5e>
        key_hash(digest);
 8000680:	482c      	ldr	r0, [pc, #176]	; (8000734 <wolfBoot_verify_authenticity+0xf4>)
 8000682:	f7ff fedb 	bl	800043c <key_sha256>
        if (memcmp(digest, pubkey_hint, WOLFBOOT_SHA_DIGEST_SIZE) != 0)
 8000686:	9b04      	ldr	r3, [sp, #16]
 8000688:	2220      	movs	r2, #32
 800068a:	4619      	mov	r1, r3
 800068c:	4829      	ldr	r0, [pc, #164]	; (8000734 <wolfBoot_verify_authenticity+0xf4>)
 800068e:	f7ff fda7 	bl	80001e0 <memcmp>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <wolfBoot_verify_authenticity+0x5e>
            return -1;
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069c:	e046      	b.n	800072c <wolfBoot_verify_authenticity+0xec>
    }
    image_type_size = get_header(img, HDR_IMG_TYPE, &image_type_buf);
 800069e:	ab03      	add	r3, sp, #12
 80006a0:	461a      	mov	r2, r3
 80006a2:	2104      	movs	r1, #4
 80006a4:	9801      	ldr	r0, [sp, #4]
 80006a6:	f7ff fe27 	bl	80002f8 <get_header>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f8ad 301a 	strh.w	r3, [sp, #26]
    if (image_type_size != sizeof(uint16_t))
 80006b0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d002      	beq.n	80006be <wolfBoot_verify_authenticity+0x7e>
            return -1;
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006bc:	e036      	b.n	800072c <wolfBoot_verify_authenticity+0xec>
    image_type = (uint16_t)(image_type_buf[0] + (image_type_buf[1] << 8));
 80006be:	9b03      	ldr	r3, [sp, #12]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	9b03      	ldr	r3, [sp, #12]
 80006c6:	3301      	adds	r3, #1
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4413      	add	r3, r2
 80006d2:	f8ad 3018 	strh.w	r3, [sp, #24]
    if ((image_type & 0xFF00) != HDR_IMG_TYPE_AUTH)
 80006d6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80006da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80006de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006e2:	d002      	beq.n	80006ea <wolfBoot_verify_authenticity+0xaa>
        return -1;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e8:	e020      	b.n	800072c <wolfBoot_verify_authenticity+0xec>
    if (img->sha_hash == NULL) {
 80006ea:	9b01      	ldr	r3, [sp, #4]
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d10c      	bne.n	800070c <wolfBoot_verify_authenticity+0xcc>
        if (image_hash(img, digest) != 0)
 80006f2:	4910      	ldr	r1, [pc, #64]	; (8000734 <wolfBoot_verify_authenticity+0xf4>)
 80006f4:	9801      	ldr	r0, [sp, #4]
 80006f6:	f7ff fe2c 	bl	8000352 <image_sha256>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <wolfBoot_verify_authenticity+0xc6>
            return -1;
 8000700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000704:	e012      	b.n	800072c <wolfBoot_verify_authenticity+0xec>
        img->sha_hash = digest;
 8000706:	9b01      	ldr	r3, [sp, #4]
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <wolfBoot_verify_authenticity+0xf4>)
 800070a:	609a      	str	r2, [r3, #8]
     *
     * only a call to wolfBoot_image_confirm_signature_ok() sets
     * img->signature_ok to 1.
     *
     */
    wolfBoot_verify_signature(img, stored_signature);
 800070c:	9b05      	ldr	r3, [sp, #20]
 800070e:	4619      	mov	r1, r3
 8000710:	9801      	ldr	r0, [sp, #4]
 8000712:	f7ff fd95 	bl	8000240 <wolfBoot_verify_signature>
    if (img->signature_ok == 1)
 8000716:	9b01      	ldr	r3, [sp, #4]
 8000718:	7d5b      	ldrb	r3, [r3, #21]
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <wolfBoot_verify_authenticity+0xe8>
        return 0;
 8000724:	2300      	movs	r3, #0
 8000726:	e001      	b.n	800072c <wolfBoot_verify_authenticity+0xec>
    return -2;
 8000728:	f06f 0301 	mvn.w	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	b009      	add	sp, #36	; 0x24
 8000730:	f85d fb04 	ldr.w	pc, [sp], #4
 8000734:	20000be0 	.word	0x20000be0

08000738 <wolfBoot_get_update_sector_flag>:
    *st = *state;
    return 0;
}

int wolfBoot_get_update_sector_flag(uint16_t sector, uint8_t *flag)
{
 8000738:	b500      	push	{lr}
 800073a:	b087      	sub	sp, #28
 800073c:	4603      	mov	r3, r0
 800073e:	9100      	str	r1, [sp, #0]
 8000740:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint32_t *magic;
    uint8_t *flags;
    uint8_t pos = sector >> 1;
 8000744:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000748:	085b      	lsrs	r3, r3, #1
 800074a:	b29b      	uxth	r3, r3
 800074c:	f88d 3017 	strb.w	r3, [sp, #23]
    magic = get_partition_magic(PART_UPDATE);
 8000750:	2001      	movs	r0, #1
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <wolfBoot_get_update_sector_flag+0x70>)
 8000754:	4798      	blx	r3
 8000756:	9004      	str	r0, [sp, #16]
    if (*magic != WOLFBOOT_MAGIC_TRAIL)
 8000758:	9b04      	ldr	r3, [sp, #16]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <wolfBoot_get_update_sector_flag+0x74>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d002      	beq.n	8000768 <wolfBoot_get_update_sector_flag+0x30>
        return -1;
 8000762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000766:	e01b      	b.n	80007a0 <wolfBoot_get_update_sector_flag+0x68>
    flags = get_update_sector_flags(pos);
 8000768:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800076c:	4618      	mov	r0, r3
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <wolfBoot_get_update_sector_flag+0x78>)
 8000770:	4798      	blx	r3
 8000772:	9003      	str	r0, [sp, #12]
    if (sector == (pos << 1))
 8000774:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000778:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	429a      	cmp	r2, r3
 8000780:	d107      	bne.n	8000792 <wolfBoot_get_update_sector_flag+0x5a>
        *flag = *flags & 0x0F;
 8000782:	9b03      	ldr	r3, [sp, #12]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f003 030f 	and.w	r3, r3, #15
 800078a:	b2da      	uxtb	r2, r3
 800078c:	9b00      	ldr	r3, [sp, #0]
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	e005      	b.n	800079e <wolfBoot_get_update_sector_flag+0x66>
    else
        *flag = (*flags & 0xF0) >> 4;
 8000792:	9b03      	ldr	r3, [sp, #12]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	091b      	lsrs	r3, r3, #4
 8000798:	b2da      	uxtb	r2, r3
 800079a:	9b00      	ldr	r3, [sp, #0]
 800079c:	701a      	strb	r2, [r3, #0]
    return 0;
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	b007      	add	sp, #28
 80007a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80007a8:	200003d9 	.word	0x200003d9
 80007ac:	544f4f42 	.word	0x544f4f42
 80007b0:	20000467 	.word	0x20000467

080007b4 <wolfBoot_find_header>:
    wolfBoot_erase_encrypt_key();
#endif
}

uint16_t wolfBoot_find_header(uint8_t *haystack, uint16_t type, uint8_t **ptr)
{
 80007b4:	b088      	sub	sp, #32
 80007b6:	9003      	str	r0, [sp, #12]
 80007b8:	460b      	mov	r3, r1
 80007ba:	9201      	str	r2, [sp, #4]
 80007bc:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8_t *p = haystack;
 80007c0:	9b03      	ldr	r3, [sp, #12]
 80007c2:	9307      	str	r3, [sp, #28]
    uint16_t len;
    const volatile uint8_t *max_p = (haystack - IMAGE_HEADER_OFFSET) + IMAGE_HEADER_SIZE;
 80007c4:	9b03      	ldr	r3, [sp, #12]
 80007c6:	33f8      	adds	r3, #248	; 0xf8
 80007c8:	9306      	str	r3, [sp, #24]
    *ptr = NULL;
 80007ca:	9b01      	ldr	r3, [sp, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
    if (p > max_p) {
 80007d0:	9a07      	ldr	r2, [sp, #28]
 80007d2:	9b06      	ldr	r3, [sp, #24]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d94e      	bls.n	8000876 <wolfBoot_find_header+0xc2>
        unit_dbg("Illegal address (too high)\n");
        return 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	e058      	b.n	800088e <wolfBoot_find_header+0xda>
    }
    while ((p + 4) < max_p) {
        if ((p[0] == 0) && (p[1] == 0)) {
 80007dc:	9b07      	ldr	r3, [sp, #28]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d104      	bne.n	80007ee <wolfBoot_find_header+0x3a>
 80007e4:	9b07      	ldr	r3, [sp, #28]
 80007e6:	3301      	adds	r3, #1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d049      	beq.n	8000882 <wolfBoot_find_header+0xce>
            unit_dbg("Explicit end of options reached\n");
            break;
        }
        if (*p == HDR_PADDING) {
 80007ee:	9b07      	ldr	r3, [sp, #28]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2bff      	cmp	r3, #255	; 0xff
 80007f4:	d103      	bne.n	80007fe <wolfBoot_find_header+0x4a>
            /* Padding byte (skip one position) */
            p++;
 80007f6:	9b07      	ldr	r3, [sp, #28]
 80007f8:	3301      	adds	r3, #1
 80007fa:	9307      	str	r3, [sp, #28]
            continue;
 80007fc:	e03b      	b.n	8000876 <wolfBoot_find_header+0xc2>
        }
        /* Sanity check to prevent dereferencing unaligned half-words */
        if ((((unsigned long)p) & 0x01) != 0) {
 80007fe:	9b07      	ldr	r3, [sp, #28]
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d003      	beq.n	8000810 <wolfBoot_find_header+0x5c>
            p++;
 8000808:	9b07      	ldr	r3, [sp, #28]
 800080a:	3301      	adds	r3, #1
 800080c:	9307      	str	r3, [sp, #28]
            continue;
 800080e:	e032      	b.n	8000876 <wolfBoot_find_header+0xc2>
        }
        len = p[2] | (p[3] << 8);
 8000810:	9b07      	ldr	r3, [sp, #28]
 8000812:	3302      	adds	r3, #2
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21a      	sxth	r2, r3
 8000818:	9b07      	ldr	r3, [sp, #28]
 800081a:	3303      	adds	r3, #3
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((4 + len) > (uint16_t)(IMAGE_HEADER_SIZE - IMAGE_HEADER_OFFSET)) {
 800082a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800082e:	2bf4      	cmp	r3, #244	; 0xf4
 8000830:	d829      	bhi.n	8000886 <wolfBoot_find_header+0xd2>
            unit_dbg("This field is too large (bigger than the space available in the current header)\n");
            break;
        }
        if (p + 4 + len > max_p) {
 8000832:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8000836:	3304      	adds	r3, #4
 8000838:	9a07      	ldr	r2, [sp, #28]
 800083a:	4413      	add	r3, r2
 800083c:	9a06      	ldr	r2, [sp, #24]
 800083e:	429a      	cmp	r2, r3
 8000840:	d323      	bcc.n	800088a <wolfBoot_find_header+0xd6>
            unit_dbg("This field is too large and would overflow the image header\n");
            break;
        }
        if ((p[0] | (p[1] << 8)) == type) {
 8000842:	9b07      	ldr	r3, [sp, #28]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	9b07      	ldr	r3, [sp, #28]
 800084a:	3301      	adds	r3, #1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	431a      	orrs	r2, r3
 8000852:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8000856:	429a      	cmp	r2, r3
 8000858:	d106      	bne.n	8000868 <wolfBoot_find_header+0xb4>
            *ptr = (p + 4);
 800085a:	9b07      	ldr	r3, [sp, #28]
 800085c:	1d1a      	adds	r2, r3, #4
 800085e:	9b01      	ldr	r3, [sp, #4]
 8000860:	601a      	str	r2, [r3, #0]
            return len;
 8000862:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8000866:	e012      	b.n	800088e <wolfBoot_find_header+0xda>
        }
        p += 4 + len;
 8000868:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800086c:	3304      	adds	r3, #4
 800086e:	461a      	mov	r2, r3
 8000870:	9b07      	ldr	r3, [sp, #28]
 8000872:	4413      	add	r3, r2
 8000874:	9307      	str	r3, [sp, #28]
    while ((p + 4) < max_p) {
 8000876:	9b07      	ldr	r3, [sp, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	9a06      	ldr	r2, [sp, #24]
 800087c:	429a      	cmp	r2, r3
 800087e:	d8ad      	bhi.n	80007dc <wolfBoot_find_header+0x28>
 8000880:	e004      	b.n	800088c <wolfBoot_find_header+0xd8>
            break;
 8000882:	bf00      	nop
 8000884:	e002      	b.n	800088c <wolfBoot_find_header+0xd8>
            break;
 8000886:	bf00      	nop
 8000888:	e000      	b.n	800088c <wolfBoot_find_header+0xd8>
            break;
 800088a:	bf00      	nop
    }
    return 0;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	b008      	add	sp, #32
 8000892:	4770      	bx	lr

08000894 <im2n>:
static uint8_t hdr_cpy[IMAGE_HEADER_SIZE];
static uint32_t hdr_cpy_done = 0;
#endif

static inline uint32_t im2n(uint32_t val)
{
 8000894:	b082      	sub	sp, #8
 8000896:	9001      	str	r0, [sp, #4]
    val = (((val & 0x000000FF) << 24) |
           ((val & 0x0000FF00) <<  8) |
           ((val & 0x00FF0000) >>  8) |
           ((val & 0xFF000000) >> 24));
#endif
  return val;
 8000898:	9b01      	ldr	r3, [sp, #4]
}
 800089a:	4618      	mov	r0, r3
 800089c:	b002      	add	sp, #8
 800089e:	4770      	bx	lr

080008a0 <im2ns>:


static inline uint16_t im2ns(uint16_t val)
{
 80008a0:	b082      	sub	sp, #8
 80008a2:	4603      	mov	r3, r0
 80008a4:	f8ad 3006 	strh.w	r3, [sp, #6]
#ifdef BIG_ENDIAN_ORDER
    val = (((val & 0x000000FF) << 8) |
           ((val & 0x0000FF00) >>  8));
#endif
  return val;
 80008a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	b002      	add	sp, #8
 80008b0:	4770      	bx	lr
	...

080008b4 <wolfBoot_get_blob_version>:
    return 0;
}
#endif

uint32_t wolfBoot_get_blob_version(uint8_t *blob)
{
 80008b4:	b500      	push	{lr}
 80008b6:	b085      	sub	sp, #20
 80008b8:	9001      	str	r0, [sp, #4]
    uint32_t *version_field = NULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	9302      	str	r3, [sp, #8]
    uint32_t *magic = NULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	9303      	str	r3, [sp, #12]
    magic = (uint32_t *)blob;
 80008c2:	9b01      	ldr	r3, [sp, #4]
 80008c4:	9303      	str	r3, [sp, #12]
    if (*magic != WOLFBOOT_MAGIC)
 80008c6:	9b03      	ldr	r3, [sp, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <wolfBoot_get_blob_version+0x58>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d001      	beq.n	80008d4 <wolfBoot_get_blob_version+0x20>
        return 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	e016      	b.n	8000902 <wolfBoot_get_blob_version+0x4e>
    if (wolfBoot_find_header(blob + IMAGE_HEADER_OFFSET, HDR_VERSION, (void *)&version_field) == 0)
 80008d4:	9b01      	ldr	r3, [sp, #4]
 80008d6:	3308      	adds	r3, #8
 80008d8:	aa02      	add	r2, sp, #8
 80008da:	2101      	movs	r1, #1
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff69 	bl	80007b4 <wolfBoot_find_header>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <wolfBoot_get_blob_version+0x38>
        return 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	e00a      	b.n	8000902 <wolfBoot_get_blob_version+0x4e>
    if (version_field)
 80008ec:	9b02      	ldr	r3, [sp, #8]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d006      	beq.n	8000900 <wolfBoot_get_blob_version+0x4c>
        return im2n(*version_field);
 80008f2:	9b02      	ldr	r3, [sp, #8]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffcc 	bl	8000894 <im2n>
 80008fc:	4603      	mov	r3, r0
 80008fe:	e000      	b.n	8000902 <wolfBoot_get_blob_version+0x4e>
    return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	b005      	add	sp, #20
 8000906:	f85d fb04 	ldr.w	pc, [sp], #4
 800090a:	bf00      	nop
 800090c:	464c4f57 	.word	0x464c4f57

08000910 <wolfBoot_get_image_version>:


uint32_t wolfBoot_get_image_version(uint8_t part)
{
 8000910:	b500      	push	{lr}
 8000912:	b085      	sub	sp, #20
 8000914:	4603      	mov	r3, r0
 8000916:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t *image = (uint8_t *)0x00000000;
 800091a:	2300      	movs	r3, #0
 800091c:	9303      	str	r3, [sp, #12]
    if(part == PART_UPDATE) {
 800091e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d102      	bne.n	800092c <wolfBoot_get_image_version+0x1c>
            ext_flash_check_read((uintptr_t)WOLFBOOT_PARTITION_UPDATE_ADDRESS, hdr_cpy, IMAGE_HEADER_SIZE);
            hdr_cpy_done = 1;
            image = hdr_cpy;
    #endif
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_UPDATE_ADDRESS;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <wolfBoot_get_image_version+0x38>)
 8000928:	9303      	str	r3, [sp, #12]
 800092a:	e005      	b.n	8000938 <wolfBoot_get_image_version+0x28>
        }
    } else if (part == PART_BOOT) {
 800092c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d101      	bne.n	8000938 <wolfBoot_get_image_version+0x28>
            ext_flash_check_read((uintptr_t)WOLFBOOT_PARTITION_BOOT_ADDRESS, hdr_cpy, IMAGE_HEADER_SIZE);
            hdr_cpy_done = 1;
            image = hdr_cpy;
    #endif
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_BOOT_ADDRESS;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <wolfBoot_get_image_version+0x3c>)
 8000936:	9303      	str	r3, [sp, #12]
        }
    }
    /* Don't check image against NULL to allow using address 0x00000000 */
    return wolfBoot_get_blob_version(image);
 8000938:	9803      	ldr	r0, [sp, #12]
 800093a:	f7ff ffbb 	bl	80008b4 <wolfBoot_get_blob_version>
 800093e:	4603      	mov	r3, r0
}
 8000940:	4618      	mov	r0, r3
 8000942:	b005      	add	sp, #20
 8000944:	f85d fb04 	ldr.w	pc, [sp], #4
 8000948:	08010000 	.word	0x08010000
 800094c:	08008000 	.word	0x08008000

08000950 <wolfBoot_get_image_type>:
    /* Don't check image against NULL to allow using address 0x00000000 */
    return wolfBoot_get_blob_diffbase_version(image);
}

uint16_t wolfBoot_get_image_type(uint8_t part)
{
 8000950:	b500      	push	{lr}
 8000952:	b087      	sub	sp, #28
 8000954:	4603      	mov	r3, r0
 8000956:	f88d 3007 	strb.w	r3, [sp, #7]
    uint16_t *type_field = NULL;
 800095a:	2300      	movs	r3, #0
 800095c:	9303      	str	r3, [sp, #12]
    uint8_t *image = NULL;
 800095e:	2300      	movs	r3, #0
 8000960:	9305      	str	r3, [sp, #20]
    uint32_t *magic = NULL;
 8000962:	2300      	movs	r3, #0
 8000964:	9304      	str	r3, [sp, #16]
    if(part == PART_UPDATE) {
 8000966:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d102      	bne.n	8000974 <wolfBoot_get_image_type+0x24>
            ext_flash_check_read((uintptr_t)WOLFBOOT_PARTITION_UPDATE_ADDRESS, hdr_cpy, IMAGE_HEADER_SIZE);
            hdr_cpy_done = 1;
            image = hdr_cpy;
    #endif
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_UPDATE_ADDRESS;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <wolfBoot_get_image_type+0x80>)
 8000970:	9305      	str	r3, [sp, #20]
 8000972:	e005      	b.n	8000980 <wolfBoot_get_image_type+0x30>
        }
    } else if (part == PART_BOOT) {
 8000974:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d101      	bne.n	8000980 <wolfBoot_get_image_type+0x30>
            ext_flash_check_read((uintptr_t)WOLFBOOT_PARTITION_BOOT_ADDRESS, hdr_cpy, IMAGE_HEADER_SIZE);
            hdr_cpy_done = 1;
            image = hdr_cpy;
    #endif
        } else {
            image = (uint8_t *)WOLFBOOT_PARTITION_BOOT_ADDRESS;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <wolfBoot_get_image_type+0x84>)
 800097e:	9305      	str	r3, [sp, #20]
        }
    }

    if (image) {
 8000980:	9b05      	ldr	r3, [sp, #20]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d01e      	beq.n	80009c4 <wolfBoot_get_image_type+0x74>
        magic = (uint32_t *)image;
 8000986:	9b05      	ldr	r3, [sp, #20]
 8000988:	9304      	str	r3, [sp, #16]
        if (*magic != WOLFBOOT_MAGIC)
 800098a:	9b04      	ldr	r3, [sp, #16]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <wolfBoot_get_image_type+0x88>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d001      	beq.n	8000998 <wolfBoot_get_image_type+0x48>
            return 0;
 8000994:	2300      	movs	r3, #0
 8000996:	e016      	b.n	80009c6 <wolfBoot_get_image_type+0x76>
        if (wolfBoot_find_header(image + IMAGE_HEADER_OFFSET, HDR_IMG_TYPE, (void *)&type_field) == 0)
 8000998:	9b05      	ldr	r3, [sp, #20]
 800099a:	3308      	adds	r3, #8
 800099c:	aa03      	add	r2, sp, #12
 800099e:	2104      	movs	r1, #4
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff07 	bl	80007b4 <wolfBoot_find_header>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d101      	bne.n	80009b0 <wolfBoot_get_image_type+0x60>
            return 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	e00a      	b.n	80009c6 <wolfBoot_get_image_type+0x76>
        if (type_field)
 80009b0:	9b03      	ldr	r3, [sp, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d006      	beq.n	80009c4 <wolfBoot_get_image_type+0x74>
            return im2ns(*type_field);
 80009b6:	9b03      	ldr	r3, [sp, #12]
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff70 	bl	80008a0 <im2ns>
 80009c0:	4603      	mov	r3, r0
 80009c2:	e000      	b.n	80009c6 <wolfBoot_get_image_type+0x76>
    }

    return 0;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	b007      	add	sp, #28
 80009ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80009ce:	bf00      	nop
 80009d0:	08010000 	.word	0x08010000
 80009d4:	08008000 	.word	0x08008000
 80009d8:	464c4f57 	.word	0x464c4f57

080009dc <wolfBoot_panic>:
 80009dc:	e7fe      	b.n	80009dc <wolfBoot_panic>
	...

080009e0 <mpu_setaddr>:
{
 80009e0:	b082      	sub	sp, #8
 80009e2:	9001      	str	r0, [sp, #4]
 80009e4:	9100      	str	r1, [sp, #0]
    MPU_RNR = region;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <mpu_setaddr+0x18>)
 80009e8:	9b01      	ldr	r3, [sp, #4]
 80009ea:	6013      	str	r3, [r2, #0]
    MPU_RBAR = addr;
 80009ec:	4a03      	ldr	r2, [pc, #12]	; (80009fc <mpu_setaddr+0x1c>)
 80009ee:	9b00      	ldr	r3, [sp, #0]
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	b002      	add	sp, #8
 80009f6:	4770      	bx	lr
 80009f8:	e000ed98 	.word	0xe000ed98
 80009fc:	e000ed9c 	.word	0xe000ed9c

08000a00 <mpu_setattr>:
{
 8000a00:	b082      	sub	sp, #8
 8000a02:	9001      	str	r0, [sp, #4]
 8000a04:	9100      	str	r1, [sp, #0]
    MPU_RNR = region;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <mpu_setattr+0x18>)
 8000a08:	9b01      	ldr	r3, [sp, #4]
 8000a0a:	6013      	str	r3, [r2, #0]
    MPU_RASR = attr;
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <mpu_setattr+0x1c>)
 8000a0e:	9b00      	ldr	r3, [sp, #0]
 8000a10:	6013      	str	r3, [r2, #0]
}
 8000a12:	bf00      	nop
 8000a14:	b002      	add	sp, #8
 8000a16:	4770      	bx	lr
 8000a18:	e000ed98 	.word	0xe000ed98
 8000a1c:	e000eda0 	.word	0xe000eda0

08000a20 <mpu_on>:
    if (mpu_is_on)
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <mpu_on+0x28>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10a      	bne.n	8000a3e <mpu_on+0x1e>
    if (MPU_TYPE == 0)
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <mpu_on+0x2c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d008      	beq.n	8000a42 <mpu_on+0x22>
    MPU_CTRL = 1;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <mpu_on+0x30>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
    mpu_is_on = 1;
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <mpu_on+0x28>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	4770      	bx	lr
        return;
 8000a3e:	bf00      	nop
 8000a40:	4770      	bx	lr
        return;
 8000a42:	bf00      	nop
}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000c00 	.word	0x20000c00
 8000a4c:	e000ed90 	.word	0xe000ed90
 8000a50:	e000ed94 	.word	0xe000ed94

08000a54 <mpusize>:
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	9001      	str	r0, [sp, #4]
    if (size <= (8 * 1024))
 8000a58:	9b01      	ldr	r3, [sp, #4]
 8000a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a5e:	d801      	bhi.n	8000a64 <mpusize+0x10>
        return MPUSIZE_8K;
 8000a60:	2318      	movs	r3, #24
 8000a62:	e013      	b.n	8000a8c <mpusize+0x38>
    if (size <= (16 * 1024))
 8000a64:	9b01      	ldr	r3, [sp, #4]
 8000a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a6a:	d801      	bhi.n	8000a70 <mpusize+0x1c>
        return MPUSIZE_16K;
 8000a6c:	231a      	movs	r3, #26
 8000a6e:	e00d      	b.n	8000a8c <mpusize+0x38>
    if (size <= (32 * 1024))
 8000a70:	9b01      	ldr	r3, [sp, #4]
 8000a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a76:	d801      	bhi.n	8000a7c <mpusize+0x28>
        return MPUSIZE_32K;
 8000a78:	231c      	movs	r3, #28
 8000a7a:	e007      	b.n	8000a8c <mpusize+0x38>
    if (size <= (64 * 1024))
 8000a7c:	9b01      	ldr	r3, [sp, #4]
 8000a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a82:	d801      	bhi.n	8000a88 <mpusize+0x34>
        return MPUSIZE_64K;
 8000a84:	231e      	movs	r3, #30
 8000a86:	e001      	b.n	8000a8c <mpusize+0x38>
    return MPUSIZE_ERR;
 8000a88:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	b002      	add	sp, #8
 8000a90:	4770      	bx	lr
	...

08000a94 <mpu_init>:
{
 8000a94:	b500      	push	{lr}
 8000a96:	b085      	sub	sp, #20
    uint32_t wolfboot_flash_size = (uint32_t)&_stored_data -
 8000a98:	4a2a      	ldr	r2, [pc, #168]	; (8000b44 <mpu_init+0xb0>)
                                   (uint32_t)&_start_text;
 8000a9a:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <mpu_init+0xb4>)
    uint32_t wolfboot_flash_size = (uint32_t)&_stored_data -
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	9303      	str	r3, [sp, #12]
    uint32_t ram_base = (uint32_t)(&_start_data);
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <mpu_init+0xb8>)
 8000aa2:	9302      	str	r3, [sp, #8]
    uint32_t flash_base = (uint32_t)(&_start_text);
 8000aa4:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <mpu_init+0xb4>)
 8000aa6:	9301      	str	r3, [sp, #4]
    if (MPU_TYPE == 0)
 8000aa8:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <mpu_init+0xbc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d042      	beq.n	8000b36 <mpu_init+0xa2>
    mpu_setaddr(0, 0);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f7ff ff94 	bl	80009e0 <mpu_setaddr>
    mpu_setattr(0, MPUSIZE_4G | MPU_RASR_ENABLE | MPU_RASR_ATTR_SCB |
 8000ab8:	4926      	ldr	r1, [pc, #152]	; (8000b54 <mpu_init+0xc0>)
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff ffa0 	bl	8000a00 <mpu_setattr>
    wolfboot_mpusize = mpusize(wolfboot_flash_size);
 8000ac0:	9803      	ldr	r0, [sp, #12]
 8000ac2:	f7ff ffc7 	bl	8000a54 <mpusize>
 8000ac6:	9000      	str	r0, [sp, #0]
    if (wolfboot_mpusize == MPUSIZE_ERR)
 8000ac8:	9b00      	ldr	r3, [sp, #0]
 8000aca:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8000ace:	d034      	beq.n	8000b3a <mpu_init+0xa6>
    mpu_setaddr(1, flash_base);
 8000ad0:	9901      	ldr	r1, [sp, #4]
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f7ff ff84 	bl	80009e0 <mpu_setaddr>
    mpu_setattr(1, wolfboot_mpusize | MPU_RASR_ENABLE | MPU_RASR_ATTR_SCB |
 8000ad8:	9b00      	ldr	r3, [sp, #0]
 8000ada:	f043 7383 	orr.w	r3, r3, #17170432	; 0x1060000
 8000ade:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff ff8b 	bl	8000a00 <mpu_setattr>
    mpu_setaddr(2, ram_base);
 8000aea:	9902      	ldr	r1, [sp, #8]
 8000aec:	2002      	movs	r0, #2
 8000aee:	f7ff ff77 	bl	80009e0 <mpu_setaddr>
    mpu_setattr(2, MPUSIZE_64K | MPU_RASR_ENABLE | MPU_RASR_ATTR_SCB |
 8000af2:	4919      	ldr	r1, [pc, #100]	; (8000b58 <mpu_init+0xc4>)
 8000af4:	2002      	movs	r0, #2
 8000af6:	f7ff ff83 	bl	8000a00 <mpu_setattr>
    mpu_setaddr(5, 0x40000000);
 8000afa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000afe:	2005      	movs	r0, #5
 8000b00:	f7ff ff6e 	bl	80009e0 <mpu_setaddr>
    mpu_setattr(5, MPUSIZE_512M | MPU_RASR_ENABLE | MPU_RASR_ATTR_S |
 8000b04:	4915      	ldr	r1, [pc, #84]	; (8000b5c <mpu_init+0xc8>)
 8000b06:	2005      	movs	r0, #5
 8000b08:	f7ff ff7a 	bl	8000a00 <mpu_setattr>
    mpu_setaddr(6, 0xA0000000);
 8000b0c:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8000b10:	2006      	movs	r0, #6
 8000b12:	f7ff ff65 	bl	80009e0 <mpu_setaddr>
    mpu_setattr(6, MPUSIZE_1G | MPU_RASR_ENABLE | MPU_RASR_ATTR_S |
 8000b16:	4912      	ldr	r1, [pc, #72]	; (8000b60 <mpu_init+0xcc>)
 8000b18:	2006      	movs	r0, #6
 8000b1a:	f7ff ff71 	bl	8000a00 <mpu_setattr>
    mpu_setaddr(7, 0xE0000000);
 8000b1e:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 8000b22:	2007      	movs	r0, #7
 8000b24:	f7ff ff5c 	bl	80009e0 <mpu_setaddr>
    mpu_setattr(7, MPUSIZE_256M | MPU_RASR_ENABLE | MPU_RASR_ATTR_S |
 8000b28:	490e      	ldr	r1, [pc, #56]	; (8000b64 <mpu_init+0xd0>)
 8000b2a:	2007      	movs	r0, #7
 8000b2c:	f7ff ff68 	bl	8000a00 <mpu_setattr>
    mpu_on();
 8000b30:	f7ff ff76 	bl	8000a20 <mpu_on>
 8000b34:	e002      	b.n	8000b3c <mpu_init+0xa8>
        return;
 8000b36:	bf00      	nop
 8000b38:	e000      	b.n	8000b3c <mpu_init+0xa8>
        return;
 8000b3a:	bf00      	nop
}
 8000b3c:	b005      	add	sp, #20
 8000b3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b42:	bf00      	nop
 8000b44:	08005b48 	.word	0x08005b48
 8000b48:	08000000 	.word	0x08000000
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	e000ed90 	.word	0xe000ed90
 8000b54:	1107003f 	.word	0x1107003f
 8000b58:	0107001f 	.word	0x0107001f
 8000b5c:	11050039 	.word	0x11050039
 8000b60:	1105003b 	.word	0x1105003b
 8000b64:	11050037 	.word	0x11050037

08000b68 <isr_reset>:
void isr_reset(void) {
 8000b68:	b538      	push	{r3, r4, r5, lr}
    src = (unsigned int *) &_stored_data;
 8000b6a:	4d0c      	ldr	r5, [pc, #48]	; (8000b9c <isr_reset+0x34>)
    dst = (unsigned int *) &_start_data;
 8000b6c:	4c0c      	ldr	r4, [pc, #48]	; (8000ba0 <isr_reset+0x38>)
    while (dst < (unsigned int *)&_end_data) {
 8000b6e:	e003      	b.n	8000b78 <isr_reset+0x10>
        *dst = *src;
 8000b70:	682b      	ldr	r3, [r5, #0]
 8000b72:	6023      	str	r3, [r4, #0]
        dst++;
 8000b74:	3404      	adds	r4, #4
        src++;
 8000b76:	3504      	adds	r5, #4
    while (dst < (unsigned int *)&_end_data) {
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <isr_reset+0x3c>)
 8000b7a:	429c      	cmp	r4, r3
 8000b7c:	d3f8      	bcc.n	8000b70 <isr_reset+0x8>
    dst = &_start_bss;
 8000b7e:	4c0a      	ldr	r4, [pc, #40]	; (8000ba8 <isr_reset+0x40>)
    while (dst < (unsigned int *)&_end_bss) {
 8000b80:	e002      	b.n	8000b88 <isr_reset+0x20>
        *dst = 0U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	6023      	str	r3, [r4, #0]
        dst++;
 8000b86:	3404      	adds	r4, #4
    while (dst < (unsigned int *)&_end_bss) {
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <isr_reset+0x44>)
 8000b8a:	429c      	cmp	r4, r3
 8000b8c:	d3f9      	bcc.n	8000b82 <isr_reset+0x1a>
    mpu_init();
 8000b8e:	f7ff ff81 	bl	8000a94 <mpu_init>
    main();
 8000b92:	f7ff fad1 	bl	8000138 <main>
}
 8000b96:	bf00      	nop
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop
 8000b9c:	08005b48 	.word	0x08005b48
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000be0 	.word	0x20000be0
 8000ba8:	20000be0 	.word	0x20000be0
 8000bac:	20000c0c 	.word	0x20000c0c

08000bb0 <isr_fault>:
{
 8000bb0:	b508      	push	{r3, lr}
    wolfBoot_panic();
 8000bb2:	f7ff ff13 	bl	80009dc <wolfBoot_panic>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd08      	pop	{r3, pc}

08000bba <isr_empty>:
}
 8000bba:	bf00      	nop
 8000bbc:	4770      	bx	lr

08000bbe <wolfBoot_panic>:
 8000bbe:	e7fe      	b.n	8000bbe <wolfBoot_panic>

08000bc0 <wolfBoot_check_self_update>:
    hal_flash_lock();
    arch_reboot();
}

void wolfBoot_check_self_update(void)
{
 8000bc0:	b500      	push	{lr}
 8000bc2:	b089      	sub	sp, #36	; 0x24
    uint8_t st;
    struct wolfBoot_image update;

    /* Check for self update in the UPDATE partition */
    if ((wolfBoot_get_partition_state(PART_UPDATE, &st) == 0) && (st == IMG_STATE_UPDATING) &&
 8000bc4:	f10d 031b 	add.w	r3, sp, #27
 8000bc8:	4619      	mov	r1, r3
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f004 fb38 	bl	8005240 <__wolfBoot_get_partition_state_veneer>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d150      	bne.n	8000c78 <wolfBoot_check_self_update+0xb8>
 8000bd6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8000bda:	2b70      	cmp	r3, #112	; 0x70
 8000bdc:	d14c      	bne.n	8000c78 <wolfBoot_check_self_update+0xb8>
            (wolfBoot_open_image(&update, PART_UPDATE) == 0) &&
 8000bde:	466b      	mov	r3, sp
 8000be0:	2101      	movs	r1, #1
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fc78 	bl	80004d8 <wolfBoot_open_image>
 8000be8:	4603      	mov	r3, r0
    if ((wolfBoot_get_partition_state(PART_UPDATE, &st) == 0) && (st == IMG_STATE_UPDATING) &&
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d144      	bne.n	8000c78 <wolfBoot_check_self_update+0xb8>
            wolfBoot_get_image_type(PART_UPDATE) == (HDR_IMG_TYPE_WOLFBOOT | HDR_IMG_TYPE_AUTH)) {
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff feae 	bl	8000950 <wolfBoot_get_image_type>
 8000bf4:	4603      	mov	r3, r0
            (wolfBoot_open_image(&update, PART_UPDATE) == 0) &&
 8000bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bfa:	d13d      	bne.n	8000c78 <wolfBoot_check_self_update+0xb8>
        uint32_t update_version = wolfBoot_update_firmware_version();
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff fe87 	bl	8000910 <wolfBoot_get_image_version>
 8000c02:	9007      	str	r0, [sp, #28]
        if (update_version <= wolfboot_version) {
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <wolfBoot_check_self_update+0xc0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	9a07      	ldr	r2, [sp, #28]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d807      	bhi.n	8000c1e <wolfBoot_check_self_update+0x5e>
            hal_flash_unlock();
 8000c0e:	f004 fb1f 	bl	8005250 <__hal_flash_unlock_veneer>
            wolfBoot_erase_partition(PART_UPDATE);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f004 fb20 	bl	8005258 <__wolfBoot_erase_partition_veneer>
            hal_flash_lock();
 8000c18:	f004 fb22 	bl	8005260 <__hal_flash_lock_veneer>
            return;
 8000c1c:	e02c      	b.n	8000c78 <wolfBoot_check_self_update+0xb8>
        }
        if (wolfBoot_verify_integrity(&update) < 0)
 8000c1e:	466b      	mov	r3, sp
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fcd3 	bl	80005cc <wolfBoot_verify_integrity>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db22      	blt.n	8000c72 <wolfBoot_check_self_update+0xb2>
            return;
        if (wolfBoot_verify_authenticity(&update) < 0)
 8000c2c:	466b      	mov	r3, sp
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fd06 	bl	8000640 <wolfBoot_verify_authenticity>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1d      	blt.n	8000c76 <wolfBoot_check_self_update+0xb6>
            return;
        PART_SANITY_CHECK(&update);
 8000c3a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00d      	beq.n	8000c64 <wolfBoot_check_self_update+0xa4>
 8000c48:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d006      	beq.n	8000c64 <wolfBoot_check_self_update+0xa4>
 8000c56:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <wolfBoot_check_self_update+0xa8>
 8000c64:	f7ff ffab 	bl	8000bbe <wolfBoot_panic>
        wolfBoot_self_update(&update);
 8000c68:	466b      	mov	r3, sp
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <wolfBoot_check_self_update+0xc4>)
 8000c6e:	4798      	blx	r3
 8000c70:	e002      	b.n	8000c78 <wolfBoot_check_self_update+0xb8>
            return;
 8000c72:	bf00      	nop
 8000c74:	e000      	b.n	8000c78 <wolfBoot_check_self_update+0xb8>
            return;
 8000c76:	bf00      	nop
    }
}
 8000c78:	b009      	add	sp, #36	; 0x24
 8000c7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c7e:	bf00      	nop
 8000c80:	20000018 	.word	0x20000018
 8000c84:	20000731 	.word	0x20000731

08000c88 <ByteReverseWords>:
 8000c88:	2300      	movs	r3, #0
 8000c8a:	b510      	push	{r4, lr}
 8000c8c:	0892      	lsrs	r2, r2, #2
 8000c8e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8000c92:	ba24      	rev	r4, r4
 8000c94:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d1f7      	bne.n	8000c8e <ByteReverseWords+0x6>
 8000c9e:	bd10      	pop	{r4, pc}

08000ca0 <Transform_Sha256>:
 8000ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ca4:	1f03      	subs	r3, r0, #4
 8000ca6:	b0cd      	sub	sp, #308	; 0x134
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	ab04      	add	r3, sp, #16
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	f100 031c 	add.w	r3, r0, #28
 8000cb2:	9303      	str	r3, [sp, #12]
 8000cb4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8000cb8:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8000cbc:	f842 0b04 	str.w	r0, [r2], #4
 8000cc0:	9803      	ldr	r0, [sp, #12]
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	d1f8      	bne.n	8000cb8 <Transform_Sha256+0x18>
 8000cc6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8000cca:	4662      	mov	r2, ip
 8000ccc:	1f0b      	subs	r3, r1, #4
 8000cce:	313c      	adds	r1, #60	; 0x3c
 8000cd0:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	f842 0b04 	str.w	r0, [r2], #4
 8000cda:	d1f9      	bne.n	8000cd0 <Transform_Sha256+0x30>
 8000cdc:	4662      	mov	r2, ip
 8000cde:	2010      	movs	r0, #16
 8000ce0:	4615      	mov	r5, r2
 8000ce2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000ce4:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8000ce8:	ea4f 43f1 	mov.w	r3, r1, ror #19
 8000cec:	ea83 4371 	eor.w	r3, r3, r1, ror #17
 8000cf0:	ea83 2391 	eor.w	r3, r3, r1, lsr #10
 8000cf4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000cf6:	682d      	ldr	r5, [r5, #0]
 8000cf8:	3001      	adds	r0, #1
 8000cfa:	4429      	add	r1, r5
 8000cfc:	440b      	add	r3, r1
 8000cfe:	ea4f 41b4 	mov.w	r1, r4, ror #18
 8000d02:	ea81 11f4 	eor.w	r1, r1, r4, ror #7
 8000d06:	ea81 01d4 	eor.w	r1, r1, r4, lsr #3
 8000d0a:	440b      	add	r3, r1
 8000d0c:	2840      	cmp	r0, #64	; 0x40
 8000d0e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d10:	d1e6      	bne.n	8000ce0 <Transform_Sha256+0x40>
 8000d12:	9b01      	ldr	r3, [sp, #4]
 8000d14:	9801      	ldr	r0, [sp, #4]
 8000d16:	9e01      	ldr	r6, [sp, #4]
 8000d18:	f8d3 e01c 	ldr.w	lr, [r3, #28]
 8000d1c:	6919      	ldr	r1, [r3, #16]
 8000d1e:	699a      	ldr	r2, [r3, #24]
 8000d20:	9c01      	ldr	r4, [sp, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	6800      	ldr	r0, [r0, #0]
 8000d26:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8000d2a:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8000fb0 <Transform_Sha256+0x310>
 8000d2e:	e9d4 5401 	ldrd	r5, r4, [r4, #4]
 8000d32:	f8d9 6000 	ldr.w	r6, [r9]
 8000d36:	f8dc 7000 	ldr.w	r7, [ip]
 8000d3a:	ea4f 2af1 	mov.w	sl, r1, ror #11
 8000d3e:	ea8a 1ab1 	eor.w	sl, sl, r1, ror #6
 8000d42:	443e      	add	r6, r7
 8000d44:	ea8a 6a71 	eor.w	sl, sl, r1, ror #25
 8000d48:	44b2      	add	sl, r6
 8000d4a:	ea82 0603 	eor.w	r6, r2, r3
 8000d4e:	400e      	ands	r6, r1
 8000d50:	4056      	eors	r6, r2
 8000d52:	44b2      	add	sl, r6
 8000d54:	ea40 0705 	orr.w	r7, r0, r5
 8000d58:	ea4f 06b0 	mov.w	r6, r0, ror #2
 8000d5c:	44d6      	add	lr, sl
 8000d5e:	ea86 3670 	eor.w	r6, r6, r0, ror #13
 8000d62:	ea00 0a05 	and.w	sl, r0, r5
 8000d66:	4027      	ands	r7, r4
 8000d68:	ea86 56b0 	eor.w	r6, r6, r0, ror #22
 8000d6c:	ea47 070a 	orr.w	r7, r7, sl
 8000d70:	4437      	add	r7, r6
 8000d72:	44f0      	add	r8, lr
 8000d74:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000d78:	44be      	add	lr, r7
 8000d7a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8000d7e:	ea81 0a03 	eor.w	sl, r1, r3
 8000d82:	443e      	add	r6, r7
 8000d84:	4432      	add	r2, r6
 8000d86:	ea0a 0a08 	and.w	sl, sl, r8
 8000d8a:	ea4f 26f8 	mov.w	r6, r8, ror #11
 8000d8e:	ea8a 0a03 	eor.w	sl, sl, r3
 8000d92:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
 8000d96:	4452      	add	r2, sl
 8000d98:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8000d9c:	4416      	add	r6, r2
 8000d9e:	eb04 0a06 	add.w	sl, r4, r6
 8000da2:	ea4f 327e 	mov.w	r2, lr, ror #13
 8000da6:	ea4e 0400 	orr.w	r4, lr, r0
 8000daa:	ea0e 0700 	and.w	r7, lr, r0
 8000dae:	ea82 02be 	eor.w	r2, r2, lr, ror #2
 8000db2:	402c      	ands	r4, r5
 8000db4:	433c      	orrs	r4, r7
 8000db6:	ea82 52be 	eor.w	r2, r2, lr, ror #22
 8000dba:	4422      	add	r2, r4
 8000dbc:	4432      	add	r2, r6
 8000dbe:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8000dc2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8000dc6:	f109 0920 	add.w	r9, r9, #32
 8000dca:	4434      	add	r4, r6
 8000dcc:	441c      	add	r4, r3
 8000dce:	ea81 0308 	eor.w	r3, r1, r8
 8000dd2:	ea03 030a 	and.w	r3, r3, sl
 8000dd6:	ea83 0701 	eor.w	r7, r3, r1
 8000dda:	19e3      	adds	r3, r4, r7
 8000ddc:	ea4f 24fa 	mov.w	r4, sl, ror #11
 8000de0:	ea84 14ba 	eor.w	r4, r4, sl, ror #6
 8000de4:	ea84 647a 	eor.w	r4, r4, sl, ror #25
 8000de8:	441c      	add	r4, r3
 8000dea:	192f      	adds	r7, r5, r4
 8000dec:	ea4f 3372 	mov.w	r3, r2, ror #13
 8000df0:	ea4e 0502 	orr.w	r5, lr, r2
 8000df4:	ea0e 0602 	and.w	r6, lr, r2
 8000df8:	ea83 03b2 	eor.w	r3, r3, r2, ror #2
 8000dfc:	4005      	ands	r5, r0
 8000dfe:	4335      	orrs	r5, r6
 8000e00:	ea83 53b2 	eor.w	r3, r3, r2, ror #22
 8000e04:	442b      	add	r3, r5
 8000e06:	4423      	add	r3, r4
 8000e08:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8000e0c:	f859 4c14 	ldr.w	r4, [r9, #-20]
 8000e10:	f10c 0c20 	add.w	ip, ip, #32
 8000e14:	442c      	add	r4, r5
 8000e16:	440c      	add	r4, r1
 8000e18:	ea88 010a 	eor.w	r1, r8, sl
 8000e1c:	4039      	ands	r1, r7
 8000e1e:	ea81 0608 	eor.w	r6, r1, r8
 8000e22:	19a1      	adds	r1, r4, r6
 8000e24:	ea4f 24f7 	mov.w	r4, r7, ror #11
 8000e28:	ea84 14b7 	eor.w	r4, r4, r7, ror #6
 8000e2c:	ea84 6477 	eor.w	r4, r4, r7, ror #25
 8000e30:	440c      	add	r4, r1
 8000e32:	eb00 0b04 	add.w	fp, r0, r4
 8000e36:	ea4f 3173 	mov.w	r1, r3, ror #13
 8000e3a:	ea42 0003 	orr.w	r0, r2, r3
 8000e3e:	ea02 0503 	and.w	r5, r2, r3
 8000e42:	ea81 01b3 	eor.w	r1, r1, r3, ror #2
 8000e46:	ea00 000e 	and.w	r0, r0, lr
 8000e4a:	4328      	orrs	r0, r5
 8000e4c:	ea81 51b3 	eor.w	r1, r1, r3, ror #22
 8000e50:	4401      	add	r1, r0
 8000e52:	4421      	add	r1, r4
 8000e54:	f859 0c10 	ldr.w	r0, [r9, #-16]
 8000e58:	f85c 4c10 	ldr.w	r4, [ip, #-16]
 8000e5c:	ea8a 0507 	eor.w	r5, sl, r7
 8000e60:	4420      	add	r0, r4
 8000e62:	4480      	add	r8, r0
 8000e64:	ea05 050b 	and.w	r5, r5, fp
 8000e68:	ea4f 20fb 	mov.w	r0, fp, ror #11
 8000e6c:	ea85 050a 	eor.w	r5, r5, sl
 8000e70:	ea80 10bb 	eor.w	r0, r0, fp, ror #6
 8000e74:	44a8      	add	r8, r5
 8000e76:	ea80 607b 	eor.w	r0, r0, fp, ror #25
 8000e7a:	4440      	add	r0, r8
 8000e7c:	ea43 0401 	orr.w	r4, r3, r1
 8000e80:	ea4f 3871 	mov.w	r8, r1, ror #13
 8000e84:	ea03 0501 	and.w	r5, r3, r1
 8000e88:	ea88 08b1 	eor.w	r8, r8, r1, ror #2
 8000e8c:	4014      	ands	r4, r2
 8000e8e:	432c      	orrs	r4, r5
 8000e90:	ea88 58b1 	eor.w	r8, r8, r1, ror #22
 8000e94:	44a0      	add	r8, r4
 8000e96:	4480      	add	r8, r0
 8000e98:	4486      	add	lr, r0
 8000e9a:	f859 4c0c 	ldr.w	r4, [r9, #-12]
 8000e9e:	f85c 0c0c 	ldr.w	r0, [ip, #-12]
 8000ea2:	4404      	add	r4, r0
 8000ea4:	44a2      	add	sl, r4
 8000ea6:	ea87 040b 	eor.w	r4, r7, fp
 8000eaa:	ea04 040e 	and.w	r4, r4, lr
 8000eae:	ea84 0507 	eor.w	r5, r4, r7
 8000eb2:	eb0a 0405 	add.w	r4, sl, r5
 8000eb6:	ea4f 2afe 	mov.w	sl, lr, ror #11
 8000eba:	ea8a 1abe 	eor.w	sl, sl, lr, ror #6
 8000ebe:	ea8a 6a7e 	eor.w	sl, sl, lr, ror #25
 8000ec2:	44a2      	add	sl, r4
 8000ec4:	ea41 0008 	orr.w	r0, r1, r8
 8000ec8:	ea4f 3478 	mov.w	r4, r8, ror #13
 8000ecc:	ea01 0508 	and.w	r5, r1, r8
 8000ed0:	4018      	ands	r0, r3
 8000ed2:	ea84 04b8 	eor.w	r4, r4, r8, ror #2
 8000ed6:	4328      	orrs	r0, r5
 8000ed8:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
 8000edc:	f859 5c08 	ldr.w	r5, [r9, #-8]
 8000ee0:	4404      	add	r4, r0
 8000ee2:	f85c 0c08 	ldr.w	r0, [ip, #-8]
 8000ee6:	4452      	add	r2, sl
 8000ee8:	4405      	add	r5, r0
 8000eea:	442f      	add	r7, r5
 8000eec:	ea8b 050e 	eor.w	r5, fp, lr
 8000ef0:	4015      	ands	r5, r2
 8000ef2:	ea85 060b 	eor.w	r6, r5, fp
 8000ef6:	19bd      	adds	r5, r7, r6
 8000ef8:	ea4f 27f2 	mov.w	r7, r2, ror #11
 8000efc:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 8000f00:	4454      	add	r4, sl
 8000f02:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 8000f06:	442f      	add	r7, r5
 8000f08:	ea48 0004 	orr.w	r0, r8, r4
 8000f0c:	ea4f 3574 	mov.w	r5, r4, ror #13
 8000f10:	4008      	ands	r0, r1
 8000f12:	ea08 0604 	and.w	r6, r8, r4
 8000f16:	ea85 05b4 	eor.w	r5, r5, r4, ror #2
 8000f1a:	4330      	orrs	r0, r6
 8000f1c:	ea85 55b4 	eor.w	r5, r5, r4, ror #22
 8000f20:	f85c 6c04 	ldr.w	r6, [ip, #-4]
 8000f24:	4405      	add	r5, r0
 8000f26:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8000f2a:	443b      	add	r3, r7
 8000f2c:	4430      	add	r0, r6
 8000f2e:	4483      	add	fp, r0
 8000f30:	ea8e 0002 	eor.w	r0, lr, r2
 8000f34:	4018      	ands	r0, r3
 8000f36:	443d      	add	r5, r7
 8000f38:	ea80 070e 	eor.w	r7, r0, lr
 8000f3c:	eb0b 0007 	add.w	r0, fp, r7
 8000f40:	ea4f 2bf3 	mov.w	fp, r3, ror #11
 8000f44:	ea8b 1bb3 	eor.w	fp, fp, r3, ror #6
 8000f48:	ea8b 6b73 	eor.w	fp, fp, r3, ror #25
 8000f4c:	4483      	add	fp, r0
 8000f4e:	ea44 0605 	orr.w	r6, r4, r5
 8000f52:	ea4f 3075 	mov.w	r0, r5, ror #13
 8000f56:	ea80 00b5 	eor.w	r0, r0, r5, ror #2
 8000f5a:	ea06 0608 	and.w	r6, r6, r8
 8000f5e:	ea04 0705 	and.w	r7, r4, r5
 8000f62:	433e      	orrs	r6, r7
 8000f64:	ea80 50b5 	eor.w	r0, r0, r5, ror #22
 8000f68:	4430      	add	r0, r6
 8000f6a:	4e10      	ldr	r6, [pc, #64]	; (8000fac <Transform_Sha256+0x30c>)
 8000f6c:	4459      	add	r1, fp
 8000f6e:	454e      	cmp	r6, r9
 8000f70:	4458      	add	r0, fp
 8000f72:	f47f aede 	bne.w	8000d32 <Transform_Sha256+0x92>
 8000f76:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8000f7a:	e9cd 0504 	strd	r0, r5, [sp, #16]
 8000f7e:	e9cd 4806 	strd	r4, r8, [sp, #24]
 8000f82:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8000f86:	9108      	str	r1, [sp, #32]
 8000f88:	9b01      	ldr	r3, [sp, #4]
 8000f8a:	9902      	ldr	r1, [sp, #8]
 8000f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8000f96:	4413      	add	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]
 8000f9a:	9b03      	ldr	r3, [sp, #12]
 8000f9c:	9102      	str	r1, [sp, #8]
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	d1f2      	bne.n	8000f88 <Transform_Sha256+0x2e8>
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	b04d      	add	sp, #308	; 0x134
 8000fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000faa:	bf00      	nop
 8000fac:	080053b0 	.word	0x080053b0
 8000fb0:	080052b0 	.word	0x080052b0

08000fb4 <wc_InitSha256_ex>:
 8000fb4:	b510      	push	{r4, lr}
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	b1f0      	cbz	r0, 8000ff8 <wc_InitSha256_ex+0x44>
 8000fba:	2220      	movs	r2, #32
 8000fbc:	66c1      	str	r1, [r0, #108]	; 0x6c
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	f7ff f8c8 	bl	8000154 <memset>
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <wc_InitSha256_ex+0x4c>)
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <wc_InitSha256_ex+0x50>)
 8000fc8:	490f      	ldr	r1, [pc, #60]	; (8001008 <wc_InitSha256_ex+0x54>)
 8000fca:	e9c4 2300 	strd	r2, r3, [r4]
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <wc_InitSha256_ex+0x58>)
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <wc_InitSha256_ex+0x5c>)
 8000fd2:	e9c4 1302 	strd	r1, r3, [r4, #8]
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <wc_InitSha256_ex+0x60>)
 8000fd8:	e9c4 0304 	strd	r0, r3, [r4, #16]
 8000fdc:	2000      	movs	r0, #0
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <wc_InitSha256_ex+0x64>)
 8000fe0:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 8000fe4:	61a3      	str	r3, [r4, #24]
 8000fe6:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8000fea:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8000fee:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8000ff2:	61e3      	str	r3, [r4, #28]
 8000ff4:	66a0      	str	r0, [r4, #104]	; 0x68
 8000ff6:	bd10      	pop	{r4, pc}
 8000ff8:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8000ffc:	e7fb      	b.n	8000ff6 <wc_InitSha256_ex+0x42>
 8000ffe:	bf00      	nop
 8001000:	bb67ae85 	.word	0xbb67ae85
 8001004:	6a09e667 	.word	0x6a09e667
 8001008:	3c6ef372 	.word	0x3c6ef372
 800100c:	a54ff53a 	.word	0xa54ff53a
 8001010:	510e527f 	.word	0x510e527f
 8001014:	9b05688c 	.word	0x9b05688c
 8001018:	1f83d9ab 	.word	0x1f83d9ab

0800101c <wc_Sha256Update>:
 800101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001020:	460f      	mov	r7, r1
 8001022:	4614      	mov	r4, r2
 8001024:	4605      	mov	r5, r0
 8001026:	2800      	cmp	r0, #0
 8001028:	d049      	beq.n	80010be <wc_Sha256Update+0xa2>
 800102a:	b919      	cbnz	r1, 8001034 <wc_Sha256Update+0x18>
 800102c:	2a00      	cmp	r2, #0
 800102e:	d146      	bne.n	80010be <wc_Sha256Update+0xa2>
 8001030:	2000      	movs	r0, #0
 8001032:	e042      	b.n	80010ba <wc_Sha256Update+0x9e>
 8001034:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8001036:	283f      	cmp	r0, #63	; 0x3f
 8001038:	d844      	bhi.n	80010c4 <wc_Sha256Update+0xa8>
 800103a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800103c:	f105 0620 	add.w	r6, r5, #32
 8001040:	18d3      	adds	r3, r2, r3
 8001042:	666b      	str	r3, [r5, #100]	; 0x64
 8001044:	bf22      	ittt	cs
 8001046:	6eab      	ldrcs	r3, [r5, #104]	; 0x68
 8001048:	3301      	addcs	r3, #1
 800104a:	66ab      	strcs	r3, [r5, #104]	; 0x68
 800104c:	b1c8      	cbz	r0, 8001082 <wc_Sha256Update+0x66>
 800104e:	f1c0 0840 	rsb	r8, r0, #64	; 0x40
 8001052:	4590      	cmp	r8, r2
 8001054:	bf28      	it	cs
 8001056:	4690      	movcs	r8, r2
 8001058:	4430      	add	r0, r6
 800105a:	4642      	mov	r2, r8
 800105c:	f7ff f8a2 	bl	80001a4 <memcpy>
 8001060:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8001062:	4447      	add	r7, r8
 8001064:	4442      	add	r2, r8
 8001066:	2a40      	cmp	r2, #64	; 0x40
 8001068:	662a      	str	r2, [r5, #96]	; 0x60
 800106a:	eba4 0408 	sub.w	r4, r4, r8
 800106e:	d108      	bne.n	8001082 <wc_Sha256Update+0x66>
 8001070:	4630      	mov	r0, r6
 8001072:	4631      	mov	r1, r6
 8001074:	f7ff fe08 	bl	8000c88 <ByteReverseWords>
 8001078:	4628      	mov	r0, r5
 800107a:	f7ff fe11 	bl	8000ca0 <Transform_Sha256>
 800107e:	b9e0      	cbnz	r0, 80010ba <wc_Sha256Update+0x9e>
 8001080:	6628      	str	r0, [r5, #96]	; 0x60
 8001082:	4427      	add	r7, r4
 8001084:	2c3f      	cmp	r4, #63	; 0x3f
 8001086:	eba7 0104 	sub.w	r1, r7, r4
 800108a:	d807      	bhi.n	800109c <wc_Sha256Update+0x80>
 800108c:	2c00      	cmp	r4, #0
 800108e:	d0cf      	beq.n	8001030 <wc_Sha256Update+0x14>
 8001090:	4622      	mov	r2, r4
 8001092:	4630      	mov	r0, r6
 8001094:	f7ff f886 	bl	80001a4 <memcpy>
 8001098:	662c      	str	r4, [r5, #96]	; 0x60
 800109a:	e7c9      	b.n	8001030 <wc_Sha256Update+0x14>
 800109c:	2240      	movs	r2, #64	; 0x40
 800109e:	4630      	mov	r0, r6
 80010a0:	f7ff f880 	bl	80001a4 <memcpy>
 80010a4:	4630      	mov	r0, r6
 80010a6:	2240      	movs	r2, #64	; 0x40
 80010a8:	4631      	mov	r1, r6
 80010aa:	f7ff fded 	bl	8000c88 <ByteReverseWords>
 80010ae:	4628      	mov	r0, r5
 80010b0:	3c40      	subs	r4, #64	; 0x40
 80010b2:	f7ff fdf5 	bl	8000ca0 <Transform_Sha256>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	d0e4      	beq.n	8001084 <wc_Sha256Update+0x68>
 80010ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010be:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 80010c2:	e7fa      	b.n	80010ba <wc_Sha256Update+0x9e>
 80010c4:	f06f 0083 	mvn.w	r0, #131	; 0x83
 80010c8:	e7f7      	b.n	80010ba <wc_Sha256Update+0x9e>
	...

080010cc <wc_Sha256Final>:
 80010cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ce:	460f      	mov	r7, r1
 80010d0:	4604      	mov	r4, r0
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d06e      	beq.n	80011b4 <wc_Sha256Final+0xe8>
 80010d6:	2900      	cmp	r1, #0
 80010d8:	d06c      	beq.n	80011b4 <wc_Sha256Final+0xe8>
 80010da:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80010dc:	f100 0620 	add.w	r6, r0, #32
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	6602      	str	r2, [r0, #96]	; 0x60
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	54f2      	strb	r2, [r6, r3]
 80010e8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80010ea:	2838      	cmp	r0, #56	; 0x38
 80010ec:	d912      	bls.n	8001114 <wc_Sha256Final+0x48>
 80010ee:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80010f2:	2100      	movs	r1, #0
 80010f4:	4430      	add	r0, r6
 80010f6:	f7ff f82d 	bl	8000154 <memset>
 80010fa:	2240      	movs	r2, #64	; 0x40
 80010fc:	4631      	mov	r1, r6
 80010fe:	4630      	mov	r0, r6
 8001100:	6622      	str	r2, [r4, #96]	; 0x60
 8001102:	f7ff fdc1 	bl	8000c88 <ByteReverseWords>
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff fdca 	bl	8000ca0 <Transform_Sha256>
 800110c:	4605      	mov	r5, r0
 800110e:	2800      	cmp	r0, #0
 8001110:	d14e      	bne.n	80011b0 <wc_Sha256Final+0xe4>
 8001112:	6620      	str	r0, [r4, #96]	; 0x60
 8001114:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001116:	2100      	movs	r1, #0
 8001118:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 800111c:	4430      	add	r0, r6
 800111e:	f7ff f819 	bl	8000154 <memset>
 8001122:	e9d4 3119 	ldrd	r3, r1, [r4, #100]	; 0x64
 8001126:	0f5a      	lsrs	r2, r3, #29
 8001128:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	6663      	str	r3, [r4, #100]	; 0x64
 8001130:	4631      	mov	r1, r6
 8001132:	4630      	mov	r0, r6
 8001134:	66a2      	str	r2, [r4, #104]	; 0x68
 8001136:	2240      	movs	r2, #64	; 0x40
 8001138:	f7ff fda6 	bl	8000c88 <ByteReverseWords>
 800113c:	2204      	movs	r2, #4
 800113e:	f104 0168 	add.w	r1, r4, #104	; 0x68
 8001142:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001146:	f7ff f82d 	bl	80001a4 <memcpy>
 800114a:	2204      	movs	r2, #4
 800114c:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8001150:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001154:	f7ff f826 	bl	80001a4 <memcpy>
 8001158:	4631      	mov	r1, r6
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff fda0 	bl	8000ca0 <Transform_Sha256>
 8001160:	4605      	mov	r5, r0
 8001162:	bb28      	cbnz	r0, 80011b0 <wc_Sha256Final+0xe4>
 8001164:	4621      	mov	r1, r4
 8001166:	2220      	movs	r2, #32
 8001168:	4620      	mov	r0, r4
 800116a:	f7ff fd8d 	bl	8000c88 <ByteReverseWords>
 800116e:	2220      	movs	r2, #32
 8001170:	4638      	mov	r0, r7
 8001172:	f7ff f817 	bl	80001a4 <memcpy>
 8001176:	2220      	movs	r2, #32
 8001178:	4629      	mov	r1, r5
 800117a:	4620      	mov	r0, r4
 800117c:	f7fe ffea 	bl	8000154 <memset>
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <wc_Sha256Final+0xf0>)
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <wc_Sha256Final+0xf4>)
 8001184:	490f      	ldr	r1, [pc, #60]	; (80011c4 <wc_Sha256Final+0xf8>)
 8001186:	e9c4 2300 	strd	r2, r3, [r4]
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <wc_Sha256Final+0xfc>)
 800118c:	480f      	ldr	r0, [pc, #60]	; (80011cc <wc_Sha256Final+0x100>)
 800118e:	e9c4 1302 	strd	r1, r3, [r4, #8]
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <wc_Sha256Final+0x104>)
 8001194:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
 8001198:	e9c4 0304 	strd	r0, r3, [r4, #16]
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <wc_Sha256Final+0x108>)
 800119e:	66a5      	str	r5, [r4, #104]	; 0x68
 80011a0:	61a3      	str	r3, [r4, #24]
 80011a2:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80011a6:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80011aa:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80011ae:	61e3      	str	r3, [r4, #28]
 80011b0:	4628      	mov	r0, r5
 80011b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011b4:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 80011b8:	e7fa      	b.n	80011b0 <wc_Sha256Final+0xe4>
 80011ba:	bf00      	nop
 80011bc:	bb67ae85 	.word	0xbb67ae85
 80011c0:	6a09e667 	.word	0x6a09e667
 80011c4:	3c6ef372 	.word	0x3c6ef372
 80011c8:	a54ff53a 	.word	0xa54ff53a
 80011cc:	510e527f 	.word	0x510e527f
 80011d0:	9b05688c 	.word	0x9b05688c
 80011d4:	1f83d9ab 	.word	0x1f83d9ab

080011d8 <wc_InitSha256>:
 80011d8:	f06f 0201 	mvn.w	r2, #1
 80011dc:	2100      	movs	r1, #0
 80011de:	f7ff bee9 	b.w	8000fb4 <wc_InitSha256_ex>

080011e2 <_sp_zero>:
 *
 * @param  [out]  a  SP integer to set to zero.
 */
static void _sp_zero(sp_int* a)
{
    a->used = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	6003      	str	r3, [r0, #0]
#ifdef WOLFSSL_SP_INT_NEGATIVE
    a->sign = MP_ZPOS;
#endif
}
 80011e6:	4770      	bx	lr

080011e8 <_sp_cmp_abs>:
 */
static int _sp_cmp_abs(sp_int* a, sp_int* b)
{
    int ret = MP_EQ;

    if (a->used > b->used) {
 80011e8:	6803      	ldr	r3, [r0, #0]
 80011ea:	680a      	ldr	r2, [r1, #0]
 80011ec:	4293      	cmp	r3, r2
 80011ee:	dc12      	bgt.n	8001216 <_sp_cmp_abs+0x2e>
        ret = MP_GT;
    }
    else if (a->used < b->used) {
 80011f0:	db13      	blt.n	800121a <_sp_cmp_abs+0x32>
        ret = MP_LT;
    }
    else {
        int i;

        for (i = a->used - 1; i >= 0; i--) {
 80011f2:	3b01      	subs	r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db18      	blt.n	800122a <_sp_cmp_abs+0x42>
{
 80011f8:	b410      	push	{r4}
            if (a->dp[i] > b->dp[i]) {
 80011fa:	1c9a      	adds	r2, r3, #2
 80011fc:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001200:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001204:	4294      	cmp	r4, r2
 8001206:	d80b      	bhi.n	8001220 <_sp_cmp_abs+0x38>
                ret = MP_GT;
                break;
            }
            else if (a->dp[i] < b->dp[i]) {
 8001208:	d30c      	bcc.n	8001224 <_sp_cmp_abs+0x3c>
        for (i = a->used - 1; i >= 0; i--) {
 800120a:	3b01      	subs	r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	daf4      	bge.n	80011fa <_sp_cmp_abs+0x12>
    int ret = MP_EQ;
 8001210:	2000      	movs	r0, #0
            }
        }
    }

    return ret;
}
 8001212:	bc10      	pop	{r4}
 8001214:	4770      	bx	lr
        ret = MP_GT;
 8001216:	2001      	movs	r0, #1
 8001218:	4770      	bx	lr
        ret = MP_LT;
 800121a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800121e:	4770      	bx	lr
                ret = MP_GT;
 8001220:	2001      	movs	r0, #1
 8001222:	e7f6      	b.n	8001212 <_sp_cmp_abs+0x2a>
                ret = MP_LT;
 8001224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ret;
 8001228:	e7f3      	b.n	8001212 <_sp_cmp_abs+0x2a>
    int ret = MP_EQ;
 800122a:	2000      	movs	r0, #0
}
 800122c:	4770      	bx	lr
	...

08001230 <_sp_cmp>:
 * @return  MP_GT when a is greater than b.
 * @return  MP_LT when a is less than b.
 * @return  MP_EQ when a is equals b.
 */
static int _sp_cmp(sp_int* a, sp_int* b)
{
 8001230:	b508      	push	{r3, lr}
    int ret;

#ifdef WOLFSSL_SP_INT_NEGATIVE
    if (a->sign == b->sign) {
#endif
        ret = _sp_cmp_abs(a, b);
 8001232:	4b01      	ldr	r3, [pc, #4]	; (8001238 <_sp_cmp+0x8>)
 8001234:	4798      	blx	r3
        ret = MP_GT;
    }
#endif

    return ret;
}
 8001236:	bd08      	pop	{r3, pc}
 8001238:	080011e9 	.word	0x080011e9

0800123c <_sp_read_radix_16>:
 * @return  MP_OKAY on success.
 * @return  MP_VAL when radix not supported, value is negative, or a character
 *          is not valid.
 */
static int _sp_read_radix_16(sp_int* a, const char* in)
{
 800123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123e:	4605      	mov	r5, r0
 8001240:	460e      	mov	r6, r1
        a->sign = MP_NEG;
        in++;
    }
#endif

    while (*in == '0') {
 8001242:	7833      	ldrb	r3, [r6, #0]
 8001244:	2b30      	cmp	r3, #48	; 0x30
 8001246:	d101      	bne.n	800124c <_sp_read_radix_16+0x10>
        in++;
 8001248:	3601      	adds	r6, #1
 800124a:	e7fa      	b.n	8001242 <_sp_read_radix_16+0x6>
    }

    a->dp[0] = 0;
 800124c:	2400      	movs	r4, #0
 800124e:	60ac      	str	r4, [r5, #8]
    for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 8001250:	4630      	mov	r0, r6
 8001252:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <_sp_read_radix_16+0xa4>)
 8001254:	4798      	blx	r3
 8001256:	3801      	subs	r0, #1
    int  j = 0;
 8001258:	4627      	mov	r7, r4
    int  s = 0;
 800125a:	4622      	mov	r2, r4
    for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 800125c:	e012      	b.n	8001284 <_sp_read_radix_16+0x48>
            ch -= '0';
        }
        else if ((ch >= 'A') && (ch <= 'F')) {
            ch -= 'A' - 10;
        }
        else if ((ch >= 'a') && (ch <= 'f')) {
 800125e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b05      	cmp	r3, #5
 8001266:	d82a      	bhi.n	80012be <_sp_read_radix_16+0x82>
            ch -= 'a' - 10;
 8001268:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 800126c:	b2db      	uxtb	r3, r3
        else {
            err = MP_VAL;
            break;
        }

        if (s == SP_WORD_SIZE) {
 800126e:	2a20      	cmp	r2, #32
 8001270:	d019      	beq.n	80012a6 <_sp_read_radix_16+0x6a>
            }
            s = 0;
            a->dp[j] = 0;
        }

        a->dp[j] |= ((sp_int_digit)ch) << s;
 8001272:	4093      	lsls	r3, r2
 8001274:	1cbc      	adds	r4, r7, #2
 8001276:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 800127a:	430b      	orrs	r3, r1
 800127c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
        s += 4;
 8001280:	3204      	adds	r2, #4
    for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 8001282:	3801      	subs	r0, #1
 8001284:	2800      	cmp	r0, #0
 8001286:	db17      	blt.n	80012b8 <_sp_read_radix_16+0x7c>
        char ch = in[i];
 8001288:	5c34      	ldrb	r4, [r6, r0]
        if ((ch >= '0') && (ch <= '9')) {
 800128a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b09      	cmp	r3, #9
 8001292:	d9ec      	bls.n	800126e <_sp_read_radix_16+0x32>
        else if ((ch >= 'A') && (ch <= 'F')) {
 8001294:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b05      	cmp	r3, #5
 800129c:	d8df      	bhi.n	800125e <_sp_read_radix_16+0x22>
            ch -= 'A' - 10;
 800129e:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	e7e3      	b.n	800126e <_sp_read_radix_16+0x32>
            j++;
 80012a6:	3701      	adds	r7, #1
            if (j >= a->size) {
 80012a8:	686a      	ldr	r2, [r5, #4]
 80012aa:	42ba      	cmp	r2, r7
 80012ac:	dd0a      	ble.n	80012c4 <_sp_read_radix_16+0x88>
            a->dp[j] = 0;
 80012ae:	1cb9      	adds	r1, r7, #2
 80012b0:	2200      	movs	r2, #0
 80012b2:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
 80012b6:	e7dc      	b.n	8001272 <_sp_read_radix_16+0x36>
    int  err = MP_OKAY;
 80012b8:	2000      	movs	r0, #0
    }

    if (err == MP_OKAY) {
 80012ba:	b130      	cbz	r0, 80012ca <_sp_read_radix_16+0x8e>
            a->sign = MP_ZPOS;
        }
    #endif
    }
    return err;
}
 80012bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            err = MP_VAL;
 80012be:	f06f 0002 	mvn.w	r0, #2
 80012c2:	e7fa      	b.n	80012ba <_sp_read_radix_16+0x7e>
                err = MP_VAL;
 80012c4:	f06f 0002 	mvn.w	r0, #2
 80012c8:	e7f7      	b.n	80012ba <_sp_read_radix_16+0x7e>
        sp_clamp(a);
 80012ca:	2f00      	cmp	r7, #0
 80012cc:	db05      	blt.n	80012da <_sp_read_radix_16+0x9e>
 80012ce:	1cbb      	adds	r3, r7, #2
 80012d0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80012d4:	b90b      	cbnz	r3, 80012da <_sp_read_radix_16+0x9e>
 80012d6:	3f01      	subs	r7, #1
 80012d8:	e7f7      	b.n	80012ca <_sp_read_radix_16+0x8e>
 80012da:	3701      	adds	r7, #1
 80012dc:	602f      	str	r7, [r5, #0]
    return err;
 80012de:	e7ed      	b.n	80012bc <_sp_read_radix_16+0x80>
 80012e0:	08000181 	.word	0x08000181

080012e4 <sp_init>:
    if (a == NULL) {
 80012e4:	b138      	cbz	r0, 80012f6 <sp_init+0x12>
{
 80012e6:	b510      	push	{r4, lr}
 80012e8:	4604      	mov	r4, r0
        _sp_zero(a);
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <sp_init+0x18>)
 80012ec:	4798      	blx	r3
        a->size = SP_INT_DIGITS;
 80012ee:	2312      	movs	r3, #18
 80012f0:	6063      	str	r3, [r4, #4]
    int err = MP_OKAY;
 80012f2:	2000      	movs	r0, #0
}
 80012f4:	bd10      	pop	{r4, pc}
        err = MP_VAL;
 80012f6:	f06f 0002 	mvn.w	r0, #2
}
 80012fa:	4770      	bx	lr
 80012fc:	080011e3 	.word	0x080011e3

08001300 <sp_init_multi>:
{
 8001300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001304:	460f      	mov	r7, r1
 8001306:	4615      	mov	r5, r2
 8001308:	461c      	mov	r4, r3
 800130a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800130e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    if (n1 != NULL) {
 8001312:	b130      	cbz	r0, 8001322 <sp_init_multi+0x22>
 8001314:	4606      	mov	r6, r0
        _sp_zero(n1);
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <sp_init_multi+0x88>)
 8001318:	4798      	blx	r3
        n1->dp[0] = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	60b3      	str	r3, [r6, #8]
        n1->size = SP_INT_DIGITS;
 800131e:	2312      	movs	r3, #18
 8001320:	6073      	str	r3, [r6, #4]
    if (n2 != NULL) {
 8001322:	b137      	cbz	r7, 8001332 <sp_init_multi+0x32>
        _sp_zero(n2);
 8001324:	4638      	mov	r0, r7
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <sp_init_multi+0x88>)
 8001328:	4798      	blx	r3
        n2->dp[0] = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
        n2->size = SP_INT_DIGITS;
 800132e:	2312      	movs	r3, #18
 8001330:	607b      	str	r3, [r7, #4]
    if (n3 != NULL) {
 8001332:	b135      	cbz	r5, 8001342 <sp_init_multi+0x42>
        _sp_zero(n3);
 8001334:	4628      	mov	r0, r5
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <sp_init_multi+0x88>)
 8001338:	4798      	blx	r3
        n3->dp[0] = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	60ab      	str	r3, [r5, #8]
        n3->size = SP_INT_DIGITS;
 800133e:	2312      	movs	r3, #18
 8001340:	606b      	str	r3, [r5, #4]
    if (n4 != NULL) {
 8001342:	b134      	cbz	r4, 8001352 <sp_init_multi+0x52>
        _sp_zero(n4);
 8001344:	4620      	mov	r0, r4
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <sp_init_multi+0x88>)
 8001348:	4798      	blx	r3
        n4->dp[0] = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	60a3      	str	r3, [r4, #8]
        n4->size = SP_INT_DIGITS;
 800134e:	2312      	movs	r3, #18
 8001350:	6063      	str	r3, [r4, #4]
    if (n5 != NULL) {
 8001352:	f1b9 0f00 	cmp.w	r9, #0
 8001356:	d008      	beq.n	800136a <sp_init_multi+0x6a>
        _sp_zero(n5);
 8001358:	4648      	mov	r0, r9
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <sp_init_multi+0x88>)
 800135c:	4798      	blx	r3
        n5->dp[0] = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c9 3008 	str.w	r3, [r9, #8]
        n5->size = SP_INT_DIGITS;
 8001364:	2312      	movs	r3, #18
 8001366:	f8c9 3004 	str.w	r3, [r9, #4]
    if (n6 != NULL) {
 800136a:	f1b8 0f00 	cmp.w	r8, #0
 800136e:	d008      	beq.n	8001382 <sp_init_multi+0x82>
        _sp_zero(n6);
 8001370:	4640      	mov	r0, r8
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <sp_init_multi+0x88>)
 8001374:	4798      	blx	r3
        n6->dp[0] = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c8 3008 	str.w	r3, [r8, #8]
        n6->size = SP_INT_DIGITS;
 800137c:	2312      	movs	r3, #18
 800137e:	f8c8 3004 	str.w	r3, [r8, #4]
}
 8001382:	2000      	movs	r0, #0
 8001384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001388:	080011e3 	.word	0x080011e3

0800138c <sp_grow>:
{
 800138c:	b430      	push	{r4, r5}
    if (a == NULL) {
 800138e:	4605      	mov	r5, r0
 8001390:	b130      	cbz	r0, 80013a0 <sp_grow+0x14>
    if ((err == MP_OKAY) && (l > a->size)) {
 8001392:	6843      	ldr	r3, [r0, #4]
 8001394:	428b      	cmp	r3, r1
 8001396:	db0f      	blt.n	80013b8 <sp_grow+0x2c>
    int err = MP_OKAY;
 8001398:	2000      	movs	r0, #0
    if (err == MP_OKAY) {
 800139a:	b958      	cbnz	r0, 80013b4 <sp_grow+0x28>
        for (i = a->used; i < l; i++) {
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	e007      	b.n	80013b0 <sp_grow+0x24>
        err = MP_VAL;
 80013a0:	f06f 0002 	mvn.w	r0, #2
 80013a4:	e7f9      	b.n	800139a <sp_grow+0xe>
            a->dp[i] = 0;
 80013a6:	1c9a      	adds	r2, r3, #2
 80013a8:	2400      	movs	r4, #0
 80013aa:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
        for (i = a->used; i < l; i++) {
 80013ae:	3301      	adds	r3, #1
 80013b0:	428b      	cmp	r3, r1
 80013b2:	dbf8      	blt.n	80013a6 <sp_grow+0x1a>
}
 80013b4:	bc30      	pop	{r4, r5}
 80013b6:	4770      	bx	lr
        err = MP_MEM;
 80013b8:	f06f 0001 	mvn.w	r0, #1
    return err;
 80013bc:	e7fa      	b.n	80013b4 <sp_grow+0x28>
	...

080013c0 <sp_clear>:
    if (a != NULL) {
 80013c0:	b118      	cbz	r0, 80013ca <sp_clear+0xa>
{
 80013c2:	b508      	push	{r3, lr}
 80013c4:	4602      	mov	r2, r0
        for (i = 0; i < a->used; i++) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	e005      	b.n	80013d6 <sp_clear+0x16>
 80013ca:	4770      	bx	lr
            a->dp[i] = 0;
 80013cc:	1c99      	adds	r1, r3, #2
 80013ce:	2000      	movs	r0, #0
 80013d0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        for (i = 0; i < a->used; i++) {
 80013d4:	3301      	adds	r3, #1
 80013d6:	6811      	ldr	r1, [r2, #0]
 80013d8:	4299      	cmp	r1, r3
 80013da:	dcf7      	bgt.n	80013cc <sp_clear+0xc>
        _sp_zero(a);
 80013dc:	4610      	mov	r0, r2
 80013de:	4b01      	ldr	r3, [pc, #4]	; (80013e4 <sp_clear+0x24>)
 80013e0:	4798      	blx	r3
}
 80013e2:	bd08      	pop	{r3, pc}
 80013e4:	080011e3 	.word	0x080011e3

080013e8 <sp_cmp>:
    if (a == b) {
 80013e8:	4288      	cmp	r0, r1
 80013ea:	d005      	beq.n	80013f8 <sp_cmp+0x10>
    else if (a == NULL) {
 80013ec:	b130      	cbz	r0, 80013fc <sp_cmp+0x14>
    else if (b == NULL) {
 80013ee:	b141      	cbz	r1, 8001402 <sp_cmp+0x1a>
{
 80013f0:	b508      	push	{r3, lr}
        ret = _sp_cmp(a, b);
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <sp_cmp+0x20>)
 80013f4:	4798      	blx	r3
}
 80013f6:	bd08      	pop	{r3, pc}
        ret = MP_EQ;
 80013f8:	2000      	movs	r0, #0
 80013fa:	4770      	bx	lr
        ret = MP_LT;
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001400:	4770      	bx	lr
        ret = MP_GT;
 8001402:	2001      	movs	r0, #1
}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	08001231 	.word	0x08001231

0800140c <sp_set>:
    if (a == NULL) {
 800140c:	b130      	cbz	r0, 800141c <sp_set+0x10>
        a->dp[0] = d;
 800140e:	6081      	str	r1, [r0, #8]
        a->used = d > 0;
 8001410:	3900      	subs	r1, #0
 8001412:	bf18      	it	ne
 8001414:	2101      	movne	r1, #1
 8001416:	6001      	str	r1, [r0, #0]
    int err = MP_OKAY;
 8001418:	2000      	movs	r0, #0
 800141a:	4770      	bx	lr
        err = MP_VAL;
 800141c:	f06f 0002 	mvn.w	r0, #2
}
 8001420:	4770      	bx	lr

08001422 <sp_read_unsigned_bin>:
{
 8001422:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((a == NULL) || ((in == NULL) && (inSz > 0))) {
 8001426:	4606      	mov	r6, r0
 8001428:	b1c0      	cbz	r0, 800145c <sp_read_unsigned_bin+0x3a>
 800142a:	b191      	cbz	r1, 8001452 <sp_read_unsigned_bin+0x30>
    if ((err == MP_OKAY) && (inSz > ((word32)a->size - 1) * SP_WORD_SIZEOF)) {
 800142c:	6873      	ldr	r3, [r6, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8001434:	d86a      	bhi.n	800150c <sp_read_unsigned_bin+0xea>
 8001436:	2000      	movs	r0, #0
    if (err == MP_OKAY) {
 8001438:	2800      	cmp	r0, #0
 800143a:	d165      	bne.n	8001508 <sp_read_unsigned_bin+0xe6>
        a->used = (inSz + SP_WORD_SIZEOF - 1) / SP_WORD_SIZEOF;
 800143c:	f102 0e03 	add.w	lr, r2, #3
 8001440:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8001444:	f8c6 e000 	str.w	lr, [r6]
        for (i = inSz-1, j = 0; i >= SP_WORD_SIZEOF - 1; i -= SP_WORD_SIZEOF) {
 8001448:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 800144c:	4645      	mov	r5, r8
 800144e:	4684      	mov	ip, r0
 8001450:	e021      	b.n	8001496 <sp_read_unsigned_bin+0x74>
    if ((a == NULL) || ((in == NULL) && (inSz > 0))) {
 8001452:	2a00      	cmp	r2, #0
 8001454:	d0ea      	beq.n	800142c <sp_read_unsigned_bin+0xa>
        err = MP_VAL;
 8001456:	f06f 0002 	mvn.w	r0, #2
 800145a:	e7ed      	b.n	8001438 <sp_read_unsigned_bin+0x16>
 800145c:	f06f 0002 	mvn.w	r0, #2
 8001460:	e7ea      	b.n	8001438 <sp_read_unsigned_bin+0x16>
            a->dp[j]  = ((sp_int_digit)in[i - 0] <<  0);
 8001462:	5d4b      	ldrb	r3, [r1, r5]
 8001464:	f10c 0702 	add.w	r7, ip, #2
 8001468:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
            a->dp[j] |= ((sp_int_digit)in[i - 1] <<  8);
 800146c:	eb01 0905 	add.w	r9, r1, r5
 8001470:	f819 4c01 	ldrb.w	r4, [r9, #-1]
 8001474:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001478:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
            a->dp[j] |= ((sp_int_digit)in[i - 2] << 16) |
 800147c:	f819 ac02 	ldrb.w	sl, [r9, #-2]
                        ((sp_int_digit)in[i - 3] << 24);
 8001480:	f819 4c03 	ldrb.w	r4, [r9, #-3]
 8001484:	0624      	lsls	r4, r4, #24
            a->dp[j] |= ((sp_int_digit)in[i - 2] << 16) |
 8001486:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800148a:	4323      	orrs	r3, r4
 800148c:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
            j++;
 8001490:	f10c 0c01 	add.w	ip, ip, #1
        for (i = inSz-1, j = 0; i >= SP_WORD_SIZEOF - 1; i -= SP_WORD_SIZEOF) {
 8001494:	3d04      	subs	r5, #4
 8001496:	2d02      	cmp	r5, #2
 8001498:	dce3      	bgt.n	8001462 <sp_read_unsigned_bin+0x40>
        a->dp[j] = 0;
 800149a:	f10c 0c02 	add.w	ip, ip, #2
 800149e:	2300      	movs	r3, #0
 80014a0:	f846 302c 	str.w	r3, [r6, ip, lsl #2]
        if (i >= 0) {
 80014a4:	429d      	cmp	r5, r3
 80014a6:	db23      	blt.n	80014f0 <sp_read_unsigned_bin+0xce>
            byte *d = (byte*)a->dp;
 80014a8:	f106 0308 	add.w	r3, r6, #8
            a->dp[a->used - 1] = 0;
 80014ac:	f10e 0e01 	add.w	lr, lr, #1
 80014b0:	2400      	movs	r4, #0
 80014b2:	f846 402e 	str.w	r4, [r6, lr, lsl #2]
            switch (i) {
 80014b6:	2d06      	cmp	r5, #6
 80014b8:	d81a      	bhi.n	80014f0 <sp_read_unsigned_bin+0xce>
 80014ba:	e8df f005 	tbb	[pc, r5]
 80014be:	1316      	.short	0x1316
 80014c0:	070a0d10 	.word	0x070a0d10
 80014c4:	04          	.byte	0x04
 80014c5:	00          	.byte	0x00
                case 6: d[inSz - 1 - 6] = in[6]; FALL_THROUGH;
 80014c6:	1fd4      	subs	r4, r2, #7
 80014c8:	798d      	ldrb	r5, [r1, #6]
 80014ca:	551d      	strb	r5, [r3, r4]
                case 5: d[inSz - 1 - 5] = in[5]; FALL_THROUGH;
 80014cc:	1f94      	subs	r4, r2, #6
 80014ce:	794d      	ldrb	r5, [r1, #5]
 80014d0:	551d      	strb	r5, [r3, r4]
                case 4: d[inSz - 1 - 4] = in[4]; FALL_THROUGH;
 80014d2:	1f54      	subs	r4, r2, #5
 80014d4:	790d      	ldrb	r5, [r1, #4]
 80014d6:	551d      	strb	r5, [r3, r4]
                case 3: d[inSz - 1 - 3] = in[3]; FALL_THROUGH;
 80014d8:	1f14      	subs	r4, r2, #4
 80014da:	78cd      	ldrb	r5, [r1, #3]
 80014dc:	551d      	strb	r5, [r3, r4]
                case 2: d[inSz - 1 - 2] = in[2]; FALL_THROUGH;
 80014de:	1ed4      	subs	r4, r2, #3
 80014e0:	788d      	ldrb	r5, [r1, #2]
 80014e2:	551d      	strb	r5, [r3, r4]
                case 1: d[inSz - 1 - 1] = in[1]; FALL_THROUGH;
 80014e4:	3a02      	subs	r2, #2
 80014e6:	784c      	ldrb	r4, [r1, #1]
 80014e8:	549c      	strb	r4, [r3, r2]
                case 0: d[inSz - 1 - 0] = in[0];
 80014ea:	780a      	ldrb	r2, [r1, #0]
 80014ec:	f803 2008 	strb.w	r2, [r3, r8]
        sp_clamp(a);
 80014f0:	6833      	ldr	r3, [r6, #0]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db05      	blt.n	8001504 <sp_read_unsigned_bin+0xe2>
 80014f8:	1c9a      	adds	r2, r3, #2
 80014fa:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 80014fe:	b90a      	cbnz	r2, 8001504 <sp_read_unsigned_bin+0xe2>
 8001500:	3b01      	subs	r3, #1
 8001502:	e7f7      	b.n	80014f4 <sp_read_unsigned_bin+0xd2>
 8001504:	3301      	adds	r3, #1
 8001506:	6033      	str	r3, [r6, #0]
}
 8001508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        err = MP_VAL;
 800150c:	f06f 0002 	mvn.w	r0, #2
    return err;
 8001510:	e7fa      	b.n	8001508 <sp_read_unsigned_bin+0xe6>
	...

08001514 <sp_read_radix>:
 */
int sp_read_radix(sp_int* a, const char* in, int radix)
{
    int err = MP_OKAY;

    if ((a == NULL) || (in == NULL)) {
 8001514:	b148      	cbz	r0, 800152a <sp_read_radix+0x16>
{
 8001516:	b510      	push	{r4, lr}
    if ((a == NULL) || (in == NULL)) {
 8001518:	b151      	cbz	r1, 8001530 <sp_read_radix+0x1c>
        err = MP_VAL;
    }

    if (err == MP_OKAY) {
    #ifndef WOLFSSL_SP_INT_NEGATIVE
        if (*in == '-') {
 800151a:	780b      	ldrb	r3, [r1, #0]
 800151c:	2b2d      	cmp	r3, #45	; 0x2d
 800151e:	d00a      	beq.n	8001536 <sp_read_radix+0x22>
            err = MP_VAL;
        }
        else
    #endif
        if (radix == 16) {
 8001520:	2a10      	cmp	r2, #16
 8001522:	d10b      	bne.n	800153c <sp_read_radix+0x28>
            err = _sp_read_radix_16(a, in);
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <sp_read_radix+0x30>)
 8001526:	4798      	blx	r3
            err = MP_VAL;
        }
    }

    return err;
}
 8001528:	bd10      	pop	{r4, pc}
        err = MP_VAL;
 800152a:	f06f 0002 	mvn.w	r0, #2
}
 800152e:	4770      	bx	lr
        err = MP_VAL;
 8001530:	f06f 0002 	mvn.w	r0, #2
 8001534:	e7f8      	b.n	8001528 <sp_read_radix+0x14>
            err = MP_VAL;
 8001536:	f06f 0002 	mvn.w	r0, #2
 800153a:	e7f5      	b.n	8001528 <sp_read_radix+0x14>
            err = MP_VAL;
 800153c:	f06f 0002 	mvn.w	r0, #2
    return err;
 8001540:	e7f2      	b.n	8001528 <sp_read_radix+0x14>
 8001542:	bf00      	nop
 8001544:	0800123d 	.word	0x0800123d

08001548 <sp_256_mul_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static void sp_256_mul_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8001548:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800154c:	b089      	sub	sp, #36	; 0x24
    sp_digit tmp_arr[8];
    sp_digit* tmp = tmp_arr;

    __asm__ __volatile__ (
 800154e:	466f      	mov	r7, sp
 8001550:	680e      	ldr	r6, [r1, #0]
 8001552:	f8d2 8000 	ldr.w	r8, [r2]
 8001556:	fba6 3408 	umull	r3, r4, r6, r8
 800155a:	f04f 0500 	mov.w	r5, #0
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001568:	fba6 6808 	umull	r6, r8, r6, r8
 800156c:	19a4      	adds	r4, r4, r6
 800156e:	eb45 0508 	adc.w	r5, r5, r8
 8001572:	684e      	ldr	r6, [r1, #4]
 8001574:	f8d2 8000 	ldr.w	r8, [r2]
 8001578:	fba6 6808 	umull	r6, r8, r6, r8
 800157c:	19a4      	adds	r4, r4, r6
 800157e:	eb55 0508 	adcs.w	r5, r5, r8
 8001582:	f143 0300 	adc.w	r3, r3, #0
 8001586:	607c      	str	r4, [r7, #4]
 8001588:	f04f 0400 	mov.w	r4, #0
 800158c:	680e      	ldr	r6, [r1, #0]
 800158e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001592:	fba6 6808 	umull	r6, r8, r6, r8
 8001596:	19ad      	adds	r5, r5, r6
 8001598:	eb53 0308 	adcs.w	r3, r3, r8
 800159c:	f144 0400 	adc.w	r4, r4, #0
 80015a0:	684e      	ldr	r6, [r1, #4]
 80015a2:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80015a6:	fba6 6808 	umull	r6, r8, r6, r8
 80015aa:	19ad      	adds	r5, r5, r6
 80015ac:	eb53 0308 	adcs.w	r3, r3, r8
 80015b0:	f144 0400 	adc.w	r4, r4, #0
 80015b4:	688e      	ldr	r6, [r1, #8]
 80015b6:	f8d2 8000 	ldr.w	r8, [r2]
 80015ba:	fba6 6808 	umull	r6, r8, r6, r8
 80015be:	19ad      	adds	r5, r5, r6
 80015c0:	eb53 0308 	adcs.w	r3, r3, r8
 80015c4:	f144 0400 	adc.w	r4, r4, #0
 80015c8:	60bd      	str	r5, [r7, #8]
 80015ca:	f04f 0500 	mov.w	r5, #0
 80015ce:	680e      	ldr	r6, [r1, #0]
 80015d0:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80015d4:	fba6 6808 	umull	r6, r8, r6, r8
 80015d8:	199b      	adds	r3, r3, r6
 80015da:	eb54 0408 	adcs.w	r4, r4, r8
 80015de:	f145 0500 	adc.w	r5, r5, #0
 80015e2:	684e      	ldr	r6, [r1, #4]
 80015e4:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80015e8:	fba6 6808 	umull	r6, r8, r6, r8
 80015ec:	199b      	adds	r3, r3, r6
 80015ee:	eb54 0408 	adcs.w	r4, r4, r8
 80015f2:	f145 0500 	adc.w	r5, r5, #0
 80015f6:	688e      	ldr	r6, [r1, #8]
 80015f8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80015fc:	fba6 6808 	umull	r6, r8, r6, r8
 8001600:	199b      	adds	r3, r3, r6
 8001602:	eb54 0408 	adcs.w	r4, r4, r8
 8001606:	f145 0500 	adc.w	r5, r5, #0
 800160a:	68ce      	ldr	r6, [r1, #12]
 800160c:	f8d2 8000 	ldr.w	r8, [r2]
 8001610:	fba6 6808 	umull	r6, r8, r6, r8
 8001614:	199b      	adds	r3, r3, r6
 8001616:	eb54 0408 	adcs.w	r4, r4, r8
 800161a:	f145 0500 	adc.w	r5, r5, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	680e      	ldr	r6, [r1, #0]
 8001626:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800162a:	fba6 6808 	umull	r6, r8, r6, r8
 800162e:	19a4      	adds	r4, r4, r6
 8001630:	eb55 0508 	adcs.w	r5, r5, r8
 8001634:	f143 0300 	adc.w	r3, r3, #0
 8001638:	684e      	ldr	r6, [r1, #4]
 800163a:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800163e:	fba6 6808 	umull	r6, r8, r6, r8
 8001642:	19a4      	adds	r4, r4, r6
 8001644:	eb55 0508 	adcs.w	r5, r5, r8
 8001648:	f143 0300 	adc.w	r3, r3, #0
 800164c:	688e      	ldr	r6, [r1, #8]
 800164e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001652:	fba6 6808 	umull	r6, r8, r6, r8
 8001656:	19a4      	adds	r4, r4, r6
 8001658:	eb55 0508 	adcs.w	r5, r5, r8
 800165c:	f143 0300 	adc.w	r3, r3, #0
 8001660:	68ce      	ldr	r6, [r1, #12]
 8001662:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001666:	fba6 6808 	umull	r6, r8, r6, r8
 800166a:	19a4      	adds	r4, r4, r6
 800166c:	eb55 0508 	adcs.w	r5, r5, r8
 8001670:	f143 0300 	adc.w	r3, r3, #0
 8001674:	690e      	ldr	r6, [r1, #16]
 8001676:	f8d2 8000 	ldr.w	r8, [r2]
 800167a:	fba6 6808 	umull	r6, r8, r6, r8
 800167e:	19a4      	adds	r4, r4, r6
 8001680:	eb55 0508 	adcs.w	r5, r5, r8
 8001684:	f143 0300 	adc.w	r3, r3, #0
 8001688:	613c      	str	r4, [r7, #16]
 800168a:	f04f 0400 	mov.w	r4, #0
 800168e:	680e      	ldr	r6, [r1, #0]
 8001690:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001694:	fba6 6808 	umull	r6, r8, r6, r8
 8001698:	19ad      	adds	r5, r5, r6
 800169a:	eb53 0308 	adcs.w	r3, r3, r8
 800169e:	f144 0400 	adc.w	r4, r4, #0
 80016a2:	684e      	ldr	r6, [r1, #4]
 80016a4:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80016a8:	fba6 6808 	umull	r6, r8, r6, r8
 80016ac:	19ad      	adds	r5, r5, r6
 80016ae:	eb53 0308 	adcs.w	r3, r3, r8
 80016b2:	f144 0400 	adc.w	r4, r4, #0
 80016b6:	688e      	ldr	r6, [r1, #8]
 80016b8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80016bc:	fba6 6808 	umull	r6, r8, r6, r8
 80016c0:	19ad      	adds	r5, r5, r6
 80016c2:	eb53 0308 	adcs.w	r3, r3, r8
 80016c6:	f144 0400 	adc.w	r4, r4, #0
 80016ca:	68ce      	ldr	r6, [r1, #12]
 80016cc:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80016d0:	fba6 6808 	umull	r6, r8, r6, r8
 80016d4:	19ad      	adds	r5, r5, r6
 80016d6:	eb53 0308 	adcs.w	r3, r3, r8
 80016da:	f144 0400 	adc.w	r4, r4, #0
 80016de:	690e      	ldr	r6, [r1, #16]
 80016e0:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80016e4:	fba6 6808 	umull	r6, r8, r6, r8
 80016e8:	19ad      	adds	r5, r5, r6
 80016ea:	eb53 0308 	adcs.w	r3, r3, r8
 80016ee:	f144 0400 	adc.w	r4, r4, #0
 80016f2:	694e      	ldr	r6, [r1, #20]
 80016f4:	f8d2 8000 	ldr.w	r8, [r2]
 80016f8:	fba6 6808 	umull	r6, r8, r6, r8
 80016fc:	19ad      	adds	r5, r5, r6
 80016fe:	eb53 0308 	adcs.w	r3, r3, r8
 8001702:	f144 0400 	adc.w	r4, r4, #0
 8001706:	617d      	str	r5, [r7, #20]
 8001708:	f04f 0500 	mov.w	r5, #0
 800170c:	680e      	ldr	r6, [r1, #0]
 800170e:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001712:	fba6 6808 	umull	r6, r8, r6, r8
 8001716:	199b      	adds	r3, r3, r6
 8001718:	eb54 0408 	adcs.w	r4, r4, r8
 800171c:	f145 0500 	adc.w	r5, r5, #0
 8001720:	684e      	ldr	r6, [r1, #4]
 8001722:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001726:	fba6 6808 	umull	r6, r8, r6, r8
 800172a:	199b      	adds	r3, r3, r6
 800172c:	eb54 0408 	adcs.w	r4, r4, r8
 8001730:	f145 0500 	adc.w	r5, r5, #0
 8001734:	688e      	ldr	r6, [r1, #8]
 8001736:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800173a:	fba6 6808 	umull	r6, r8, r6, r8
 800173e:	199b      	adds	r3, r3, r6
 8001740:	eb54 0408 	adcs.w	r4, r4, r8
 8001744:	f145 0500 	adc.w	r5, r5, #0
 8001748:	68ce      	ldr	r6, [r1, #12]
 800174a:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800174e:	fba6 6808 	umull	r6, r8, r6, r8
 8001752:	199b      	adds	r3, r3, r6
 8001754:	eb54 0408 	adcs.w	r4, r4, r8
 8001758:	f145 0500 	adc.w	r5, r5, #0
 800175c:	690e      	ldr	r6, [r1, #16]
 800175e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001762:	fba6 6808 	umull	r6, r8, r6, r8
 8001766:	199b      	adds	r3, r3, r6
 8001768:	eb54 0408 	adcs.w	r4, r4, r8
 800176c:	f145 0500 	adc.w	r5, r5, #0
 8001770:	694e      	ldr	r6, [r1, #20]
 8001772:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8001776:	fba6 6808 	umull	r6, r8, r6, r8
 800177a:	199b      	adds	r3, r3, r6
 800177c:	eb54 0408 	adcs.w	r4, r4, r8
 8001780:	f145 0500 	adc.w	r5, r5, #0
 8001784:	698e      	ldr	r6, [r1, #24]
 8001786:	f8d2 8000 	ldr.w	r8, [r2]
 800178a:	fba6 6808 	umull	r6, r8, r6, r8
 800178e:	199b      	adds	r3, r3, r6
 8001790:	eb54 0408 	adcs.w	r4, r4, r8
 8001794:	f145 0500 	adc.w	r5, r5, #0
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	680e      	ldr	r6, [r1, #0]
 80017a0:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80017a4:	fba6 6808 	umull	r6, r8, r6, r8
 80017a8:	19a4      	adds	r4, r4, r6
 80017aa:	eb55 0508 	adcs.w	r5, r5, r8
 80017ae:	f143 0300 	adc.w	r3, r3, #0
 80017b2:	684e      	ldr	r6, [r1, #4]
 80017b4:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80017b8:	fba6 6808 	umull	r6, r8, r6, r8
 80017bc:	19a4      	adds	r4, r4, r6
 80017be:	eb55 0508 	adcs.w	r5, r5, r8
 80017c2:	f143 0300 	adc.w	r3, r3, #0
 80017c6:	688e      	ldr	r6, [r1, #8]
 80017c8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80017cc:	fba6 6808 	umull	r6, r8, r6, r8
 80017d0:	19a4      	adds	r4, r4, r6
 80017d2:	eb55 0508 	adcs.w	r5, r5, r8
 80017d6:	f143 0300 	adc.w	r3, r3, #0
 80017da:	68ce      	ldr	r6, [r1, #12]
 80017dc:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80017e0:	fba6 6808 	umull	r6, r8, r6, r8
 80017e4:	19a4      	adds	r4, r4, r6
 80017e6:	eb55 0508 	adcs.w	r5, r5, r8
 80017ea:	f143 0300 	adc.w	r3, r3, #0
 80017ee:	690e      	ldr	r6, [r1, #16]
 80017f0:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80017f4:	fba6 6808 	umull	r6, r8, r6, r8
 80017f8:	19a4      	adds	r4, r4, r6
 80017fa:	eb55 0508 	adcs.w	r5, r5, r8
 80017fe:	f143 0300 	adc.w	r3, r3, #0
 8001802:	694e      	ldr	r6, [r1, #20]
 8001804:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001808:	fba6 6808 	umull	r6, r8, r6, r8
 800180c:	19a4      	adds	r4, r4, r6
 800180e:	eb55 0508 	adcs.w	r5, r5, r8
 8001812:	f143 0300 	adc.w	r3, r3, #0
 8001816:	698e      	ldr	r6, [r1, #24]
 8001818:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800181c:	fba6 6808 	umull	r6, r8, r6, r8
 8001820:	19a4      	adds	r4, r4, r6
 8001822:	eb55 0508 	adcs.w	r5, r5, r8
 8001826:	f143 0300 	adc.w	r3, r3, #0
 800182a:	69ce      	ldr	r6, [r1, #28]
 800182c:	f8d2 8000 	ldr.w	r8, [r2]
 8001830:	fba6 6808 	umull	r6, r8, r6, r8
 8001834:	19a4      	adds	r4, r4, r6
 8001836:	eb55 0508 	adcs.w	r5, r5, r8
 800183a:	f143 0300 	adc.w	r3, r3, #0
 800183e:	61fc      	str	r4, [r7, #28]
 8001840:	f04f 0400 	mov.w	r4, #0
 8001844:	684e      	ldr	r6, [r1, #4]
 8001846:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800184a:	fba6 6808 	umull	r6, r8, r6, r8
 800184e:	19ad      	adds	r5, r5, r6
 8001850:	eb53 0308 	adcs.w	r3, r3, r8
 8001854:	f144 0400 	adc.w	r4, r4, #0
 8001858:	688e      	ldr	r6, [r1, #8]
 800185a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800185e:	fba6 6808 	umull	r6, r8, r6, r8
 8001862:	19ad      	adds	r5, r5, r6
 8001864:	eb53 0308 	adcs.w	r3, r3, r8
 8001868:	f144 0400 	adc.w	r4, r4, #0
 800186c:	68ce      	ldr	r6, [r1, #12]
 800186e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001872:	fba6 6808 	umull	r6, r8, r6, r8
 8001876:	19ad      	adds	r5, r5, r6
 8001878:	eb53 0308 	adcs.w	r3, r3, r8
 800187c:	f144 0400 	adc.w	r4, r4, #0
 8001880:	690e      	ldr	r6, [r1, #16]
 8001882:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001886:	fba6 6808 	umull	r6, r8, r6, r8
 800188a:	19ad      	adds	r5, r5, r6
 800188c:	eb53 0308 	adcs.w	r3, r3, r8
 8001890:	f144 0400 	adc.w	r4, r4, #0
 8001894:	694e      	ldr	r6, [r1, #20]
 8001896:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800189a:	fba6 6808 	umull	r6, r8, r6, r8
 800189e:	19ad      	adds	r5, r5, r6
 80018a0:	eb53 0308 	adcs.w	r3, r3, r8
 80018a4:	f144 0400 	adc.w	r4, r4, #0
 80018a8:	698e      	ldr	r6, [r1, #24]
 80018aa:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80018ae:	fba6 6808 	umull	r6, r8, r6, r8
 80018b2:	19ad      	adds	r5, r5, r6
 80018b4:	eb53 0308 	adcs.w	r3, r3, r8
 80018b8:	f144 0400 	adc.w	r4, r4, #0
 80018bc:	69ce      	ldr	r6, [r1, #28]
 80018be:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80018c2:	fba6 6808 	umull	r6, r8, r6, r8
 80018c6:	19ad      	adds	r5, r5, r6
 80018c8:	eb53 0308 	adcs.w	r3, r3, r8
 80018cc:	f144 0400 	adc.w	r4, r4, #0
 80018d0:	6205      	str	r5, [r0, #32]
 80018d2:	f04f 0500 	mov.w	r5, #0
 80018d6:	688e      	ldr	r6, [r1, #8]
 80018d8:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80018dc:	fba6 6808 	umull	r6, r8, r6, r8
 80018e0:	199b      	adds	r3, r3, r6
 80018e2:	eb54 0408 	adcs.w	r4, r4, r8
 80018e6:	f145 0500 	adc.w	r5, r5, #0
 80018ea:	68ce      	ldr	r6, [r1, #12]
 80018ec:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80018f0:	fba6 6808 	umull	r6, r8, r6, r8
 80018f4:	199b      	adds	r3, r3, r6
 80018f6:	eb54 0408 	adcs.w	r4, r4, r8
 80018fa:	f145 0500 	adc.w	r5, r5, #0
 80018fe:	690e      	ldr	r6, [r1, #16]
 8001900:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001904:	fba6 6808 	umull	r6, r8, r6, r8
 8001908:	199b      	adds	r3, r3, r6
 800190a:	eb54 0408 	adcs.w	r4, r4, r8
 800190e:	f145 0500 	adc.w	r5, r5, #0
 8001912:	694e      	ldr	r6, [r1, #20]
 8001914:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001918:	fba6 6808 	umull	r6, r8, r6, r8
 800191c:	199b      	adds	r3, r3, r6
 800191e:	eb54 0408 	adcs.w	r4, r4, r8
 8001922:	f145 0500 	adc.w	r5, r5, #0
 8001926:	698e      	ldr	r6, [r1, #24]
 8001928:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800192c:	fba6 6808 	umull	r6, r8, r6, r8
 8001930:	199b      	adds	r3, r3, r6
 8001932:	eb54 0408 	adcs.w	r4, r4, r8
 8001936:	f145 0500 	adc.w	r5, r5, #0
 800193a:	69ce      	ldr	r6, [r1, #28]
 800193c:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001940:	fba6 6808 	umull	r6, r8, r6, r8
 8001944:	199b      	adds	r3, r3, r6
 8001946:	eb54 0408 	adcs.w	r4, r4, r8
 800194a:	f145 0500 	adc.w	r5, r5, #0
 800194e:	6243      	str	r3, [r0, #36]	; 0x24
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	68ce      	ldr	r6, [r1, #12]
 8001956:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800195a:	fba6 6808 	umull	r6, r8, r6, r8
 800195e:	19a4      	adds	r4, r4, r6
 8001960:	eb55 0508 	adcs.w	r5, r5, r8
 8001964:	f143 0300 	adc.w	r3, r3, #0
 8001968:	690e      	ldr	r6, [r1, #16]
 800196a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800196e:	fba6 6808 	umull	r6, r8, r6, r8
 8001972:	19a4      	adds	r4, r4, r6
 8001974:	eb55 0508 	adcs.w	r5, r5, r8
 8001978:	f143 0300 	adc.w	r3, r3, #0
 800197c:	694e      	ldr	r6, [r1, #20]
 800197e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001982:	fba6 6808 	umull	r6, r8, r6, r8
 8001986:	19a4      	adds	r4, r4, r6
 8001988:	eb55 0508 	adcs.w	r5, r5, r8
 800198c:	f143 0300 	adc.w	r3, r3, #0
 8001990:	698e      	ldr	r6, [r1, #24]
 8001992:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001996:	fba6 6808 	umull	r6, r8, r6, r8
 800199a:	19a4      	adds	r4, r4, r6
 800199c:	eb55 0508 	adcs.w	r5, r5, r8
 80019a0:	f143 0300 	adc.w	r3, r3, #0
 80019a4:	69ce      	ldr	r6, [r1, #28]
 80019a6:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80019aa:	fba6 6808 	umull	r6, r8, r6, r8
 80019ae:	19a4      	adds	r4, r4, r6
 80019b0:	eb55 0508 	adcs.w	r5, r5, r8
 80019b4:	f143 0300 	adc.w	r3, r3, #0
 80019b8:	6284      	str	r4, [r0, #40]	; 0x28
 80019ba:	f04f 0400 	mov.w	r4, #0
 80019be:	690e      	ldr	r6, [r1, #16]
 80019c0:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80019c4:	fba6 6808 	umull	r6, r8, r6, r8
 80019c8:	19ad      	adds	r5, r5, r6
 80019ca:	eb53 0308 	adcs.w	r3, r3, r8
 80019ce:	f144 0400 	adc.w	r4, r4, #0
 80019d2:	694e      	ldr	r6, [r1, #20]
 80019d4:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80019d8:	fba6 6808 	umull	r6, r8, r6, r8
 80019dc:	19ad      	adds	r5, r5, r6
 80019de:	eb53 0308 	adcs.w	r3, r3, r8
 80019e2:	f144 0400 	adc.w	r4, r4, #0
 80019e6:	698e      	ldr	r6, [r1, #24]
 80019e8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80019ec:	fba6 6808 	umull	r6, r8, r6, r8
 80019f0:	19ad      	adds	r5, r5, r6
 80019f2:	eb53 0308 	adcs.w	r3, r3, r8
 80019f6:	f144 0400 	adc.w	r4, r4, #0
 80019fa:	69ce      	ldr	r6, [r1, #28]
 80019fc:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8001a00:	fba6 6808 	umull	r6, r8, r6, r8
 8001a04:	19ad      	adds	r5, r5, r6
 8001a06:	eb53 0308 	adcs.w	r3, r3, r8
 8001a0a:	f144 0400 	adc.w	r4, r4, #0
 8001a0e:	62c5      	str	r5, [r0, #44]	; 0x2c
 8001a10:	f04f 0500 	mov.w	r5, #0
 8001a14:	694e      	ldr	r6, [r1, #20]
 8001a16:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8001a1a:	fba6 6808 	umull	r6, r8, r6, r8
 8001a1e:	199b      	adds	r3, r3, r6
 8001a20:	eb54 0408 	adcs.w	r4, r4, r8
 8001a24:	f145 0500 	adc.w	r5, r5, #0
 8001a28:	698e      	ldr	r6, [r1, #24]
 8001a2a:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001a2e:	fba6 6808 	umull	r6, r8, r6, r8
 8001a32:	199b      	adds	r3, r3, r6
 8001a34:	eb54 0408 	adcs.w	r4, r4, r8
 8001a38:	f145 0500 	adc.w	r5, r5, #0
 8001a3c:	69ce      	ldr	r6, [r1, #28]
 8001a3e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8001a42:	fba6 6808 	umull	r6, r8, r6, r8
 8001a46:	199b      	adds	r3, r3, r6
 8001a48:	eb54 0408 	adcs.w	r4, r4, r8
 8001a4c:	f145 0500 	adc.w	r5, r5, #0
 8001a50:	6303      	str	r3, [r0, #48]	; 0x30
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	698e      	ldr	r6, [r1, #24]
 8001a58:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8001a5c:	fba6 6808 	umull	r6, r8, r6, r8
 8001a60:	19a4      	adds	r4, r4, r6
 8001a62:	eb55 0508 	adcs.w	r5, r5, r8
 8001a66:	f143 0300 	adc.w	r3, r3, #0
 8001a6a:	69ce      	ldr	r6, [r1, #28]
 8001a6c:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8001a70:	fba6 6808 	umull	r6, r8, r6, r8
 8001a74:	19a4      	adds	r4, r4, r6
 8001a76:	eb55 0508 	adcs.w	r5, r5, r8
 8001a7a:	f143 0300 	adc.w	r3, r3, #0
 8001a7e:	6344      	str	r4, [r0, #52]	; 0x34
 8001a80:	f04f 0400 	mov.w	r4, #0
 8001a84:	69ce      	ldr	r6, [r1, #28]
 8001a86:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8001a8a:	fba6 6808 	umull	r6, r8, r6, r8
 8001a8e:	19ad      	adds	r5, r5, r6
 8001a90:	eb43 0308 	adc.w	r3, r3, r8
 8001a94:	6385      	str	r5, [r0, #56]	; 0x38
 8001a96:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	687c      	ldr	r4, [r7, #4]
 8001a9c:	68bd      	ldr	r5, [r7, #8]
 8001a9e:	68fe      	ldr	r6, [r7, #12]
 8001aa0:	6003      	str	r3, [r0, #0]
 8001aa2:	6044      	str	r4, [r0, #4]
 8001aa4:	6085      	str	r5, [r0, #8]
 8001aa6:	60c6      	str	r6, [r0, #12]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	697c      	ldr	r4, [r7, #20]
 8001aac:	69bd      	ldr	r5, [r7, #24]
 8001aae:	69fe      	ldr	r6, [r7, #28]
 8001ab0:	6103      	str	r3, [r0, #16]
 8001ab2:	6144      	str	r4, [r0, #20]
 8001ab4:	6185      	str	r5, [r0, #24]
 8001ab6:	61c6      	str	r6, [r0, #28]
        "str	r6, [%[r], #28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [tmp] "r" (tmp)
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );
}
 8001ab8:	b009      	add	sp, #36	; 0x24
 8001aba:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001abe:	4770      	bx	lr

08001ac0 <sp_256_sqr_8>:
 *
 * r  A single precision integer.
 * a  A single precision integer.
 */
SP_NOINLINE static void sp_256_sqr_8(sp_digit* r, const sp_digit* a)
{
 8001ac0:	e92d 0f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp}
 8001ac4:	b089      	sub	sp, #36	; 0x24
    sp_digit tmp_arr[8];
    sp_digit* tmp = tmp_arr;
    __asm__ __volatile__ (
 8001ac6:	466a      	mov	r2, sp
 8001ac8:	680e      	ldr	r6, [r1, #0]
 8001aca:	fba6 3406 	umull	r3, r4, r6, r6
 8001ace:	f04f 0500 	mov.w	r5, #0
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8001adc:	fba6 6808 	umull	r6, r8, r6, r8
 8001ae0:	19a4      	adds	r4, r4, r6
 8001ae2:	eb45 0508 	adc.w	r5, r5, r8
 8001ae6:	19a4      	adds	r4, r4, r6
 8001ae8:	eb55 0508 	adcs.w	r5, r5, r8
 8001aec:	f143 0300 	adc.w	r3, r3, #0
 8001af0:	6054      	str	r4, [r2, #4]
 8001af2:	f04f 0400 	mov.w	r4, #0
 8001af6:	680e      	ldr	r6, [r1, #0]
 8001af8:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8001afc:	fba6 6808 	umull	r6, r8, r6, r8
 8001b00:	19ad      	adds	r5, r5, r6
 8001b02:	eb43 0308 	adc.w	r3, r3, r8
 8001b06:	19ad      	adds	r5, r5, r6
 8001b08:	eb53 0308 	adcs.w	r3, r3, r8
 8001b0c:	f144 0400 	adc.w	r4, r4, #0
 8001b10:	684e      	ldr	r6, [r1, #4]
 8001b12:	fba6 6806 	umull	r6, r8, r6, r6
 8001b16:	19ad      	adds	r5, r5, r6
 8001b18:	eb53 0308 	adcs.w	r3, r3, r8
 8001b1c:	f144 0400 	adc.w	r4, r4, #0
 8001b20:	6095      	str	r5, [r2, #8]
 8001b22:	f04f 0500 	mov.w	r5, #0
 8001b26:	680e      	ldr	r6, [r1, #0]
 8001b28:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8001b2c:	fba6 9a08 	umull	r9, sl, r6, r8
 8001b30:	f04f 0b00 	mov.w	fp, #0
 8001b34:	684e      	ldr	r6, [r1, #4]
 8001b36:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8001b3a:	fba6 6808 	umull	r6, r8, r6, r8
 8001b3e:	eb19 0906 	adds.w	r9, r9, r6
 8001b42:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001b46:	f14b 0b00 	adc.w	fp, fp, #0
 8001b4a:	eb19 0909 	adds.w	r9, r9, r9
 8001b4e:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001b52:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001b56:	eb13 0309 	adds.w	r3, r3, r9
 8001b5a:	eb54 040a 	adcs.w	r4, r4, sl
 8001b5e:	eb45 050b 	adc.w	r5, r5, fp
 8001b62:	60d3      	str	r3, [r2, #12]
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	680e      	ldr	r6, [r1, #0]
 8001b6a:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8001b6e:	fba6 9a08 	umull	r9, sl, r6, r8
 8001b72:	f04f 0b00 	mov.w	fp, #0
 8001b76:	684e      	ldr	r6, [r1, #4]
 8001b78:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8001b7c:	fba6 6808 	umull	r6, r8, r6, r8
 8001b80:	eb19 0906 	adds.w	r9, r9, r6
 8001b84:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001b88:	f14b 0b00 	adc.w	fp, fp, #0
 8001b8c:	688e      	ldr	r6, [r1, #8]
 8001b8e:	fba6 6806 	umull	r6, r8, r6, r6
 8001b92:	19a4      	adds	r4, r4, r6
 8001b94:	eb55 0508 	adcs.w	r5, r5, r8
 8001b98:	f143 0300 	adc.w	r3, r3, #0
 8001b9c:	eb19 0909 	adds.w	r9, r9, r9
 8001ba0:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001ba4:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001ba8:	eb14 0409 	adds.w	r4, r4, r9
 8001bac:	eb55 050a 	adcs.w	r5, r5, sl
 8001bb0:	eb43 030b 	adc.w	r3, r3, fp
 8001bb4:	6114      	str	r4, [r2, #16]
 8001bb6:	f04f 0400 	mov.w	r4, #0
 8001bba:	680e      	ldr	r6, [r1, #0]
 8001bbc:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001bc0:	fba6 9a08 	umull	r9, sl, r6, r8
 8001bc4:	f04f 0b00 	mov.w	fp, #0
 8001bc8:	684e      	ldr	r6, [r1, #4]
 8001bca:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8001bce:	fba6 6808 	umull	r6, r8, r6, r8
 8001bd2:	eb19 0906 	adds.w	r9, r9, r6
 8001bd6:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001bda:	f14b 0b00 	adc.w	fp, fp, #0
 8001bde:	688e      	ldr	r6, [r1, #8]
 8001be0:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8001be4:	fba6 6808 	umull	r6, r8, r6, r8
 8001be8:	eb19 0906 	adds.w	r9, r9, r6
 8001bec:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001bf0:	f14b 0b00 	adc.w	fp, fp, #0
 8001bf4:	eb19 0909 	adds.w	r9, r9, r9
 8001bf8:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001bfc:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001c00:	eb15 0509 	adds.w	r5, r5, r9
 8001c04:	eb53 030a 	adcs.w	r3, r3, sl
 8001c08:	eb44 040b 	adc.w	r4, r4, fp
 8001c0c:	6155      	str	r5, [r2, #20]
 8001c0e:	f04f 0500 	mov.w	r5, #0
 8001c12:	680e      	ldr	r6, [r1, #0]
 8001c14:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001c18:	fba6 9a08 	umull	r9, sl, r6, r8
 8001c1c:	f04f 0b00 	mov.w	fp, #0
 8001c20:	684e      	ldr	r6, [r1, #4]
 8001c22:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001c26:	fba6 6808 	umull	r6, r8, r6, r8
 8001c2a:	eb19 0906 	adds.w	r9, r9, r6
 8001c2e:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001c32:	f14b 0b00 	adc.w	fp, fp, #0
 8001c36:	688e      	ldr	r6, [r1, #8]
 8001c38:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8001c3c:	fba6 6808 	umull	r6, r8, r6, r8
 8001c40:	eb19 0906 	adds.w	r9, r9, r6
 8001c44:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001c48:	f14b 0b00 	adc.w	fp, fp, #0
 8001c4c:	68ce      	ldr	r6, [r1, #12]
 8001c4e:	fba6 6806 	umull	r6, r8, r6, r6
 8001c52:	199b      	adds	r3, r3, r6
 8001c54:	eb54 0408 	adcs.w	r4, r4, r8
 8001c58:	f145 0500 	adc.w	r5, r5, #0
 8001c5c:	eb19 0909 	adds.w	r9, r9, r9
 8001c60:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001c64:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001c68:	eb13 0309 	adds.w	r3, r3, r9
 8001c6c:	eb54 040a 	adcs.w	r4, r4, sl
 8001c70:	eb45 050b 	adc.w	r5, r5, fp
 8001c74:	6193      	str	r3, [r2, #24]
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	680e      	ldr	r6, [r1, #0]
 8001c7c:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001c80:	fba6 9a08 	umull	r9, sl, r6, r8
 8001c84:	f04f 0b00 	mov.w	fp, #0
 8001c88:	684e      	ldr	r6, [r1, #4]
 8001c8a:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001c8e:	fba6 6808 	umull	r6, r8, r6, r8
 8001c92:	eb19 0906 	adds.w	r9, r9, r6
 8001c96:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001c9a:	f14b 0b00 	adc.w	fp, fp, #0
 8001c9e:	688e      	ldr	r6, [r1, #8]
 8001ca0:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001ca4:	fba6 6808 	umull	r6, r8, r6, r8
 8001ca8:	eb19 0906 	adds.w	r9, r9, r6
 8001cac:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001cb0:	f14b 0b00 	adc.w	fp, fp, #0
 8001cb4:	68ce      	ldr	r6, [r1, #12]
 8001cb6:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8001cba:	fba6 6808 	umull	r6, r8, r6, r8
 8001cbe:	eb19 0906 	adds.w	r9, r9, r6
 8001cc2:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001cc6:	f14b 0b00 	adc.w	fp, fp, #0
 8001cca:	eb19 0909 	adds.w	r9, r9, r9
 8001cce:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001cd2:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001cd6:	eb14 0409 	adds.w	r4, r4, r9
 8001cda:	eb55 050a 	adcs.w	r5, r5, sl
 8001cde:	eb43 030b 	adc.w	r3, r3, fp
 8001ce2:	61d4      	str	r4, [r2, #28]
 8001ce4:	f04f 0400 	mov.w	r4, #0
 8001ce8:	684e      	ldr	r6, [r1, #4]
 8001cea:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001cee:	fba6 9a08 	umull	r9, sl, r6, r8
 8001cf2:	f04f 0b00 	mov.w	fp, #0
 8001cf6:	688e      	ldr	r6, [r1, #8]
 8001cf8:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001cfc:	fba6 6808 	umull	r6, r8, r6, r8
 8001d00:	eb19 0906 	adds.w	r9, r9, r6
 8001d04:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001d08:	f14b 0b00 	adc.w	fp, fp, #0
 8001d0c:	68ce      	ldr	r6, [r1, #12]
 8001d0e:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001d12:	fba6 6808 	umull	r6, r8, r6, r8
 8001d16:	eb19 0906 	adds.w	r9, r9, r6
 8001d1a:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001d1e:	f14b 0b00 	adc.w	fp, fp, #0
 8001d22:	690e      	ldr	r6, [r1, #16]
 8001d24:	fba6 6806 	umull	r6, r8, r6, r6
 8001d28:	19ad      	adds	r5, r5, r6
 8001d2a:	eb53 0308 	adcs.w	r3, r3, r8
 8001d2e:	f144 0400 	adc.w	r4, r4, #0
 8001d32:	eb19 0909 	adds.w	r9, r9, r9
 8001d36:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001d3a:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001d3e:	eb15 0509 	adds.w	r5, r5, r9
 8001d42:	eb53 030a 	adcs.w	r3, r3, sl
 8001d46:	eb44 040b 	adc.w	r4, r4, fp
 8001d4a:	6205      	str	r5, [r0, #32]
 8001d4c:	f04f 0500 	mov.w	r5, #0
 8001d50:	688e      	ldr	r6, [r1, #8]
 8001d52:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001d56:	fba6 9a08 	umull	r9, sl, r6, r8
 8001d5a:	f04f 0b00 	mov.w	fp, #0
 8001d5e:	68ce      	ldr	r6, [r1, #12]
 8001d60:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001d64:	fba6 6808 	umull	r6, r8, r6, r8
 8001d68:	eb19 0906 	adds.w	r9, r9, r6
 8001d6c:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001d70:	f14b 0b00 	adc.w	fp, fp, #0
 8001d74:	690e      	ldr	r6, [r1, #16]
 8001d76:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001d7a:	fba6 6808 	umull	r6, r8, r6, r8
 8001d7e:	eb19 0906 	adds.w	r9, r9, r6
 8001d82:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001d86:	f14b 0b00 	adc.w	fp, fp, #0
 8001d8a:	eb19 0909 	adds.w	r9, r9, r9
 8001d8e:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001d92:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001d96:	eb13 0309 	adds.w	r3, r3, r9
 8001d9a:	eb54 040a 	adcs.w	r4, r4, sl
 8001d9e:	eb45 050b 	adc.w	r5, r5, fp
 8001da2:	6243      	str	r3, [r0, #36]	; 0x24
 8001da4:	f04f 0300 	mov.w	r3, #0
 8001da8:	68ce      	ldr	r6, [r1, #12]
 8001daa:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001dae:	fba6 9a08 	umull	r9, sl, r6, r8
 8001db2:	f04f 0b00 	mov.w	fp, #0
 8001db6:	690e      	ldr	r6, [r1, #16]
 8001db8:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001dbc:	fba6 6808 	umull	r6, r8, r6, r8
 8001dc0:	eb19 0906 	adds.w	r9, r9, r6
 8001dc4:	eb5a 0a08 	adcs.w	sl, sl, r8
 8001dc8:	f14b 0b00 	adc.w	fp, fp, #0
 8001dcc:	694e      	ldr	r6, [r1, #20]
 8001dce:	fba6 6806 	umull	r6, r8, r6, r6
 8001dd2:	19a4      	adds	r4, r4, r6
 8001dd4:	eb55 0508 	adcs.w	r5, r5, r8
 8001dd8:	f143 0300 	adc.w	r3, r3, #0
 8001ddc:	eb19 0909 	adds.w	r9, r9, r9
 8001de0:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8001de4:	eb4b 0b0b 	adc.w	fp, fp, fp
 8001de8:	eb14 0409 	adds.w	r4, r4, r9
 8001dec:	eb55 050a 	adcs.w	r5, r5, sl
 8001df0:	eb43 030b 	adc.w	r3, r3, fp
 8001df4:	6284      	str	r4, [r0, #40]	; 0x28
 8001df6:	f04f 0400 	mov.w	r4, #0
 8001dfa:	690e      	ldr	r6, [r1, #16]
 8001dfc:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001e00:	fba6 6808 	umull	r6, r8, r6, r8
 8001e04:	19ad      	adds	r5, r5, r6
 8001e06:	eb53 0308 	adcs.w	r3, r3, r8
 8001e0a:	f144 0400 	adc.w	r4, r4, #0
 8001e0e:	19ad      	adds	r5, r5, r6
 8001e10:	eb53 0308 	adcs.w	r3, r3, r8
 8001e14:	f144 0400 	adc.w	r4, r4, #0
 8001e18:	694e      	ldr	r6, [r1, #20]
 8001e1a:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8001e1e:	fba6 6808 	umull	r6, r8, r6, r8
 8001e22:	19ad      	adds	r5, r5, r6
 8001e24:	eb53 0308 	adcs.w	r3, r3, r8
 8001e28:	f144 0400 	adc.w	r4, r4, #0
 8001e2c:	19ad      	adds	r5, r5, r6
 8001e2e:	eb53 0308 	adcs.w	r3, r3, r8
 8001e32:	f144 0400 	adc.w	r4, r4, #0
 8001e36:	62c5      	str	r5, [r0, #44]	; 0x2c
 8001e38:	f04f 0500 	mov.w	r5, #0
 8001e3c:	694e      	ldr	r6, [r1, #20]
 8001e3e:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001e42:	fba6 6808 	umull	r6, r8, r6, r8
 8001e46:	199b      	adds	r3, r3, r6
 8001e48:	eb54 0408 	adcs.w	r4, r4, r8
 8001e4c:	f145 0500 	adc.w	r5, r5, #0
 8001e50:	199b      	adds	r3, r3, r6
 8001e52:	eb54 0408 	adcs.w	r4, r4, r8
 8001e56:	f145 0500 	adc.w	r5, r5, #0
 8001e5a:	698e      	ldr	r6, [r1, #24]
 8001e5c:	fba6 6806 	umull	r6, r8, r6, r6
 8001e60:	199b      	adds	r3, r3, r6
 8001e62:	eb54 0408 	adcs.w	r4, r4, r8
 8001e66:	f145 0500 	adc.w	r5, r5, #0
 8001e6a:	6303      	str	r3, [r0, #48]	; 0x30
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	698e      	ldr	r6, [r1, #24]
 8001e72:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8001e76:	fba6 6808 	umull	r6, r8, r6, r8
 8001e7a:	19a4      	adds	r4, r4, r6
 8001e7c:	eb55 0508 	adcs.w	r5, r5, r8
 8001e80:	f143 0300 	adc.w	r3, r3, #0
 8001e84:	19a4      	adds	r4, r4, r6
 8001e86:	eb55 0508 	adcs.w	r5, r5, r8
 8001e8a:	f143 0300 	adc.w	r3, r3, #0
 8001e8e:	6344      	str	r4, [r0, #52]	; 0x34
 8001e90:	f04f 0400 	mov.w	r4, #0
 8001e94:	69ce      	ldr	r6, [r1, #28]
 8001e96:	fba6 6806 	umull	r6, r8, r6, r6
 8001e9a:	19ad      	adds	r5, r5, r6
 8001e9c:	eb43 0308 	adc.w	r3, r3, r8
 8001ea0:	6385      	str	r5, [r0, #56]	; 0x38
 8001ea2:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001ea4:	6813      	ldr	r3, [r2, #0]
 8001ea6:	6854      	ldr	r4, [r2, #4]
 8001ea8:	6895      	ldr	r5, [r2, #8]
 8001eaa:	68d6      	ldr	r6, [r2, #12]
 8001eac:	6003      	str	r3, [r0, #0]
 8001eae:	6044      	str	r4, [r0, #4]
 8001eb0:	6085      	str	r5, [r0, #8]
 8001eb2:	60c6      	str	r6, [r0, #12]
 8001eb4:	6913      	ldr	r3, [r2, #16]
 8001eb6:	6954      	ldr	r4, [r2, #20]
 8001eb8:	6995      	ldr	r5, [r2, #24]
 8001eba:	69d6      	ldr	r6, [r2, #28]
 8001ebc:	6103      	str	r3, [r0, #16]
 8001ebe:	6144      	str	r4, [r0, #20]
 8001ec0:	6185      	str	r5, [r0, #24]
 8001ec2:	61c6      	str	r6, [r0, #28]
        "str	r6, [%[r], #28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [tmp] "r" (tmp)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11"
    );
}
 8001ec4:	b009      	add	sp, #36	; 0x24
 8001ec6:	e8bd 0f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp}
 8001eca:	4770      	bx	lr

08001ecc <sp_256_add_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_add_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8001ecc:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
 8001ed0:	4603      	mov	r3, r0
    sp_digit c = 0;

    __asm__ __volatile__ (
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	460e      	mov	r6, r1
 8001ed6:	f04f 0800 	mov.w	r8, #0
 8001eda:	f106 0620 	add.w	r6, r6, #32
 8001ede:	f1a8 0801 	sub.w	r8, r8, #1
 8001ee2:	eb10 0008 	adds.w	r0, r0, r8
 8001ee6:	680c      	ldr	r4, [r1, #0]
 8001ee8:	6815      	ldr	r5, [r2, #0]
 8001eea:	416c      	adcs	r4, r5
 8001eec:	601c      	str	r4, [r3, #0]
 8001eee:	f04f 0000 	mov.w	r0, #0
 8001ef2:	eb40 0000 	adc.w	r0, r0, r0
 8001ef6:	f101 0104 	add.w	r1, r1, #4
 8001efa:	f102 0204 	add.w	r2, r2, #4
 8001efe:	f103 0304 	add.w	r3, r3, #4
 8001f02:	42b1      	cmp	r1, r6
 8001f04:	d1ed      	bne.n	8001ee2 <sp_256_add_8+0x16>
        :
        : "memory", "r4", "r5", "r6", "r8"
    );

    return c;
}
 8001f06:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8001f0a:	4770      	bx	lr

08001f0c <sp_256_sub_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_sub_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b)
{
 8001f0c:	b470      	push	{r4, r5, r6}
 8001f0e:	4603      	mov	r3, r0
    sp_digit c = 0;

    __asm__ __volatile__ (
 8001f10:	2000      	movs	r0, #0
 8001f12:	460e      	mov	r6, r1
 8001f14:	f106 0620 	add.w	r6, r6, #32
 8001f18:	f04f 0500 	mov.w	r5, #0
 8001f1c:	1a2d      	subs	r5, r5, r0
 8001f1e:	680c      	ldr	r4, [r1, #0]
 8001f20:	6815      	ldr	r5, [r2, #0]
 8001f22:	41ac      	sbcs	r4, r5
 8001f24:	601c      	str	r4, [r3, #0]
 8001f26:	eb60 0000 	sbc.w	r0, r0, r0
 8001f2a:	f101 0104 	add.w	r1, r1, #4
 8001f2e:	f102 0204 	add.w	r2, r2, #4
 8001f32:	f103 0304 	add.w	r3, r3, #4
 8001f36:	42b1      	cmp	r1, r6
 8001f38:	d1ee      	bne.n	8001f18 <sp_256_sub_8+0xc>
        :
        : "memory", "r4", "r5", "r6"
    );

    return c;
}
 8001f3a:	bc70      	pop	{r4, r5, r6}
 8001f3c:	4770      	bx	lr

08001f3e <sp_256_mod_mul_norm_8>:
 * r  The resulting Montgomery form number.
 * a  The number to convert.
 * m  The modulus (prime).
 */
static int sp_256_mod_mul_norm_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8001f3e:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   (void)m;

    __asm__ __volatile__ (
 8001f42:	b086      	sub	sp, #24
 8001f44:	680a      	ldr	r2, [r1, #0]
 8001f46:	684b      	ldr	r3, [r1, #4]
 8001f48:	688c      	ldr	r4, [r1, #8]
 8001f4a:	68cd      	ldr	r5, [r1, #12]
 8001f4c:	690e      	ldr	r6, [r1, #16]
 8001f4e:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8001f52:	f8d1 9018 	ldr.w	r9, [r1, #24]
 8001f56:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 8001f5a:	f04f 0e00 	mov.w	lr, #0
 8001f5e:	f04f 0c00 	mov.w	ip, #0
 8001f62:	eb12 0b03 	adds.w	fp, r2, r3
 8001f66:	f14e 0e00 	adc.w	lr, lr, #0
 8001f6a:	ebbb 0b05 	subs.w	fp, fp, r5
 8001f6e:	f16c 0c00 	sbc.w	ip, ip, #0
 8001f72:	ebbb 0b06 	subs.w	fp, fp, r6
 8001f76:	f16c 0c00 	sbc.w	ip, ip, #0
 8001f7a:	ebbb 0b08 	subs.w	fp, fp, r8
 8001f7e:	f16c 0c00 	sbc.w	ip, ip, #0
 8001f82:	ebbb 0b09 	subs.w	fp, fp, r9
 8001f86:	f16c 0c00 	sbc.w	ip, ip, #0
 8001f8a:	f8cd b000 	str.w	fp, [sp]
 8001f8e:	f1cc 0c00 	rsb	ip, ip, #0
 8001f92:	f04f 0b00 	mov.w	fp, #0
 8001f96:	eb1e 0e03 	adds.w	lr, lr, r3
 8001f9a:	f14b 0b00 	adc.w	fp, fp, #0
 8001f9e:	eb1e 0e04 	adds.w	lr, lr, r4
 8001fa2:	f14b 0b00 	adc.w	fp, fp, #0
 8001fa6:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001faa:	f04f 0c00 	mov.w	ip, #0
 8001fae:	f16c 0c00 	sbc.w	ip, ip, #0
 8001fb2:	ebbe 0e06 	subs.w	lr, lr, r6
 8001fb6:	f16c 0c00 	sbc.w	ip, ip, #0
 8001fba:	ebbe 0e08 	subs.w	lr, lr, r8
 8001fbe:	f16c 0c00 	sbc.w	ip, ip, #0
 8001fc2:	ebbe 0e09 	subs.w	lr, lr, r9
 8001fc6:	f16c 0c00 	sbc.w	ip, ip, #0
 8001fca:	ebbe 0e0a 	subs.w	lr, lr, sl
 8001fce:	f16c 0c00 	sbc.w	ip, ip, #0
 8001fd2:	f8cd e004 	str.w	lr, [sp, #4]
 8001fd6:	f1cc 0c00 	rsb	ip, ip, #0
 8001fda:	f04f 0e00 	mov.w	lr, #0
 8001fde:	eb1b 0b04 	adds.w	fp, fp, r4
 8001fe2:	f14e 0e00 	adc.w	lr, lr, #0
 8001fe6:	eb1b 0b05 	adds.w	fp, fp, r5
 8001fea:	f14e 0e00 	adc.w	lr, lr, #0
 8001fee:	ebbb 0b0c 	subs.w	fp, fp, ip
 8001ff2:	f04f 0c00 	mov.w	ip, #0
 8001ff6:	f16c 0c00 	sbc.w	ip, ip, #0
 8001ffa:	ebbb 0b08 	subs.w	fp, fp, r8
 8001ffe:	f16c 0c00 	sbc.w	ip, ip, #0
 8002002:	ebbb 0b09 	subs.w	fp, fp, r9
 8002006:	f16c 0c00 	sbc.w	ip, ip, #0
 800200a:	ebbb 0b0a 	subs.w	fp, fp, sl
 800200e:	f16c 0c00 	sbc.w	ip, ip, #0
 8002012:	f8cd b008 	str.w	fp, [sp, #8]
 8002016:	f1cc 0c00 	rsb	ip, ip, #0
 800201a:	f04f 0b00 	mov.w	fp, #0
 800201e:	eb1e 0e05 	adds.w	lr, lr, r5
 8002022:	f14b 0b00 	adc.w	fp, fp, #0
 8002026:	eb1e 0e05 	adds.w	lr, lr, r5
 800202a:	f14b 0b00 	adc.w	fp, fp, #0
 800202e:	eb1e 0e06 	adds.w	lr, lr, r6
 8002032:	f14b 0b00 	adc.w	fp, fp, #0
 8002036:	eb1e 0e06 	adds.w	lr, lr, r6
 800203a:	f14b 0b00 	adc.w	fp, fp, #0
 800203e:	eb1e 0e08 	adds.w	lr, lr, r8
 8002042:	f14b 0b00 	adc.w	fp, fp, #0
 8002046:	ebbe 0e0c 	subs.w	lr, lr, ip
 800204a:	f04f 0c00 	mov.w	ip, #0
 800204e:	f16c 0c00 	sbc.w	ip, ip, #0
 8002052:	ebbe 0e02 	subs.w	lr, lr, r2
 8002056:	f16c 0c00 	sbc.w	ip, ip, #0
 800205a:	ebbe 0e03 	subs.w	lr, lr, r3
 800205e:	f16c 0c00 	sbc.w	ip, ip, #0
 8002062:	ebbe 0e0a 	subs.w	lr, lr, sl
 8002066:	f16c 0c00 	sbc.w	ip, ip, #0
 800206a:	f8cd e00c 	str.w	lr, [sp, #12]
 800206e:	f1cc 0c00 	rsb	ip, ip, #0
 8002072:	f04f 0e00 	mov.w	lr, #0
 8002076:	eb1b 0b06 	adds.w	fp, fp, r6
 800207a:	f14e 0e00 	adc.w	lr, lr, #0
 800207e:	eb1b 0b06 	adds.w	fp, fp, r6
 8002082:	f14e 0e00 	adc.w	lr, lr, #0
 8002086:	eb1b 0b08 	adds.w	fp, fp, r8
 800208a:	f14e 0e00 	adc.w	lr, lr, #0
 800208e:	eb1b 0b08 	adds.w	fp, fp, r8
 8002092:	f14e 0e00 	adc.w	lr, lr, #0
 8002096:	eb1b 0b09 	adds.w	fp, fp, r9
 800209a:	f14e 0e00 	adc.w	lr, lr, #0
 800209e:	ebbb 0b0c 	subs.w	fp, fp, ip
 80020a2:	f04f 0c00 	mov.w	ip, #0
 80020a6:	f16c 0c00 	sbc.w	ip, ip, #0
 80020aa:	ebbb 0b03 	subs.w	fp, fp, r3
 80020ae:	f16c 0c00 	sbc.w	ip, ip, #0
 80020b2:	ebbb 0b04 	subs.w	fp, fp, r4
 80020b6:	f16c 0c00 	sbc.w	ip, ip, #0
 80020ba:	f8cd b010 	str.w	fp, [sp, #16]
 80020be:	f1cc 0c00 	rsb	ip, ip, #0
 80020c2:	f04f 0b00 	mov.w	fp, #0
 80020c6:	eb1e 0e08 	adds.w	lr, lr, r8
 80020ca:	f14b 0b00 	adc.w	fp, fp, #0
 80020ce:	eb1e 0e08 	adds.w	lr, lr, r8
 80020d2:	f14b 0b00 	adc.w	fp, fp, #0
 80020d6:	eb1e 0e09 	adds.w	lr, lr, r9
 80020da:	f14b 0b00 	adc.w	fp, fp, #0
 80020de:	eb1e 0e09 	adds.w	lr, lr, r9
 80020e2:	f14b 0b00 	adc.w	fp, fp, #0
 80020e6:	eb1e 0e0a 	adds.w	lr, lr, sl
 80020ea:	f14b 0b00 	adc.w	fp, fp, #0
 80020ee:	ebbe 0e0c 	subs.w	lr, lr, ip
 80020f2:	f04f 0c00 	mov.w	ip, #0
 80020f6:	f16c 0c00 	sbc.w	ip, ip, #0
 80020fa:	ebbe 0e04 	subs.w	lr, lr, r4
 80020fe:	f16c 0c00 	sbc.w	ip, ip, #0
 8002102:	ebbe 0e05 	subs.w	lr, lr, r5
 8002106:	f16c 0c00 	sbc.w	ip, ip, #0
 800210a:	f8cd e014 	str.w	lr, [sp, #20]
 800210e:	f1cc 0c00 	rsb	ip, ip, #0
 8002112:	f04f 0e00 	mov.w	lr, #0
 8002116:	eb1b 0b08 	adds.w	fp, fp, r8
 800211a:	f14e 0e00 	adc.w	lr, lr, #0
 800211e:	eb1b 0b09 	adds.w	fp, fp, r9
 8002122:	f14e 0e00 	adc.w	lr, lr, #0
 8002126:	eb1b 0b09 	adds.w	fp, fp, r9
 800212a:	f14e 0e00 	adc.w	lr, lr, #0
 800212e:	eb1b 0b09 	adds.w	fp, fp, r9
 8002132:	f14e 0e00 	adc.w	lr, lr, #0
 8002136:	eb1b 0b0a 	adds.w	fp, fp, sl
 800213a:	f14e 0e00 	adc.w	lr, lr, #0
 800213e:	eb1b 0b0a 	adds.w	fp, fp, sl
 8002142:	f14e 0e00 	adc.w	lr, lr, #0
 8002146:	ebbb 0b0c 	subs.w	fp, fp, ip
 800214a:	f04f 0c00 	mov.w	ip, #0
 800214e:	f16c 0c00 	sbc.w	ip, ip, #0
 8002152:	ebbb 0b02 	subs.w	fp, fp, r2
 8002156:	f16c 0c00 	sbc.w	ip, ip, #0
 800215a:	ebbb 0b03 	subs.w	fp, fp, r3
 800215e:	f16c 0c00 	sbc.w	ip, ip, #0
 8002162:	46d9      	mov	r9, fp
 8002164:	f1cc 0c00 	rsb	ip, ip, #0
 8002168:	f04f 0b00 	mov.w	fp, #0
 800216c:	eb1e 0e02 	adds.w	lr, lr, r2
 8002170:	f14b 0b00 	adc.w	fp, fp, #0
 8002174:	eb1e 0e0a 	adds.w	lr, lr, sl
 8002178:	f14b 0b00 	adc.w	fp, fp, #0
 800217c:	eb1e 0e0a 	adds.w	lr, lr, sl
 8002180:	f14b 0b00 	adc.w	fp, fp, #0
 8002184:	eb1e 0e0a 	adds.w	lr, lr, sl
 8002188:	f14b 0b00 	adc.w	fp, fp, #0
 800218c:	ebbe 0e0c 	subs.w	lr, lr, ip
 8002190:	f04f 0c00 	mov.w	ip, #0
 8002194:	f16c 0c00 	sbc.w	ip, ip, #0
 8002198:	ebbe 0e04 	subs.w	lr, lr, r4
 800219c:	f16c 0c00 	sbc.w	ip, ip, #0
 80021a0:	ebbe 0e05 	subs.w	lr, lr, r5
 80021a4:	f16c 0c00 	sbc.w	ip, ip, #0
 80021a8:	ebbe 0e06 	subs.w	lr, lr, r6
 80021ac:	f16c 0c00 	sbc.w	ip, ip, #0
 80021b0:	ebbe 0e08 	subs.w	lr, lr, r8
 80021b4:	f16c 0c00 	sbc.w	ip, ip, #0
 80021b8:	9a00      	ldr	r2, [sp, #0]
 80021ba:	9b01      	ldr	r3, [sp, #4]
 80021bc:	9c02      	ldr	r4, [sp, #8]
 80021be:	9d03      	ldr	r5, [sp, #12]
 80021c0:	9e04      	ldr	r6, [sp, #16]
 80021c2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80021c6:	f1cc 0c00 	rsb	ip, ip, #0
 80021ca:	eb12 020b 	adds.w	r2, r2, fp
 80021ce:	f153 0300 	adcs.w	r3, r3, #0
 80021d2:	f154 0400 	adcs.w	r4, r4, #0
 80021d6:	eb15 050c 	adds.w	r5, r5, ip
 80021da:	f156 0600 	adcs.w	r6, r6, #0
 80021de:	f158 0800 	adcs.w	r8, r8, #0
 80021e2:	eb59 090c 	adcs.w	r9, r9, ip
 80021e6:	eb4e 0e0b 	adc.w	lr, lr, fp
 80021ea:	ebb2 020c 	subs.w	r2, r2, ip
 80021ee:	f173 0300 	sbcs.w	r3, r3, #0
 80021f2:	f174 0400 	sbcs.w	r4, r4, #0
 80021f6:	ebb5 050b 	subs.w	r5, r5, fp
 80021fa:	f176 0600 	sbcs.w	r6, r6, #0
 80021fe:	f178 0800 	sbcs.w	r8, r8, #0
 8002202:	eb79 090b 	sbcs.w	r9, r9, fp
 8002206:	eb6e 0e0c 	sbc.w	lr, lr, ip
 800220a:	6002      	str	r2, [r0, #0]
 800220c:	6043      	str	r3, [r0, #4]
 800220e:	6084      	str	r4, [r0, #8]
 8002210:	60c5      	str	r5, [r0, #12]
 8002212:	6106      	str	r6, [r0, #16]
 8002214:	f8c0 8014 	str.w	r8, [r0, #20]
 8002218:	f8c0 9018 	str.w	r9, [r0, #24]
 800221c:	f8c0 e01c 	str.w	lr, [r0, #28]
 8002220:	b006      	add	sp, #24
        : [r] "r" (r), [a] "r" (a)
        : "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r12"
    );

    return MP_OKAY;
}
 8002222:	2000      	movs	r0, #0
 8002224:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08002228 <sp_256_mont_mul_8>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
SP_NOINLINE static void sp_256_mont_mul_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m, sp_digit mp)
{
 8002228:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 800222c:	b091      	sub	sp, #68	; 0x44
 800222e:	f04f 0500 	mov.w	r5, #0
 8002232:	680e      	ldr	r6, [r1, #0]
 8002234:	f8d2 8000 	ldr.w	r8, [r2]
 8002238:	fba6 9a08 	umull	r9, sl, r6, r8
 800223c:	f8cd 9000 	str.w	r9, [sp]
 8002240:	680e      	ldr	r6, [r1, #0]
 8002242:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8002246:	fba6 3408 	umull	r3, r4, r6, r8
 800224a:	eb13 0a0a 	adds.w	sl, r3, sl
 800224e:	f144 0b00 	adc.w	fp, r4, #0
 8002252:	684e      	ldr	r6, [r1, #4]
 8002254:	f8d2 8000 	ldr.w	r8, [r2]
 8002258:	fba6 3408 	umull	r3, r4, r6, r8
 800225c:	eb13 0a0a 	adds.w	sl, r3, sl
 8002260:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002264:	f145 0e00 	adc.w	lr, r5, #0
 8002268:	f8cd a004 	str.w	sl, [sp, #4]
 800226c:	680e      	ldr	r6, [r1, #0]
 800226e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002272:	fba6 3408 	umull	r3, r4, r6, r8
 8002276:	eb13 0b0b 	adds.w	fp, r3, fp
 800227a:	eb44 0e0e 	adc.w	lr, r4, lr
 800227e:	684e      	ldr	r6, [r1, #4]
 8002280:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8002284:	fba6 3408 	umull	r3, r4, r6, r8
 8002288:	eb13 0b0b 	adds.w	fp, r3, fp
 800228c:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002290:	f145 0900 	adc.w	r9, r5, #0
 8002294:	688e      	ldr	r6, [r1, #8]
 8002296:	f8d2 8000 	ldr.w	r8, [r2]
 800229a:	fba6 3408 	umull	r3, r4, r6, r8
 800229e:	eb13 0b0b 	adds.w	fp, r3, fp
 80022a2:	eb54 0e0e 	adcs.w	lr, r4, lr
 80022a6:	eb45 0909 	adc.w	r9, r5, r9
 80022aa:	f8cd b008 	str.w	fp, [sp, #8]
 80022ae:	680e      	ldr	r6, [r1, #0]
 80022b0:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80022b4:	fba6 3408 	umull	r3, r4, r6, r8
 80022b8:	eb13 0e0e 	adds.w	lr, r3, lr
 80022bc:	eb54 0909 	adcs.w	r9, r4, r9
 80022c0:	f145 0a00 	adc.w	sl, r5, #0
 80022c4:	684e      	ldr	r6, [r1, #4]
 80022c6:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80022ca:	fba6 3408 	umull	r3, r4, r6, r8
 80022ce:	eb13 0e0e 	adds.w	lr, r3, lr
 80022d2:	eb54 0909 	adcs.w	r9, r4, r9
 80022d6:	eb45 0a0a 	adc.w	sl, r5, sl
 80022da:	688e      	ldr	r6, [r1, #8]
 80022dc:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80022e0:	fba6 3408 	umull	r3, r4, r6, r8
 80022e4:	eb13 0e0e 	adds.w	lr, r3, lr
 80022e8:	eb54 0909 	adcs.w	r9, r4, r9
 80022ec:	eb45 0a0a 	adc.w	sl, r5, sl
 80022f0:	68ce      	ldr	r6, [r1, #12]
 80022f2:	f8d2 8000 	ldr.w	r8, [r2]
 80022f6:	fba6 3408 	umull	r3, r4, r6, r8
 80022fa:	eb13 0e0e 	adds.w	lr, r3, lr
 80022fe:	eb54 0909 	adcs.w	r9, r4, r9
 8002302:	eb45 0a0a 	adc.w	sl, r5, sl
 8002306:	f8cd e00c 	str.w	lr, [sp, #12]
 800230a:	680e      	ldr	r6, [r1, #0]
 800230c:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8002310:	fba6 3408 	umull	r3, r4, r6, r8
 8002314:	eb13 0909 	adds.w	r9, r3, r9
 8002318:	eb54 0a0a 	adcs.w	sl, r4, sl
 800231c:	f145 0b00 	adc.w	fp, r5, #0
 8002320:	684e      	ldr	r6, [r1, #4]
 8002322:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8002326:	fba6 3408 	umull	r3, r4, r6, r8
 800232a:	eb13 0909 	adds.w	r9, r3, r9
 800232e:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002332:	eb45 0b0b 	adc.w	fp, r5, fp
 8002336:	688e      	ldr	r6, [r1, #8]
 8002338:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800233c:	fba6 3408 	umull	r3, r4, r6, r8
 8002340:	eb13 0909 	adds.w	r9, r3, r9
 8002344:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002348:	eb45 0b0b 	adc.w	fp, r5, fp
 800234c:	68ce      	ldr	r6, [r1, #12]
 800234e:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8002352:	fba6 3408 	umull	r3, r4, r6, r8
 8002356:	eb13 0909 	adds.w	r9, r3, r9
 800235a:	eb54 0a0a 	adcs.w	sl, r4, sl
 800235e:	eb45 0b0b 	adc.w	fp, r5, fp
 8002362:	690e      	ldr	r6, [r1, #16]
 8002364:	f8d2 8000 	ldr.w	r8, [r2]
 8002368:	fba6 3408 	umull	r3, r4, r6, r8
 800236c:	eb13 0909 	adds.w	r9, r3, r9
 8002370:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002374:	eb45 0b0b 	adc.w	fp, r5, fp
 8002378:	f8cd 9010 	str.w	r9, [sp, #16]
 800237c:	680e      	ldr	r6, [r1, #0]
 800237e:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8002382:	fba6 3408 	umull	r3, r4, r6, r8
 8002386:	eb13 0a0a 	adds.w	sl, r3, sl
 800238a:	eb54 0b0b 	adcs.w	fp, r4, fp
 800238e:	f145 0e00 	adc.w	lr, r5, #0
 8002392:	684e      	ldr	r6, [r1, #4]
 8002394:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8002398:	fba6 3408 	umull	r3, r4, r6, r8
 800239c:	eb13 0a0a 	adds.w	sl, r3, sl
 80023a0:	eb54 0b0b 	adcs.w	fp, r4, fp
 80023a4:	eb45 0e0e 	adc.w	lr, r5, lr
 80023a8:	688e      	ldr	r6, [r1, #8]
 80023aa:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80023ae:	fba6 3408 	umull	r3, r4, r6, r8
 80023b2:	eb13 0a0a 	adds.w	sl, r3, sl
 80023b6:	eb54 0b0b 	adcs.w	fp, r4, fp
 80023ba:	eb45 0e0e 	adc.w	lr, r5, lr
 80023be:	68ce      	ldr	r6, [r1, #12]
 80023c0:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80023c4:	fba6 3408 	umull	r3, r4, r6, r8
 80023c8:	eb13 0a0a 	adds.w	sl, r3, sl
 80023cc:	eb54 0b0b 	adcs.w	fp, r4, fp
 80023d0:	eb45 0e0e 	adc.w	lr, r5, lr
 80023d4:	690e      	ldr	r6, [r1, #16]
 80023d6:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80023da:	fba6 3408 	umull	r3, r4, r6, r8
 80023de:	eb13 0a0a 	adds.w	sl, r3, sl
 80023e2:	eb54 0b0b 	adcs.w	fp, r4, fp
 80023e6:	eb45 0e0e 	adc.w	lr, r5, lr
 80023ea:	694e      	ldr	r6, [r1, #20]
 80023ec:	f8d2 8000 	ldr.w	r8, [r2]
 80023f0:	fba6 3408 	umull	r3, r4, r6, r8
 80023f4:	eb13 0a0a 	adds.w	sl, r3, sl
 80023f8:	eb54 0b0b 	adcs.w	fp, r4, fp
 80023fc:	eb45 0e0e 	adc.w	lr, r5, lr
 8002400:	f8cd a014 	str.w	sl, [sp, #20]
 8002404:	680e      	ldr	r6, [r1, #0]
 8002406:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800240a:	fba6 3408 	umull	r3, r4, r6, r8
 800240e:	eb13 0b0b 	adds.w	fp, r3, fp
 8002412:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002416:	f145 0900 	adc.w	r9, r5, #0
 800241a:	684e      	ldr	r6, [r1, #4]
 800241c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8002420:	fba6 3408 	umull	r3, r4, r6, r8
 8002424:	eb13 0b0b 	adds.w	fp, r3, fp
 8002428:	eb54 0e0e 	adcs.w	lr, r4, lr
 800242c:	eb45 0909 	adc.w	r9, r5, r9
 8002430:	688e      	ldr	r6, [r1, #8]
 8002432:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8002436:	fba6 3408 	umull	r3, r4, r6, r8
 800243a:	eb13 0b0b 	adds.w	fp, r3, fp
 800243e:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002442:	eb45 0909 	adc.w	r9, r5, r9
 8002446:	68ce      	ldr	r6, [r1, #12]
 8002448:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800244c:	fba6 3408 	umull	r3, r4, r6, r8
 8002450:	eb13 0b0b 	adds.w	fp, r3, fp
 8002454:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002458:	eb45 0909 	adc.w	r9, r5, r9
 800245c:	690e      	ldr	r6, [r1, #16]
 800245e:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002462:	fba6 3408 	umull	r3, r4, r6, r8
 8002466:	eb13 0b0b 	adds.w	fp, r3, fp
 800246a:	eb54 0e0e 	adcs.w	lr, r4, lr
 800246e:	eb45 0909 	adc.w	r9, r5, r9
 8002472:	694e      	ldr	r6, [r1, #20]
 8002474:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8002478:	fba6 3408 	umull	r3, r4, r6, r8
 800247c:	eb13 0b0b 	adds.w	fp, r3, fp
 8002480:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002484:	eb45 0909 	adc.w	r9, r5, r9
 8002488:	698e      	ldr	r6, [r1, #24]
 800248a:	f8d2 8000 	ldr.w	r8, [r2]
 800248e:	fba6 3408 	umull	r3, r4, r6, r8
 8002492:	eb13 0b0b 	adds.w	fp, r3, fp
 8002496:	eb54 0e0e 	adcs.w	lr, r4, lr
 800249a:	eb45 0909 	adc.w	r9, r5, r9
 800249e:	f8cd b018 	str.w	fp, [sp, #24]
 80024a2:	680e      	ldr	r6, [r1, #0]
 80024a4:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80024a8:	fba6 3408 	umull	r3, r4, r6, r8
 80024ac:	eb13 0e0e 	adds.w	lr, r3, lr
 80024b0:	eb54 0909 	adcs.w	r9, r4, r9
 80024b4:	f145 0a00 	adc.w	sl, r5, #0
 80024b8:	684e      	ldr	r6, [r1, #4]
 80024ba:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80024be:	fba6 3408 	umull	r3, r4, r6, r8
 80024c2:	eb13 0e0e 	adds.w	lr, r3, lr
 80024c6:	eb54 0909 	adcs.w	r9, r4, r9
 80024ca:	eb45 0a0a 	adc.w	sl, r5, sl
 80024ce:	688e      	ldr	r6, [r1, #8]
 80024d0:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80024d4:	fba6 3408 	umull	r3, r4, r6, r8
 80024d8:	eb13 0e0e 	adds.w	lr, r3, lr
 80024dc:	eb54 0909 	adcs.w	r9, r4, r9
 80024e0:	eb45 0a0a 	adc.w	sl, r5, sl
 80024e4:	68ce      	ldr	r6, [r1, #12]
 80024e6:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80024ea:	fba6 3408 	umull	r3, r4, r6, r8
 80024ee:	eb13 0e0e 	adds.w	lr, r3, lr
 80024f2:	eb54 0909 	adcs.w	r9, r4, r9
 80024f6:	eb45 0a0a 	adc.w	sl, r5, sl
 80024fa:	690e      	ldr	r6, [r1, #16]
 80024fc:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8002500:	fba6 3408 	umull	r3, r4, r6, r8
 8002504:	eb13 0e0e 	adds.w	lr, r3, lr
 8002508:	eb54 0909 	adcs.w	r9, r4, r9
 800250c:	eb45 0a0a 	adc.w	sl, r5, sl
 8002510:	694e      	ldr	r6, [r1, #20]
 8002512:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002516:	fba6 3408 	umull	r3, r4, r6, r8
 800251a:	eb13 0e0e 	adds.w	lr, r3, lr
 800251e:	eb54 0909 	adcs.w	r9, r4, r9
 8002522:	eb45 0a0a 	adc.w	sl, r5, sl
 8002526:	698e      	ldr	r6, [r1, #24]
 8002528:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800252c:	fba6 3408 	umull	r3, r4, r6, r8
 8002530:	eb13 0e0e 	adds.w	lr, r3, lr
 8002534:	eb54 0909 	adcs.w	r9, r4, r9
 8002538:	eb45 0a0a 	adc.w	sl, r5, sl
 800253c:	69ce      	ldr	r6, [r1, #28]
 800253e:	f8d2 8000 	ldr.w	r8, [r2]
 8002542:	fba6 3408 	umull	r3, r4, r6, r8
 8002546:	eb13 0e0e 	adds.w	lr, r3, lr
 800254a:	eb54 0909 	adcs.w	r9, r4, r9
 800254e:	eb45 0a0a 	adc.w	sl, r5, sl
 8002552:	f8cd e01c 	str.w	lr, [sp, #28]
 8002556:	684e      	ldr	r6, [r1, #4]
 8002558:	f8d2 801c 	ldr.w	r8, [r2, #28]
 800255c:	fba6 3408 	umull	r3, r4, r6, r8
 8002560:	eb13 0909 	adds.w	r9, r3, r9
 8002564:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002568:	f145 0b00 	adc.w	fp, r5, #0
 800256c:	688e      	ldr	r6, [r1, #8]
 800256e:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8002572:	fba6 3408 	umull	r3, r4, r6, r8
 8002576:	eb13 0909 	adds.w	r9, r3, r9
 800257a:	eb54 0a0a 	adcs.w	sl, r4, sl
 800257e:	eb45 0b0b 	adc.w	fp, r5, fp
 8002582:	68ce      	ldr	r6, [r1, #12]
 8002584:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8002588:	fba6 3408 	umull	r3, r4, r6, r8
 800258c:	eb13 0909 	adds.w	r9, r3, r9
 8002590:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002594:	eb45 0b0b 	adc.w	fp, r5, fp
 8002598:	690e      	ldr	r6, [r1, #16]
 800259a:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800259e:	fba6 3408 	umull	r3, r4, r6, r8
 80025a2:	eb13 0909 	adds.w	r9, r3, r9
 80025a6:	eb54 0a0a 	adcs.w	sl, r4, sl
 80025aa:	eb45 0b0b 	adc.w	fp, r5, fp
 80025ae:	694e      	ldr	r6, [r1, #20]
 80025b0:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80025b4:	fba6 3408 	umull	r3, r4, r6, r8
 80025b8:	eb13 0909 	adds.w	r9, r3, r9
 80025bc:	eb54 0a0a 	adcs.w	sl, r4, sl
 80025c0:	eb45 0b0b 	adc.w	fp, r5, fp
 80025c4:	698e      	ldr	r6, [r1, #24]
 80025c6:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80025ca:	fba6 3408 	umull	r3, r4, r6, r8
 80025ce:	eb13 0909 	adds.w	r9, r3, r9
 80025d2:	eb54 0a0a 	adcs.w	sl, r4, sl
 80025d6:	eb45 0b0b 	adc.w	fp, r5, fp
 80025da:	69ce      	ldr	r6, [r1, #28]
 80025dc:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80025e0:	fba6 3408 	umull	r3, r4, r6, r8
 80025e4:	eb13 0909 	adds.w	r9, r3, r9
 80025e8:	eb54 0a0a 	adcs.w	sl, r4, sl
 80025ec:	eb45 0b0b 	adc.w	fp, r5, fp
 80025f0:	f8cd 9020 	str.w	r9, [sp, #32]
 80025f4:	688e      	ldr	r6, [r1, #8]
 80025f6:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80025fa:	fba6 3408 	umull	r3, r4, r6, r8
 80025fe:	eb13 0a0a 	adds.w	sl, r3, sl
 8002602:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002606:	f145 0e00 	adc.w	lr, r5, #0
 800260a:	68ce      	ldr	r6, [r1, #12]
 800260c:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8002610:	fba6 3408 	umull	r3, r4, r6, r8
 8002614:	eb13 0a0a 	adds.w	sl, r3, sl
 8002618:	eb54 0b0b 	adcs.w	fp, r4, fp
 800261c:	eb45 0e0e 	adc.w	lr, r5, lr
 8002620:	690e      	ldr	r6, [r1, #16]
 8002622:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8002626:	fba6 3408 	umull	r3, r4, r6, r8
 800262a:	eb13 0a0a 	adds.w	sl, r3, sl
 800262e:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002632:	eb45 0e0e 	adc.w	lr, r5, lr
 8002636:	694e      	ldr	r6, [r1, #20]
 8002638:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800263c:	fba6 3408 	umull	r3, r4, r6, r8
 8002640:	eb13 0a0a 	adds.w	sl, r3, sl
 8002644:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002648:	eb45 0e0e 	adc.w	lr, r5, lr
 800264c:	698e      	ldr	r6, [r1, #24]
 800264e:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8002652:	fba6 3408 	umull	r3, r4, r6, r8
 8002656:	eb13 0a0a 	adds.w	sl, r3, sl
 800265a:	eb54 0b0b 	adcs.w	fp, r4, fp
 800265e:	eb45 0e0e 	adc.w	lr, r5, lr
 8002662:	69ce      	ldr	r6, [r1, #28]
 8002664:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8002668:	fba6 3408 	umull	r3, r4, r6, r8
 800266c:	eb13 0a0a 	adds.w	sl, r3, sl
 8002670:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002674:	eb45 0e0e 	adc.w	lr, r5, lr
 8002678:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800267c:	68ce      	ldr	r6, [r1, #12]
 800267e:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8002682:	fba6 3408 	umull	r3, r4, r6, r8
 8002686:	eb13 0b0b 	adds.w	fp, r3, fp
 800268a:	eb54 0e0e 	adcs.w	lr, r4, lr
 800268e:	f145 0900 	adc.w	r9, r5, #0
 8002692:	690e      	ldr	r6, [r1, #16]
 8002694:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8002698:	fba6 3408 	umull	r3, r4, r6, r8
 800269c:	eb13 0b0b 	adds.w	fp, r3, fp
 80026a0:	eb54 0e0e 	adcs.w	lr, r4, lr
 80026a4:	eb45 0909 	adc.w	r9, r5, r9
 80026a8:	694e      	ldr	r6, [r1, #20]
 80026aa:	f8d2 8014 	ldr.w	r8, [r2, #20]
 80026ae:	fba6 3408 	umull	r3, r4, r6, r8
 80026b2:	eb13 0b0b 	adds.w	fp, r3, fp
 80026b6:	eb54 0e0e 	adcs.w	lr, r4, lr
 80026ba:	eb45 0909 	adc.w	r9, r5, r9
 80026be:	698e      	ldr	r6, [r1, #24]
 80026c0:	f8d2 8010 	ldr.w	r8, [r2, #16]
 80026c4:	fba6 3408 	umull	r3, r4, r6, r8
 80026c8:	eb13 0b0b 	adds.w	fp, r3, fp
 80026cc:	eb54 0e0e 	adcs.w	lr, r4, lr
 80026d0:	eb45 0909 	adc.w	r9, r5, r9
 80026d4:	69ce      	ldr	r6, [r1, #28]
 80026d6:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80026da:	fba6 3408 	umull	r3, r4, r6, r8
 80026de:	eb13 0b0b 	adds.w	fp, r3, fp
 80026e2:	eb54 0e0e 	adcs.w	lr, r4, lr
 80026e6:	eb45 0909 	adc.w	r9, r5, r9
 80026ea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80026ee:	690e      	ldr	r6, [r1, #16]
 80026f0:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80026f4:	fba6 3408 	umull	r3, r4, r6, r8
 80026f8:	eb13 0e0e 	adds.w	lr, r3, lr
 80026fc:	eb54 0909 	adcs.w	r9, r4, r9
 8002700:	f145 0a00 	adc.w	sl, r5, #0
 8002704:	694e      	ldr	r6, [r1, #20]
 8002706:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800270a:	fba6 3408 	umull	r3, r4, r6, r8
 800270e:	eb13 0e0e 	adds.w	lr, r3, lr
 8002712:	eb54 0909 	adcs.w	r9, r4, r9
 8002716:	eb45 0a0a 	adc.w	sl, r5, sl
 800271a:	698e      	ldr	r6, [r1, #24]
 800271c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8002720:	fba6 3408 	umull	r3, r4, r6, r8
 8002724:	eb13 0e0e 	adds.w	lr, r3, lr
 8002728:	eb54 0909 	adcs.w	r9, r4, r9
 800272c:	eb45 0a0a 	adc.w	sl, r5, sl
 8002730:	69ce      	ldr	r6, [r1, #28]
 8002732:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8002736:	fba6 3408 	umull	r3, r4, r6, r8
 800273a:	eb13 0e0e 	adds.w	lr, r3, lr
 800273e:	eb54 0909 	adcs.w	r9, r4, r9
 8002742:	eb45 0a0a 	adc.w	sl, r5, sl
 8002746:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800274a:	694e      	ldr	r6, [r1, #20]
 800274c:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8002750:	fba6 3408 	umull	r3, r4, r6, r8
 8002754:	eb13 0909 	adds.w	r9, r3, r9
 8002758:	eb54 0a0a 	adcs.w	sl, r4, sl
 800275c:	f145 0b00 	adc.w	fp, r5, #0
 8002760:	698e      	ldr	r6, [r1, #24]
 8002762:	f8d2 8018 	ldr.w	r8, [r2, #24]
 8002766:	fba6 3408 	umull	r3, r4, r6, r8
 800276a:	eb13 0909 	adds.w	r9, r3, r9
 800276e:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002772:	eb45 0b0b 	adc.w	fp, r5, fp
 8002776:	69ce      	ldr	r6, [r1, #28]
 8002778:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800277c:	fba6 3408 	umull	r3, r4, r6, r8
 8002780:	eb13 0909 	adds.w	r9, r3, r9
 8002784:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002788:	eb45 0b0b 	adc.w	fp, r5, fp
 800278c:	698e      	ldr	r6, [r1, #24]
 800278e:	f8d2 801c 	ldr.w	r8, [r2, #28]
 8002792:	fba6 3408 	umull	r3, r4, r6, r8
 8002796:	eb13 0a0a 	adds.w	sl, r3, sl
 800279a:	eb54 0b0b 	adcs.w	fp, r4, fp
 800279e:	f145 0e00 	adc.w	lr, r5, #0
 80027a2:	69ce      	ldr	r6, [r1, #28]
 80027a4:	f8d2 8018 	ldr.w	r8, [r2, #24]
 80027a8:	fba6 3408 	umull	r3, r4, r6, r8
 80027ac:	eb13 0a0a 	adds.w	sl, r3, sl
 80027b0:	eb54 0b0b 	adcs.w	fp, r4, fp
 80027b4:	eb45 0e0e 	adc.w	lr, r5, lr
 80027b8:	69ce      	ldr	r6, [r1, #28]
 80027ba:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80027be:	fba6 3408 	umull	r3, r4, r6, r8
 80027c2:	eb13 0b0b 	adds.w	fp, r3, fp
 80027c6:	eb44 0e0e 	adc.w	lr, r4, lr
 80027ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80027ce:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80027d2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80027d6:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 80027da:	9c00      	ldr	r4, [sp, #0]
 80027dc:	9d01      	ldr	r5, [sp, #4]
 80027de:	9e02      	ldr	r6, [sp, #8]
 80027e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80027e4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80027e8:	f8dd a014 	ldr.w	sl, [sp, #20]
 80027ec:	f8dd b018 	ldr.w	fp, [sp, #24]
 80027f0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80027f4:	eb1b 0b04 	adds.w	fp, fp, r4
 80027f8:	eb4e 0e05 	adc.w	lr, lr, r5
 80027fc:	eb1b 0b04 	adds.w	fp, fp, r4
 8002800:	eb4e 0e05 	adc.w	lr, lr, r5
 8002804:	ebae 0e04 	sub.w	lr, lr, r4
 8002808:	4641      	mov	r1, r8
 800280a:	464a      	mov	r2, r9
 800280c:	eb18 0804 	adds.w	r8, r8, r4
 8002810:	eb59 0905 	adcs.w	r9, r9, r5
 8002814:	eb5a 0a06 	adcs.w	sl, sl, r6
 8002818:	eb5b 0b01 	adcs.w	fp, fp, r1
 800281c:	eb4e 0e02 	adc.w	lr, lr, r2
 8002820:	9400      	str	r4, [sp, #0]
 8002822:	9501      	str	r5, [sp, #4]
 8002824:	9602      	str	r6, [sp, #8]
 8002826:	f8cd 800c 	str.w	r8, [sp, #12]
 800282a:	f8cd 9010 	str.w	r9, [sp, #16]
 800282e:	f8cd a014 	str.w	sl, [sp, #20]
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	9b06      	ldr	r3, [sp, #24]
 8002838:	191b      	adds	r3, r3, r4
 800283a:	f141 0200 	adc.w	r2, r1, #0
 800283e:	eb13 0308 	adds.w	r3, r3, r8
 8002842:	f142 0200 	adc.w	r2, r2, #0
 8002846:	f8cd b018 	str.w	fp, [sp, #24]
 800284a:	9b07      	ldr	r3, [sp, #28]
 800284c:	189b      	adds	r3, r3, r2
 800284e:	f141 0200 	adc.w	r2, r1, #0
 8002852:	195b      	adds	r3, r3, r5
 8002854:	f142 0200 	adc.w	r2, r2, #0
 8002858:	eb13 0309 	adds.w	r3, r3, r9
 800285c:	f142 0200 	adc.w	r2, r2, #0
 8002860:	f8cd e01c 	str.w	lr, [sp, #28]
 8002864:	9310      	str	r3, [sp, #64]	; 0x40
 8002866:	9b08      	ldr	r3, [sp, #32]
 8002868:	189b      	adds	r3, r3, r2
 800286a:	f141 0200 	adc.w	r2, r1, #0
 800286e:	191b      	adds	r3, r3, r4
 8002870:	f142 0200 	adc.w	r2, r2, #0
 8002874:	199b      	adds	r3, r3, r6
 8002876:	f142 0200 	adc.w	r2, r2, #0
 800287a:	eb13 030a 	adds.w	r3, r3, sl
 800287e:	f142 0200 	adc.w	r2, r2, #0
 8002882:	9308      	str	r3, [sp, #32]
 8002884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002886:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002888:	189b      	adds	r3, r3, r2
 800288a:	f154 0400 	adcs.w	r4, r4, #0
 800288e:	f141 0200 	adc.w	r2, r1, #0
 8002892:	195b      	adds	r3, r3, r5
 8002894:	4174      	adcs	r4, r6
 8002896:	f142 0200 	adc.w	r2, r2, #0
 800289a:	eb13 0308 	adds.w	r3, r3, r8
 800289e:	eb54 0409 	adcs.w	r4, r4, r9
 80028a2:	f142 0200 	adc.w	r2, r2, #0
 80028a6:	eb13 030b 	adds.w	r3, r3, fp
 80028aa:	eb54 040e 	adcs.w	r4, r4, lr
 80028ae:	f142 0200 	adc.w	r2, r2, #0
 80028b2:	9309      	str	r3, [sp, #36]	; 0x24
 80028b4:	940a      	str	r4, [sp, #40]	; 0x28
 80028b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80028ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80028bc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80028be:	189b      	adds	r3, r3, r2
 80028c0:	f154 0400 	adcs.w	r4, r4, #0
 80028c4:	f155 0500 	adcs.w	r5, r5, #0
 80028c8:	f156 0600 	adcs.w	r6, r6, #0
 80028cc:	f141 0200 	adc.w	r2, r1, #0
 80028d0:	eb13 0308 	adds.w	r3, r3, r8
 80028d4:	eb54 0409 	adcs.w	r4, r4, r9
 80028d8:	eb55 050a 	adcs.w	r5, r5, sl
 80028dc:	eb56 060b 	adcs.w	r6, r6, fp
 80028e0:	f142 0200 	adc.w	r2, r2, #0
 80028e4:	eb13 030a 	adds.w	r3, r3, sl
 80028e8:	eb54 040b 	adcs.w	r4, r4, fp
 80028ec:	eb55 050e 	adcs.w	r5, r5, lr
 80028f0:	f156 0600 	adcs.w	r6, r6, #0
 80028f4:	f142 0200 	adc.w	r2, r2, #0
 80028f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80028fa:	940c      	str	r4, [sp, #48]	; 0x30
 80028fc:	950d      	str	r5, [sp, #52]	; 0x34
 80028fe:	960e      	str	r6, [sp, #56]	; 0x38
 8002900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002902:	189b      	adds	r3, r3, r2
 8002904:	f141 0200 	adc.w	r2, r1, #0
 8002908:	eb13 030e 	adds.w	r3, r3, lr
 800290c:	f142 0200 	adc.w	r2, r2, #0
 8002910:	930f      	str	r3, [sp, #60]	; 0x3c
 8002912:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002914:	9c08      	ldr	r4, [sp, #32]
 8002916:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002918:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800291a:	f8dd 9000 	ldr.w	r9, [sp]
 800291e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002922:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002926:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800292a:	ebb3 0309 	subs.w	r3, r3, r9
 800292e:	eb74 040a 	sbcs.w	r4, r4, sl
 8002932:	eb75 050b 	sbcs.w	r5, r5, fp
 8002936:	eb76 060e 	sbcs.w	r6, r6, lr
 800293a:	9408      	str	r4, [sp, #32]
 800293c:	9509      	str	r5, [sp, #36]	; 0x24
 800293e:	960a      	str	r6, [sp, #40]	; 0x28
 8002940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002942:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002944:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002946:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002948:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800294c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002950:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002954:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002958:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800295c:	eb73 0309 	sbcs.w	r3, r3, r9
 8002960:	eb74 040a 	sbcs.w	r4, r4, sl
 8002964:	eb75 050b 	sbcs.w	r5, r5, fp
 8002968:	eb76 060e 	sbcs.w	r6, r6, lr
 800296c:	f168 0800 	sbc.w	r8, r8, #0
 8002970:	930b      	str	r3, [sp, #44]	; 0x2c
 8002972:	940c      	str	r4, [sp, #48]	; 0x30
 8002974:	950d      	str	r5, [sp, #52]	; 0x34
 8002976:	960e      	str	r6, [sp, #56]	; 0x38
 8002978:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800297c:	eba1 0202 	sub.w	r2, r1, r2
 8002980:	f002 0101 	and.w	r1, r2, #1
 8002984:	9b08      	ldr	r3, [sp, #32]
 8002986:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002988:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800298a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800298c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002990:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8002994:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8002998:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	4194      	sbcs	r4, r2
 80029a0:	4195      	sbcs	r5, r2
 80029a2:	f176 0600 	sbcs.w	r6, r6, #0
 80029a6:	f178 0800 	sbcs.w	r8, r8, #0
 80029aa:	f179 0900 	sbcs.w	r9, r9, #0
 80029ae:	eb7a 0a01 	sbcs.w	sl, sl, r1
 80029b2:	eb6b 0b02 	sbc.w	fp, fp, r2
 80029b6:	6003      	str	r3, [r0, #0]
 80029b8:	6044      	str	r4, [r0, #4]
 80029ba:	6085      	str	r5, [r0, #8]
 80029bc:	60c6      	str	r6, [r0, #12]
 80029be:	f8c0 8010 	str.w	r8, [r0, #16]
 80029c2:	f8c0 9014 	str.w	r9, [r0, #20]
 80029c6:	f8c0 a018 	str.w	sl, [r0, #24]
 80029ca:	f8c0 b01c 	str.w	fp, [r0, #28]
 80029ce:	b011      	add	sp, #68	; 0x44
        "add   sp, sp, #68\n\t"
        : [a] "+r" (a), [b] "+r" (b)
        : [r] "r" (r)
        : "memory", "r9", "r10", "r11", "r14", "r3", "r4", "r5", "r6", "r8"
    );
}
 80029d0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

080029d4 <sp_256_mont_sqr_8>:
 * m   Modulus (prime).
 * mp  Montogmery mulitplier.
 */
SP_NOINLINE static void sp_256_mont_sqr_8(sp_digit* r, const sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 80029d4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 80029d8:	b091      	sub	sp, #68	; 0x44
 80029da:	f04f 0500 	mov.w	r5, #0
 80029de:	680e      	ldr	r6, [r1, #0]
 80029e0:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80029e4:	fba6 ab08 	umull	sl, fp, r6, r8
 80029e8:	f8cd a004 	str.w	sl, [sp, #4]
 80029ec:	680e      	ldr	r6, [r1, #0]
 80029ee:	f8d1 8008 	ldr.w	r8, [r1, #8]
 80029f2:	fba6 3408 	umull	r3, r4, r6, r8
 80029f6:	eb13 0b0b 	adds.w	fp, r3, fp
 80029fa:	f144 0e00 	adc.w	lr, r4, #0
 80029fe:	f8cd b008 	str.w	fp, [sp, #8]
 8002a02:	680e      	ldr	r6, [r1, #0]
 8002a04:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002a08:	fba6 3408 	umull	r3, r4, r6, r8
 8002a0c:	eb13 0e0e 	adds.w	lr, r3, lr
 8002a10:	f144 0900 	adc.w	r9, r4, #0
 8002a14:	684e      	ldr	r6, [r1, #4]
 8002a16:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8002a1a:	fba6 3408 	umull	r3, r4, r6, r8
 8002a1e:	eb13 0e0e 	adds.w	lr, r3, lr
 8002a22:	eb54 0909 	adcs.w	r9, r4, r9
 8002a26:	f145 0a00 	adc.w	sl, r5, #0
 8002a2a:	f8cd e00c 	str.w	lr, [sp, #12]
 8002a2e:	680e      	ldr	r6, [r1, #0]
 8002a30:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8002a34:	fba6 3408 	umull	r3, r4, r6, r8
 8002a38:	eb13 0909 	adds.w	r9, r3, r9
 8002a3c:	eb44 0a0a 	adc.w	sl, r4, sl
 8002a40:	684e      	ldr	r6, [r1, #4]
 8002a42:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002a46:	fba6 3408 	umull	r3, r4, r6, r8
 8002a4a:	eb13 0909 	adds.w	r9, r3, r9
 8002a4e:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002a52:	f145 0b00 	adc.w	fp, r5, #0
 8002a56:	f8cd 9010 	str.w	r9, [sp, #16]
 8002a5a:	680e      	ldr	r6, [r1, #0]
 8002a5c:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002a60:	fba6 3408 	umull	r3, r4, r6, r8
 8002a64:	eb13 0a0a 	adds.w	sl, r3, sl
 8002a68:	eb44 0b0b 	adc.w	fp, r4, fp
 8002a6c:	684e      	ldr	r6, [r1, #4]
 8002a6e:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8002a72:	fba6 3408 	umull	r3, r4, r6, r8
 8002a76:	eb13 0a0a 	adds.w	sl, r3, sl
 8002a7a:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002a7e:	f145 0e00 	adc.w	lr, r5, #0
 8002a82:	688e      	ldr	r6, [r1, #8]
 8002a84:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8002a88:	fba6 3408 	umull	r3, r4, r6, r8
 8002a8c:	eb13 0a0a 	adds.w	sl, r3, sl
 8002a90:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002a94:	eb45 0e0e 	adc.w	lr, r5, lr
 8002a98:	f8cd a014 	str.w	sl, [sp, #20]
 8002a9c:	680e      	ldr	r6, [r1, #0]
 8002a9e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002aa2:	fba6 3408 	umull	r3, r4, r6, r8
 8002aa6:	eb13 0b0b 	adds.w	fp, r3, fp
 8002aaa:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002aae:	f145 0900 	adc.w	r9, r5, #0
 8002ab2:	684e      	ldr	r6, [r1, #4]
 8002ab4:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002ab8:	fba6 3408 	umull	r3, r4, r6, r8
 8002abc:	eb13 0b0b 	adds.w	fp, r3, fp
 8002ac0:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002ac4:	eb45 0909 	adc.w	r9, r5, r9
 8002ac8:	688e      	ldr	r6, [r1, #8]
 8002aca:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8002ace:	fba6 3408 	umull	r3, r4, r6, r8
 8002ad2:	eb13 0b0b 	adds.w	fp, r3, fp
 8002ad6:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002ada:	eb45 0909 	adc.w	r9, r5, r9
 8002ade:	f8cd b018 	str.w	fp, [sp, #24]
 8002ae2:	680e      	ldr	r6, [r1, #0]
 8002ae4:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002ae8:	fba6 3408 	umull	r3, r4, r6, r8
 8002aec:	eb13 0e0e 	adds.w	lr, r3, lr
 8002af0:	eb54 0909 	adcs.w	r9, r4, r9
 8002af4:	f145 0a00 	adc.w	sl, r5, #0
 8002af8:	684e      	ldr	r6, [r1, #4]
 8002afa:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002afe:	fba6 3408 	umull	r3, r4, r6, r8
 8002b02:	eb13 0e0e 	adds.w	lr, r3, lr
 8002b06:	eb54 0909 	adcs.w	r9, r4, r9
 8002b0a:	eb45 0a0a 	adc.w	sl, r5, sl
 8002b0e:	688e      	ldr	r6, [r1, #8]
 8002b10:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002b14:	fba6 3408 	umull	r3, r4, r6, r8
 8002b18:	eb13 0e0e 	adds.w	lr, r3, lr
 8002b1c:	eb54 0909 	adcs.w	r9, r4, r9
 8002b20:	eb45 0a0a 	adc.w	sl, r5, sl
 8002b24:	68ce      	ldr	r6, [r1, #12]
 8002b26:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8002b2a:	fba6 3408 	umull	r3, r4, r6, r8
 8002b2e:	eb13 0e0e 	adds.w	lr, r3, lr
 8002b32:	eb54 0909 	adcs.w	r9, r4, r9
 8002b36:	eb45 0a0a 	adc.w	sl, r5, sl
 8002b3a:	f8cd e01c 	str.w	lr, [sp, #28]
 8002b3e:	684e      	ldr	r6, [r1, #4]
 8002b40:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002b44:	fba6 3408 	umull	r3, r4, r6, r8
 8002b48:	eb13 0909 	adds.w	r9, r3, r9
 8002b4c:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002b50:	f145 0b00 	adc.w	fp, r5, #0
 8002b54:	688e      	ldr	r6, [r1, #8]
 8002b56:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002b5a:	fba6 3408 	umull	r3, r4, r6, r8
 8002b5e:	eb13 0909 	adds.w	r9, r3, r9
 8002b62:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002b66:	eb45 0b0b 	adc.w	fp, r5, fp
 8002b6a:	68ce      	ldr	r6, [r1, #12]
 8002b6c:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002b70:	fba6 3408 	umull	r3, r4, r6, r8
 8002b74:	eb13 0909 	adds.w	r9, r3, r9
 8002b78:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002b7c:	eb45 0b0b 	adc.w	fp, r5, fp
 8002b80:	f8cd 9020 	str.w	r9, [sp, #32]
 8002b84:	688e      	ldr	r6, [r1, #8]
 8002b86:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002b8a:	fba6 3408 	umull	r3, r4, r6, r8
 8002b8e:	eb13 0a0a 	adds.w	sl, r3, sl
 8002b92:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002b96:	f145 0e00 	adc.w	lr, r5, #0
 8002b9a:	68ce      	ldr	r6, [r1, #12]
 8002b9c:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002ba0:	fba6 3408 	umull	r3, r4, r6, r8
 8002ba4:	eb13 0a0a 	adds.w	sl, r3, sl
 8002ba8:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002bac:	eb45 0e0e 	adc.w	lr, r5, lr
 8002bb0:	690e      	ldr	r6, [r1, #16]
 8002bb2:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8002bb6:	fba6 3408 	umull	r3, r4, r6, r8
 8002bba:	eb13 0a0a 	adds.w	sl, r3, sl
 8002bbe:	eb54 0b0b 	adcs.w	fp, r4, fp
 8002bc2:	eb45 0e0e 	adc.w	lr, r5, lr
 8002bc6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8002bca:	68ce      	ldr	r6, [r1, #12]
 8002bcc:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002bd0:	fba6 3408 	umull	r3, r4, r6, r8
 8002bd4:	eb13 0b0b 	adds.w	fp, r3, fp
 8002bd8:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002bdc:	f145 0900 	adc.w	r9, r5, #0
 8002be0:	690e      	ldr	r6, [r1, #16]
 8002be2:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002be6:	fba6 3408 	umull	r3, r4, r6, r8
 8002bea:	eb13 0b0b 	adds.w	fp, r3, fp
 8002bee:	eb54 0e0e 	adcs.w	lr, r4, lr
 8002bf2:	eb45 0909 	adc.w	r9, r5, r9
 8002bf6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8002bfa:	690e      	ldr	r6, [r1, #16]
 8002bfc:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002c00:	fba6 3408 	umull	r3, r4, r6, r8
 8002c04:	eb13 0e0e 	adds.w	lr, r3, lr
 8002c08:	eb54 0909 	adcs.w	r9, r4, r9
 8002c0c:	f145 0a00 	adc.w	sl, r5, #0
 8002c10:	694e      	ldr	r6, [r1, #20]
 8002c12:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8002c16:	fba6 3408 	umull	r3, r4, r6, r8
 8002c1a:	eb13 0e0e 	adds.w	lr, r3, lr
 8002c1e:	eb54 0909 	adcs.w	r9, r4, r9
 8002c22:	eb45 0a0a 	adc.w	sl, r5, sl
 8002c26:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8002c2a:	694e      	ldr	r6, [r1, #20]
 8002c2c:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002c30:	fba6 3408 	umull	r3, r4, r6, r8
 8002c34:	eb13 0909 	adds.w	r9, r3, r9
 8002c38:	eb54 0a0a 	adcs.w	sl, r4, sl
 8002c3c:	f145 0b00 	adc.w	fp, r5, #0
 8002c40:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8002c44:	698e      	ldr	r6, [r1, #24]
 8002c46:	f8d1 801c 	ldr.w	r8, [r1, #28]
 8002c4a:	fba6 3408 	umull	r3, r4, r6, r8
 8002c4e:	eb13 0a0a 	adds.w	sl, r3, sl
 8002c52:	eb44 0b0b 	adc.w	fp, r4, fp
 8002c56:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8002c5a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8002c5e:	9c01      	ldr	r4, [sp, #4]
 8002c60:	9e02      	ldr	r6, [sp, #8]
 8002c62:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002c66:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002c6a:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002c6e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002c72:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002c76:	f8dd c020 	ldr.w	ip, [sp, #32]
 8002c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c7c:	1924      	adds	r4, r4, r4
 8002c7e:	4176      	adcs	r6, r6
 8002c80:	eb58 0808 	adcs.w	r8, r8, r8
 8002c84:	eb59 0909 	adcs.w	r9, r9, r9
 8002c88:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8002c8c:	eb5b 0b0b 	adcs.w	fp, fp, fp
 8002c90:	eb5e 0e0e 	adcs.w	lr, lr, lr
 8002c94:	eb5c 0c0c 	adcs.w	ip, ip, ip
 8002c98:	415b      	adcs	r3, r3
 8002c9a:	9401      	str	r4, [sp, #4]
 8002c9c:	9602      	str	r6, [sp, #8]
 8002c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ca2:	f8cd 9010 	str.w	r9, [sp, #16]
 8002ca6:	f8cd a014 	str.w	sl, [sp, #20]
 8002caa:	f8cd b018 	str.w	fp, [sp, #24]
 8002cae:	f8cd e01c 	str.w	lr, [sp, #28]
 8002cb2:	f8cd c020 	str.w	ip, [sp, #32]
 8002cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002cba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002cbc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002cc0:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8002cc4:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8002cc8:	4164      	adcs	r4, r4
 8002cca:	4176      	adcs	r6, r6
 8002ccc:	eb58 0808 	adcs.w	r8, r8, r8
 8002cd0:	eb59 0909 	adcs.w	r9, r9, r9
 8002cd4:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8002cd8:	940a      	str	r4, [sp, #40]	; 0x28
 8002cda:	960b      	str	r6, [sp, #44]	; 0x2c
 8002cdc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8002ce0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8002ce4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8002ce8:	f145 0b00 	adc.w	fp, r5, #0
 8002cec:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8002cf0:	9c01      	ldr	r4, [sp, #4]
 8002cf2:	9d02      	ldr	r5, [sp, #8]
 8002cf4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002cf8:	680e      	ldr	r6, [r1, #0]
 8002cfa:	fba6 9a06 	umull	r9, sl, r6, r6
 8002cfe:	684e      	ldr	r6, [r1, #4]
 8002d00:	fba6 be06 	umull	fp, lr, r6, r6
 8002d04:	eb1a 0a04 	adds.w	sl, sl, r4
 8002d08:	eb5b 0b05 	adcs.w	fp, fp, r5
 8002d0c:	eb5e 0e0c 	adcs.w	lr, lr, ip
 8002d10:	f8cd 9000 	str.w	r9, [sp]
 8002d14:	f8cd a004 	str.w	sl, [sp, #4]
 8002d18:	f8cd b008 	str.w	fp, [sp, #8]
 8002d1c:	f8cd e00c 	str.w	lr, [sp, #12]
 8002d20:	9b04      	ldr	r3, [sp, #16]
 8002d22:	9c05      	ldr	r4, [sp, #20]
 8002d24:	9d06      	ldr	r5, [sp, #24]
 8002d26:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8002d2a:	688e      	ldr	r6, [r1, #8]
 8002d2c:	fba6 9a06 	umull	r9, sl, r6, r6
 8002d30:	68ce      	ldr	r6, [r1, #12]
 8002d32:	fba6 be06 	umull	fp, lr, r6, r6
 8002d36:	eb59 0903 	adcs.w	r9, r9, r3
 8002d3a:	eb5a 0a04 	adcs.w	sl, sl, r4
 8002d3e:	eb5b 0b05 	adcs.w	fp, fp, r5
 8002d42:	eb5e 0e0c 	adcs.w	lr, lr, ip
 8002d46:	f8cd 9010 	str.w	r9, [sp, #16]
 8002d4a:	f8cd a014 	str.w	sl, [sp, #20]
 8002d4e:	f8cd b018 	str.w	fp, [sp, #24]
 8002d52:	f8cd e01c 	str.w	lr, [sp, #28]
 8002d56:	9b08      	ldr	r3, [sp, #32]
 8002d58:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002d5a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002d5c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002d60:	690e      	ldr	r6, [r1, #16]
 8002d62:	fba6 9a06 	umull	r9, sl, r6, r6
 8002d66:	694e      	ldr	r6, [r1, #20]
 8002d68:	fba6 be06 	umull	fp, lr, r6, r6
 8002d6c:	eb59 0903 	adcs.w	r9, r9, r3
 8002d70:	eb5a 0a04 	adcs.w	sl, sl, r4
 8002d74:	eb5b 0b05 	adcs.w	fp, fp, r5
 8002d78:	eb5e 0e0c 	adcs.w	lr, lr, ip
 8002d7c:	f8cd 9020 	str.w	r9, [sp, #32]
 8002d80:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8002d84:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8002d88:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8002d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d8e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002d90:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002d92:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8002d96:	698e      	ldr	r6, [r1, #24]
 8002d98:	fba6 9a06 	umull	r9, sl, r6, r6
 8002d9c:	69ce      	ldr	r6, [r1, #28]
 8002d9e:	fba6 be06 	umull	fp, lr, r6, r6
 8002da2:	eb59 0903 	adcs.w	r9, r9, r3
 8002da6:	eb5a 0a04 	adcs.w	sl, sl, r4
 8002daa:	eb5b 0b05 	adcs.w	fp, fp, r5
 8002dae:	eb4e 0e0c 	adc.w	lr, lr, ip
 8002db2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8002db6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8002dba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8002dbe:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
 8002dc2:	9c00      	ldr	r4, [sp, #0]
 8002dc4:	9d01      	ldr	r5, [sp, #4]
 8002dc6:	9e02      	ldr	r6, [sp, #8]
 8002dc8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002dcc:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002dd0:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002dd4:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002dd8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002ddc:	eb1b 0b04 	adds.w	fp, fp, r4
 8002de0:	eb4e 0e05 	adc.w	lr, lr, r5
 8002de4:	eb1b 0b04 	adds.w	fp, fp, r4
 8002de8:	eb4e 0e05 	adc.w	lr, lr, r5
 8002dec:	ebae 0e04 	sub.w	lr, lr, r4
 8002df0:	4641      	mov	r1, r8
 8002df2:	46cc      	mov	ip, r9
 8002df4:	eb18 0804 	adds.w	r8, r8, r4
 8002df8:	eb59 0905 	adcs.w	r9, r9, r5
 8002dfc:	eb5a 0a06 	adcs.w	sl, sl, r6
 8002e00:	eb5b 0b01 	adcs.w	fp, fp, r1
 8002e04:	eb4e 0e0c 	adc.w	lr, lr, ip
 8002e08:	9400      	str	r4, [sp, #0]
 8002e0a:	9501      	str	r5, [sp, #4]
 8002e0c:	9602      	str	r6, [sp, #8]
 8002e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e12:	f8cd 9010 	str.w	r9, [sp, #16]
 8002e16:	f8cd a014 	str.w	sl, [sp, #20]
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	9b06      	ldr	r3, [sp, #24]
 8002e20:	191b      	adds	r3, r3, r4
 8002e22:	f141 0c00 	adc.w	ip, r1, #0
 8002e26:	eb13 0308 	adds.w	r3, r3, r8
 8002e2a:	f14c 0c00 	adc.w	ip, ip, #0
 8002e2e:	f8cd b018 	str.w	fp, [sp, #24]
 8002e32:	9b07      	ldr	r3, [sp, #28]
 8002e34:	eb13 030c 	adds.w	r3, r3, ip
 8002e38:	f141 0c00 	adc.w	ip, r1, #0
 8002e3c:	195b      	adds	r3, r3, r5
 8002e3e:	f14c 0c00 	adc.w	ip, ip, #0
 8002e42:	eb13 0309 	adds.w	r3, r3, r9
 8002e46:	f14c 0c00 	adc.w	ip, ip, #0
 8002e4a:	f8cd e01c 	str.w	lr, [sp, #28]
 8002e4e:	9310      	str	r3, [sp, #64]	; 0x40
 8002e50:	9b08      	ldr	r3, [sp, #32]
 8002e52:	eb13 030c 	adds.w	r3, r3, ip
 8002e56:	f141 0c00 	adc.w	ip, r1, #0
 8002e5a:	191b      	adds	r3, r3, r4
 8002e5c:	f14c 0c00 	adc.w	ip, ip, #0
 8002e60:	199b      	adds	r3, r3, r6
 8002e62:	f14c 0c00 	adc.w	ip, ip, #0
 8002e66:	eb13 030a 	adds.w	r3, r3, sl
 8002e6a:	f14c 0c00 	adc.w	ip, ip, #0
 8002e6e:	9308      	str	r3, [sp, #32]
 8002e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002e74:	eb13 030c 	adds.w	r3, r3, ip
 8002e78:	f154 0400 	adcs.w	r4, r4, #0
 8002e7c:	f141 0c00 	adc.w	ip, r1, #0
 8002e80:	195b      	adds	r3, r3, r5
 8002e82:	4174      	adcs	r4, r6
 8002e84:	f14c 0c00 	adc.w	ip, ip, #0
 8002e88:	eb13 0308 	adds.w	r3, r3, r8
 8002e8c:	eb54 0409 	adcs.w	r4, r4, r9
 8002e90:	f14c 0c00 	adc.w	ip, ip, #0
 8002e94:	eb13 030b 	adds.w	r3, r3, fp
 8002e98:	eb54 040e 	adcs.w	r4, r4, lr
 8002e9c:	f14c 0c00 	adc.w	ip, ip, #0
 8002ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea2:	940a      	str	r4, [sp, #40]	; 0x28
 8002ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ea6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002ea8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002eaa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002eac:	eb13 030c 	adds.w	r3, r3, ip
 8002eb0:	f154 0400 	adcs.w	r4, r4, #0
 8002eb4:	f155 0500 	adcs.w	r5, r5, #0
 8002eb8:	f156 0600 	adcs.w	r6, r6, #0
 8002ebc:	f141 0c00 	adc.w	ip, r1, #0
 8002ec0:	eb13 0308 	adds.w	r3, r3, r8
 8002ec4:	eb54 0409 	adcs.w	r4, r4, r9
 8002ec8:	eb55 050a 	adcs.w	r5, r5, sl
 8002ecc:	eb56 060b 	adcs.w	r6, r6, fp
 8002ed0:	f14c 0c00 	adc.w	ip, ip, #0
 8002ed4:	eb13 030a 	adds.w	r3, r3, sl
 8002ed8:	eb54 040b 	adcs.w	r4, r4, fp
 8002edc:	eb55 050e 	adcs.w	r5, r5, lr
 8002ee0:	f156 0600 	adcs.w	r6, r6, #0
 8002ee4:	f14c 0c00 	adc.w	ip, ip, #0
 8002ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002eea:	940c      	str	r4, [sp, #48]	; 0x30
 8002eec:	950d      	str	r5, [sp, #52]	; 0x34
 8002eee:	960e      	str	r6, [sp, #56]	; 0x38
 8002ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ef2:	eb13 030c 	adds.w	r3, r3, ip
 8002ef6:	f141 0c00 	adc.w	ip, r1, #0
 8002efa:	eb13 030e 	adds.w	r3, r3, lr
 8002efe:	f14c 0c00 	adc.w	ip, ip, #0
 8002f02:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f06:	9c08      	ldr	r4, [sp, #32]
 8002f08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002f0a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002f0c:	f8dd 9000 	ldr.w	r9, [sp]
 8002f10:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002f14:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002f18:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8002f1c:	ebb3 0309 	subs.w	r3, r3, r9
 8002f20:	eb74 040a 	sbcs.w	r4, r4, sl
 8002f24:	eb75 050b 	sbcs.w	r5, r5, fp
 8002f28:	eb76 060e 	sbcs.w	r6, r6, lr
 8002f2c:	9408      	str	r4, [sp, #32]
 8002f2e:	9509      	str	r5, [sp, #36]	; 0x24
 8002f30:	960a      	str	r6, [sp, #40]	; 0x28
 8002f32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002f36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002f38:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002f3a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002f3e:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002f42:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002f46:	f8dd b018 	ldr.w	fp, [sp, #24]
 8002f4a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8002f4e:	eb73 0309 	sbcs.w	r3, r3, r9
 8002f52:	eb74 040a 	sbcs.w	r4, r4, sl
 8002f56:	eb75 050b 	sbcs.w	r5, r5, fp
 8002f5a:	eb76 060e 	sbcs.w	r6, r6, lr
 8002f5e:	f168 0800 	sbc.w	r8, r8, #0
 8002f62:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f64:	940c      	str	r4, [sp, #48]	; 0x30
 8002f66:	950d      	str	r5, [sp, #52]	; 0x34
 8002f68:	960e      	str	r6, [sp, #56]	; 0x38
 8002f6a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8002f6e:	eba1 0c0c 	sub.w	ip, r1, ip
 8002f72:	f00c 0101 	and.w	r1, ip, #1
 8002f76:	9b08      	ldr	r3, [sp, #32]
 8002f78:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002f7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002f7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002f7e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002f82:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8002f86:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8002f8a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8002f8e:	ebb3 030c 	subs.w	r3, r3, ip
 8002f92:	eb74 040c 	sbcs.w	r4, r4, ip
 8002f96:	eb75 050c 	sbcs.w	r5, r5, ip
 8002f9a:	f176 0600 	sbcs.w	r6, r6, #0
 8002f9e:	f178 0800 	sbcs.w	r8, r8, #0
 8002fa2:	f179 0900 	sbcs.w	r9, r9, #0
 8002fa6:	eb7a 0a01 	sbcs.w	sl, sl, r1
 8002faa:	eb6b 0b0c 	sbc.w	fp, fp, ip
 8002fae:	6003      	str	r3, [r0, #0]
 8002fb0:	6044      	str	r4, [r0, #4]
 8002fb2:	6085      	str	r5, [r0, #8]
 8002fb4:	60c6      	str	r6, [r0, #12]
 8002fb6:	f8c0 8010 	str.w	r8, [r0, #16]
 8002fba:	f8c0 9014 	str.w	r9, [r0, #20]
 8002fbe:	f8c0 a018 	str.w	sl, [r0, #24]
 8002fc2:	f8c0 b01c 	str.w	fp, [r0, #28]
 8002fc6:	b011      	add	sp, #68	; 0x44
        "add   sp, sp, #68\n\t"
        : [a] "+r" (a)
        : [r] "r" (r)
        : "memory", "r9", "r10", "r11", "r14", "r3", "r4", "r5", "r6", "r8", "r12"
    );
}
 8002fc8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08002fcc <sp_256_cmp_8>:
 * b  A single precision integer.
 * return -ve, 0 or +ve if a is less than, equal to or greater than b
 * respectively.
 */
SP_NOINLINE static int32_t sp_256_cmp_8(const sp_digit* a, const sp_digit* b)
{
 8002fcc:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
    sp_digit r = 0;


    __asm__ __volatile__ (
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	ea6f 0303 	mvn.w	r3, r3
 8002fda:	f04f 061c 	mov.w	r6, #28
 8002fde:	f850 8006 	ldr.w	r8, [r0, r6]
 8002fe2:	598d      	ldr	r5, [r1, r6]
 8002fe4:	ea08 0803 	and.w	r8, r8, r3
 8002fe8:	ea05 0503 	and.w	r5, r5, r3
 8002fec:	4644      	mov	r4, r8
 8002fee:	ebb8 0805 	subs.w	r8, r8, r5
 8002ff2:	eb68 0808 	sbc.w	r8, r8, r8
 8002ff6:	4442      	add	r2, r8
 8002ff8:	ea6f 0808 	mvn.w	r8, r8
 8002ffc:	ea03 0308 	and.w	r3, r3, r8
 8003000:	1b2d      	subs	r5, r5, r4
 8003002:	eb68 0808 	sbc.w	r8, r8, r8
 8003006:	eba2 0208 	sub.w	r2, r2, r8
 800300a:	ea6f 0808 	mvn.w	r8, r8
 800300e:	ea03 0308 	and.w	r3, r3, r8
 8003012:	f1a6 0604 	sub.w	r6, r6, #4
 8003016:	2e00      	cmp	r6, #0
 8003018:	dae1      	bge.n	8002fde <sp_256_cmp_8+0x12>
        : [a] "r" (a), [b] "r" (b)
        : "r3", "r4", "r5", "r6", "r8"
    );

    return r;
}
 800301a:	4610      	mov	r0, r2
 800301c:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8003020:	4770      	bx	lr

08003022 <sp_256_cond_sub_8>:
 * b  A single precision number to subtract.
 * m  Mask value to apply.
 */
SP_NOINLINE static sp_digit sp_256_cond_sub_8(sp_digit* r, const sp_digit* a,
        const sp_digit* b, sp_digit m)
{
 8003022:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
 8003026:	4604      	mov	r4, r0
    sp_digit c = 0;

    __asm__ __volatile__ (
 8003028:	2000      	movs	r0, #0
 800302a:	f04f 0520 	mov.w	r5, #32
 800302e:	46a9      	mov	r9, r5
 8003030:	f04f 0800 	mov.w	r8, #0
 8003034:	f852 6008 	ldr.w	r6, [r2, r8]
 8003038:	ea06 0603 	and.w	r6, r6, r3
 800303c:	f04f 0500 	mov.w	r5, #0
 8003040:	1a2d      	subs	r5, r5, r0
 8003042:	f851 5008 	ldr.w	r5, [r1, r8]
 8003046:	41b5      	sbcs	r5, r6
 8003048:	4180      	sbcs	r0, r0
 800304a:	f844 5008 	str.w	r5, [r4, r8]
 800304e:	f108 0804 	add.w	r8, r8, #4
 8003052:	45c8      	cmp	r8, r9
 8003054:	dbee      	blt.n	8003034 <sp_256_cond_sub_8+0x12>
        : [r] "r" (r), [a] "r" (a), [b] "r" (b), [m] "r" (m)
        : "memory", "r5", "r6", "r8", "r9"
    );

    return c;
}
 8003056:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
 800305a:	4770      	bx	lr

0800305c <sp_256_mont_reduce_8>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_256_mont_reduce_8(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 800305c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)mp;
    (void)m;

    __asm__ __volatile__ (
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0100 	mov.w	r1, #0
 8003068:	4691      	mov	r9, r2
 800306a:	f04f 0400 	mov.w	r4, #0
 800306e:	6803      	ldr	r3, [r0, #0]
 8003070:	6846      	ldr	r6, [r0, #4]
 8003072:	f04f 0500 	mov.w	r5, #0
 8003076:	19a4      	adds	r4, r4, r6
 8003078:	eb45 0502 	adc.w	r5, r5, r2
 800307c:	6044      	str	r4, [r0, #4]
 800307e:	6886      	ldr	r6, [r0, #8]
 8003080:	f04f 0400 	mov.w	r4, #0
 8003084:	19ad      	adds	r5, r5, r6
 8003086:	eb44 0402 	adc.w	r4, r4, r2
 800308a:	6085      	str	r5, [r0, #8]
 800308c:	68c6      	ldr	r6, [r0, #12]
 800308e:	f04f 0500 	mov.w	r5, #0
 8003092:	18e4      	adds	r4, r4, r3
 8003094:	eb45 0502 	adc.w	r5, r5, r2
 8003098:	19a4      	adds	r4, r4, r6
 800309a:	eb45 0502 	adc.w	r5, r5, r2
 800309e:	60c4      	str	r4, [r0, #12]
 80030a0:	6906      	ldr	r6, [r0, #16]
 80030a2:	f04f 0400 	mov.w	r4, #0
 80030a6:	19ad      	adds	r5, r5, r6
 80030a8:	eb44 0402 	adc.w	r4, r4, r2
 80030ac:	6105      	str	r5, [r0, #16]
 80030ae:	6946      	ldr	r6, [r0, #20]
 80030b0:	f04f 0500 	mov.w	r5, #0
 80030b4:	19a4      	adds	r4, r4, r6
 80030b6:	eb45 0502 	adc.w	r5, r5, r2
 80030ba:	6144      	str	r4, [r0, #20]
 80030bc:	6986      	ldr	r6, [r0, #24]
 80030be:	f04f 0400 	mov.w	r4, #0
 80030c2:	18ed      	adds	r5, r5, r3
 80030c4:	eb44 0402 	adc.w	r4, r4, r2
 80030c8:	19ad      	adds	r5, r5, r6
 80030ca:	eb44 0402 	adc.w	r4, r4, r2
 80030ce:	6185      	str	r5, [r0, #24]
 80030d0:	69c6      	ldr	r6, [r0, #28]
 80030d2:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80030d6:	18cd      	adds	r5, r1, r3
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	eb41 0102 	adc.w	r1, r1, r2
 80030e0:	1ae4      	subs	r4, r4, r3
 80030e2:	4195      	sbcs	r5, r2
 80030e4:	eb61 0102 	sbc.w	r1, r1, r2
 80030e8:	19a4      	adds	r4, r4, r6
 80030ea:	eb55 0508 	adcs.w	r5, r5, r8
 80030ee:	eb41 0102 	adc.w	r1, r1, r2
 80030f2:	61c4      	str	r4, [r0, #28]
 80030f4:	6205      	str	r5, [r0, #32]
 80030f6:	f109 0901 	add.w	r9, r9, #1
 80030fa:	f100 0004 	add.w	r0, r0, #4
 80030fe:	f04f 0608 	mov.w	r6, #8
 8003102:	45b1      	cmp	r9, r6
 8003104:	dbb1      	blt.n	800306a <sp_256_mont_reduce_8+0xe>
 8003106:	f1a0 0020 	sub.w	r0, r0, #32
 800310a:	460b      	mov	r3, r1
 800310c:	f1a1 0101 	sub.w	r1, r1, #1
 8003110:	ea6f 0101 	mvn.w	r1, r1
 8003114:	6a04      	ldr	r4, [r0, #32]
 8003116:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003118:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800311a:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 800311e:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8003122:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 8003126:	f8d0 b038 	ldr.w	fp, [r0, #56]	; 0x38
 800312a:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 800312e:	1a64      	subs	r4, r4, r1
 8003130:	418d      	sbcs	r5, r1
 8003132:	418e      	sbcs	r6, r1
 8003134:	eb78 0802 	sbcs.w	r8, r8, r2
 8003138:	eb79 0902 	sbcs.w	r9, r9, r2
 800313c:	eb7a 0a02 	sbcs.w	sl, sl, r2
 8003140:	eb7b 0b03 	sbcs.w	fp, fp, r3
 8003144:	eb6e 0e01 	sbc.w	lr, lr, r1
 8003148:	6004      	str	r4, [r0, #0]
 800314a:	6045      	str	r5, [r0, #4]
 800314c:	6086      	str	r6, [r0, #8]
 800314e:	f8c0 800c 	str.w	r8, [r0, #12]
 8003152:	f8c0 9010 	str.w	r9, [r0, #16]
 8003156:	f8c0 a014 	str.w	sl, [r0, #20]
 800315a:	f8c0 b018 	str.w	fp, [r0, #24]
 800315e:	f8c0 e01c 	str.w	lr, [r0, #28]
    );


    (void)m;
    (void)mp;
}
 8003162:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
	...

08003168 <sp_256_mont_reduce_order_8>:
 * m   The single precision number representing the modulus.
 * mp  The digit representing the negative inverse of m mod 2^n.
 */
SP_NOINLINE static void sp_256_mont_reduce_order_8(sp_digit* a, const sp_digit* m,
        sp_digit mp)
{
 8003168:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    sp_digit ca = 0;

    __asm__ __volatile__ (
 800316c:	2300      	movs	r3, #0
 800316e:	4691      	mov	r9, r2
 8003170:	468c      	mov	ip, r1
 8003172:	4682      	mov	sl, r0
 8003174:	f04f 0400 	mov.w	r4, #0
 8003178:	f10a 0b20 	add.w	fp, sl, #32
 800317c:	464a      	mov	r2, r9
 800317e:	f8da 0000 	ldr.w	r0, [sl]
 8003182:	fb02 f200 	mul.w	r2, r2, r0
 8003186:	4661      	mov	r1, ip
 8003188:	f10a 0e18 	add.w	lr, sl, #24
 800318c:	f8da 0000 	ldr.w	r0, [sl]
 8003190:	f04f 0500 	mov.w	r5, #0
 8003194:	f851 8b04 	ldr.w	r8, [r1], #4
 8003198:	fba2 6808 	umull	r6, r8, r2, r8
 800319c:	1980      	adds	r0, r0, r6
 800319e:	eb45 0508 	adc.w	r5, r5, r8
 80031a2:	1824      	adds	r4, r4, r0
 80031a4:	f145 0500 	adc.w	r5, r5, #0
 80031a8:	f84a 4b04 	str.w	r4, [sl], #4
 80031ac:	f8da 0000 	ldr.w	r0, [sl]
 80031b0:	f04f 0400 	mov.w	r4, #0
 80031b4:	f851 8b04 	ldr.w	r8, [r1], #4
 80031b8:	fba2 6808 	umull	r6, r8, r2, r8
 80031bc:	1980      	adds	r0, r0, r6
 80031be:	eb44 0408 	adc.w	r4, r4, r8
 80031c2:	182d      	adds	r5, r5, r0
 80031c4:	f144 0400 	adc.w	r4, r4, #0
 80031c8:	f84a 5b04 	str.w	r5, [sl], #4
 80031cc:	45f2      	cmp	sl, lr
 80031ce:	dbdd      	blt.n	800318c <sp_256_mont_reduce_order_8+0x24>
 80031d0:	f8da 0000 	ldr.w	r0, [sl]
 80031d4:	f04f 0500 	mov.w	r5, #0
 80031d8:	f851 8b04 	ldr.w	r8, [r1], #4
 80031dc:	fba2 6808 	umull	r6, r8, r2, r8
 80031e0:	1980      	adds	r0, r0, r6
 80031e2:	eb45 0508 	adc.w	r5, r5, r8
 80031e6:	1824      	adds	r4, r4, r0
 80031e8:	f145 0500 	adc.w	r5, r5, #0
 80031ec:	f84a 4b04 	str.w	r4, [sl], #4
 80031f0:	461c      	mov	r4, r3
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	f8d1 8000 	ldr.w	r8, [r1]
 80031fa:	fba2 6808 	umull	r6, r8, r2, r8
 80031fe:	19ad      	adds	r5, r5, r6
 8003200:	eb54 0408 	adcs.w	r4, r4, r8
 8003204:	f143 0300 	adc.w	r3, r3, #0
 8003208:	f8da 6000 	ldr.w	r6, [sl]
 800320c:	f8da 8004 	ldr.w	r8, [sl, #4]
 8003210:	1976      	adds	r6, r6, r5
 8003212:	eb58 0804 	adcs.w	r8, r8, r4
 8003216:	f143 0300 	adc.w	r3, r3, #0
 800321a:	f8ca 6000 	str.w	r6, [sl]
 800321e:	f8ca 8004 	str.w	r8, [sl, #4]
 8003222:	f1aa 0a18 	sub.w	sl, sl, #24
 8003226:	45da      	cmp	sl, fp
 8003228:	dba8      	blt.n	800317c <sp_256_mont_reduce_order_8+0x14>
 800322a:	4650      	mov	r0, sl
 800322c:	4661      	mov	r1, ip
        : [ca] "+r" (ca), [a] "+r" (a)
        : [m] "r" (m), [mp] "r" (mp)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r12", "r14"
    );

    sp_256_cond_sub_8(a - 8, a, m, (sp_digit)0 - ca);
 800322e:	425b      	negs	r3, r3
 8003230:	460a      	mov	r2, r1
 8003232:	4601      	mov	r1, r0
 8003234:	3820      	subs	r0, #32
 8003236:	4c02      	ldr	r4, [pc, #8]	; (8003240 <sp_256_mont_reduce_order_8+0xd8>)
 8003238:	47a0      	blx	r4
}
 800323a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 800323e:	bf00      	nop
 8003240:	08003023 	.word	0x08003023

08003244 <sp_256_mont_add_8>:
 * b   Second number to add in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_add_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m)
{
 8003244:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 8003248:	f04f 0c00 	mov.w	ip, #0
 800324c:	680c      	ldr	r4, [r1, #0]
 800324e:	684d      	ldr	r5, [r1, #4]
 8003250:	688e      	ldr	r6, [r1, #8]
 8003252:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8003256:	f8d2 9000 	ldr.w	r9, [r2]
 800325a:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800325e:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8003262:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8003266:	eb14 0409 	adds.w	r4, r4, r9
 800326a:	eb55 050a 	adcs.w	r5, r5, sl
 800326e:	eb56 060b 	adcs.w	r6, r6, fp
 8003272:	eb58 080e 	adcs.w	r8, r8, lr
 8003276:	6004      	str	r4, [r0, #0]
 8003278:	6045      	str	r5, [r0, #4]
 800327a:	6086      	str	r6, [r0, #8]
 800327c:	f8c0 800c 	str.w	r8, [r0, #12]
 8003280:	690c      	ldr	r4, [r1, #16]
 8003282:	694d      	ldr	r5, [r1, #20]
 8003284:	698e      	ldr	r6, [r1, #24]
 8003286:	f8d1 801c 	ldr.w	r8, [r1, #28]
 800328a:	f8d2 9010 	ldr.w	r9, [r2, #16]
 800328e:	f8d2 a014 	ldr.w	sl, [r2, #20]
 8003292:	f8d2 b018 	ldr.w	fp, [r2, #24]
 8003296:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 800329a:	eb54 0409 	adcs.w	r4, r4, r9
 800329e:	eb55 050a 	adcs.w	r5, r5, sl
 80032a2:	eb56 060b 	adcs.w	r6, r6, fp
 80032a6:	eb58 080e 	adcs.w	r8, r8, lr
 80032aa:	f14c 0300 	adc.w	r3, ip, #0
 80032ae:	ebac 0303 	sub.w	r3, ip, r3
 80032b2:	f003 0c01 	and.w	ip, r3, #1
 80032b6:	f8d0 9000 	ldr.w	r9, [r0]
 80032ba:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80032be:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80032c2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80032c6:	ebb9 0903 	subs.w	r9, r9, r3
 80032ca:	eb7a 0a03 	sbcs.w	sl, sl, r3
 80032ce:	eb7b 0b03 	sbcs.w	fp, fp, r3
 80032d2:	f17e 0e00 	sbcs.w	lr, lr, #0
 80032d6:	f174 0400 	sbcs.w	r4, r4, #0
 80032da:	f175 0500 	sbcs.w	r5, r5, #0
 80032de:	eb76 060c 	sbcs.w	r6, r6, ip
 80032e2:	eb68 0803 	sbc.w	r8, r8, r3
 80032e6:	f8c0 9000 	str.w	r9, [r0]
 80032ea:	f8c0 a004 	str.w	sl, [r0, #4]
 80032ee:	f8c0 b008 	str.w	fp, [r0, #8]
 80032f2:	f8c0 e00c 	str.w	lr, [r0, #12]
 80032f6:	6104      	str	r4, [r0, #16]
 80032f8:	6145      	str	r5, [r0, #20]
 80032fa:	6186      	str	r6, [r0, #24]
 80032fc:	f8c0 801c 	str.w	r8, [r0, #28]
        "str   r8, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 8003300:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003304 <sp_256_mont_dbl_8>:
 * r   Result of doubling.
 * a   Number to double in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_dbl_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8003304:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 8003308:	f04f 0c00 	mov.w	ip, #0
 800330c:	680c      	ldr	r4, [r1, #0]
 800330e:	684d      	ldr	r5, [r1, #4]
 8003310:	688e      	ldr	r6, [r1, #8]
 8003312:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8003316:	f8d1 9010 	ldr.w	r9, [r1, #16]
 800331a:	f8d1 a014 	ldr.w	sl, [r1, #20]
 800331e:	f8d1 b018 	ldr.w	fp, [r1, #24]
 8003322:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8003326:	1924      	adds	r4, r4, r4
 8003328:	416d      	adcs	r5, r5
 800332a:	4176      	adcs	r6, r6
 800332c:	eb58 0808 	adcs.w	r8, r8, r8
 8003330:	eb59 0909 	adcs.w	r9, r9, r9
 8003334:	eb5a 0a0a 	adcs.w	sl, sl, sl
 8003338:	eb5b 0b0b 	adcs.w	fp, fp, fp
 800333c:	eb5e 0e0e 	adcs.w	lr, lr, lr
 8003340:	f14c 0300 	adc.w	r3, ip, #0
 8003344:	ebac 0303 	sub.w	r3, ip, r3
 8003348:	f003 0c01 	and.w	ip, r3, #1
 800334c:	1ae4      	subs	r4, r4, r3
 800334e:	419d      	sbcs	r5, r3
 8003350:	419e      	sbcs	r6, r3
 8003352:	f178 0800 	sbcs.w	r8, r8, #0
 8003356:	f179 0900 	sbcs.w	r9, r9, #0
 800335a:	f17a 0a00 	sbcs.w	sl, sl, #0
 800335e:	eb7b 0b0c 	sbcs.w	fp, fp, ip
 8003362:	eb6e 0e03 	sbc.w	lr, lr, r3
 8003366:	6004      	str	r4, [r0, #0]
 8003368:	6045      	str	r5, [r0, #4]
 800336a:	6086      	str	r6, [r0, #8]
 800336c:	f8c0 800c 	str.w	r8, [r0, #12]
 8003370:	f8c0 9010 	str.w	r9, [r0, #16]
 8003374:	f8c0 a014 	str.w	sl, [r0, #20]
 8003378:	f8c0 b018 	str.w	fp, [r0, #24]
 800337c:	f8c0 e01c 	str.w	lr, [r0, #28]
        "str   r14, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 8003380:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003384 <sp_256_mont_tpl_8>:
 * r   Result of Tripling.
 * a   Number to triple in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_tpl_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8003384:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 8003388:	680a      	ldr	r2, [r1, #0]
 800338a:	684b      	ldr	r3, [r1, #4]
 800338c:	688c      	ldr	r4, [r1, #8]
 800338e:	68cd      	ldr	r5, [r1, #12]
 8003390:	690e      	ldr	r6, [r1, #16]
 8003392:	f8d1 8014 	ldr.w	r8, [r1, #20]
 8003396:	f8d1 9018 	ldr.w	r9, [r1, #24]
 800339a:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 800339e:	1892      	adds	r2, r2, r2
 80033a0:	415b      	adcs	r3, r3
 80033a2:	4164      	adcs	r4, r4
 80033a4:	416d      	adcs	r5, r5
 80033a6:	4176      	adcs	r6, r6
 80033a8:	eb58 0808 	adcs.w	r8, r8, r8
 80033ac:	eb59 0909 	adcs.w	r9, r9, r9
 80033b0:	eb5a 0a0a 	adcs.w	sl, sl, sl
 80033b4:	f04f 0b00 	mov.w	fp, #0
 80033b8:	f04f 0e00 	mov.w	lr, #0
 80033bc:	eb4b 0b0b 	adc.w	fp, fp, fp
 80033c0:	46dc      	mov	ip, fp
 80033c2:	f1ab 0b01 	sub.w	fp, fp, #1
 80033c6:	ea6f 0b0b 	mvn.w	fp, fp
 80033ca:	ebb2 020b 	subs.w	r2, r2, fp
 80033ce:	eb73 030b 	sbcs.w	r3, r3, fp
 80033d2:	eb74 040b 	sbcs.w	r4, r4, fp
 80033d6:	eb75 050e 	sbcs.w	r5, r5, lr
 80033da:	eb76 060e 	sbcs.w	r6, r6, lr
 80033de:	eb78 080e 	sbcs.w	r8, r8, lr
 80033e2:	eb79 090c 	sbcs.w	r9, r9, ip
 80033e6:	eb6a 0a0b 	sbc.w	sl, sl, fp
 80033ea:	f8d1 c000 	ldr.w	ip, [r1]
 80033ee:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80033f2:	eb12 020c 	adds.w	r2, r2, ip
 80033f6:	eb53 030e 	adcs.w	r3, r3, lr
 80033fa:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80033fe:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8003402:	eb54 040c 	adcs.w	r4, r4, ip
 8003406:	eb55 050e 	adcs.w	r5, r5, lr
 800340a:	f8d1 c010 	ldr.w	ip, [r1, #16]
 800340e:	f8d1 e014 	ldr.w	lr, [r1, #20]
 8003412:	eb56 060c 	adcs.w	r6, r6, ip
 8003416:	eb58 080e 	adcs.w	r8, r8, lr
 800341a:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800341e:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8003422:	eb59 090c 	adcs.w	r9, r9, ip
 8003426:	eb5a 0a0e 	adcs.w	sl, sl, lr
 800342a:	f04f 0b00 	mov.w	fp, #0
 800342e:	f04f 0e00 	mov.w	lr, #0
 8003432:	eb4b 0b0b 	adc.w	fp, fp, fp
 8003436:	46dc      	mov	ip, fp
 8003438:	f1ab 0b01 	sub.w	fp, fp, #1
 800343c:	ea6f 0b0b 	mvn.w	fp, fp
 8003440:	ebb2 020b 	subs.w	r2, r2, fp
 8003444:	6002      	str	r2, [r0, #0]
 8003446:	eb73 030b 	sbcs.w	r3, r3, fp
 800344a:	6043      	str	r3, [r0, #4]
 800344c:	eb74 040b 	sbcs.w	r4, r4, fp
 8003450:	6084      	str	r4, [r0, #8]
 8003452:	eb75 050e 	sbcs.w	r5, r5, lr
 8003456:	60c5      	str	r5, [r0, #12]
 8003458:	eb76 060e 	sbcs.w	r6, r6, lr
 800345c:	6106      	str	r6, [r0, #16]
 800345e:	eb78 080e 	sbcs.w	r8, r8, lr
 8003462:	f8c0 8014 	str.w	r8, [r0, #20]
 8003466:	eb79 090c 	sbcs.w	r9, r9, ip
 800346a:	f8c0 9018 	str.w	r9, [r0, #24]
 800346e:	eb6a 0a0b 	sbc.w	sl, sl, fp
 8003472:	f8c0 a01c 	str.w	sl, [r0, #28]
        "str	r10, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a)
        : "memory", "r11", "r12", "r14", "r2", "r3", "r4", "r5", "r6", "r8", "r9", "r10"
    );
}
 8003476:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0800347a <sp_256_mont_sub_8>:
 * b   Number to subtract with in Montogmery form.
 * m   Modulus (prime).
 */
SP_NOINLINE static void sp_256_mont_sub_8(sp_digit* r, const sp_digit* a, const sp_digit* b,
        const sp_digit* m)
{
 800347a:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
    (void)m;

    __asm__ __volatile__ (
 800347e:	f04f 0c00 	mov.w	ip, #0
 8003482:	680c      	ldr	r4, [r1, #0]
 8003484:	684d      	ldr	r5, [r1, #4]
 8003486:	688e      	ldr	r6, [r1, #8]
 8003488:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800348c:	f8d2 9000 	ldr.w	r9, [r2]
 8003490:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8003494:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8003498:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800349c:	ebb4 0409 	subs.w	r4, r4, r9
 80034a0:	eb75 050a 	sbcs.w	r5, r5, sl
 80034a4:	eb76 060b 	sbcs.w	r6, r6, fp
 80034a8:	eb78 080e 	sbcs.w	r8, r8, lr
 80034ac:	6004      	str	r4, [r0, #0]
 80034ae:	6045      	str	r5, [r0, #4]
 80034b0:	6086      	str	r6, [r0, #8]
 80034b2:	f8c0 800c 	str.w	r8, [r0, #12]
 80034b6:	690c      	ldr	r4, [r1, #16]
 80034b8:	694d      	ldr	r5, [r1, #20]
 80034ba:	698e      	ldr	r6, [r1, #24]
 80034bc:	f8d1 801c 	ldr.w	r8, [r1, #28]
 80034c0:	f8d2 9010 	ldr.w	r9, [r2, #16]
 80034c4:	f8d2 a014 	ldr.w	sl, [r2, #20]
 80034c8:	f8d2 b018 	ldr.w	fp, [r2, #24]
 80034cc:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 80034d0:	eb74 0409 	sbcs.w	r4, r4, r9
 80034d4:	eb75 050a 	sbcs.w	r5, r5, sl
 80034d8:	eb76 060b 	sbcs.w	r6, r6, fp
 80034dc:	eb78 080e 	sbcs.w	r8, r8, lr
 80034e0:	f16c 0300 	sbc.w	r3, ip, #0
 80034e4:	f003 0c01 	and.w	ip, r3, #1
 80034e8:	f8d0 9000 	ldr.w	r9, [r0]
 80034ec:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80034f0:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80034f4:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80034f8:	eb19 0903 	adds.w	r9, r9, r3
 80034fc:	eb5a 0a03 	adcs.w	sl, sl, r3
 8003500:	eb5b 0b03 	adcs.w	fp, fp, r3
 8003504:	f15e 0e00 	adcs.w	lr, lr, #0
 8003508:	f154 0400 	adcs.w	r4, r4, #0
 800350c:	f155 0500 	adcs.w	r5, r5, #0
 8003510:	eb56 060c 	adcs.w	r6, r6, ip
 8003514:	eb48 0803 	adc.w	r8, r8, r3
 8003518:	f8c0 9000 	str.w	r9, [r0]
 800351c:	f8c0 a004 	str.w	sl, [r0, #4]
 8003520:	f8c0 b008 	str.w	fp, [r0, #8]
 8003524:	f8c0 e00c 	str.w	lr, [r0, #12]
 8003528:	6104      	str	r4, [r0, #16]
 800352a:	6145      	str	r5, [r0, #20]
 800352c:	6186      	str	r6, [r0, #24]
 800352e:	f8c0 801c 	str.w	r8, [r0, #28]
        "str   r8, [%[r],#28]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [b] "r" (b)
        : "memory", "r4", "r5", "r6", "r8", "r9", "r10", "r11", "r14", "r3", "r12"
    );
}
 8003532:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08003536 <sp_256_div2_8>:
 * r  Result of division by 2.
 * a  Number to divide.
 * m  Modulus (prime).
 */
SP_NOINLINE static void sp_256_div2_8(sp_digit* r, const sp_digit* a, const sp_digit* m)
{
 8003536:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
    __asm__ __volatile__ (
 800353a:	f8d1 8000 	ldr.w	r8, [r1]
 800353e:	ea4f 78c8 	mov.w	r8, r8, lsl #31
 8003542:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8003546:	f04f 0500 	mov.w	r5, #0
 800354a:	eba5 0508 	sub.w	r5, r5, r8
 800354e:	f04f 0800 	mov.w	r8, #0
 8003552:	ea4f 76c5 	mov.w	r6, r5, lsl #31
 8003556:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800355a:	680b      	ldr	r3, [r1, #0]
 800355c:	684c      	ldr	r4, [r1, #4]
 800355e:	195b      	adds	r3, r3, r5
 8003560:	416c      	adcs	r4, r5
 8003562:	6003      	str	r3, [r0, #0]
 8003564:	6044      	str	r4, [r0, #4]
 8003566:	688b      	ldr	r3, [r1, #8]
 8003568:	68cc      	ldr	r4, [r1, #12]
 800356a:	416b      	adcs	r3, r5
 800356c:	eb54 0408 	adcs.w	r4, r4, r8
 8003570:	6083      	str	r3, [r0, #8]
 8003572:	60c4      	str	r4, [r0, #12]
 8003574:	690b      	ldr	r3, [r1, #16]
 8003576:	694c      	ldr	r4, [r1, #20]
 8003578:	eb53 0308 	adcs.w	r3, r3, r8
 800357c:	eb54 0408 	adcs.w	r4, r4, r8
 8003580:	6103      	str	r3, [r0, #16]
 8003582:	6144      	str	r4, [r0, #20]
 8003584:	698b      	ldr	r3, [r1, #24]
 8003586:	69cc      	ldr	r4, [r1, #28]
 8003588:	4173      	adcs	r3, r6
 800358a:	416c      	adcs	r4, r5
 800358c:	eb48 0808 	adc.w	r8, r8, r8
 8003590:	ea4f 78c8 	mov.w	r8, r8, lsl #31
 8003594:	ea4f 0553 	mov.w	r5, r3, lsr #1
 8003598:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 800359c:	ea4f 0654 	mov.w	r6, r4, lsr #1
 80035a0:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 80035a4:	ea45 0504 	orr.w	r5, r5, r4
 80035a8:	ea46 0608 	orr.w	r6, r6, r8
 80035ac:	4698      	mov	r8, r3
 80035ae:	6185      	str	r5, [r0, #24]
 80035b0:	61c6      	str	r6, [r0, #28]
 80035b2:	690b      	ldr	r3, [r1, #16]
 80035b4:	694c      	ldr	r4, [r1, #20]
 80035b6:	ea4f 0553 	mov.w	r5, r3, lsr #1
 80035ba:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 80035be:	ea4f 0654 	mov.w	r6, r4, lsr #1
 80035c2:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 80035c6:	ea45 0504 	orr.w	r5, r5, r4
 80035ca:	ea46 0608 	orr.w	r6, r6, r8
 80035ce:	4698      	mov	r8, r3
 80035d0:	6105      	str	r5, [r0, #16]
 80035d2:	6146      	str	r6, [r0, #20]
 80035d4:	688b      	ldr	r3, [r1, #8]
 80035d6:	68cc      	ldr	r4, [r1, #12]
 80035d8:	ea4f 0553 	mov.w	r5, r3, lsr #1
 80035dc:	ea4f 73c3 	mov.w	r3, r3, lsl #31
 80035e0:	ea4f 0654 	mov.w	r6, r4, lsr #1
 80035e4:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 80035e8:	ea45 0504 	orr.w	r5, r5, r4
 80035ec:	ea46 0608 	orr.w	r6, r6, r8
 80035f0:	4698      	mov	r8, r3
 80035f2:	6085      	str	r5, [r0, #8]
 80035f4:	60c6      	str	r6, [r0, #12]
 80035f6:	6803      	ldr	r3, [r0, #0]
 80035f8:	6844      	ldr	r4, [r0, #4]
 80035fa:	ea4f 0553 	mov.w	r5, r3, lsr #1
 80035fe:	ea4f 0654 	mov.w	r6, r4, lsr #1
 8003602:	ea4f 74c4 	mov.w	r4, r4, lsl #31
 8003606:	ea45 0504 	orr.w	r5, r5, r4
 800360a:	ea46 0608 	orr.w	r6, r6, r8
 800360e:	6005      	str	r5, [r0, #0]
 8003610:	6046      	str	r6, [r0, #4]
        "str	r6, [%[r], #4]\n\t"
        :
        : [r] "r" (r), [a] "r" (a), [m] "r" (m)
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );
}
 8003612:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8003616:	4770      	bx	lr

08003618 <sp_256_proj_point_dbl_8>:
    return err;
}
#endif /* WOLFSSL_SP_NONBLOCK */

static void sp_256_proj_point_dbl_8(sp_point_256* r, const sp_point_256* p, sp_digit* t)
{
 8003618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361c:	b085      	sub	sp, #20
 800361e:	4606      	mov	r6, r0
 8003620:	4688      	mov	r8, r1
 8003622:	9202      	str	r2, [sp, #8]
    sp_digit* t1 = t;
    sp_digit* t2 = t + 2*8;
 8003624:	f102 0940 	add.w	r9, r2, #64	; 0x40
    sp_digit* x;
    sp_digit* y;
    sp_digit* z;

    x = r->x;
    y = r->y;
 8003628:	f100 0540 	add.w	r5, r0, #64	; 0x40
    z = r->z;
 800362c:	f100 0b80 	add.w	fp, r0, #128	; 0x80
    /* Put infinity into result. */
    if (r != p) {
 8003630:	4288      	cmp	r0, r1
 8003632:	d003      	beq.n	800363c <sp_256_proj_point_dbl_8+0x24>
        r->infinity = p->infinity;
 8003634:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 8003638:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
    }

    /* T1 = Z * Z */
    sp_256_mont_sqr_8(t1, p->z, p256_mod, p256_mp_mod);
 800363c:	f108 0380 	add.w	r3, r8, #128	; 0x80
 8003640:	4619      	mov	r1, r3
 8003642:	4c3d      	ldr	r4, [pc, #244]	; (8003738 <sp_256_proj_point_dbl_8+0x120>)
 8003644:	2301      	movs	r3, #1
 8003646:	4622      	mov	r2, r4
 8003648:	9103      	str	r1, [sp, #12]
 800364a:	9802      	ldr	r0, [sp, #8]
 800364c:	4f3b      	ldr	r7, [pc, #236]	; (800373c <sp_256_proj_point_dbl_8+0x124>)
 800364e:	47b8      	blx	r7
    /* Z = Y * Z */
    sp_256_mont_mul_8(z, p->y, p->z, p256_mod, p256_mp_mod);
 8003650:	f108 0340 	add.w	r3, r8, #64	; 0x40
 8003654:	4618      	mov	r0, r3
 8003656:	f04f 0a01 	mov.w	sl, #1
 800365a:	f8cd a000 	str.w	sl, [sp]
 800365e:	4623      	mov	r3, r4
 8003660:	9a03      	ldr	r2, [sp, #12]
 8003662:	9003      	str	r0, [sp, #12]
 8003664:	4601      	mov	r1, r0
 8003666:	4658      	mov	r0, fp
 8003668:	4f35      	ldr	r7, [pc, #212]	; (8003740 <sp_256_proj_point_dbl_8+0x128>)
 800366a:	47b8      	blx	r7
    /* Z = 2Z */
    sp_256_mont_dbl_8(z, z, p256_mod);
 800366c:	4622      	mov	r2, r4
 800366e:	4659      	mov	r1, fp
 8003670:	4658      	mov	r0, fp
 8003672:	4b34      	ldr	r3, [pc, #208]	; (8003744 <sp_256_proj_point_dbl_8+0x12c>)
 8003674:	4798      	blx	r3
    /* T2 = X - T1 */
    sp_256_mont_sub_8(t2, p->x, t1, p256_mod);
 8003676:	4623      	mov	r3, r4
 8003678:	9f02      	ldr	r7, [sp, #8]
 800367a:	463a      	mov	r2, r7
 800367c:	4641      	mov	r1, r8
 800367e:	4648      	mov	r0, r9
 8003680:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8003754 <sp_256_proj_point_dbl_8+0x13c>
 8003684:	47d8      	blx	fp
    /* T1 = X + T1 */
    sp_256_mont_add_8(t1, p->x, t1, p256_mod);
 8003686:	4623      	mov	r3, r4
 8003688:	463a      	mov	r2, r7
 800368a:	4641      	mov	r1, r8
 800368c:	9702      	str	r7, [sp, #8]
 800368e:	4638      	mov	r0, r7
 8003690:	4f2d      	ldr	r7, [pc, #180]	; (8003748 <sp_256_proj_point_dbl_8+0x130>)
 8003692:	47b8      	blx	r7
    /* T2 = T1 * T2 */
    sp_256_mont_mul_8(t2, t1, t2, p256_mod, p256_mp_mod);
 8003694:	f8cd a000 	str.w	sl, [sp]
 8003698:	4623      	mov	r3, r4
 800369a:	464a      	mov	r2, r9
 800369c:	9902      	ldr	r1, [sp, #8]
 800369e:	4648      	mov	r0, r9
 80036a0:	4f27      	ldr	r7, [pc, #156]	; (8003740 <sp_256_proj_point_dbl_8+0x128>)
 80036a2:	47b8      	blx	r7
    /* T1 = 3T2 */
    sp_256_mont_tpl_8(t1, t2, p256_mod);
 80036a4:	4622      	mov	r2, r4
 80036a6:	4649      	mov	r1, r9
 80036a8:	9802      	ldr	r0, [sp, #8]
 80036aa:	4b28      	ldr	r3, [pc, #160]	; (800374c <sp_256_proj_point_dbl_8+0x134>)
 80036ac:	4798      	blx	r3
    /* Y = 2Y */
    sp_256_mont_dbl_8(y, p->y, p256_mod);
 80036ae:	4622      	mov	r2, r4
 80036b0:	9903      	ldr	r1, [sp, #12]
 80036b2:	4628      	mov	r0, r5
 80036b4:	4b23      	ldr	r3, [pc, #140]	; (8003744 <sp_256_proj_point_dbl_8+0x12c>)
 80036b6:	4798      	blx	r3
    /* Y = Y * Y */
    sp_256_mont_sqr_8(y, y, p256_mod, p256_mp_mod);
 80036b8:	4653      	mov	r3, sl
 80036ba:	4622      	mov	r2, r4
 80036bc:	4629      	mov	r1, r5
 80036be:	4628      	mov	r0, r5
 80036c0:	4f1e      	ldr	r7, [pc, #120]	; (800373c <sp_256_proj_point_dbl_8+0x124>)
 80036c2:	47b8      	blx	r7
    /* T2 = Y * Y */
    sp_256_mont_sqr_8(t2, y, p256_mod, p256_mp_mod);
 80036c4:	4653      	mov	r3, sl
 80036c6:	4622      	mov	r2, r4
 80036c8:	4629      	mov	r1, r5
 80036ca:	4648      	mov	r0, r9
 80036cc:	47b8      	blx	r7
    /* T2 = T2/2 */
    sp_256_div2_8(t2, t2, p256_mod);
 80036ce:	4622      	mov	r2, r4
 80036d0:	4649      	mov	r1, r9
 80036d2:	4648      	mov	r0, r9
 80036d4:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <sp_256_proj_point_dbl_8+0x138>)
 80036d6:	4798      	blx	r3
    /* Y = Y * X */
    sp_256_mont_mul_8(y, y, p->x, p256_mod, p256_mp_mod);
 80036d8:	f8cd a000 	str.w	sl, [sp]
 80036dc:	4623      	mov	r3, r4
 80036de:	4642      	mov	r2, r8
 80036e0:	4629      	mov	r1, r5
 80036e2:	4628      	mov	r0, r5
 80036e4:	4f16      	ldr	r7, [pc, #88]	; (8003740 <sp_256_proj_point_dbl_8+0x128>)
 80036e6:	47b8      	blx	r7
    /* X = T1 * T1 */
    sp_256_mont_sqr_8(x, t1, p256_mod, p256_mp_mod);
 80036e8:	4653      	mov	r3, sl
 80036ea:	4622      	mov	r2, r4
 80036ec:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80036f0:	4641      	mov	r1, r8
 80036f2:	4630      	mov	r0, r6
 80036f4:	4f11      	ldr	r7, [pc, #68]	; (800373c <sp_256_proj_point_dbl_8+0x124>)
 80036f6:	47b8      	blx	r7
    /* X = X - Y */
    sp_256_mont_sub_8(x, x, y, p256_mod);
 80036f8:	4623      	mov	r3, r4
 80036fa:	462a      	mov	r2, r5
 80036fc:	4631      	mov	r1, r6
 80036fe:	4630      	mov	r0, r6
 8003700:	47d8      	blx	fp
    /* X = X - Y */
    sp_256_mont_sub_8(x, x, y, p256_mod);
 8003702:	4623      	mov	r3, r4
 8003704:	462a      	mov	r2, r5
 8003706:	4631      	mov	r1, r6
 8003708:	4630      	mov	r0, r6
 800370a:	47d8      	blx	fp
    /* Y = Y - X */
    sp_256_mont_sub_8(y, y, x, p256_mod);
 800370c:	4623      	mov	r3, r4
 800370e:	4632      	mov	r2, r6
 8003710:	4629      	mov	r1, r5
 8003712:	4628      	mov	r0, r5
 8003714:	47d8      	blx	fp
    /* Y = Y * T1 */
    sp_256_mont_mul_8(y, y, t1, p256_mod, p256_mp_mod);
 8003716:	f8cd a000 	str.w	sl, [sp]
 800371a:	4623      	mov	r3, r4
 800371c:	4642      	mov	r2, r8
 800371e:	4629      	mov	r1, r5
 8003720:	4628      	mov	r0, r5
 8003722:	4f07      	ldr	r7, [pc, #28]	; (8003740 <sp_256_proj_point_dbl_8+0x128>)
 8003724:	47b8      	blx	r7
    /* Y = Y - T2 */
    sp_256_mont_sub_8(y, y, t2, p256_mod);
 8003726:	4623      	mov	r3, r4
 8003728:	464a      	mov	r2, r9
 800372a:	4629      	mov	r1, r5
 800372c:	4628      	mov	r0, r5
 800372e:	47d8      	blx	fp
}
 8003730:	b005      	add	sp, #20
 8003732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003736:	bf00      	nop
 8003738:	08005474 	.word	0x08005474
 800373c:	080029d5 	.word	0x080029d5
 8003740:	08002229 	.word	0x08002229
 8003744:	08003305 	.word	0x08003305
 8003748:	08003245 	.word	0x08003245
 800374c:	08003385 	.word	0x08003385
 8003750:	08003537 	.word	0x08003537
 8003754:	0800347b 	.word	0x0800347b

08003758 <sp_256_cmp_equal_8>:
 * a  First number to compare.
 * b  Second number to compare.
 * returns 1 when equal and 0 otherwise.
 */
static int sp_256_cmp_equal_8(const sp_digit* a, const sp_digit* b)
{
 8003758:	b410      	push	{r4}
    return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2]) | (a[3] ^ b[3]) |
 800375a:	6803      	ldr	r3, [r0, #0]
 800375c:	680a      	ldr	r2, [r1, #0]
 800375e:	4053      	eors	r3, r2
 8003760:	6842      	ldr	r2, [r0, #4]
 8003762:	684c      	ldr	r4, [r1, #4]
 8003764:	4062      	eors	r2, r4
 8003766:	4313      	orrs	r3, r2
 8003768:	6882      	ldr	r2, [r0, #8]
 800376a:	688c      	ldr	r4, [r1, #8]
 800376c:	4062      	eors	r2, r4
 800376e:	4313      	orrs	r3, r2
 8003770:	68c2      	ldr	r2, [r0, #12]
 8003772:	68cc      	ldr	r4, [r1, #12]
 8003774:	4062      	eors	r2, r4
 8003776:	4313      	orrs	r3, r2
            (a[4] ^ b[4]) | (a[5] ^ b[5]) | (a[6] ^ b[6]) | (a[7] ^ b[7])) == 0;
 8003778:	6902      	ldr	r2, [r0, #16]
 800377a:	690c      	ldr	r4, [r1, #16]
 800377c:	4062      	eors	r2, r4
    return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2]) | (a[3] ^ b[3]) |
 800377e:	4313      	orrs	r3, r2
            (a[4] ^ b[4]) | (a[5] ^ b[5]) | (a[6] ^ b[6]) | (a[7] ^ b[7])) == 0;
 8003780:	6942      	ldr	r2, [r0, #20]
 8003782:	694c      	ldr	r4, [r1, #20]
 8003784:	4062      	eors	r2, r4
 8003786:	4313      	orrs	r3, r2
 8003788:	6982      	ldr	r2, [r0, #24]
 800378a:	698c      	ldr	r4, [r1, #24]
 800378c:	4062      	eors	r2, r4
 800378e:	4313      	orrs	r3, r2
 8003790:	69c2      	ldr	r2, [r0, #28]
 8003792:	69c9      	ldr	r1, [r1, #28]
 8003794:	404a      	eors	r2, r1
 8003796:	4313      	orrs	r3, r2
}
 8003798:	bf0c      	ite	eq
 800379a:	2001      	moveq	r0, #1
 800379c:	2000      	movne	r0, #0
 800379e:	bc10      	pop	{r4}
 80037a0:	4770      	bx	lr

080037a2 <sp_256_get_point_16_8>:
 * table  Table - start of the entires to access
 * idx    Index of entry to retrieve.
 */
static void sp_256_get_point_16_8(sp_point_256* r, const sp_point_256* table,
    int idx)
{
 80037a2:	b4f0      	push	{r4, r5, r6, r7}
    int i;
    sp_digit mask;

    r->x[0] = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	6003      	str	r3, [r0, #0]
    r->x[1] = 0;
 80037a8:	6043      	str	r3, [r0, #4]
    r->x[2] = 0;
 80037aa:	6083      	str	r3, [r0, #8]
    r->x[3] = 0;
 80037ac:	60c3      	str	r3, [r0, #12]
    r->x[4] = 0;
 80037ae:	6103      	str	r3, [r0, #16]
    r->x[5] = 0;
 80037b0:	6143      	str	r3, [r0, #20]
    r->x[6] = 0;
 80037b2:	6183      	str	r3, [r0, #24]
    r->x[7] = 0;
 80037b4:	61c3      	str	r3, [r0, #28]
    r->y[0] = 0;
 80037b6:	6403      	str	r3, [r0, #64]	; 0x40
    r->y[1] = 0;
 80037b8:	6443      	str	r3, [r0, #68]	; 0x44
    r->y[2] = 0;
 80037ba:	6483      	str	r3, [r0, #72]	; 0x48
    r->y[3] = 0;
 80037bc:	64c3      	str	r3, [r0, #76]	; 0x4c
    r->y[4] = 0;
 80037be:	6503      	str	r3, [r0, #80]	; 0x50
    r->y[5] = 0;
 80037c0:	6543      	str	r3, [r0, #84]	; 0x54
    r->y[6] = 0;
 80037c2:	6583      	str	r3, [r0, #88]	; 0x58
    r->y[7] = 0;
 80037c4:	65c3      	str	r3, [r0, #92]	; 0x5c
    r->z[0] = 0;
 80037c6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    r->z[1] = 0;
 80037ca:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    r->z[2] = 0;
 80037ce:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    r->z[3] = 0;
 80037d2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    r->z[4] = 0;
 80037d6:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    r->z[5] = 0;
 80037da:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    r->z[6] = 0;
 80037de:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    r->z[7] = 0;
 80037e2:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    for (i = 1; i < 16; i++) {
 80037e6:	2501      	movs	r5, #1
 80037e8:	e0af      	b.n	800394a <sp_256_get_point_16_8+0x1a8>
        mask = 0 - (i == idx);
 80037ea:	4295      	cmp	r5, r2
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037f0:	bf18      	it	ne
 80037f2:	2300      	movne	r3, #0
        r->x[0] |= mask & table[i].x[0];
 80037f4:	26c4      	movs	r6, #196	; 0xc4
 80037f6:	fb06 f605 	mul.w	r6, r6, r5
 80037fa:	198c      	adds	r4, r1, r6
 80037fc:	598f      	ldr	r7, [r1, r6]
 80037fe:	401f      	ands	r7, r3
 8003800:	6806      	ldr	r6, [r0, #0]
 8003802:	433e      	orrs	r6, r7
 8003804:	6006      	str	r6, [r0, #0]
        r->x[1] |= mask & table[i].x[1];
 8003806:	6866      	ldr	r6, [r4, #4]
 8003808:	ea06 0703 	and.w	r7, r6, r3
 800380c:	6846      	ldr	r6, [r0, #4]
 800380e:	433e      	orrs	r6, r7
 8003810:	6046      	str	r6, [r0, #4]
        r->x[2] |= mask & table[i].x[2];
 8003812:	68a6      	ldr	r6, [r4, #8]
 8003814:	ea06 0703 	and.w	r7, r6, r3
 8003818:	6886      	ldr	r6, [r0, #8]
 800381a:	433e      	orrs	r6, r7
 800381c:	6086      	str	r6, [r0, #8]
        r->x[3] |= mask & table[i].x[3];
 800381e:	68e6      	ldr	r6, [r4, #12]
 8003820:	ea06 0703 	and.w	r7, r6, r3
 8003824:	68c6      	ldr	r6, [r0, #12]
 8003826:	433e      	orrs	r6, r7
 8003828:	60c6      	str	r6, [r0, #12]
        r->x[4] |= mask & table[i].x[4];
 800382a:	6926      	ldr	r6, [r4, #16]
 800382c:	ea06 0703 	and.w	r7, r6, r3
 8003830:	6906      	ldr	r6, [r0, #16]
 8003832:	433e      	orrs	r6, r7
 8003834:	6106      	str	r6, [r0, #16]
        r->x[5] |= mask & table[i].x[5];
 8003836:	6966      	ldr	r6, [r4, #20]
 8003838:	ea06 0703 	and.w	r7, r6, r3
 800383c:	6946      	ldr	r6, [r0, #20]
 800383e:	433e      	orrs	r6, r7
 8003840:	6146      	str	r6, [r0, #20]
        r->x[6] |= mask & table[i].x[6];
 8003842:	69a6      	ldr	r6, [r4, #24]
 8003844:	ea06 0703 	and.w	r7, r6, r3
 8003848:	6986      	ldr	r6, [r0, #24]
 800384a:	433e      	orrs	r6, r7
 800384c:	6186      	str	r6, [r0, #24]
        r->x[7] |= mask & table[i].x[7];
 800384e:	69e6      	ldr	r6, [r4, #28]
 8003850:	ea06 0703 	and.w	r7, r6, r3
 8003854:	69c6      	ldr	r6, [r0, #28]
 8003856:	433e      	orrs	r6, r7
 8003858:	61c6      	str	r6, [r0, #28]
        r->y[0] |= mask & table[i].y[0];
 800385a:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800385c:	ea06 0703 	and.w	r7, r6, r3
 8003860:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8003862:	433e      	orrs	r6, r7
 8003864:	6406      	str	r6, [r0, #64]	; 0x40
        r->y[1] |= mask & table[i].y[1];
 8003866:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8003868:	ea06 0703 	and.w	r7, r6, r3
 800386c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 800386e:	433e      	orrs	r6, r7
 8003870:	6446      	str	r6, [r0, #68]	; 0x44
        r->y[2] |= mask & table[i].y[2];
 8003872:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8003874:	ea06 0703 	and.w	r7, r6, r3
 8003878:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800387a:	433e      	orrs	r6, r7
 800387c:	6486      	str	r6, [r0, #72]	; 0x48
        r->y[3] |= mask & table[i].y[3];
 800387e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8003880:	ea06 0703 	and.w	r7, r6, r3
 8003884:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8003886:	433e      	orrs	r6, r7
 8003888:	64c6      	str	r6, [r0, #76]	; 0x4c
        r->y[4] |= mask & table[i].y[4];
 800388a:	6d26      	ldr	r6, [r4, #80]	; 0x50
 800388c:	ea06 0703 	and.w	r7, r6, r3
 8003890:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8003892:	433e      	orrs	r6, r7
 8003894:	6506      	str	r6, [r0, #80]	; 0x50
        r->y[5] |= mask & table[i].y[5];
 8003896:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8003898:	ea06 0703 	and.w	r7, r6, r3
 800389c:	6d46      	ldr	r6, [r0, #84]	; 0x54
 800389e:	433e      	orrs	r6, r7
 80038a0:	6546      	str	r6, [r0, #84]	; 0x54
        r->y[6] |= mask & table[i].y[6];
 80038a2:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80038a4:	ea06 0703 	and.w	r7, r6, r3
 80038a8:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80038aa:	433e      	orrs	r6, r7
 80038ac:	6586      	str	r6, [r0, #88]	; 0x58
        r->y[7] |= mask & table[i].y[7];
 80038ae:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 80038b0:	ea06 0703 	and.w	r7, r6, r3
 80038b4:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 80038b6:	433e      	orrs	r6, r7
 80038b8:	65c6      	str	r6, [r0, #92]	; 0x5c
        r->z[0] |= mask & table[i].z[0];
 80038ba:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80038be:	ea06 0703 	and.w	r7, r6, r3
 80038c2:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 80038c6:	433e      	orrs	r6, r7
 80038c8:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
        r->z[1] |= mask & table[i].z[1];
 80038cc:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 80038d0:	ea06 0703 	and.w	r7, r6, r3
 80038d4:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 80038d8:	433e      	orrs	r6, r7
 80038da:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
        r->z[2] |= mask & table[i].z[2];
 80038de:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80038e2:	ea06 0703 	and.w	r7, r6, r3
 80038e6:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
 80038ea:	433e      	orrs	r6, r7
 80038ec:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
        r->z[3] |= mask & table[i].z[3];
 80038f0:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 80038f4:	ea06 0703 	and.w	r7, r6, r3
 80038f8:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
 80038fc:	433e      	orrs	r6, r7
 80038fe:	f8c0 608c 	str.w	r6, [r0, #140]	; 0x8c
        r->z[4] |= mask & table[i].z[4];
 8003902:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 8003906:	ea06 0703 	and.w	r7, r6, r3
 800390a:	f8d0 6090 	ldr.w	r6, [r0, #144]	; 0x90
 800390e:	433e      	orrs	r6, r7
 8003910:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
        r->z[5] |= mask & table[i].z[5];
 8003914:	f8d4 6094 	ldr.w	r6, [r4, #148]	; 0x94
 8003918:	ea06 0703 	and.w	r7, r6, r3
 800391c:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
 8003920:	433e      	orrs	r6, r7
 8003922:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
        r->z[6] |= mask & table[i].z[6];
 8003926:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 800392a:	ea06 0703 	and.w	r7, r6, r3
 800392e:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
 8003932:	433e      	orrs	r6, r7
 8003934:	f8c0 6098 	str.w	r6, [r0, #152]	; 0x98
        r->z[7] |= mask & table[i].z[7];
 8003938:	f8d4 409c 	ldr.w	r4, [r4, #156]	; 0x9c
 800393c:	4023      	ands	r3, r4
 800393e:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 8003942:	431c      	orrs	r4, r3
 8003944:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    for (i = 1; i < 16; i++) {
 8003948:	3501      	adds	r5, #1
 800394a:	2d0f      	cmp	r5, #15
 800394c:	f77f af4d 	ble.w	80037ea <sp_256_get_point_16_8+0x48>
    }
}
 8003950:	bcf0      	pop	{r4, r5, r6, r7}
 8003952:	4770      	bx	lr

08003954 <sp_256_get_entry_16_8>:
 * table  Table - start of the entires to access
 * idx    Index of entry to retrieve.
 */
static void sp_256_get_entry_16_8(sp_point_256* r,
    const sp_table_entry_256* table, int idx)
{
 8003954:	b4f0      	push	{r4, r5, r6, r7}
    int i;
    sp_digit mask;

    r->x[0] = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	6003      	str	r3, [r0, #0]
    r->x[1] = 0;
 800395a:	6043      	str	r3, [r0, #4]
    r->x[2] = 0;
 800395c:	6083      	str	r3, [r0, #8]
    r->x[3] = 0;
 800395e:	60c3      	str	r3, [r0, #12]
    r->x[4] = 0;
 8003960:	6103      	str	r3, [r0, #16]
    r->x[5] = 0;
 8003962:	6143      	str	r3, [r0, #20]
    r->x[6] = 0;
 8003964:	6183      	str	r3, [r0, #24]
    r->x[7] = 0;
 8003966:	61c3      	str	r3, [r0, #28]
    r->y[0] = 0;
 8003968:	6403      	str	r3, [r0, #64]	; 0x40
    r->y[1] = 0;
 800396a:	6443      	str	r3, [r0, #68]	; 0x44
    r->y[2] = 0;
 800396c:	6483      	str	r3, [r0, #72]	; 0x48
    r->y[3] = 0;
 800396e:	64c3      	str	r3, [r0, #76]	; 0x4c
    r->y[4] = 0;
 8003970:	6503      	str	r3, [r0, #80]	; 0x50
    r->y[5] = 0;
 8003972:	6543      	str	r3, [r0, #84]	; 0x54
    r->y[6] = 0;
 8003974:	6583      	str	r3, [r0, #88]	; 0x58
    r->y[7] = 0;
 8003976:	65c3      	str	r3, [r0, #92]	; 0x5c
    for (i = 1; i < 16; i++) {
 8003978:	2501      	movs	r5, #1
 800397a:	e066      	b.n	8003a4a <sp_256_get_entry_16_8+0xf6>
        mask = 0 - (i == idx);
 800397c:	4295      	cmp	r5, r2
 800397e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003982:	bf18      	it	ne
 8003984:	2300      	movne	r3, #0
        r->x[0] |= mask & table[i].x[0];
 8003986:	01ae      	lsls	r6, r5, #6
 8003988:	eb01 1485 	add.w	r4, r1, r5, lsl #6
 800398c:	598f      	ldr	r7, [r1, r6]
 800398e:	401f      	ands	r7, r3
 8003990:	6806      	ldr	r6, [r0, #0]
 8003992:	433e      	orrs	r6, r7
 8003994:	6006      	str	r6, [r0, #0]
        r->x[1] |= mask & table[i].x[1];
 8003996:	6866      	ldr	r6, [r4, #4]
 8003998:	ea06 0703 	and.w	r7, r6, r3
 800399c:	6846      	ldr	r6, [r0, #4]
 800399e:	433e      	orrs	r6, r7
 80039a0:	6046      	str	r6, [r0, #4]
        r->x[2] |= mask & table[i].x[2];
 80039a2:	68a6      	ldr	r6, [r4, #8]
 80039a4:	ea06 0703 	and.w	r7, r6, r3
 80039a8:	6886      	ldr	r6, [r0, #8]
 80039aa:	433e      	orrs	r6, r7
 80039ac:	6086      	str	r6, [r0, #8]
        r->x[3] |= mask & table[i].x[3];
 80039ae:	68e6      	ldr	r6, [r4, #12]
 80039b0:	ea06 0703 	and.w	r7, r6, r3
 80039b4:	68c6      	ldr	r6, [r0, #12]
 80039b6:	433e      	orrs	r6, r7
 80039b8:	60c6      	str	r6, [r0, #12]
        r->x[4] |= mask & table[i].x[4];
 80039ba:	6926      	ldr	r6, [r4, #16]
 80039bc:	ea06 0703 	and.w	r7, r6, r3
 80039c0:	6906      	ldr	r6, [r0, #16]
 80039c2:	433e      	orrs	r6, r7
 80039c4:	6106      	str	r6, [r0, #16]
        r->x[5] |= mask & table[i].x[5];
 80039c6:	6966      	ldr	r6, [r4, #20]
 80039c8:	ea06 0703 	and.w	r7, r6, r3
 80039cc:	6946      	ldr	r6, [r0, #20]
 80039ce:	433e      	orrs	r6, r7
 80039d0:	6146      	str	r6, [r0, #20]
        r->x[6] |= mask & table[i].x[6];
 80039d2:	69a6      	ldr	r6, [r4, #24]
 80039d4:	ea06 0703 	and.w	r7, r6, r3
 80039d8:	6986      	ldr	r6, [r0, #24]
 80039da:	433e      	orrs	r6, r7
 80039dc:	6186      	str	r6, [r0, #24]
        r->x[7] |= mask & table[i].x[7];
 80039de:	69e6      	ldr	r6, [r4, #28]
 80039e0:	ea06 0703 	and.w	r7, r6, r3
 80039e4:	69c6      	ldr	r6, [r0, #28]
 80039e6:	433e      	orrs	r6, r7
 80039e8:	61c6      	str	r6, [r0, #28]
        r->y[0] |= mask & table[i].y[0];
 80039ea:	6a26      	ldr	r6, [r4, #32]
 80039ec:	ea06 0703 	and.w	r7, r6, r3
 80039f0:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80039f2:	433e      	orrs	r6, r7
 80039f4:	6406      	str	r6, [r0, #64]	; 0x40
        r->y[1] |= mask & table[i].y[1];
 80039f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80039f8:	ea06 0703 	and.w	r7, r6, r3
 80039fc:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80039fe:	433e      	orrs	r6, r7
 8003a00:	6446      	str	r6, [r0, #68]	; 0x44
        r->y[2] |= mask & table[i].y[2];
 8003a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a04:	ea06 0703 	and.w	r7, r6, r3
 8003a08:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8003a0a:	433e      	orrs	r6, r7
 8003a0c:	6486      	str	r6, [r0, #72]	; 0x48
        r->y[3] |= mask & table[i].y[3];
 8003a0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a10:	ea06 0703 	and.w	r7, r6, r3
 8003a14:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8003a16:	433e      	orrs	r6, r7
 8003a18:	64c6      	str	r6, [r0, #76]	; 0x4c
        r->y[4] |= mask & table[i].y[4];
 8003a1a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003a1c:	ea06 0703 	and.w	r7, r6, r3
 8003a20:	6d06      	ldr	r6, [r0, #80]	; 0x50
 8003a22:	433e      	orrs	r6, r7
 8003a24:	6506      	str	r6, [r0, #80]	; 0x50
        r->y[5] |= mask & table[i].y[5];
 8003a26:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8003a28:	ea06 0703 	and.w	r7, r6, r3
 8003a2c:	6d46      	ldr	r6, [r0, #84]	; 0x54
 8003a2e:	433e      	orrs	r6, r7
 8003a30:	6546      	str	r6, [r0, #84]	; 0x54
        r->y[6] |= mask & table[i].y[6];
 8003a32:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003a34:	ea06 0703 	and.w	r7, r6, r3
 8003a38:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8003a3a:	433e      	orrs	r6, r7
 8003a3c:	6586      	str	r6, [r0, #88]	; 0x58
        r->y[7] |= mask & table[i].y[7];
 8003a3e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8003a40:	4023      	ands	r3, r4
 8003a42:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8003a44:	431c      	orrs	r4, r3
 8003a46:	65c4      	str	r4, [r0, #92]	; 0x5c
    for (i = 1; i < 16; i++) {
 8003a48:	3501      	adds	r5, #1
 8003a4a:	2d0f      	cmp	r5, #15
 8003a4c:	dd96      	ble.n	800397c <sp_256_get_entry_16_8+0x28>
    }
}
 8003a4e:	bcf0      	pop	{r4, r5, r6, r7}
 8003a50:	4770      	bx	lr

08003a52 <sp_256_iszero_8>:
 * a  Number to check.
 * returns 1 if the number is zero and 0 otherwise.
 */
static int sp_256_iszero_8(const sp_digit* a)
{
    return (a[0] | a[1] | a[2] | a[3] | a[4] | a[5] | a[6] | a[7]) == 0;
 8003a52:	6803      	ldr	r3, [r0, #0]
 8003a54:	6842      	ldr	r2, [r0, #4]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	6882      	ldr	r2, [r0, #8]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	68c2      	ldr	r2, [r0, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	6902      	ldr	r2, [r0, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	6942      	ldr	r2, [r0, #20]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	6982      	ldr	r2, [r0, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	69c2      	ldr	r2, [r0, #28]
 8003a6e:	4313      	orrs	r3, r2
}
 8003a70:	bf0c      	ite	eq
 8003a72:	2001      	moveq	r0, #1
 8003a74:	2000      	movne	r0, #0
 8003a76:	4770      	bx	lr

08003a78 <sp_256_from_bin>:
 * size  Maximum number of bytes to convert
 * a  Byte array.
 * n  Number of bytes in array to read.
 */
static void sp_256_from_bin(sp_digit* r, int size, const byte* a, int n)
{
 8003a78:	b4f0      	push	{r4, r5, r6, r7}
    int i;
    int j = 0;
    word32 s = 0;

    r[0] = 0;
 8003a7a:	2400      	movs	r4, #0
 8003a7c:	6004      	str	r4, [r0, #0]
    for (i = n-1; i >= 0; i--) {
 8003a7e:	3b01      	subs	r3, #1
    word32 s = 0;
 8003a80:	4625      	mov	r5, r4
    for (i = n-1; i >= 0; i--) {
 8003a82:	e001      	b.n	8003a88 <sp_256_from_bin+0x10>
            }
            r[++j] = (sp_digit)a[i] >> s;
            s = 8U - s;
        }
        else {
            s += 8U;
 8003a84:	3508      	adds	r5, #8
    for (i = n-1; i >= 0; i--) {
 8003a86:	3b01      	subs	r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	db18      	blt.n	8003abe <sp_256_from_bin+0x46>
        r[j] |= (((sp_digit)a[i]) << s);
 8003a8c:	eb02 0c03 	add.w	ip, r2, r3
 8003a90:	5cd6      	ldrb	r6, [r2, r3]
 8003a92:	fa06 f705 	lsl.w	r7, r6, r5
 8003a96:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8003a9a:	433e      	orrs	r6, r7
 8003a9c:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        if (s >= 24U) {
 8003aa0:	2d17      	cmp	r5, #23
 8003aa2:	d9ef      	bls.n	8003a84 <sp_256_from_bin+0xc>
            s = 32U - s;
 8003aa4:	f1c5 0720 	rsb	r7, r5, #32
            if (j + 1 >= size) {
 8003aa8:	1c66      	adds	r6, r4, #1
 8003aaa:	428e      	cmp	r6, r1
 8003aac:	da07      	bge.n	8003abe <sp_256_from_bin+0x46>
            r[++j] = (sp_digit)a[i] >> s;
 8003aae:	f89c 4000 	ldrb.w	r4, [ip]
 8003ab2:	40fc      	lsrs	r4, r7
 8003ab4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
            s = 8U - s;
 8003ab8:	3d18      	subs	r5, #24
            r[++j] = (sp_digit)a[i] >> s;
 8003aba:	4634      	mov	r4, r6
 8003abc:	e7e3      	b.n	8003a86 <sp_256_from_bin+0xe>
        }
    }

    for (j++; j < size; j++) {
 8003abe:	3401      	adds	r4, #1
 8003ac0:	428c      	cmp	r4, r1
 8003ac2:	da04      	bge.n	8003ace <sp_256_from_bin+0x56>
        r[j] = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
    for (j++; j < size; j++) {
 8003aca:	3401      	adds	r4, #1
 8003acc:	e7f8      	b.n	8003ac0 <sp_256_from_bin+0x48>
    }
}
 8003ace:	bcf0      	pop	{r4, r5, r6, r7}
 8003ad0:	4770      	bx	lr

08003ad2 <sp_256_sub_in_place_8>:
 * a  A single precision integer.
 * b  A single precision integer.
 */
SP_NOINLINE static sp_digit sp_256_sub_in_place_8(sp_digit* a,
        const sp_digit* b)
{
 8003ad2:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
 8003ad6:	4602      	mov	r2, r0
    sp_digit c = 0;
    __asm__ __volatile__ (
 8003ad8:	2000      	movs	r0, #0
 8003ada:	4690      	mov	r8, r2
 8003adc:	f108 0820 	add.w	r8, r8, #32
 8003ae0:	f04f 0500 	mov.w	r5, #0
 8003ae4:	1a2d      	subs	r5, r5, r0
 8003ae6:	6813      	ldr	r3, [r2, #0]
 8003ae8:	6854      	ldr	r4, [r2, #4]
 8003aea:	680d      	ldr	r5, [r1, #0]
 8003aec:	684e      	ldr	r6, [r1, #4]
 8003aee:	41ab      	sbcs	r3, r5
 8003af0:	41b4      	sbcs	r4, r6
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	6054      	str	r4, [r2, #4]
 8003af6:	eb60 0000 	sbc.w	r0, r0, r0
 8003afa:	f102 0208 	add.w	r2, r2, #8
 8003afe:	f101 0108 	add.w	r1, r1, #8
 8003b02:	4542      	cmp	r2, r8
 8003b04:	d1ec      	bne.n	8003ae0 <sp_256_sub_in_place_8+0xe>
        :
        : "memory", "r3", "r4", "r5", "r6", "r8"
    );

    return c;
}
 8003b06:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8003b0a:	4770      	bx	lr

08003b0c <sp_256_mul_d_8>:
 * a  A single precision integer.
 * b  A single precision digit.
 */
SP_NOINLINE static void sp_256_mul_d_8(sp_digit* r, const sp_digit* a,
        sp_digit b)
{
 8003b0c:	e92d 0370 	stmdb	sp!, {r4, r5, r6, r8, r9}
    __asm__ __volatile__ (
 8003b10:	f101 0920 	add.w	r9, r1, #32
 8003b14:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b18:	fba6 5302 	umull	r5, r3, r6, r2
 8003b1c:	f04f 0400 	mov.w	r4, #0
 8003b20:	f840 5b04 	str.w	r5, [r0], #4
 8003b24:	f04f 0500 	mov.w	r5, #0
 8003b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b2c:	fba6 6802 	umull	r6, r8, r6, r2
 8003b30:	199b      	adds	r3, r3, r6
 8003b32:	eb54 0408 	adcs.w	r4, r4, r8
 8003b36:	f145 0500 	adc.w	r5, r5, #0
 8003b3a:	f840 3b04 	str.w	r3, [r0], #4
 8003b3e:	4623      	mov	r3, r4
 8003b40:	462c      	mov	r4, r5
 8003b42:	4549      	cmp	r1, r9
 8003b44:	dbee      	blt.n	8003b24 <sp_256_mul_d_8+0x18>
 8003b46:	6003      	str	r3, [r0, #0]
        "str	r3, [%[r]]\n\t"
        : [r] "+r" (r), [a] "+r" (a)
        : [b] "r" (b)
        : "memory", "r3", "r4", "r5", "r6", "r8", "r9"
    );
}
 8003b48:	e8bd 0370 	ldmia.w	sp!, {r4, r5, r6, r8, r9}
 8003b4c:	4770      	bx	lr

08003b4e <div_256_word_8>:
 *
 * Note that this is an approximate div. It may give an answer 1 larger.
 */
SP_NOINLINE static sp_digit div_256_word_8(sp_digit d1, sp_digit d0,
        sp_digit div)
{
 8003b4e:	e92d 0170 	stmdb	sp!, {r4, r5, r6, r8}
    sp_digit r = 0;

    __asm__ __volatile__ (
 8003b52:	2300      	movs	r3, #0
 8003b54:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8003b58:	f106 0601 	add.w	r6, r6, #1
 8003b5c:	fbb0 f4f6 	udiv	r4, r0, r6
 8003b60:	ea4f 4804 	mov.w	r8, r4, lsl #16
 8003b64:	fba2 4508 	umull	r4, r5, r2, r8
 8003b68:	1b09      	subs	r1, r1, r4
 8003b6a:	eb60 0005 	sbc.w	r0, r0, r5
 8003b6e:	fbb0 f5f6 	udiv	r5, r0, r6
 8003b72:	ea4f 4405 	mov.w	r4, r5, lsl #16
 8003b76:	44a0      	add	r8, r4
 8003b78:	fba2 4504 	umull	r4, r5, r2, r4
 8003b7c:	1b09      	subs	r1, r1, r4
 8003b7e:	eb60 0005 	sbc.w	r0, r0, r5
 8003b82:	ea4f 4400 	mov.w	r4, r0, lsl #16
 8003b86:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8003b8a:	fbb4 f4f6 	udiv	r4, r4, r6
 8003b8e:	44a0      	add	r8, r4
 8003b90:	fba2 4504 	umull	r4, r5, r2, r4
 8003b94:	1b09      	subs	r1, r1, r4
 8003b96:	eb60 0005 	sbc.w	r0, r0, r5
 8003b9a:	ea4f 4400 	mov.w	r4, r0, lsl #16
 8003b9e:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8003ba2:	fbb4 f4f6 	udiv	r4, r4, r6
 8003ba6:	44a0      	add	r8, r4
 8003ba8:	fba2 4504 	umull	r4, r5, r2, r4
 8003bac:	1b09      	subs	r1, r1, r4
 8003bae:	eb60 0005 	sbc.w	r0, r0, r5
 8003bb2:	fbb1 f4f2 	udiv	r4, r1, r2
 8003bb6:	44a0      	add	r8, r4
 8003bb8:	4643      	mov	r3, r8
        : [r] "+r" (r)
        : [d1] "r" (d1), [d0] "r" (d0), [div] "r" (div)
        : "r4", "r5", "r6", "r8"
    );
    return r;
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	e8bd 0170 	ldmia.w	sp!, {r4, r5, r6, r8}
 8003bc0:	4770      	bx	lr

08003bc2 <sp_256_mask_8>:
static void sp_256_mask_8(sp_digit* r, const sp_digit* a, sp_digit m)
{
#ifdef WOLFSSL_SP_SMALL
    int i;

    for (i=0; i<8; i++) {
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b07      	cmp	r3, #7
 8003bc6:	dc0a      	bgt.n	8003bde <sp_256_mask_8+0x1c>
{
 8003bc8:	b410      	push	{r4}
        r[i] = a[i] & m;
 8003bca:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003bce:	4014      	ands	r4, r2
 8003bd0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (i=0; i<8; i++) {
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	2b07      	cmp	r3, #7
 8003bd8:	ddf7      	ble.n	8003bca <sp_256_mask_8+0x8>
    r[4] = a[4] & m;
    r[5] = a[5] & m;
    r[6] = a[6] & m;
    r[7] = a[7] & m;
#endif
}
 8003bda:	bc10      	pop	{r4}
 8003bdc:	4770      	bx	lr
 8003bde:	4770      	bx	lr

08003be0 <sp_256_mont_mul_order_8>:
 * r  Result of the multiplication.
 * a  First operand of the multiplication.
 * b  Second operand of the multiplication.
 */
static void sp_256_mont_mul_order_8(sp_digit* r, const sp_digit* a, const sp_digit* b)
{
 8003be0:	b510      	push	{r4, lr}
 8003be2:	4604      	mov	r4, r0
    sp_256_mul_8(r, a, b);
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <sp_256_mont_mul_order_8+0x14>)
 8003be6:	4798      	blx	r3
    sp_256_mont_reduce_order_8(r, p256_order, p256_mp_order);
 8003be8:	4a03      	ldr	r2, [pc, #12]	; (8003bf8 <sp_256_mont_mul_order_8+0x18>)
 8003bea:	4904      	ldr	r1, [pc, #16]	; (8003bfc <sp_256_mont_mul_order_8+0x1c>)
 8003bec:	4620      	mov	r0, r4
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <sp_256_mont_mul_order_8+0x20>)
 8003bf0:	4798      	blx	r3
}
 8003bf2:	bd10      	pop	{r4, pc}
 8003bf4:	08001549 	.word	0x08001549
 8003bf8:	ee00bc4f 	.word	0xee00bc4f
 8003bfc:	080054f4 	.word	0x080054f4
 8003c00:	08003169 	.word	0x08003169

08003c04 <sp_256_mont_sqr_order_8>:
 *
 * r  Result of the squaring.
 * a  Number to square.
 */
static void sp_256_mont_sqr_order_8(sp_digit* r, const sp_digit* a)
{
 8003c04:	b510      	push	{r4, lr}
 8003c06:	4604      	mov	r4, r0
    sp_256_sqr_8(r, a);
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <sp_256_mont_sqr_order_8+0x14>)
 8003c0a:	4798      	blx	r3
    sp_256_mont_reduce_order_8(r, p256_order, p256_mp_order);
 8003c0c:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <sp_256_mont_sqr_order_8+0x18>)
 8003c0e:	4904      	ldr	r1, [pc, #16]	; (8003c20 <sp_256_mont_sqr_order_8+0x1c>)
 8003c10:	4620      	mov	r0, r4
 8003c12:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <sp_256_mont_sqr_order_8+0x20>)
 8003c14:	4798      	blx	r3
}
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	08001ac1 	.word	0x08001ac1
 8003c1c:	ee00bc4f 	.word	0xee00bc4f
 8003c20:	080054f4 	.word	0x080054f4
 8003c24:	08003169 	.word	0x08003169

08003c28 <sp_256_from_mp>:
{
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	4605      	mov	r5, r0
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	4616      	mov	r6, r2
    XMEMCPY(r, a->dp, sizeof(sp_digit) * a->used);
 8003c30:	4611      	mov	r1, r2
 8003c32:	f851 2b08 	ldr.w	r2, [r1], #8
 8003c36:	0092      	lsls	r2, r2, #2
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <sp_256_from_mp+0x28>)
 8003c3a:	4798      	blx	r3
    for (j = a->used; j < size; j++) {
 8003c3c:	6833      	ldr	r3, [r6, #0]
 8003c3e:	42a3      	cmp	r3, r4
 8003c40:	da04      	bge.n	8003c4c <sp_256_from_mp+0x24>
        r[j] = 0;
 8003c42:	2200      	movs	r2, #0
 8003c44:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (j = a->used; j < size; j++) {
 8003c48:	3301      	adds	r3, #1
 8003c4a:	e7f8      	b.n	8003c3e <sp_256_from_mp+0x16>
}
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	bf00      	nop
 8003c50:	080001a5 	.word	0x080001a5

08003c54 <sp_256_mont_inv_8>:
{
 8003c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	4680      	mov	r8, r0
 8003c5c:	460e      	mov	r6, r1
 8003c5e:	4615      	mov	r5, r2
    XMEMCPY(t, a, sizeof(sp_digit) * 8);
 8003c60:	2220      	movs	r2, #32
 8003c62:	4628      	mov	r0, r5
 8003c64:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <sp_256_mont_inv_8+0x78>)
 8003c66:	4798      	blx	r3
    for (i=254; i>=0; i--) {
 8003c68:	24fe      	movs	r4, #254	; 0xfe
 8003c6a:	e00f      	b.n	8003c8c <sp_256_mont_inv_8+0x38>
        if (p256_mod_minus_2[i / 32] & ((sp_digit)1 << (i % 32)))
 8003c6c:	115b      	asrs	r3, r3, #5
 8003c6e:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <sp_256_mont_inv_8+0x7c>)
 8003c70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c74:	4263      	negs	r3, r4
 8003c76:	f004 021f 	and.w	r2, r4, #31
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	bf58      	it	pl
 8003c80:	425a      	negpl	r2, r3
 8003c82:	2301      	movs	r3, #1
 8003c84:	4093      	lsls	r3, r2
 8003c86:	4219      	tst	r1, r3
 8003c88:	d10e      	bne.n	8003ca8 <sp_256_mont_inv_8+0x54>
    for (i=254; i>=0; i--) {
 8003c8a:	3c01      	subs	r4, #1
 8003c8c:	2c00      	cmp	r4, #0
 8003c8e:	db14      	blt.n	8003cba <sp_256_mont_inv_8+0x66>
        sp_256_mont_sqr_8(t, t, p256_mod, p256_mp_mod);
 8003c90:	2301      	movs	r3, #1
 8003c92:	4a10      	ldr	r2, [pc, #64]	; (8003cd4 <sp_256_mont_inv_8+0x80>)
 8003c94:	4629      	mov	r1, r5
 8003c96:	4628      	mov	r0, r5
 8003c98:	4f0f      	ldr	r7, [pc, #60]	; (8003cd8 <sp_256_mont_inv_8+0x84>)
 8003c9a:	47b8      	blx	r7
        if (p256_mod_minus_2[i / 32] & ((sp_digit)1 << (i % 32)))
 8003c9c:	4623      	mov	r3, r4
 8003c9e:	2c00      	cmp	r4, #0
 8003ca0:	dae4      	bge.n	8003c6c <sp_256_mont_inv_8+0x18>
 8003ca2:	f104 031f 	add.w	r3, r4, #31
 8003ca6:	e7e1      	b.n	8003c6c <sp_256_mont_inv_8+0x18>
            sp_256_mont_mul_8(t, t, a, p256_mod, p256_mp_mod);
 8003ca8:	2301      	movs	r3, #1
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <sp_256_mont_inv_8+0x80>)
 8003cae:	4632      	mov	r2, r6
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	4f09      	ldr	r7, [pc, #36]	; (8003cdc <sp_256_mont_inv_8+0x88>)
 8003cb6:	47b8      	blx	r7
 8003cb8:	e7e7      	b.n	8003c8a <sp_256_mont_inv_8+0x36>
    XMEMCPY(r, t, sizeof(sp_digit) * 8);
 8003cba:	2220      	movs	r2, #32
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	4640      	mov	r0, r8
 8003cc0:	4b02      	ldr	r3, [pc, #8]	; (8003ccc <sp_256_mont_inv_8+0x78>)
 8003cc2:	4798      	blx	r3
}
 8003cc4:	b002      	add	sp, #8
 8003cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cca:	bf00      	nop
 8003ccc:	080001a5 	.word	0x080001a5
 8003cd0:	08005494 	.word	0x08005494
 8003cd4:	08005474 	.word	0x08005474
 8003cd8:	080029d5 	.word	0x080029d5
 8003cdc:	08002229 	.word	0x08002229

08003ce0 <sp_256_mont_inv_order_8>:
}
#endif /* WOLFSSL_SP_NONBLOCK */

static void sp_256_mont_inv_order_8(sp_digit* r, const sp_digit* a,
        sp_digit* td)
{
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	4607      	mov	r7, r0
 8003ce4:	460e      	mov	r6, r1
 8003ce6:	4615      	mov	r5, r2
#ifdef WOLFSSL_SP_SMALL
    sp_digit* t = td;
    int i;

    XMEMCPY(t, a, sizeof(sp_digit) * 8);
 8003ce8:	2220      	movs	r2, #32
 8003cea:	4628      	mov	r0, r5
 8003cec:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <sp_256_mont_inv_order_8+0x64>)
 8003cee:	4798      	blx	r3
    for (i=254; i>=0; i--) {
 8003cf0:	24fe      	movs	r4, #254	; 0xfe
 8003cf2:	e00f      	b.n	8003d14 <sp_256_mont_inv_order_8+0x34>
        sp_256_mont_sqr_order_8(t, t);
        if ((p256_order_minus_2[i / 32] & ((sp_int_digit)1 << (i % 32))) != 0) {
 8003cf4:	115b      	asrs	r3, r3, #5
 8003cf6:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <sp_256_mont_inv_order_8+0x68>)
 8003cf8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003cfc:	4263      	negs	r3, r4
 8003cfe:	f004 021f 	and.w	r2, r4, #31
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	bf58      	it	pl
 8003d08:	425a      	negpl	r2, r3
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	4093      	lsls	r3, r2
 8003d0e:	4219      	tst	r1, r3
 8003d10:	d10c      	bne.n	8003d2c <sp_256_mont_inv_order_8+0x4c>
    for (i=254; i>=0; i--) {
 8003d12:	3c01      	subs	r4, #1
 8003d14:	2c00      	cmp	r4, #0
 8003d16:	db0f      	blt.n	8003d38 <sp_256_mont_inv_order_8+0x58>
        sp_256_mont_sqr_order_8(t, t);
 8003d18:	4629      	mov	r1, r5
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <sp_256_mont_inv_order_8+0x6c>)
 8003d1e:	4798      	blx	r3
        if ((p256_order_minus_2[i / 32] & ((sp_int_digit)1 << (i % 32))) != 0) {
 8003d20:	4623      	mov	r3, r4
 8003d22:	2c00      	cmp	r4, #0
 8003d24:	dae6      	bge.n	8003cf4 <sp_256_mont_inv_order_8+0x14>
 8003d26:	f104 031f 	add.w	r3, r4, #31
 8003d2a:	e7e3      	b.n	8003cf4 <sp_256_mont_inv_order_8+0x14>
            sp_256_mont_mul_order_8(t, t, a);
 8003d2c:	4632      	mov	r2, r6
 8003d2e:	4629      	mov	r1, r5
 8003d30:	4628      	mov	r0, r5
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <sp_256_mont_inv_order_8+0x70>)
 8003d34:	4798      	blx	r3
 8003d36:	e7ec      	b.n	8003d12 <sp_256_mont_inv_order_8+0x32>
        }
    }
    XMEMCPY(r, t, sizeof(sp_digit) * 8U);
 8003d38:	2220      	movs	r2, #32
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	4b01      	ldr	r3, [pc, #4]	; (8003d44 <sp_256_mont_inv_order_8+0x64>)
 8003d40:	4798      	blx	r3
    /* t2= a^ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632540 */
    sp_256_mont_sqr_n_order_8(t2, t2, 4);
    /* r = a^ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f */
    sp_256_mont_mul_order_8(r, t2, t3);
#endif /* WOLFSSL_SP_SMALL */
}
 8003d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d44:	080001a5 	.word	0x080001a5
 8003d48:	08005514 	.word	0x08005514
 8003d4c:	08003c05 	.word	0x08003c05
 8003d50:	08003be1 	.word	0x08003be1

08003d54 <sp_256_proj_point_add_8>:
{
 8003d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d58:	b08f      	sub	sp, #60	; 0x3c
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	460d      	mov	r5, r1
 8003d5e:	4690      	mov	r8, r2
 8003d60:	461f      	mov	r7, r3
    sp_digit* t2 = t + 2*8;
 8003d62:	3340      	adds	r3, #64	; 0x40
 8003d64:	9306      	str	r3, [sp, #24]
    sp_digit* t3 = t + 4*8;
 8003d66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d6a:	9304      	str	r3, [sp, #16]
    sp_digit* t4 = t + 6*8;
 8003d6c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003d70:	9303      	str	r3, [sp, #12]
    sp_digit* t5 = t + 8*8;
 8003d72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003d76:	9307      	str	r3, [sp, #28]
    if (q == r) {
 8003d78:	4282      	cmp	r2, r0
 8003d7a:	d02c      	beq.n	8003dd6 <sp_256_proj_point_add_8+0x82>
    (void)sp_256_sub_8(t1, p256_mod, q->y);
 8003d7c:	f108 0340 	add.w	r3, r8, #64	; 0x40
 8003d80:	461c      	mov	r4, r3
 8003d82:	9308      	str	r3, [sp, #32]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4992      	ldr	r1, [pc, #584]	; (8003fd0 <sp_256_proj_point_add_8+0x27c>)
 8003d88:	4638      	mov	r0, r7
 8003d8a:	4b92      	ldr	r3, [pc, #584]	; (8003fd4 <sp_256_proj_point_add_8+0x280>)
 8003d8c:	4798      	blx	r3
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 8003d8e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8003d92:	4641      	mov	r1, r8
 8003d94:	4628      	mov	r0, r5
 8003d96:	f8df a250 	ldr.w	sl, [pc, #592]	; 8003fe8 <sp_256_proj_point_add_8+0x294>
 8003d9a:	47d0      	blx	sl
 8003d9c:	4681      	mov	r9, r0
 8003d9e:	f108 0380 	add.w	r3, r8, #128	; 0x80
 8003da2:	9305      	str	r3, [sp, #20]
 8003da4:	4619      	mov	r1, r3
 8003da6:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8003daa:	47d0      	blx	sl
 8003dac:	ea09 0900 	and.w	r9, r9, r0
        (sp_256_cmp_equal_8(p->y, q->y) | sp_256_cmp_equal_8(p->y, t1))) != 0) {
 8003db0:	f105 0b40 	add.w	fp, r5, #64	; 0x40
 8003db4:	4621      	mov	r1, r4
 8003db6:	4658      	mov	r0, fp
 8003db8:	47d0      	blx	sl
 8003dba:	4604      	mov	r4, r0
 8003dbc:	4639      	mov	r1, r7
 8003dbe:	4658      	mov	r0, fp
 8003dc0:	47d0      	blx	sl
 8003dc2:	4304      	orrs	r4, r0
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 8003dc4:	ea19 0904 	ands.w	r9, r9, r4
 8003dc8:	d008      	beq.n	8003ddc <sp_256_proj_point_add_8+0x88>
        sp_256_proj_point_dbl_8(r, p, t);
 8003dca:	463a      	mov	r2, r7
 8003dcc:	4629      	mov	r1, r5
 8003dce:	4630      	mov	r0, r6
 8003dd0:	4b81      	ldr	r3, [pc, #516]	; (8003fd8 <sp_256_proj_point_add_8+0x284>)
 8003dd2:	4798      	blx	r3
 8003dd4:	e0f9      	b.n	8003fca <sp_256_proj_point_add_8+0x276>
        p = q;
 8003dd6:	4615      	mov	r5, r2
        q = a;
 8003dd8:	4688      	mov	r8, r1
 8003dda:	e7cf      	b.n	8003d7c <sp_256_proj_point_add_8+0x28>
        rp[0] = r;
 8003ddc:	960a      	str	r6, [sp, #40]	; 0x28
        rp[1] = (sp_point_256*)t; /*lint !e9087 !e740*/
 8003dde:	970b      	str	r7, [sp, #44]	; 0x2c
        XMEMSET(rp[1], 0, sizeof(sp_point_256));
 8003de0:	22c4      	movs	r2, #196	; 0xc4
 8003de2:	2100      	movs	r1, #0
 8003de4:	4638      	mov	r0, r7
 8003de6:	4b7d      	ldr	r3, [pc, #500]	; (8003fdc <sp_256_proj_point_add_8+0x288>)
 8003de8:	4798      	blx	r3
        x = rp[p->infinity | q->infinity]->x;
 8003dea:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8003dee:	f8d8 20c0 	ldr.w	r2, [r8, #192]	; 0xc0
 8003df2:	4313      	orrs	r3, r2
 8003df4:	aa0e      	add	r2, sp, #56	; 0x38
 8003df6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003dfa:	f853 ac10 	ldr.w	sl, [r3, #-16]
        y = rp[p->infinity | q->infinity]->y;
 8003dfe:	f10a 0440 	add.w	r4, sl, #64	; 0x40
        z = rp[p->infinity | q->infinity]->z;
 8003e02:	f10a 0b80 	add.w	fp, sl, #128	; 0x80
        ap[0] = p;
 8003e06:	950c      	str	r5, [sp, #48]	; 0x30
        ap[1] = q;
 8003e08:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
        for (i=0; i<8; i++) {
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	e00b      	b.n	8003e28 <sp_256_proj_point_add_8+0xd4>
            r->x[i] = ap[p->infinity]->x[i];
 8003e10:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8003e14:	a90e      	add	r1, sp, #56	; 0x38
 8003e16:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003e1a:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8003e1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e22:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 8003e26:	3301      	adds	r3, #1
 8003e28:	2b07      	cmp	r3, #7
 8003e2a:	ddf1      	ble.n	8003e10 <sp_256_proj_point_add_8+0xbc>
        for (i=0; i<8; i++) {
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	e00d      	b.n	8003e4c <sp_256_proj_point_add_8+0xf8>
            r->y[i] = ap[p->infinity]->y[i];
 8003e30:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 8003e34:	a90e      	add	r1, sp, #56	; 0x38
 8003e36:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003e3a:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8003e3e:	f103 0210 	add.w	r2, r3, #16
 8003e42:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003e46:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
        for (i=0; i<8; i++) {
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	2b07      	cmp	r3, #7
 8003e4e:	ddef      	ble.n	8003e30 <sp_256_proj_point_add_8+0xdc>
 8003e50:	e00e      	b.n	8003e70 <sp_256_proj_point_add_8+0x11c>
            r->z[i] = ap[p->infinity]->z[i];
 8003e52:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8003e56:	aa0e      	add	r2, sp, #56	; 0x38
 8003e58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e5c:	f853 2c08 	ldr.w	r2, [r3, #-8]
 8003e60:	f109 0320 	add.w	r3, r9, #32
 8003e64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e68:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 8003e6c:	f109 0901 	add.w	r9, r9, #1
 8003e70:	f1b9 0f07 	cmp.w	r9, #7
 8003e74:	dded      	ble.n	8003e52 <sp_256_proj_point_add_8+0xfe>
        r->infinity = ap[p->infinity]->infinity;
 8003e76:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8003e7a:	aa0e      	add	r2, sp, #56	; 0x38
 8003e7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e80:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8003e84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e88:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
        sp_256_mont_sqr_8(t1, q->z, p256_mod, p256_mp_mod);
 8003e8c:	4d50      	ldr	r5, [pc, #320]	; (8003fd0 <sp_256_proj_point_add_8+0x27c>)
 8003e8e:	2301      	movs	r3, #1
 8003e90:	462a      	mov	r2, r5
 8003e92:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003e96:	4641      	mov	r1, r8
 8003e98:	4638      	mov	r0, r7
 8003e9a:	4e51      	ldr	r6, [pc, #324]	; (8003fe0 <sp_256_proj_point_add_8+0x28c>)
 8003e9c:	47b0      	blx	r6
        sp_256_mont_mul_8(t3, t1, q->z, p256_mod, p256_mp_mod);
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	462b      	mov	r3, r5
 8003ea4:	f8cd 8014 	str.w	r8, [sp, #20]
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	4639      	mov	r1, r7
 8003eac:	9804      	ldr	r0, [sp, #16]
 8003eae:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8003fec <sp_256_proj_point_add_8+0x298>
 8003eb2:	47c0      	blx	r8
        sp_256_mont_mul_8(t1, t1, x, p256_mod, p256_mp_mod);
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	462b      	mov	r3, r5
 8003eba:	4652      	mov	r2, sl
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	47c0      	blx	r8
        sp_256_mont_sqr_8(t2, z, p256_mod, p256_mp_mod);
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	462a      	mov	r2, r5
 8003ec6:	4659      	mov	r1, fp
 8003ec8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8003ecc:	4648      	mov	r0, r9
 8003ece:	47b0      	blx	r6
        sp_256_mont_mul_8(t4, t2, z, p256_mod, p256_mp_mod);
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	462b      	mov	r3, r5
 8003ed6:	465a      	mov	r2, fp
 8003ed8:	4649      	mov	r1, r9
 8003eda:	9e03      	ldr	r6, [sp, #12]
 8003edc:	4630      	mov	r0, r6
 8003ede:	47c0      	blx	r8
        sp_256_mont_mul_8(t2, t2, q->x, p256_mod, p256_mp_mod);
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	462b      	mov	r3, r5
 8003ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ee8:	4649      	mov	r1, r9
 8003eea:	4648      	mov	r0, r9
 8003eec:	47c0      	blx	r8
        sp_256_mont_mul_8(t3, t3, y, p256_mod, p256_mp_mod);
 8003eee:	2301      	movs	r3, #1
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	9904      	ldr	r1, [sp, #16]
 8003ef8:	4608      	mov	r0, r1
 8003efa:	47c0      	blx	r8
        sp_256_mont_mul_8(t4, t4, q->y, p256_mod, p256_mp_mod);
 8003efc:	2301      	movs	r3, #1
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	462b      	mov	r3, r5
 8003f02:	9a08      	ldr	r2, [sp, #32]
 8003f04:	4631      	mov	r1, r6
 8003f06:	9603      	str	r6, [sp, #12]
 8003f08:	4630      	mov	r0, r6
 8003f0a:	47c0      	blx	r8
        sp_256_mont_sub_8(t2, t2, t1, p256_mod);
 8003f0c:	462b      	mov	r3, r5
 8003f0e:	463a      	mov	r2, r7
 8003f10:	4649      	mov	r1, r9
 8003f12:	464e      	mov	r6, r9
 8003f14:	4648      	mov	r0, r9
 8003f16:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8003ff0 <sp_256_proj_point_add_8+0x29c>
 8003f1a:	47c8      	blx	r9
        sp_256_mont_sub_8(t4, t4, t3, p256_mod);
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	9a04      	ldr	r2, [sp, #16]
 8003f20:	9903      	ldr	r1, [sp, #12]
 8003f22:	4608      	mov	r0, r1
 8003f24:	47c8      	blx	r9
        sp_256_mont_mul_8(z, z, q->z, p256_mod, p256_mp_mod);
 8003f26:	2301      	movs	r3, #1
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	462b      	mov	r3, r5
 8003f2c:	9a05      	ldr	r2, [sp, #20]
 8003f2e:	4659      	mov	r1, fp
 8003f30:	4658      	mov	r0, fp
 8003f32:	47c0      	blx	r8
        sp_256_mont_mul_8(z, z, t2, p256_mod, p256_mp_mod);
 8003f34:	2301      	movs	r3, #1
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	462b      	mov	r3, r5
 8003f3a:	9606      	str	r6, [sp, #24]
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	4659      	mov	r1, fp
 8003f40:	4658      	mov	r0, fp
 8003f42:	47c0      	blx	r8
        sp_256_mont_sqr_8(x, t4, p256_mod, p256_mp_mod);
 8003f44:	2301      	movs	r3, #1
 8003f46:	462a      	mov	r2, r5
 8003f48:	9903      	ldr	r1, [sp, #12]
 8003f4a:	4650      	mov	r0, sl
 8003f4c:	4e24      	ldr	r6, [pc, #144]	; (8003fe0 <sp_256_proj_point_add_8+0x28c>)
 8003f4e:	47b0      	blx	r6
        sp_256_mont_sqr_8(t5, t2, p256_mod, p256_mp_mod);
 8003f50:	2301      	movs	r3, #1
 8003f52:	462a      	mov	r2, r5
 8003f54:	f8dd b018 	ldr.w	fp, [sp, #24]
 8003f58:	4659      	mov	r1, fp
 8003f5a:	9807      	ldr	r0, [sp, #28]
 8003f5c:	47b0      	blx	r6
        sp_256_mont_mul_8(y, t1, t5, p256_mod, p256_mp_mod);
 8003f5e:	2301      	movs	r3, #1
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	462b      	mov	r3, r5
 8003f64:	9e07      	ldr	r6, [sp, #28]
 8003f66:	4632      	mov	r2, r6
 8003f68:	4639      	mov	r1, r7
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	47c0      	blx	r8
        sp_256_mont_mul_8(t5, t5, t2, p256_mod, p256_mp_mod);
 8003f6e:	2301      	movs	r3, #1
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	462b      	mov	r3, r5
 8003f74:	465a      	mov	r2, fp
 8003f76:	4631      	mov	r1, r6
 8003f78:	4630      	mov	r0, r6
 8003f7a:	47c0      	blx	r8
        sp_256_mont_sub_8(x, x, t5, p256_mod);
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	4632      	mov	r2, r6
 8003f80:	4651      	mov	r1, sl
 8003f82:	4650      	mov	r0, sl
 8003f84:	47c8      	blx	r9
        sp_256_mont_dbl_8(t1, y, p256_mod);
 8003f86:	462a      	mov	r2, r5
 8003f88:	4621      	mov	r1, r4
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <sp_256_proj_point_add_8+0x290>)
 8003f8e:	4798      	blx	r3
        sp_256_mont_sub_8(x, x, t1, p256_mod);
 8003f90:	462b      	mov	r3, r5
 8003f92:	463a      	mov	r2, r7
 8003f94:	4651      	mov	r1, sl
 8003f96:	4650      	mov	r0, sl
 8003f98:	47c8      	blx	r9
        sp_256_mont_sub_8(y, y, x, p256_mod);
 8003f9a:	462b      	mov	r3, r5
 8003f9c:	4652      	mov	r2, sl
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	47c8      	blx	r9
        sp_256_mont_mul_8(y, y, t4, p256_mod, p256_mp_mod);
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	462b      	mov	r3, r5
 8003faa:	9a03      	ldr	r2, [sp, #12]
 8003fac:	4621      	mov	r1, r4
 8003fae:	4620      	mov	r0, r4
 8003fb0:	47c0      	blx	r8
        sp_256_mont_mul_8(t5, t5, t3, p256_mod, p256_mp_mod);
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	9a04      	ldr	r2, [sp, #16]
 8003fba:	4631      	mov	r1, r6
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	47c0      	blx	r8
        sp_256_mont_sub_8(y, y, t5, p256_mod);
 8003fc0:	462b      	mov	r3, r5
 8003fc2:	4632      	mov	r2, r6
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	47c8      	blx	r9
}
 8003fca:	b00f      	add	sp, #60	; 0x3c
 8003fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd0:	08005474 	.word	0x08005474
 8003fd4:	08001f0d 	.word	0x08001f0d
 8003fd8:	08003619 	.word	0x08003619
 8003fdc:	08000155 	.word	0x08000155
 8003fe0:	080029d5 	.word	0x080029d5
 8003fe4:	08003305 	.word	0x08003305
 8003fe8:	08003759 	.word	0x08003759
 8003fec:	08002229 	.word	0x08002229
 8003ff0:	0800347b 	.word	0x0800347b

08003ff4 <sp_256_add_points_8>:
 * p2   Second point to add.
 * tmp  Temporary storage for intermediate numbers.
 */
static void sp_256_add_points_8(sp_point_256* p1, const sp_point_256* p2,
    sp_digit* tmp)
{
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	460d      	mov	r5, r1
 8003ffa:	4616      	mov	r6, r2

        sp_256_proj_point_add_8(p1, p1, p2, tmp);
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	460a      	mov	r2, r1
 8004000:	4601      	mov	r1, r0
 8004002:	4f13      	ldr	r7, [pc, #76]	; (8004050 <sp_256_add_points_8+0x5c>)
 8004004:	47b8      	blx	r7
    if (sp_256_iszero_8(p1->z)) {
 8004006:	f104 0780 	add.w	r7, r4, #128	; 0x80
 800400a:	4638      	mov	r0, r7
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <sp_256_add_points_8+0x60>)
 800400e:	4798      	blx	r3
 8004010:	b1b0      	cbz	r0, 8004040 <sp_256_add_points_8+0x4c>
        if (sp_256_iszero_8(p1->x) && sp_256_iszero_8(p1->y)) {
 8004012:	4620      	mov	r0, r4
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <sp_256_add_points_8+0x60>)
 8004016:	4798      	blx	r3
 8004018:	b120      	cbz	r0, 8004024 <sp_256_add_points_8+0x30>
 800401a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <sp_256_add_points_8+0x60>)
 8004020:	4798      	blx	r3
 8004022:	b970      	cbnz	r0, 8004042 <sp_256_add_points_8+0x4e>
                sp_256_proj_point_dbl_8(p1, p2, tmp);
        }
        else {
            /* Y ordinate is not used from here - don't set. */
            p1->x[0] = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	6023      	str	r3, [r4, #0]
            p1->x[1] = 0;
 8004028:	6063      	str	r3, [r4, #4]
            p1->x[2] = 0;
 800402a:	60a3      	str	r3, [r4, #8]
            p1->x[3] = 0;
 800402c:	60e3      	str	r3, [r4, #12]
            p1->x[4] = 0;
 800402e:	6123      	str	r3, [r4, #16]
            p1->x[5] = 0;
 8004030:	6163      	str	r3, [r4, #20]
            p1->x[6] = 0;
 8004032:	61a3      	str	r3, [r4, #24]
            p1->x[7] = 0;
 8004034:	61e3      	str	r3, [r4, #28]
            XMEMCPY(p1->z, p256_norm_mod, sizeof(p256_norm_mod));
 8004036:	2220      	movs	r2, #32
 8004038:	4907      	ldr	r1, [pc, #28]	; (8004058 <sp_256_add_points_8+0x64>)
 800403a:	4638      	mov	r0, r7
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <sp_256_add_points_8+0x68>)
 800403e:	4798      	blx	r3
        }
    }
}
 8004040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                sp_256_proj_point_dbl_8(p1, p2, tmp);
 8004042:	4632      	mov	r2, r6
 8004044:	4629      	mov	r1, r5
 8004046:	4620      	mov	r0, r4
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <sp_256_add_points_8+0x6c>)
 800404a:	4798      	blx	r3
 800404c:	e7f8      	b.n	8004040 <sp_256_add_points_8+0x4c>
 800404e:	bf00      	nop
 8004050:	08003d55 	.word	0x08003d55
 8004054:	08003a53 	.word	0x08003a53
 8004058:	080054b4 	.word	0x080054b4
 800405c:	080001a5 	.word	0x080001a5
 8004060:	08003619 	.word	0x08003619

08004064 <sp_256_map_8>:
{
 8004064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	4604      	mov	r4, r0
 800406c:	460f      	mov	r7, r1
 800406e:	4615      	mov	r5, r2
    sp_digit* t2 = t + 2*8;
 8004070:	f102 0840 	add.w	r8, r2, #64	; 0x40
    sp_256_mont_inv_8(t1, p->z, t + 2*8);
 8004074:	4642      	mov	r2, r8
 8004076:	3180      	adds	r1, #128	; 0x80
 8004078:	4628      	mov	r0, r5
 800407a:	4b35      	ldr	r3, [pc, #212]	; (8004150 <sp_256_map_8+0xec>)
 800407c:	4798      	blx	r3
    sp_256_mont_sqr_8(t2, t1, p256_mod, p256_mp_mod);
 800407e:	4e35      	ldr	r6, [pc, #212]	; (8004154 <sp_256_map_8+0xf0>)
 8004080:	2301      	movs	r3, #1
 8004082:	4632      	mov	r2, r6
 8004084:	4629      	mov	r1, r5
 8004086:	4640      	mov	r0, r8
 8004088:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800416c <sp_256_map_8+0x108>
 800408c:	47c8      	blx	r9
    sp_256_mont_mul_8(t1, t2, t1, p256_mod, p256_mp_mod);
 800408e:	f04f 0901 	mov.w	r9, #1
 8004092:	f8cd 9000 	str.w	r9, [sp]
 8004096:	4633      	mov	r3, r6
 8004098:	462a      	mov	r2, r5
 800409a:	4641      	mov	r1, r8
 800409c:	4628      	mov	r0, r5
 800409e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004168 <sp_256_map_8+0x104>
 80040a2:	47d0      	blx	sl
    sp_256_mont_mul_8(r->x, p->x, t2, p256_mod, p256_mp_mod);
 80040a4:	f8cd 9000 	str.w	r9, [sp]
 80040a8:	4633      	mov	r3, r6
 80040aa:	4642      	mov	r2, r8
 80040ac:	4639      	mov	r1, r7
 80040ae:	4620      	mov	r0, r4
 80040b0:	47d0      	blx	sl
    XMEMSET(r->x + 8, 0, sizeof(r->x) / 2U);
 80040b2:	2220      	movs	r2, #32
 80040b4:	2100      	movs	r1, #0
 80040b6:	18a0      	adds	r0, r4, r2
 80040b8:	4b27      	ldr	r3, [pc, #156]	; (8004158 <sp_256_map_8+0xf4>)
 80040ba:	4798      	blx	r3
    sp_256_mont_reduce_8(r->x, p256_mod, p256_mp_mod);
 80040bc:	464a      	mov	r2, r9
 80040be:	4631      	mov	r1, r6
 80040c0:	4620      	mov	r0, r4
 80040c2:	4b26      	ldr	r3, [pc, #152]	; (800415c <sp_256_map_8+0xf8>)
 80040c4:	4798      	blx	r3
    n = sp_256_cmp_8(r->x, p256_mod);
 80040c6:	4631      	mov	r1, r6
 80040c8:	4620      	mov	r0, r4
 80040ca:	4b25      	ldr	r3, [pc, #148]	; (8004160 <sp_256_map_8+0xfc>)
 80040cc:	4798      	blx	r3
    sp_256_cond_sub_8(r->x, r->x, p256_mod, 0 - ((n >= 0) ?
 80040ce:	2800      	cmp	r0, #0
 80040d0:	db39      	blt.n	8004146 <sp_256_map_8+0xe2>
 80040d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040d6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8004154 <sp_256_map_8+0xf0>
 80040da:	4642      	mov	r2, r8
 80040dc:	4621      	mov	r1, r4
 80040de:	4620      	mov	r0, r4
 80040e0:	4e20      	ldr	r6, [pc, #128]	; (8004164 <sp_256_map_8+0x100>)
 80040e2:	47b0      	blx	r6
    sp_256_mont_mul_8(r->y, p->y, t1, p256_mod, p256_mp_mod);
 80040e4:	f104 0640 	add.w	r6, r4, #64	; 0x40
 80040e8:	f04f 0901 	mov.w	r9, #1
 80040ec:	f8cd 9000 	str.w	r9, [sp]
 80040f0:	4643      	mov	r3, r8
 80040f2:	462a      	mov	r2, r5
 80040f4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80040f8:	4630      	mov	r0, r6
 80040fa:	4d1b      	ldr	r5, [pc, #108]	; (8004168 <sp_256_map_8+0x104>)
 80040fc:	47a8      	blx	r5
    XMEMSET(r->y + 8, 0, sizeof(r->y) / 2U);
 80040fe:	2220      	movs	r2, #32
 8004100:	2100      	movs	r1, #0
 8004102:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <sp_256_map_8+0xf4>)
 8004108:	4798      	blx	r3
    sp_256_mont_reduce_8(r->y, p256_mod, p256_mp_mod);
 800410a:	464a      	mov	r2, r9
 800410c:	4641      	mov	r1, r8
 800410e:	4630      	mov	r0, r6
 8004110:	4b12      	ldr	r3, [pc, #72]	; (800415c <sp_256_map_8+0xf8>)
 8004112:	4798      	blx	r3
    n = sp_256_cmp_8(r->y, p256_mod);
 8004114:	4641      	mov	r1, r8
 8004116:	4630      	mov	r0, r6
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <sp_256_map_8+0xfc>)
 800411a:	4798      	blx	r3
    sp_256_cond_sub_8(r->y, r->y, p256_mod, 0 - ((n >= 0) ?
 800411c:	2800      	cmp	r0, #0
 800411e:	db14      	blt.n	800414a <sp_256_map_8+0xe6>
 8004120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004124:	4a0b      	ldr	r2, [pc, #44]	; (8004154 <sp_256_map_8+0xf0>)
 8004126:	4631      	mov	r1, r6
 8004128:	4630      	mov	r0, r6
 800412a:	4d0e      	ldr	r5, [pc, #56]	; (8004164 <sp_256_map_8+0x100>)
 800412c:	47a8      	blx	r5
    XMEMSET(r->z, 0, sizeof(r->z));
 800412e:	2240      	movs	r2, #64	; 0x40
 8004130:	2100      	movs	r1, #0
 8004132:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <sp_256_map_8+0xf4>)
 8004138:	4798      	blx	r3
    r->z[0] = 1;
 800413a:	2301      	movs	r3, #1
 800413c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8004140:	b002      	add	sp, #8
 8004142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sp_256_cond_sub_8(r->x, r->x, p256_mod, 0 - ((n >= 0) ?
 8004146:	2300      	movs	r3, #0
 8004148:	e7c5      	b.n	80040d6 <sp_256_map_8+0x72>
    sp_256_cond_sub_8(r->y, r->y, p256_mod, 0 - ((n >= 0) ?
 800414a:	2300      	movs	r3, #0
 800414c:	e7ea      	b.n	8004124 <sp_256_map_8+0xc0>
 800414e:	bf00      	nop
 8004150:	08003c55 	.word	0x08003c55
 8004154:	08005474 	.word	0x08005474
 8004158:	08000155 	.word	0x08000155
 800415c:	0800305d 	.word	0x0800305d
 8004160:	08002fcd 	.word	0x08002fcd
 8004164:	08003023 	.word	0x08003023
 8004168:	08002229 	.word	0x08002229
 800416c:	080029d5 	.word	0x080029d5

08004170 <sp_256_ecc_mulmod_fast_8>:
{
 8004170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004174:	f6ad 7d14 	subw	sp, sp, #3860	; 0xf14
 8004178:	9001      	str	r0, [sp, #4]
 800417a:	460c      	mov	r4, r1
 800417c:	4692      	mov	sl, r2
 800417e:	469b      	mov	fp, r3
 8004180:	f8dd 9f38 	ldr.w	r9, [sp, #3896]	; 0xf38
        XMEMSET(&t[0], 0, sizeof(t[0]));
 8004184:	22c4      	movs	r2, #196	; 0xc4
 8004186:	2100      	movs	r1, #0
 8004188:	a883      	add	r0, sp, #524	; 0x20c
 800418a:	4b93      	ldr	r3, [pc, #588]	; (80043d8 <sp_256_ecc_mulmod_fast_8+0x268>)
 800418c:	4798      	blx	r3
        t[0].infinity = 1;
 800418e:	2301      	movs	r3, #1
 8004190:	93b3      	str	r3, [sp, #716]	; 0x2cc
        (void)sp_256_mod_mul_norm_8(t[1].x, g->x, p256_mod);
 8004192:	4e92      	ldr	r6, [pc, #584]	; (80043dc <sp_256_ecc_mulmod_fast_8+0x26c>)
 8004194:	4632      	mov	r2, r6
 8004196:	4621      	mov	r1, r4
 8004198:	a8b4      	add	r0, sp, #720	; 0x2d0
 800419a:	4d91      	ldr	r5, [pc, #580]	; (80043e0 <sp_256_ecc_mulmod_fast_8+0x270>)
 800419c:	47a8      	blx	r5
        (void)sp_256_mod_mul_norm_8(t[1].y, g->y, p256_mod);
 800419e:	4632      	mov	r2, r6
 80041a0:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80041a4:	a8c4      	add	r0, sp, #784	; 0x310
 80041a6:	47a8      	blx	r5
        (void)sp_256_mod_mul_norm_8(t[1].z, g->z, p256_mod);
 80041a8:	4632      	mov	r2, r6
 80041aa:	f104 0180 	add.w	r1, r4, #128	; 0x80
 80041ae:	a8d4      	add	r0, sp, #848	; 0x350
 80041b0:	47a8      	blx	r5
        t[1].infinity = 0;
 80041b2:	2400      	movs	r4, #0
 80041b4:	94e4      	str	r4, [sp, #912]	; 0x390
        sp_256_proj_point_dbl_8(&t[ 2], &t[ 1], tmp);
 80041b6:	aa33      	add	r2, sp, #204	; 0xcc
 80041b8:	a9b4      	add	r1, sp, #720	; 0x2d0
 80041ba:	a8e5      	add	r0, sp, #916	; 0x394
 80041bc:	4e89      	ldr	r6, [pc, #548]	; (80043e4 <sp_256_ecc_mulmod_fast_8+0x274>)
 80041be:	47b0      	blx	r6
        t[ 2].infinity = 0;
 80041c0:	f8cd 4454 	str.w	r4, [sp, #1108]	; 0x454
        sp_256_proj_point_add_8(&t[ 3], &t[ 2], &t[ 1], tmp);
 80041c4:	ab33      	add	r3, sp, #204	; 0xcc
 80041c6:	aab4      	add	r2, sp, #720	; 0x2d0
 80041c8:	a9e5      	add	r1, sp, #916	; 0x394
 80041ca:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
 80041ce:	4d86      	ldr	r5, [pc, #536]	; (80043e8 <sp_256_ecc_mulmod_fast_8+0x278>)
 80041d0:	47a8      	blx	r5
        t[ 3].infinity = 0;
 80041d2:	f8cd 4518 	str.w	r4, [sp, #1304]	; 0x518
        sp_256_proj_point_dbl_8(&t[ 4], &t[ 2], tmp);
 80041d6:	aa33      	add	r2, sp, #204	; 0xcc
 80041d8:	a9e5      	add	r1, sp, #916	; 0x394
 80041da:	f20d 501c 	addw	r0, sp, #1308	; 0x51c
 80041de:	47b0      	blx	r6
        t[ 4].infinity = 0;
 80041e0:	f8cd 45dc 	str.w	r4, [sp, #1500]	; 0x5dc
        sp_256_proj_point_add_8(&t[ 5], &t[ 3], &t[ 2], tmp);
 80041e4:	ab33      	add	r3, sp, #204	; 0xcc
 80041e6:	aae5      	add	r2, sp, #916	; 0x394
 80041e8:	f50d 618b 	add.w	r1, sp, #1112	; 0x458
 80041ec:	f50d 60bc 	add.w	r0, sp, #1504	; 0x5e0
 80041f0:	47a8      	blx	r5
        t[ 5].infinity = 0;
 80041f2:	f8cd 46a0 	str.w	r4, [sp, #1696]	; 0x6a0
        sp_256_proj_point_dbl_8(&t[ 6], &t[ 3], tmp);
 80041f6:	aa33      	add	r2, sp, #204	; 0xcc
 80041f8:	f50d 618b 	add.w	r1, sp, #1112	; 0x458
 80041fc:	f20d 60a4 	addw	r0, sp, #1700	; 0x6a4
 8004200:	47b0      	blx	r6
        t[ 6].infinity = 0;
 8004202:	f8cd 4764 	str.w	r4, [sp, #1892]	; 0x764
        sp_256_proj_point_add_8(&t[ 7], &t[ 4], &t[ 3], tmp);
 8004206:	ab33      	add	r3, sp, #204	; 0xcc
 8004208:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
 800420c:	f20d 511c 	addw	r1, sp, #1308	; 0x51c
 8004210:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
 8004214:	47a8      	blx	r5
        t[ 7].infinity = 0;
 8004216:	f8cd 4828 	str.w	r4, [sp, #2088]	; 0x828
        sp_256_proj_point_dbl_8(&t[ 8], &t[ 4], tmp);
 800421a:	aa33      	add	r2, sp, #204	; 0xcc
 800421c:	f20d 511c 	addw	r1, sp, #1308	; 0x51c
 8004220:	f60d 002c 	addw	r0, sp, #2092	; 0x82c
 8004224:	47b0      	blx	r6
        t[ 8].infinity = 0;
 8004226:	f8cd 48ec 	str.w	r4, [sp, #2284]	; 0x8ec
        sp_256_proj_point_add_8(&t[ 9], &t[ 5], &t[ 4], tmp);
 800422a:	ab33      	add	r3, sp, #204	; 0xcc
 800422c:	f20d 521c 	addw	r2, sp, #1308	; 0x51c
 8004230:	f50d 61bc 	add.w	r1, sp, #1504	; 0x5e0
 8004234:	f50d 600f 	add.w	r0, sp, #2288	; 0x8f0
 8004238:	47a8      	blx	r5
        t[ 9].infinity = 0;
 800423a:	f8cd 49b0 	str.w	r4, [sp, #2480]	; 0x9b0
        sp_256_proj_point_dbl_8(&t[10], &t[ 5], tmp);
 800423e:	aa33      	add	r2, sp, #204	; 0xcc
 8004240:	f50d 61bc 	add.w	r1, sp, #1504	; 0x5e0
 8004244:	f60d 10b4 	addw	r0, sp, #2484	; 0x9b4
 8004248:	47b0      	blx	r6
        t[10].infinity = 0;
 800424a:	f8cd 4a74 	str.w	r4, [sp, #2676]	; 0xa74
        sp_256_proj_point_add_8(&t[11], &t[ 6], &t[ 5], tmp);
 800424e:	ab33      	add	r3, sp, #204	; 0xcc
 8004250:	f50d 62bc 	add.w	r2, sp, #1504	; 0x5e0
 8004254:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
 8004258:	f60d 2078 	addw	r0, sp, #2680	; 0xa78
 800425c:	47a8      	blx	r5
        t[11].infinity = 0;
 800425e:	f8cd 4b38 	str.w	r4, [sp, #2872]	; 0xb38
        sp_256_proj_point_dbl_8(&t[12], &t[ 6], tmp);
 8004262:	aa33      	add	r2, sp, #204	; 0xcc
 8004264:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
 8004268:	f60d 303c 	addw	r0, sp, #2876	; 0xb3c
 800426c:	47b0      	blx	r6
        t[12].infinity = 0;
 800426e:	f8cd 4bfc 	str.w	r4, [sp, #3068]	; 0xbfc
        sp_256_proj_point_add_8(&t[13], &t[ 7], &t[ 6], tmp);
 8004272:	ab33      	add	r3, sp, #204	; 0xcc
 8004274:	f20d 62a4 	addw	r2, sp, #1700	; 0x6a4
 8004278:	f50d 61ed 	add.w	r1, sp, #1896	; 0x768
 800427c:	f50d 6040 	add.w	r0, sp, #3072	; 0xc00
 8004280:	47a8      	blx	r5
        t[13].infinity = 0;
 8004282:	f8cd 4cc0 	str.w	r4, [sp, #3264]	; 0xcc0
        sp_256_proj_point_dbl_8(&t[14], &t[ 7], tmp);
 8004286:	aa33      	add	r2, sp, #204	; 0xcc
 8004288:	f50d 61ed 	add.w	r1, sp, #1896	; 0x768
 800428c:	f60d 40c4 	addw	r0, sp, #3268	; 0xcc4
 8004290:	47b0      	blx	r6
        t[14].infinity = 0;
 8004292:	f8cd 4d84 	str.w	r4, [sp, #3460]	; 0xd84
        sp_256_proj_point_add_8(&t[15], &t[ 8], &t[ 7], tmp);
 8004296:	ab33      	add	r3, sp, #204	; 0xcc
 8004298:	f50d 62ed 	add.w	r2, sp, #1896	; 0x768
 800429c:	f60d 012c 	addw	r1, sp, #2092	; 0x82c
 80042a0:	f60d 5088 	addw	r0, sp, #3464	; 0xd88
 80042a4:	47a8      	blx	r5
        t[15].infinity = 0;
 80042a6:	f8cd 4e48 	str.w	r4, [sp, #3656]	; 0xe48
        n = k[i+1] << 0;
 80042aa:	f8da 701c 	ldr.w	r7, [sl, #28]
        y = (int)(n >> 28);
 80042ae:	0f3c      	lsrs	r4, r7, #28
        if (ct) {
 80042b0:	f1b9 0f00 	cmp.w	r9, #0
 80042b4:	d00f      	beq.n	80042d6 <sp_256_ecc_mulmod_fast_8+0x166>
            sp_256_get_point_16_8(rt, t, y);
 80042b6:	4622      	mov	r2, r4
 80042b8:	a983      	add	r1, sp, #524	; 0x20c
 80042ba:	f60d 604c 	addw	r0, sp, #3660	; 0xe4c
 80042be:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <sp_256_ecc_mulmod_fast_8+0x27c>)
 80042c0:	4798      	blx	r3
            rt->infinity = !y;
 80042c2:	fab4 f484 	clz	r4, r4
 80042c6:	0964      	lsrs	r4, r4, #5
 80042c8:	f8cd 4f0c 	str.w	r4, [sp, #3852]	; 0xf0c
        n <<= 4;
 80042cc:	013f      	lsls	r7, r7, #4
        c = 28;
 80042ce:	261c      	movs	r6, #28
        i = 6;
 80042d0:	f04f 0806 	mov.w	r8, #6
        for (; i>=0 || c>=4; ) {
 80042d4:	e012      	b.n	80042fc <sp_256_ecc_mulmod_fast_8+0x18c>
            XMEMCPY(rt, &t[y], sizeof(sp_point_256));
 80042d6:	22c4      	movs	r2, #196	; 0xc4
 80042d8:	ab83      	add	r3, sp, #524	; 0x20c
 80042da:	fb02 3104 	mla	r1, r2, r4, r3
 80042de:	f60d 604c 	addw	r0, sp, #3660	; 0xe4c
 80042e2:	4b43      	ldr	r3, [pc, #268]	; (80043f0 <sp_256_ecc_mulmod_fast_8+0x280>)
 80042e4:	4798      	blx	r3
 80042e6:	e7f1      	b.n	80042cc <sp_256_ecc_mulmod_fast_8+0x15c>
                sp_256_proj_point_add_8(rt, rt, &t[y], tmp);
 80042e8:	ab33      	add	r3, sp, #204	; 0xcc
 80042ea:	22c4      	movs	r2, #196	; 0xc4
 80042ec:	a983      	add	r1, sp, #524	; 0x20c
 80042ee:	fb02 1205 	mla	r2, r2, r5, r1
 80042f2:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 80042f6:	4608      	mov	r0, r1
 80042f8:	4c3b      	ldr	r4, [pc, #236]	; (80043e8 <sp_256_ecc_mulmod_fast_8+0x278>)
 80042fa:	47a0      	blx	r4
        for (; i>=0 || c>=4; ) {
 80042fc:	f1b8 0f00 	cmp.w	r8, #0
 8004300:	db33      	blt.n	800436a <sp_256_ecc_mulmod_fast_8+0x1fa>
            if (c < 4) {
 8004302:	2e03      	cmp	r6, #3
 8004304:	dc05      	bgt.n	8004312 <sp_256_ecc_mulmod_fast_8+0x1a2>
                n |= k[i--];
 8004306:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
 800430a:	431f      	orrs	r7, r3
                c += 32;
 800430c:	3620      	adds	r6, #32
                n |= k[i--];
 800430e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
            y = (n >> 28) & 0xf;
 8004312:	0f3d      	lsrs	r5, r7, #28
            n <<= 4;
 8004314:	013f      	lsls	r7, r7, #4
            c -= 4;
 8004316:	3e04      	subs	r6, #4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8004318:	aa33      	add	r2, sp, #204	; 0xcc
 800431a:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 800431e:	4608      	mov	r0, r1
 8004320:	4c30      	ldr	r4, [pc, #192]	; (80043e4 <sp_256_ecc_mulmod_fast_8+0x274>)
 8004322:	47a0      	blx	r4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8004324:	aa33      	add	r2, sp, #204	; 0xcc
 8004326:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 800432a:	4608      	mov	r0, r1
 800432c:	47a0      	blx	r4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 800432e:	aa33      	add	r2, sp, #204	; 0xcc
 8004330:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8004334:	4608      	mov	r0, r1
 8004336:	47a0      	blx	r4
            sp_256_proj_point_dbl_8(rt, rt, tmp);
 8004338:	aa33      	add	r2, sp, #204	; 0xcc
 800433a:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 800433e:	4608      	mov	r0, r1
 8004340:	47a0      	blx	r4
            if (ct) {
 8004342:	f1b9 0f00 	cmp.w	r9, #0
 8004346:	d0cf      	beq.n	80042e8 <sp_256_ecc_mulmod_fast_8+0x178>
                sp_256_get_point_16_8(p, t, y);
 8004348:	462a      	mov	r2, r5
 800434a:	a983      	add	r1, sp, #524	; 0x20c
 800434c:	a802      	add	r0, sp, #8
 800434e:	4b27      	ldr	r3, [pc, #156]	; (80043ec <sp_256_ecc_mulmod_fast_8+0x27c>)
 8004350:	4798      	blx	r3
                p->infinity = !y;
 8004352:	fab5 f585 	clz	r5, r5
 8004356:	096d      	lsrs	r5, r5, #5
 8004358:	9532      	str	r5, [sp, #200]	; 0xc8
                sp_256_proj_point_add_8(rt, rt, p, tmp);
 800435a:	ab33      	add	r3, sp, #204	; 0xcc
 800435c:	aa02      	add	r2, sp, #8
 800435e:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 8004362:	4608      	mov	r0, r1
 8004364:	4c20      	ldr	r4, [pc, #128]	; (80043e8 <sp_256_ecc_mulmod_fast_8+0x278>)
 8004366:	47a0      	blx	r4
 8004368:	e7c8      	b.n	80042fc <sp_256_ecc_mulmod_fast_8+0x18c>
        for (; i>=0 || c>=4; ) {
 800436a:	2e03      	cmp	r6, #3
 800436c:	dcc9      	bgt.n	8004302 <sp_256_ecc_mulmod_fast_8+0x192>
        if (map != 0) {
 800436e:	f1bb 0f00 	cmp.w	fp, #0
 8004372:	d009      	beq.n	8004388 <sp_256_ecc_mulmod_fast_8+0x218>
            sp_256_map_8(r, rt, tmp);
 8004374:	aa33      	add	r2, sp, #204	; 0xcc
 8004376:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 800437a:	9801      	ldr	r0, [sp, #4]
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <sp_256_ecc_mulmod_fast_8+0x284>)
 800437e:	4798      	blx	r3
        i = 6;
 8004380:	ab33      	add	r3, sp, #204	; 0xcc
 8004382:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004386:	e00a      	b.n	800439e <sp_256_ecc_mulmod_fast_8+0x22e>
            XMEMCPY(r, rt, sizeof(sp_point_256));
 8004388:	22c4      	movs	r2, #196	; 0xc4
 800438a:	f60d 614c 	addw	r1, sp, #3660	; 0xe4c
 800438e:	9801      	ldr	r0, [sp, #4]
 8004390:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <sp_256_ecc_mulmod_fast_8+0x280>)
 8004392:	4798      	blx	r3
 8004394:	e7f4      	b.n	8004380 <sp_256_ecc_mulmod_fast_8+0x210>
    for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
        *w++ = 0;
    z = (volatile byte*)w;
#endif

    while (len--) *z++ = 0;
 8004396:	2200      	movs	r2, #0
 8004398:	f803 2b01 	strb.w	r2, [r3], #1
 800439c:	460a      	mov	r2, r1
 800439e:	1e51      	subs	r1, r2, #1
 80043a0:	2a00      	cmp	r2, #0
 80043a2:	d1f8      	bne.n	8004396 <sp_256_ecc_mulmod_fast_8+0x226>
    volatile byte* z = (volatile byte*)mem;
 80043a4:	ab02      	add	r3, sp, #8
 80043a6:	22c4      	movs	r2, #196	; 0xc4
 80043a8:	e003      	b.n	80043b2 <sp_256_ecc_mulmod_fast_8+0x242>
    while (len--) *z++ = 0;
 80043aa:	2200      	movs	r2, #0
 80043ac:	f803 2b01 	strb.w	r2, [r3], #1
 80043b0:	460a      	mov	r2, r1
 80043b2:	1e51      	subs	r1, r2, #1
 80043b4:	2a00      	cmp	r2, #0
 80043b6:	d1f8      	bne.n	80043aa <sp_256_ecc_mulmod_fast_8+0x23a>
    volatile byte* z = (volatile byte*)mem;
 80043b8:	ab83      	add	r3, sp, #524	; 0x20c
 80043ba:	f640 5204 	movw	r2, #3332	; 0xd04
 80043be:	e003      	b.n	80043c8 <sp_256_ecc_mulmod_fast_8+0x258>
    while (len--) *z++ = 0;
 80043c0:	2200      	movs	r2, #0
 80043c2:	f803 2b01 	strb.w	r2, [r3], #1
 80043c6:	460a      	mov	r2, r1
 80043c8:	1e51      	subs	r1, r2, #1
 80043ca:	2a00      	cmp	r2, #0
 80043cc:	d1f8      	bne.n	80043c0 <sp_256_ecc_mulmod_fast_8+0x250>
}
 80043ce:	2000      	movs	r0, #0
 80043d0:	f60d 7d14 	addw	sp, sp, #3860	; 0xf14
 80043d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d8:	08000155 	.word	0x08000155
 80043dc:	08005474 	.word	0x08005474
 80043e0:	08001f3f 	.word	0x08001f3f
 80043e4:	08003619 	.word	0x08003619
 80043e8:	08003d55 	.word	0x08003d55
 80043ec:	080037a3 	.word	0x080037a3
 80043f0:	080001a5 	.word	0x080001a5
 80043f4:	08004065 	.word	0x08004065

080043f8 <sp_256_ecc_mulmod_8>:
{
 80043f8:	b510      	push	{r4, lr}
 80043fa:	b082      	sub	sp, #8
    return sp_256_ecc_mulmod_fast_8(r, g, k, map, ct, heap);
 80043fc:	9c05      	ldr	r4, [sp, #20]
 80043fe:	9401      	str	r4, [sp, #4]
 8004400:	9c04      	ldr	r4, [sp, #16]
 8004402:	9400      	str	r4, [sp, #0]
 8004404:	4c01      	ldr	r4, [pc, #4]	; (800440c <sp_256_ecc_mulmod_8+0x14>)
 8004406:	47a0      	blx	r4
}
 8004408:	b002      	add	sp, #8
 800440a:	bd10      	pop	{r4, pc}
 800440c:	08004171 	.word	0x08004171

08004410 <sp_256_proj_point_add_qz1_8>:
{
 8004410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004414:	b08d      	sub	sp, #52	; 0x34
 8004416:	4606      	mov	r6, r0
 8004418:	460d      	mov	r5, r1
 800441a:	4690      	mov	r8, r2
 800441c:	461f      	mov	r7, r3
    sp_digit* t2 = t + 2*8;
 800441e:	3340      	adds	r3, #64	; 0x40
 8004420:	9303      	str	r3, [sp, #12]
    sp_digit* t3 = t + 4*8;
 8004422:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004426:	9304      	str	r3, [sp, #16]
    sp_digit* t4 = t + 6*8;
 8004428:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800442c:	9302      	str	r3, [sp, #8]
    sp_digit* t5 = t + 8*8;
 800442e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004432:	9305      	str	r3, [sp, #20]
    (void)sp_256_sub_8(t1, p256_mod, q->y);
 8004434:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004438:	461c      	mov	r4, r3
 800443a:	9306      	str	r3, [sp, #24]
 800443c:	461a      	mov	r2, r3
 800443e:	497b      	ldr	r1, [pc, #492]	; (800462c <sp_256_proj_point_add_qz1_8+0x21c>)
 8004440:	4638      	mov	r0, r7
 8004442:	4b7b      	ldr	r3, [pc, #492]	; (8004630 <sp_256_proj_point_add_qz1_8+0x220>)
 8004444:	4798      	blx	r3
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 8004446:	4641      	mov	r1, r8
 8004448:	4628      	mov	r0, r5
 800444a:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8004644 <sp_256_proj_point_add_qz1_8+0x234>
 800444e:	47d0      	blx	sl
 8004450:	4681      	mov	r9, r0
 8004452:	f108 0180 	add.w	r1, r8, #128	; 0x80
 8004456:	f105 0080 	add.w	r0, r5, #128	; 0x80
 800445a:	47d0      	blx	sl
 800445c:	ea09 0900 	and.w	r9, r9, r0
        (sp_256_cmp_equal_8(p->y, q->y) | sp_256_cmp_equal_8(p->y, t1))) != 0) {
 8004460:	f105 0b40 	add.w	fp, r5, #64	; 0x40
 8004464:	4621      	mov	r1, r4
 8004466:	4658      	mov	r0, fp
 8004468:	47d0      	blx	sl
 800446a:	4604      	mov	r4, r0
 800446c:	4639      	mov	r1, r7
 800446e:	4658      	mov	r0, fp
 8004470:	47d0      	blx	sl
 8004472:	4304      	orrs	r4, r0
    if ((sp_256_cmp_equal_8(p->x, q->x) & sp_256_cmp_equal_8(p->z, q->z) &
 8004474:	ea19 0904 	ands.w	r9, r9, r4
 8004478:	d005      	beq.n	8004486 <sp_256_proj_point_add_qz1_8+0x76>
        sp_256_proj_point_dbl_8(r, p, t);
 800447a:	463a      	mov	r2, r7
 800447c:	4629      	mov	r1, r5
 800447e:	4630      	mov	r0, r6
 8004480:	4b6c      	ldr	r3, [pc, #432]	; (8004634 <sp_256_proj_point_add_qz1_8+0x224>)
 8004482:	4798      	blx	r3
 8004484:	e0cf      	b.n	8004626 <sp_256_proj_point_add_qz1_8+0x216>
        rp[0] = r;
 8004486:	9608      	str	r6, [sp, #32]
        rp[1] = (sp_point_256*)t; /*lint !e9087 !e740*/
 8004488:	9709      	str	r7, [sp, #36]	; 0x24
        XMEMSET(rp[1], 0, sizeof(sp_point_256));
 800448a:	22c4      	movs	r2, #196	; 0xc4
 800448c:	2100      	movs	r1, #0
 800448e:	4638      	mov	r0, r7
 8004490:	4b69      	ldr	r3, [pc, #420]	; (8004638 <sp_256_proj_point_add_qz1_8+0x228>)
 8004492:	4798      	blx	r3
        x = rp[p->infinity | q->infinity]->x;
 8004494:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8004498:	f8d8 20c0 	ldr.w	r2, [r8, #192]	; 0xc0
 800449c:	4313      	orrs	r3, r2
 800449e:	aa0c      	add	r2, sp, #48	; 0x30
 80044a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80044a4:	f853 ac10 	ldr.w	sl, [r3, #-16]
        y = rp[p->infinity | q->infinity]->y;
 80044a8:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 80044ac:	9307      	str	r3, [sp, #28]
        z = rp[p->infinity | q->infinity]->z;
 80044ae:	f10a 0b80 	add.w	fp, sl, #128	; 0x80
        ap[0] = p;
 80044b2:	950a      	str	r5, [sp, #40]	; 0x28
        ap[1] = q;
 80044b4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
        for (i=0; i<8; i++) {
 80044b8:	464b      	mov	r3, r9
 80044ba:	e00b      	b.n	80044d4 <sp_256_proj_point_add_qz1_8+0xc4>
            r->x[i] = ap[p->infinity]->x[i];
 80044bc:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 80044c0:	a90c      	add	r1, sp, #48	; 0x30
 80044c2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80044c6:	f852 2c08 	ldr.w	r2, [r2, #-8]
 80044ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80044ce:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 80044d2:	3301      	adds	r3, #1
 80044d4:	2b07      	cmp	r3, #7
 80044d6:	ddf1      	ble.n	80044bc <sp_256_proj_point_add_qz1_8+0xac>
        for (i=0; i<8; i++) {
 80044d8:	464b      	mov	r3, r9
 80044da:	e00d      	b.n	80044f8 <sp_256_proj_point_add_qz1_8+0xe8>
            r->y[i] = ap[p->infinity]->y[i];
 80044dc:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
 80044e0:	a90c      	add	r1, sp, #48	; 0x30
 80044e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80044e6:	f852 1c08 	ldr.w	r1, [r2, #-8]
 80044ea:	f103 0210 	add.w	r2, r3, #16
 80044ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80044f2:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
        for (i=0; i<8; i++) {
 80044f6:	3301      	adds	r3, #1
 80044f8:	2b07      	cmp	r3, #7
 80044fa:	ddef      	ble.n	80044dc <sp_256_proj_point_add_qz1_8+0xcc>
 80044fc:	e00e      	b.n	800451c <sp_256_proj_point_add_qz1_8+0x10c>
            r->z[i] = ap[p->infinity]->z[i];
 80044fe:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8004502:	aa0c      	add	r2, sp, #48	; 0x30
 8004504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004508:	f853 2c08 	ldr.w	r2, [r3, #-8]
 800450c:	f109 0320 	add.w	r3, r9, #32
 8004510:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004514:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
        for (i=0; i<8; i++) {
 8004518:	f109 0901 	add.w	r9, r9, #1
 800451c:	f1b9 0f07 	cmp.w	r9, #7
 8004520:	dded      	ble.n	80044fe <sp_256_proj_point_add_qz1_8+0xee>
        r->infinity = ap[p->infinity]->infinity;
 8004522:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8004526:	aa0c      	add	r2, sp, #48	; 0x30
 8004528:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800452c:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8004530:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004534:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
        sp_256_mont_sqr_8(t2, z, p256_mod, p256_mp_mod);
 8004538:	4c3c      	ldr	r4, [pc, #240]	; (800462c <sp_256_proj_point_add_qz1_8+0x21c>)
 800453a:	2301      	movs	r3, #1
 800453c:	4622      	mov	r2, r4
 800453e:	4659      	mov	r1, fp
 8004540:	9e03      	ldr	r6, [sp, #12]
 8004542:	4630      	mov	r0, r6
 8004544:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004648 <sp_256_proj_point_add_qz1_8+0x238>
 8004548:	47c8      	blx	r9
        sp_256_mont_mul_8(t4, t2, z, p256_mod, p256_mp_mod);
 800454a:	2501      	movs	r5, #1
 800454c:	9500      	str	r5, [sp, #0]
 800454e:	4623      	mov	r3, r4
 8004550:	465a      	mov	r2, fp
 8004552:	9603      	str	r6, [sp, #12]
 8004554:	4631      	mov	r1, r6
 8004556:	9802      	ldr	r0, [sp, #8]
 8004558:	4e38      	ldr	r6, [pc, #224]	; (800463c <sp_256_proj_point_add_qz1_8+0x22c>)
 800455a:	47b0      	blx	r6
        sp_256_mont_mul_8(t2, t2, q->x, p256_mod, p256_mp_mod);
 800455c:	9500      	str	r5, [sp, #0]
 800455e:	4623      	mov	r3, r4
 8004560:	4642      	mov	r2, r8
 8004562:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004566:	4641      	mov	r1, r8
 8004568:	4640      	mov	r0, r8
 800456a:	47b0      	blx	r6
        sp_256_mont_mul_8(t4, t4, q->y, p256_mod, p256_mp_mod);
 800456c:	9500      	str	r5, [sp, #0]
 800456e:	4623      	mov	r3, r4
 8004570:	9a06      	ldr	r2, [sp, #24]
 8004572:	9902      	ldr	r1, [sp, #8]
 8004574:	4608      	mov	r0, r1
 8004576:	47b0      	blx	r6
        sp_256_mont_sub_8(t2, t2, x, p256_mod);
 8004578:	4623      	mov	r3, r4
 800457a:	4652      	mov	r2, sl
 800457c:	4641      	mov	r1, r8
 800457e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004582:	4640      	mov	r0, r8
 8004584:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800464c <sp_256_proj_point_add_qz1_8+0x23c>
 8004588:	47c0      	blx	r8
        sp_256_mont_sub_8(t4, t4, y, p256_mod);
 800458a:	4623      	mov	r3, r4
 800458c:	9a07      	ldr	r2, [sp, #28]
 800458e:	9902      	ldr	r1, [sp, #8]
 8004590:	4608      	mov	r0, r1
 8004592:	47c0      	blx	r8
        sp_256_mont_mul_8(z, z, t2, p256_mod, p256_mp_mod);
 8004594:	9500      	str	r5, [sp, #0]
 8004596:	4623      	mov	r3, r4
 8004598:	9a03      	ldr	r2, [sp, #12]
 800459a:	4659      	mov	r1, fp
 800459c:	4658      	mov	r0, fp
 800459e:	47b0      	blx	r6
        sp_256_mont_sqr_8(t1, t4, p256_mod, p256_mp_mod);
 80045a0:	462b      	mov	r3, r5
 80045a2:	4622      	mov	r2, r4
 80045a4:	9902      	ldr	r1, [sp, #8]
 80045a6:	4638      	mov	r0, r7
 80045a8:	47c8      	blx	r9
        sp_256_mont_sqr_8(t5, t2, p256_mod, p256_mp_mod);
 80045aa:	462b      	mov	r3, r5
 80045ac:	4622      	mov	r2, r4
 80045ae:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80045b2:	4659      	mov	r1, fp
 80045b4:	9805      	ldr	r0, [sp, #20]
 80045b6:	47c8      	blx	r9
        sp_256_mont_mul_8(t3, x, t5, p256_mod, p256_mp_mod);
 80045b8:	9500      	str	r5, [sp, #0]
 80045ba:	4623      	mov	r3, r4
 80045bc:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80045c0:	464a      	mov	r2, r9
 80045c2:	4651      	mov	r1, sl
 80045c4:	9804      	ldr	r0, [sp, #16]
 80045c6:	47b0      	blx	r6
        sp_256_mont_mul_8(t5, t5, t2, p256_mod, p256_mp_mod);
 80045c8:	9500      	str	r5, [sp, #0]
 80045ca:	4623      	mov	r3, r4
 80045cc:	465a      	mov	r2, fp
 80045ce:	4649      	mov	r1, r9
 80045d0:	4648      	mov	r0, r9
 80045d2:	47b0      	blx	r6
        sp_256_mont_sub_8(x, t1, t5, p256_mod);
 80045d4:	4623      	mov	r3, r4
 80045d6:	464a      	mov	r2, r9
 80045d8:	4639      	mov	r1, r7
 80045da:	4650      	mov	r0, sl
 80045dc:	47c0      	blx	r8
        sp_256_mont_dbl_8(t1, t3, p256_mod);
 80045de:	4622      	mov	r2, r4
 80045e0:	f8dd b010 	ldr.w	fp, [sp, #16]
 80045e4:	4659      	mov	r1, fp
 80045e6:	4638      	mov	r0, r7
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <sp_256_proj_point_add_qz1_8+0x230>)
 80045ea:	4798      	blx	r3
        sp_256_mont_sub_8(x, x, t1, p256_mod);
 80045ec:	4623      	mov	r3, r4
 80045ee:	463a      	mov	r2, r7
 80045f0:	4651      	mov	r1, sl
 80045f2:	4650      	mov	r0, sl
 80045f4:	47c0      	blx	r8
        sp_256_mont_sub_8(t3, t3, x, p256_mod);
 80045f6:	4623      	mov	r3, r4
 80045f8:	4652      	mov	r2, sl
 80045fa:	4659      	mov	r1, fp
 80045fc:	4658      	mov	r0, fp
 80045fe:	47c0      	blx	r8
        sp_256_mont_mul_8(t3, t3, t4, p256_mod, p256_mp_mod);
 8004600:	9500      	str	r5, [sp, #0]
 8004602:	4623      	mov	r3, r4
 8004604:	9a02      	ldr	r2, [sp, #8]
 8004606:	4659      	mov	r1, fp
 8004608:	4658      	mov	r0, fp
 800460a:	47b0      	blx	r6
        sp_256_mont_mul_8(t5, t5, y, p256_mod, p256_mp_mod);
 800460c:	9500      	str	r5, [sp, #0]
 800460e:	4623      	mov	r3, r4
 8004610:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004614:	4652      	mov	r2, sl
 8004616:	4649      	mov	r1, r9
 8004618:	4648      	mov	r0, r9
 800461a:	47b0      	blx	r6
        sp_256_mont_sub_8(y, t3, t5, p256_mod);
 800461c:	4623      	mov	r3, r4
 800461e:	464a      	mov	r2, r9
 8004620:	4659      	mov	r1, fp
 8004622:	4650      	mov	r0, sl
 8004624:	47c0      	blx	r8
}
 8004626:	b00d      	add	sp, #52	; 0x34
 8004628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800462c:	08005474 	.word	0x08005474
 8004630:	08001f0d 	.word	0x08001f0d
 8004634:	08003619 	.word	0x08003619
 8004638:	08000155 	.word	0x08000155
 800463c:	08002229 	.word	0x08002229
 8004640:	08003305 	.word	0x08003305
 8004644:	08003759 	.word	0x08003759
 8004648:	080029d5 	.word	0x080029d5
 800464c:	0800347b 	.word	0x0800347b

08004650 <sp_256_ecc_mulmod_stripe_8>:
{
 8004650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004654:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8004658:	4683      	mov	fp, r0
 800465a:	4691      	mov	r9, r2
 800465c:	461d      	mov	r5, r3
 800465e:	f8dd a2f4 	ldr.w	sl, [sp, #756]	; 0x2f4
        XMEMCPY(p->z, p256_norm_mod, sizeof(p256_norm_mod));
 8004662:	4e4b      	ldr	r6, [pc, #300]	; (8004790 <sp_256_ecc_mulmod_stripe_8+0x140>)
 8004664:	2220      	movs	r2, #32
 8004666:	4631      	mov	r1, r6
 8004668:	a8a1      	add	r0, sp, #644	; 0x284
 800466a:	4c4a      	ldr	r4, [pc, #296]	; (8004794 <sp_256_ecc_mulmod_stripe_8+0x144>)
 800466c:	47a0      	blx	r4
        XMEMCPY(rt->z, p256_norm_mod, sizeof(p256_norm_mod));
 800466e:	2220      	movs	r2, #32
 8004670:	4631      	mov	r1, r6
 8004672:	a870      	add	r0, sp, #448	; 0x1c0
 8004674:	47a0      	blx	r4
        x = 63;
 8004676:	223f      	movs	r2, #63	; 0x3f
        y = 0;
 8004678:	2400      	movs	r4, #0
        for (j=0; j<4; j++) {
 800467a:	4621      	mov	r1, r4
 800467c:	e010      	b.n	80046a0 <sp_256_ecc_mulmod_stripe_8+0x50>
            y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 800467e:	115b      	asrs	r3, r3, #5
 8004680:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004684:	4256      	negs	r6, r2
 8004686:	f002 001f 	and.w	r0, r2, #31
 800468a:	f006 061f 	and.w	r6, r6, #31
 800468e:	bf58      	it	pl
 8004690:	4270      	negpl	r0, r6
 8004692:	40c3      	lsrs	r3, r0
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	408b      	lsls	r3, r1
 800469a:	431c      	orrs	r4, r3
            x += 64;
 800469c:	3240      	adds	r2, #64	; 0x40
        for (j=0; j<4; j++) {
 800469e:	3101      	adds	r1, #1
 80046a0:	2903      	cmp	r1, #3
 80046a2:	dc05      	bgt.n	80046b0 <sp_256_ecc_mulmod_stripe_8+0x60>
            y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 80046a4:	4613      	mov	r3, r2
 80046a6:	2a00      	cmp	r2, #0
 80046a8:	dae9      	bge.n	800467e <sp_256_ecc_mulmod_stripe_8+0x2e>
 80046aa:	f102 031f 	add.w	r3, r2, #31
 80046ae:	e7e6      	b.n	800467e <sp_256_ecc_mulmod_stripe_8+0x2e>
        if (ct) {
 80046b0:	f1ba 0f00 	cmp.w	sl, #0
 80046b4:	d00a      	beq.n	80046cc <sp_256_ecc_mulmod_stripe_8+0x7c>
            sp_256_get_entry_16_8(rt, table, y);
 80046b6:	4622      	mov	r2, r4
 80046b8:	4649      	mov	r1, r9
 80046ba:	a850      	add	r0, sp, #320	; 0x140
 80046bc:	4b36      	ldr	r3, [pc, #216]	; (8004798 <sp_256_ecc_mulmod_stripe_8+0x148>)
 80046be:	4798      	blx	r3
        rt->infinity = !y;
 80046c0:	fab4 f484 	clz	r4, r4
 80046c4:	0964      	lsrs	r4, r4, #5
 80046c6:	9480      	str	r4, [sp, #512]	; 0x200
        for (i=62; i>=0; i--) {
 80046c8:	263e      	movs	r6, #62	; 0x3e
 80046ca:	e03c      	b.n	8004746 <sp_256_ecc_mulmod_stripe_8+0xf6>
            XMEMCPY(rt->x, table[y].x, sizeof(table[y].x));
 80046cc:	eb09 1684 	add.w	r6, r9, r4, lsl #6
 80046d0:	2220      	movs	r2, #32
 80046d2:	4631      	mov	r1, r6
 80046d4:	a850      	add	r0, sp, #320	; 0x140
 80046d6:	4f2f      	ldr	r7, [pc, #188]	; (8004794 <sp_256_ecc_mulmod_stripe_8+0x144>)
 80046d8:	47b8      	blx	r7
            XMEMCPY(rt->y, table[y].y, sizeof(table[y].y));
 80046da:	2220      	movs	r2, #32
 80046dc:	18b1      	adds	r1, r6, r2
 80046de:	a860      	add	r0, sp, #384	; 0x180
 80046e0:	47b8      	blx	r7
 80046e2:	e7ed      	b.n	80046c0 <sp_256_ecc_mulmod_stripe_8+0x70>
                y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 80046e4:	115b      	asrs	r3, r3, #5
 80046e6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80046ea:	4257      	negs	r7, r2
 80046ec:	f002 001f 	and.w	r0, r2, #31
 80046f0:	f007 071f 	and.w	r7, r7, #31
 80046f4:	bf58      	it	pl
 80046f6:	4278      	negpl	r0, r7
 80046f8:	40c3      	lsrs	r3, r0
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	408b      	lsls	r3, r1
 8004700:	431c      	orrs	r4, r3
                x += 64;
 8004702:	3240      	adds	r2, #64	; 0x40
            for (j=0; j<4; j++) {
 8004704:	3101      	adds	r1, #1
 8004706:	2903      	cmp	r1, #3
 8004708:	dc05      	bgt.n	8004716 <sp_256_ecc_mulmod_stripe_8+0xc6>
                y |= (int)(((k[x / 32] >> (x % 32)) & 1) << j);
 800470a:	4613      	mov	r3, r2
 800470c:	2a00      	cmp	r2, #0
 800470e:	dae9      	bge.n	80046e4 <sp_256_ecc_mulmod_stripe_8+0x94>
 8004710:	f102 031f 	add.w	r3, r2, #31
 8004714:	e7e6      	b.n	80046e4 <sp_256_ecc_mulmod_stripe_8+0x94>
            sp_256_proj_point_dbl_8(rt, rt, t);
 8004716:	466a      	mov	r2, sp
 8004718:	a950      	add	r1, sp, #320	; 0x140
 800471a:	4608      	mov	r0, r1
 800471c:	4b1f      	ldr	r3, [pc, #124]	; (800479c <sp_256_ecc_mulmod_stripe_8+0x14c>)
 800471e:	4798      	blx	r3
            if (ct) {
 8004720:	f1ba 0f00 	cmp.w	sl, #0
 8004724:	d015      	beq.n	8004752 <sp_256_ecc_mulmod_stripe_8+0x102>
                sp_256_get_entry_16_8(p, table, y);
 8004726:	4622      	mov	r2, r4
 8004728:	4649      	mov	r1, r9
 800472a:	a881      	add	r0, sp, #516	; 0x204
 800472c:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <sp_256_ecc_mulmod_stripe_8+0x148>)
 800472e:	4798      	blx	r3
            p->infinity = !y;
 8004730:	fab4 f484 	clz	r4, r4
 8004734:	0964      	lsrs	r4, r4, #5
 8004736:	94b1      	str	r4, [sp, #708]	; 0x2c4
            sp_256_proj_point_add_qz1_8(rt, rt, p, t);
 8004738:	466b      	mov	r3, sp
 800473a:	aa81      	add	r2, sp, #516	; 0x204
 800473c:	a950      	add	r1, sp, #320	; 0x140
 800473e:	4608      	mov	r0, r1
 8004740:	4c17      	ldr	r4, [pc, #92]	; (80047a0 <sp_256_ecc_mulmod_stripe_8+0x150>)
 8004742:	47a0      	blx	r4
        for (i=62; i>=0; i--) {
 8004744:	3e01      	subs	r6, #1
 8004746:	2e00      	cmp	r6, #0
 8004748:	db10      	blt.n	800476c <sp_256_ecc_mulmod_stripe_8+0x11c>
            x = i;
 800474a:	4632      	mov	r2, r6
            y = 0;
 800474c:	2400      	movs	r4, #0
            for (j=0; j<4; j++) {
 800474e:	4621      	mov	r1, r4
 8004750:	e7d9      	b.n	8004706 <sp_256_ecc_mulmod_stripe_8+0xb6>
                XMEMCPY(p->x, table[y].x, sizeof(table[y].x));
 8004752:	eb09 1784 	add.w	r7, r9, r4, lsl #6
 8004756:	2220      	movs	r2, #32
 8004758:	4639      	mov	r1, r7
 800475a:	a881      	add	r0, sp, #516	; 0x204
 800475c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8004794 <sp_256_ecc_mulmod_stripe_8+0x144>
 8004760:	47c0      	blx	r8
                XMEMCPY(p->y, table[y].y, sizeof(table[y].y));
 8004762:	2220      	movs	r2, #32
 8004764:	18b9      	adds	r1, r7, r2
 8004766:	a891      	add	r0, sp, #580	; 0x244
 8004768:	47c0      	blx	r8
 800476a:	e7e1      	b.n	8004730 <sp_256_ecc_mulmod_stripe_8+0xe0>
        if (map != 0) {
 800476c:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 800476e:	b14b      	cbz	r3, 8004784 <sp_256_ecc_mulmod_stripe_8+0x134>
            sp_256_map_8(r, rt, t);
 8004770:	466a      	mov	r2, sp
 8004772:	a950      	add	r1, sp, #320	; 0x140
 8004774:	4658      	mov	r0, fp
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <sp_256_ecc_mulmod_stripe_8+0x154>)
 8004778:	4798      	blx	r3
}
 800477a:	2000      	movs	r0, #0
 800477c:	f50d 7d33 	add.w	sp, sp, #716	; 0x2cc
 8004780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            XMEMCPY(r, rt, sizeof(sp_point_256));
 8004784:	22c4      	movs	r2, #196	; 0xc4
 8004786:	a950      	add	r1, sp, #320	; 0x140
 8004788:	4658      	mov	r0, fp
 800478a:	4b02      	ldr	r3, [pc, #8]	; (8004794 <sp_256_ecc_mulmod_stripe_8+0x144>)
 800478c:	4798      	blx	r3
 800478e:	e7f4      	b.n	800477a <sp_256_ecc_mulmod_stripe_8+0x12a>
 8004790:	080054b4 	.word	0x080054b4
 8004794:	080001a5 	.word	0x080001a5
 8004798:	08003955 	.word	0x08003955
 800479c:	08003619 	.word	0x08003619
 80047a0:	08004411 	.word	0x08004411
 80047a4:	08004065 	.word	0x08004065

080047a8 <sp_256_ecc_mulmod_base_8>:
{
 80047a8:	b510      	push	{r4, lr}
 80047aa:	b084      	sub	sp, #16
    return sp_256_ecc_mulmod_stripe_8(r, &p256_base, p256_table,
 80047ac:	9c06      	ldr	r4, [sp, #24]
 80047ae:	9402      	str	r4, [sp, #8]
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	9200      	str	r2, [sp, #0]
 80047b4:	460b      	mov	r3, r1
 80047b6:	4a03      	ldr	r2, [pc, #12]	; (80047c4 <sp_256_ecc_mulmod_base_8+0x1c>)
 80047b8:	4903      	ldr	r1, [pc, #12]	; (80047c8 <sp_256_ecc_mulmod_base_8+0x20>)
 80047ba:	4c04      	ldr	r4, [pc, #16]	; (80047cc <sp_256_ecc_mulmod_base_8+0x24>)
 80047bc:	47a0      	blx	r4
}
 80047be:	b004      	add	sp, #16
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	bf00      	nop
 80047c4:	08005534 	.word	0x08005534
 80047c8:	080053b0 	.word	0x080053b0
 80047cc:	08004651 	.word	0x08004651

080047d0 <sp_256_to_mp>:
{
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	4605      	mov	r5, r0
 80047d4:	460c      	mov	r4, r1
    err = mp_grow(r, (256 + DIGIT_BIT - 1) / DIGIT_BIT);
 80047d6:	2108      	movs	r1, #8
 80047d8:	4620      	mov	r0, r4
 80047da:	4b0c      	ldr	r3, [pc, #48]	; (800480c <sp_256_to_mp+0x3c>)
 80047dc:	4798      	blx	r3
    if (err == MP_OKAY) { /*lint !e774 case where err is always MP_OKAY*/
 80047de:	4606      	mov	r6, r0
 80047e0:	b108      	cbz	r0, 80047e6 <sp_256_to_mp+0x16>
}
 80047e2:	4630      	mov	r0, r6
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
        XMEMCPY(r->dp, a, sizeof(sp_digit) * 8);
 80047e6:	2220      	movs	r2, #32
 80047e8:	4629      	mov	r1, r5
 80047ea:	f104 0008 	add.w	r0, r4, #8
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <sp_256_to_mp+0x40>)
 80047f0:	4798      	blx	r3
        mp_clamp(r);
 80047f2:	2307      	movs	r3, #7
 80047f4:	e000      	b.n	80047f8 <sp_256_to_mp+0x28>
 80047f6:	3b01      	subs	r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	db04      	blt.n	8004806 <sp_256_to_mp+0x36>
 80047fc:	1c9a      	adds	r2, r3, #2
 80047fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004802:	2a00      	cmp	r2, #0
 8004804:	d0f7      	beq.n	80047f6 <sp_256_to_mp+0x26>
 8004806:	3301      	adds	r3, #1
 8004808:	6023      	str	r3, [r4, #0]
    return err;
 800480a:	e7ea      	b.n	80047e2 <sp_256_to_mp+0x12>
 800480c:	0800138d 	.word	0x0800138d
 8004810:	080001a5 	.word	0x080001a5

08004814 <sp_256_point_to_ecc_point_8>:
{
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4604      	mov	r4, r0
 8004818:	460d      	mov	r5, r1
    err = sp_256_to_mp(p->x, pm->x);
 800481a:	4b09      	ldr	r3, [pc, #36]	; (8004840 <sp_256_point_to_ecc_point_8+0x2c>)
 800481c:	4798      	blx	r3
    if (err == MP_OKAY) {
 800481e:	b108      	cbz	r0, 8004824 <sp_256_point_to_ecc_point_8+0x10>
    if (err == MP_OKAY) {
 8004820:	b138      	cbz	r0, 8004832 <sp_256_point_to_ecc_point_8+0x1e>
}
 8004822:	bd38      	pop	{r3, r4, r5, pc}
        err = sp_256_to_mp(p->y, pm->y);
 8004824:	f105 0150 	add.w	r1, r5, #80	; 0x50
 8004828:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800482c:	4b04      	ldr	r3, [pc, #16]	; (8004840 <sp_256_point_to_ecc_point_8+0x2c>)
 800482e:	4798      	blx	r3
 8004830:	e7f6      	b.n	8004820 <sp_256_point_to_ecc_point_8+0xc>
        err = sp_256_to_mp(p->z, pm->z);
 8004832:	f105 01a0 	add.w	r1, r5, #160	; 0xa0
 8004836:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800483a:	4b01      	ldr	r3, [pc, #4]	; (8004840 <sp_256_point_to_ecc_point_8+0x2c>)
 800483c:	4798      	blx	r3
    return err;
 800483e:	e7f0      	b.n	8004822 <sp_256_point_to_ecc_point_8+0xe>
 8004840:	080047d1 	.word	0x080047d1

08004844 <sp_256_calc_vfy_point_8>:
 * heap  Heap to use for allocation.
 * returns MEMORY_E when memory allocation fails and MP_OKAY on success.
 */
static int sp_256_calc_vfy_point_8(sp_point_256* p1, sp_point_256* p2,
    sp_digit* s, sp_digit* u1, sp_digit* u2, sp_digit* tmp, void* heap)
{
 8004844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004848:	b09f      	sub	sp, #124	; 0x7c
 800484a:	4682      	mov	sl, r0
 800484c:	9102      	str	r1, [sp, #8]
 800484e:	4614      	mov	r4, r2
 8004850:	4698      	mov	r8, r3
    {
        sp_256_mod_inv_8(s, s, p256_order);
    }
#endif /* !WOLFSSL_SP_SMALL */
    {
        sp_256_mul_8(s, s, p256_norm_order);
 8004852:	4a53      	ldr	r2, [pc, #332]	; (80049a0 <sp_256_calc_vfy_point_8+0x15c>)
 8004854:	4621      	mov	r1, r4
 8004856:	4620      	mov	r0, r4
 8004858:	4b52      	ldr	r3, [pc, #328]	; (80049a4 <sp_256_calc_vfy_point_8+0x160>)
 800485a:	4798      	blx	r3
    XMEMCPY(t1, a, sizeof(*t1) * 2 * 8);
 800485c:	2240      	movs	r2, #64	; 0x40
 800485e:	4621      	mov	r1, r4
 8004860:	a80e      	add	r0, sp, #56	; 0x38
 8004862:	4b51      	ldr	r3, [pc, #324]	; (80049a8 <sp_256_calc_vfy_point_8+0x164>)
 8004864:	4798      	blx	r3
    for (i=7; i>=0; i--) {
 8004866:	2707      	movs	r7, #7
 8004868:	46a3      	mov	fp, r4
 800486a:	f8cd 800c 	str.w	r8, [sp, #12]
 800486e:	e044      	b.n	80048fa <sp_256_calc_vfy_point_8+0xb6>
        sp_digit hi = t1[8 + i] - (t1[8 + i] == div);
 8004870:	f107 0508 	add.w	r5, r7, #8
 8004874:	ab1e      	add	r3, sp, #120	; 0x78
 8004876:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800487a:	f855 0c40 	ldr.w	r0, [r5, #-64]
        r1 = div_256_word_8(hi, t1[8 + i - 1], div);
 800487e:	1dfb      	adds	r3, r7, #7
 8004880:	aa1e      	add	r2, sp, #120	; 0x78
 8004882:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800488a:	f853 1c40 	ldr.w	r1, [r3, #-64]
 800488e:	4290      	cmp	r0, r2
 8004890:	bf08      	it	eq
 8004892:	3801      	subeq	r0, #1
 8004894:	4b45      	ldr	r3, [pc, #276]	; (80049ac <sp_256_calc_vfy_point_8+0x168>)
 8004896:	4798      	blx	r3
 8004898:	4602      	mov	r2, r0
        sp_256_mul_d_8(t2, d, r1);
 800489a:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80049bc <sp_256_calc_vfy_point_8+0x178>
 800489e:	4649      	mov	r1, r9
 80048a0:	a805      	add	r0, sp, #20
 80048a2:	4b43      	ldr	r3, [pc, #268]	; (80049b0 <sp_256_calc_vfy_point_8+0x16c>)
 80048a4:	4798      	blx	r3
        t1[8 + i] += sp_256_sub_in_place_8(&t1[i], t2);
 80048a6:	ab0e      	add	r3, sp, #56	; 0x38
 80048a8:	eb03 0687 	add.w	r6, r3, r7, lsl #2
 80048ac:	a905      	add	r1, sp, #20
 80048ae:	4630      	mov	r0, r6
 80048b0:	4b40      	ldr	r3, [pc, #256]	; (80049b4 <sp_256_calc_vfy_point_8+0x170>)
 80048b2:	4798      	blx	r3
 80048b4:	f855 2c40 	ldr.w	r2, [r5, #-64]
 80048b8:	4402      	add	r2, r0
        t1[8 + i] -= t2[8];
 80048ba:	980d      	ldr	r0, [sp, #52]	; 0x34
 80048bc:	1a12      	subs	r2, r2, r0
 80048be:	f845 2c40 	str.w	r2, [r5, #-64]
        sp_256_mask_8(t2, d, t1[8 + i]);
 80048c2:	4649      	mov	r1, r9
 80048c4:	a805      	add	r0, sp, #20
 80048c6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80049e0 <sp_256_calc_vfy_point_8+0x19c>
 80048ca:	47c0      	blx	r8
        t1[8 + i] += sp_256_add_8(&t1[i], &t1[i], t2);
 80048cc:	aa05      	add	r2, sp, #20
 80048ce:	4631      	mov	r1, r6
 80048d0:	4630      	mov	r0, r6
 80048d2:	4c39      	ldr	r4, [pc, #228]	; (80049b8 <sp_256_calc_vfy_point_8+0x174>)
 80048d4:	47a0      	blx	r4
 80048d6:	f855 2c40 	ldr.w	r2, [r5, #-64]
 80048da:	4402      	add	r2, r0
 80048dc:	f845 2c40 	str.w	r2, [r5, #-64]
        sp_256_mask_8(t2, d, t1[8 + i]);
 80048e0:	4649      	mov	r1, r9
 80048e2:	a805      	add	r0, sp, #20
 80048e4:	47c0      	blx	r8
        t1[8 + i] += sp_256_add_8(&t1[i], &t1[i], t2);
 80048e6:	aa05      	add	r2, sp, #20
 80048e8:	4631      	mov	r1, r6
 80048ea:	4630      	mov	r0, r6
 80048ec:	47a0      	blx	r4
 80048ee:	f855 3c40 	ldr.w	r3, [r5, #-64]
 80048f2:	4403      	add	r3, r0
 80048f4:	f845 3c40 	str.w	r3, [r5, #-64]
    for (i=7; i>=0; i--) {
 80048f8:	3f01      	subs	r7, #1
 80048fa:	2f00      	cmp	r7, #0
 80048fc:	dab8      	bge.n	8004870 <sp_256_calc_vfy_point_8+0x2c>
 80048fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
    r1 = sp_256_cmp_8(t1, d) >= 0;
 8004902:	4d2e      	ldr	r5, [pc, #184]	; (80049bc <sp_256_calc_vfy_point_8+0x178>)
 8004904:	4629      	mov	r1, r5
 8004906:	a80e      	add	r0, sp, #56	; 0x38
 8004908:	4b2d      	ldr	r3, [pc, #180]	; (80049c0 <sp_256_calc_vfy_point_8+0x17c>)
 800490a:	4798      	blx	r3
 800490c:	43c3      	mvns	r3, r0
 800490e:	0fdb      	lsrs	r3, r3, #31
    sp_256_cond_sub_8(r, t1, d, (sp_digit)0 - r1);
 8004910:	425b      	negs	r3, r3
 8004912:	462a      	mov	r2, r5
 8004914:	a90e      	add	r1, sp, #56	; 0x38
 8004916:	4658      	mov	r0, fp
 8004918:	4d2a      	ldr	r5, [pc, #168]	; (80049c4 <sp_256_calc_vfy_point_8+0x180>)
 800491a:	47a8      	blx	r5
    err = sp_256_mod_8(s, s, p256_order);
    if (err == MP_OKAY) {
        sp_256_norm_8(s);
#ifdef WOLFSSL_SP_SMALL
        {
            sp_256_mont_inv_order_8(s, s, tmp);
 800491c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800491e:	4659      	mov	r1, fp
 8004920:	4658      	mov	r0, fp
 8004922:	4b29      	ldr	r3, [pc, #164]	; (80049c8 <sp_256_calc_vfy_point_8+0x184>)
 8004924:	4798      	blx	r3
            sp_256_mont_mul_order_8(u1, u1, s);
 8004926:	465a      	mov	r2, fp
 8004928:	4641      	mov	r1, r8
 800492a:	4640      	mov	r0, r8
 800492c:	4d27      	ldr	r5, [pc, #156]	; (80049cc <sp_256_calc_vfy_point_8+0x188>)
 800492e:	47a8      	blx	r5
            sp_256_mont_mul_order_8(u2, u2, s);
 8004930:	465a      	mov	r2, fp
 8004932:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8004934:	4608      	mov	r0, r1
 8004936:	47a8      	blx	r5
            sp_256_mont_mul_order_8(u1, u1, s);
            sp_256_mont_mul_order_8(u2, u2, s);
        }

#endif /* WOLFSSL_SP_SMALL */
            err = sp_256_ecc_mulmod_base_8(p1, u1, 0, 0, heap);
 8004938:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2300      	movs	r3, #0
 800493e:	461a      	mov	r2, r3
 8004940:	4641      	mov	r1, r8
 8004942:	4650      	mov	r0, sl
 8004944:	4c22      	ldr	r4, [pc, #136]	; (80049d0 <sp_256_calc_vfy_point_8+0x18c>)
 8004946:	47a0      	blx	r4
    }
    if ((err == MP_OKAY) && sp_256_iszero_8(p1->z)) {
 8004948:	4604      	mov	r4, r0
 800494a:	b938      	cbnz	r0, 800495c <sp_256_calc_vfy_point_8+0x118>
 800494c:	f10a 0080 	add.w	r0, sl, #128	; 0x80
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <sp_256_calc_vfy_point_8+0x190>)
 8004952:	4798      	blx	r3
 8004954:	b110      	cbz	r0, 800495c <sp_256_calc_vfy_point_8+0x118>
        p1->infinity = 1;
 8004956:	2301      	movs	r3, #1
 8004958:	f8ca 30c0 	str.w	r3, [sl, #192]	; 0xc0
    }
    if (err == MP_OKAY) {
 800495c:	b174      	cbz	r4, 800497c <sp_256_calc_vfy_point_8+0x138>
            err = sp_256_ecc_mulmod_8(p2, p2, u2, 0, 0, heap);
    }
    if ((err == MP_OKAY) && sp_256_iszero_8(p2->z)) {
 800495e:	b944      	cbnz	r4, 8004972 <sp_256_calc_vfy_point_8+0x12e>
 8004960:	9d02      	ldr	r5, [sp, #8]
 8004962:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8004966:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <sp_256_calc_vfy_point_8+0x190>)
 8004968:	4798      	blx	r3
 800496a:	b110      	cbz	r0, 8004972 <sp_256_calc_vfy_point_8+0x12e>
        p2->infinity = 1;
 800496c:	2301      	movs	r3, #1
 800496e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
    }

    if (err == MP_OKAY) {
 8004972:	b174      	cbz	r4, 8004992 <sp_256_calc_vfy_point_8+0x14e>
        sp_256_add_points_8(p1, p2, tmp);
    }

    return err;
}
 8004974:	4620      	mov	r0, r4
 8004976:	b01f      	add	sp, #124	; 0x7c
 8004978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            err = sp_256_ecc_mulmod_8(p2, p2, u2, 0, 0, heap);
 800497c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800497e:	9301      	str	r3, [sp, #4]
 8004980:	2300      	movs	r3, #0
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004986:	9902      	ldr	r1, [sp, #8]
 8004988:	4608      	mov	r0, r1
 800498a:	4c13      	ldr	r4, [pc, #76]	; (80049d8 <sp_256_calc_vfy_point_8+0x194>)
 800498c:	47a0      	blx	r4
 800498e:	4604      	mov	r4, r0
 8004990:	e7e5      	b.n	800495e <sp_256_calc_vfy_point_8+0x11a>
        sp_256_add_points_8(p1, p2, tmp);
 8004992:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004994:	9902      	ldr	r1, [sp, #8]
 8004996:	4650      	mov	r0, sl
 8004998:	4b10      	ldr	r3, [pc, #64]	; (80049dc <sp_256_calc_vfy_point_8+0x198>)
 800499a:	4798      	blx	r3
    return err;
 800499c:	e7ea      	b.n	8004974 <sp_256_calc_vfy_point_8+0x130>
 800499e:	bf00      	nop
 80049a0:	080054d4 	.word	0x080054d4
 80049a4:	08001549 	.word	0x08001549
 80049a8:	080001a5 	.word	0x080001a5
 80049ac:	08003b4f 	.word	0x08003b4f
 80049b0:	08003b0d 	.word	0x08003b0d
 80049b4:	08003ad3 	.word	0x08003ad3
 80049b8:	08001ecd 	.word	0x08001ecd
 80049bc:	080054f4 	.word	0x080054f4
 80049c0:	08002fcd 	.word	0x08002fcd
 80049c4:	08003023 	.word	0x08003023
 80049c8:	08003ce1 	.word	0x08003ce1
 80049cc:	08003be1 	.word	0x08003be1
 80049d0:	080047a9 	.word	0x080047a9
 80049d4:	08003a53 	.word	0x08003a53
 80049d8:	080043f9 	.word	0x080043f9
 80049dc:	08003ff5 	.word	0x08003ff5
 80049e0:	08003bc3 	.word	0x08003bc3

080049e4 <sp_ecc_mulmod_base_256>:
{
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	b0bc      	sub	sp, #240	; 0xf0
 80049e8:	460e      	mov	r6, r1
 80049ea:	4614      	mov	r4, r2
 80049ec:	461d      	mov	r5, r3
        sp_256_from_mp(k, 8, km);
 80049ee:	4602      	mov	r2, r0
 80049f0:	2108      	movs	r1, #8
 80049f2:	a803      	add	r0, sp, #12
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <sp_ecc_mulmod_base_256+0x34>)
 80049f6:	4798      	blx	r3
            err = sp_256_ecc_mulmod_base_8(point, k, map, 1, heap);
 80049f8:	9500      	str	r5, [sp, #0]
 80049fa:	2301      	movs	r3, #1
 80049fc:	4622      	mov	r2, r4
 80049fe:	a903      	add	r1, sp, #12
 8004a00:	a80b      	add	r0, sp, #44	; 0x2c
 8004a02:	4c06      	ldr	r4, [pc, #24]	; (8004a1c <sp_ecc_mulmod_base_256+0x38>)
 8004a04:	47a0      	blx	r4
    if (err == MP_OKAY) {
 8004a06:	b108      	cbz	r0, 8004a0c <sp_ecc_mulmod_base_256+0x28>
}
 8004a08:	b03c      	add	sp, #240	; 0xf0
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
        err = sp_256_point_to_ecc_point_8(point, r);
 8004a0c:	4631      	mov	r1, r6
 8004a0e:	a80b      	add	r0, sp, #44	; 0x2c
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <sp_ecc_mulmod_base_256+0x3c>)
 8004a12:	4798      	blx	r3
    return err;
 8004a14:	e7f8      	b.n	8004a08 <sp_ecc_mulmod_base_256+0x24>
 8004a16:	bf00      	nop
 8004a18:	08003c29 	.word	0x08003c29
 8004a1c:	080047a9 	.word	0x080047a9
 8004a20:	08004815 	.word	0x08004815

08004a24 <sp_ecc_verify_256>:
#endif /* WOLFSSL_SP_NONBLOCK */

int sp_ecc_verify_256(const byte* hash, word32 hashLen, const mp_int* pX,
    const mp_int* pY, const mp_int* pZ, const mp_int* rm, const mp_int* sm,
    int* res, void* heap)
{
 8004a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a28:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
 8004a2c:	4690      	mov	r8, r2
 8004a2e:	461f      	mov	r7, r3
 8004a30:	9ded      	ldr	r5, [sp, #948]	; 0x3b4
        u2  = u1 + 2 * 8;
        s   = u1 + 4 * 8;
        tmp = u1 + 6 * 8;
        p2 = p1 + 1;

        if (hashLen > 32U) {
 8004a32:	2920      	cmp	r1, #32
 8004a34:	d900      	bls.n	8004a38 <sp_ecc_verify_256+0x14>
            hashLen = 32U;
 8004a36:	2120      	movs	r1, #32
        }

        sp_256_from_bin(u1, 8, hash, (int)hashLen);
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	2108      	movs	r1, #8
 8004a3e:	a866      	add	r0, sp, #408	; 0x198
 8004a40:	4c41      	ldr	r4, [pc, #260]	; (8004b48 <sp_ecc_verify_256+0x124>)
 8004a42:	47a0      	blx	r4
        sp_256_from_mp(u2, 8, rm);
 8004a44:	ae76      	add	r6, sp, #472	; 0x1d8
 8004a46:	462a      	mov	r2, r5
 8004a48:	2108      	movs	r1, #8
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	4c3f      	ldr	r4, [pc, #252]	; (8004b4c <sp_ecc_verify_256+0x128>)
 8004a4e:	47a0      	blx	r4
        sp_256_from_mp(s, 8, sm);
 8004a50:	9aee      	ldr	r2, [sp, #952]	; 0x3b8
 8004a52:	2108      	movs	r1, #8
 8004a54:	a886      	add	r0, sp, #536	; 0x218
 8004a56:	47a0      	blx	r4
        sp_256_from_mp(p2->x, 8, pX);
 8004a58:	4642      	mov	r2, r8
 8004a5a:	2108      	movs	r1, #8
 8004a5c:	a835      	add	r0, sp, #212	; 0xd4
 8004a5e:	47a0      	blx	r4
        sp_256_from_mp(p2->y, 8, pY);
 8004a60:	463a      	mov	r2, r7
 8004a62:	2108      	movs	r1, #8
 8004a64:	a845      	add	r0, sp, #276	; 0x114
 8004a66:	47a0      	blx	r4
        sp_256_from_mp(p2->z, 8, pZ);
 8004a68:	9aec      	ldr	r2, [sp, #944]	; 0x3b0
 8004a6a:	2108      	movs	r1, #8
 8004a6c:	a855      	add	r0, sp, #340	; 0x154
 8004a6e:	47a0      	blx	r4

        err = sp_256_calc_vfy_point_8(p1, p2, s, u1, u2, tmp, heap);
 8004a70:	9bf0      	ldr	r3, [sp, #960]	; 0x3c0
 8004a72:	9302      	str	r3, [sp, #8]
 8004a74:	ab96      	add	r3, sp, #600	; 0x258
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	9600      	str	r6, [sp, #0]
 8004a7a:	ab66      	add	r3, sp, #408	; 0x198
 8004a7c:	aa86      	add	r2, sp, #536	; 0x218
 8004a7e:	a935      	add	r1, sp, #212	; 0xd4
 8004a80:	a804      	add	r0, sp, #16
 8004a82:	4c33      	ldr	r4, [pc, #204]	; (8004b50 <sp_ecc_verify_256+0x12c>)
 8004a84:	47a0      	blx	r4
    }
    if (err == MP_OKAY) {
 8004a86:	4604      	mov	r4, r0
 8004a88:	b128      	cbz	r0, 8004a96 <sp_ecc_verify_256+0x72>
        /* Reload r and convert to Montgomery form. */
        sp_256_from_mp(u2, 8, rm);
        err = sp_256_mod_mul_norm_8(u2, u2, p256_mod);
    }

    if (err == MP_OKAY) {
 8004a8a:	b184      	cbz	r4, 8004aae <sp_ecc_verify_256+0x8a>
    if (p1 != NULL)
        XFREE(p1, heap, DYNAMIC_TYPE_ECC);
#endif

    return err;
}
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f50d 7d66 	add.w	sp, sp, #920	; 0x398
 8004a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sp_256_from_mp(u2, 8, rm);
 8004a96:	462a      	mov	r2, r5
 8004a98:	2108      	movs	r1, #8
 8004a9a:	a876      	add	r0, sp, #472	; 0x1d8
 8004a9c:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <sp_ecc_verify_256+0x128>)
 8004a9e:	4798      	blx	r3
        err = sp_256_mod_mul_norm_8(u2, u2, p256_mod);
 8004aa0:	4a2c      	ldr	r2, [pc, #176]	; (8004b54 <sp_ecc_verify_256+0x130>)
 8004aa2:	a976      	add	r1, sp, #472	; 0x1d8
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <sp_ecc_verify_256+0x134>)
 8004aa8:	4798      	blx	r3
 8004aaa:	4604      	mov	r4, r0
 8004aac:	e7ed      	b.n	8004a8a <sp_ecc_verify_256+0x66>
        sp_256_mont_sqr_8(p1->z, p1->z, p256_mod, p256_mp_mod);
 8004aae:	4f29      	ldr	r7, [pc, #164]	; (8004b54 <sp_ecc_verify_256+0x130>)
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	463a      	mov	r2, r7
 8004ab4:	a924      	add	r1, sp, #144	; 0x90
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	4e28      	ldr	r6, [pc, #160]	; (8004b5c <sp_ecc_verify_256+0x138>)
 8004aba:	47b0      	blx	r6
        sp_256_mont_mul_8(u1, u2, p1->z, p256_mod, p256_mp_mod);
 8004abc:	2301      	movs	r3, #1
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	463b      	mov	r3, r7
 8004ac2:	aa24      	add	r2, sp, #144	; 0x90
 8004ac4:	a976      	add	r1, sp, #472	; 0x1d8
 8004ac6:	a866      	add	r0, sp, #408	; 0x198
 8004ac8:	4f25      	ldr	r7, [pc, #148]	; (8004b60 <sp_ecc_verify_256+0x13c>)
 8004aca:	47b8      	blx	r7
        *res = (int)(sp_256_cmp_8(p1->x, u1) == 0);
 8004acc:	a966      	add	r1, sp, #408	; 0x198
 8004ace:	a804      	add	r0, sp, #16
 8004ad0:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <sp_ecc_verify_256+0x140>)
 8004ad2:	4798      	blx	r3
 8004ad4:	fab0 f780 	clz	r7, r0
 8004ad8:	097f      	lsrs	r7, r7, #5
 8004ada:	9bef      	ldr	r3, [sp, #956]	; 0x3bc
 8004adc:	601f      	str	r7, [r3, #0]
        if (*res == 0) {
 8004ade:	b307      	cbz	r7, 8004b22 <sp_ecc_verify_256+0xfe>
    int32_t c = 0;
 8004ae0:	4627      	mov	r7, r4
        if ((*res == 0) && (c < 0)) {
 8004ae2:	9bef      	ldr	r3, [sp, #956]	; 0x3bc
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1d0      	bne.n	8004a8c <sp_ecc_verify_256+0x68>
 8004aea:	2f00      	cmp	r7, #0
 8004aec:	dace      	bge.n	8004a8c <sp_ecc_verify_256+0x68>
            err = sp_256_mod_mul_norm_8(u2, u2, p256_mod);
 8004aee:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <sp_ecc_verify_256+0x130>)
 8004af0:	a976      	add	r1, sp, #472	; 0x1d8
 8004af2:	4608      	mov	r0, r1
 8004af4:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <sp_ecc_verify_256+0x134>)
 8004af6:	4798      	blx	r3
            if (err == MP_OKAY) {
 8004af8:	4604      	mov	r4, r0
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d1c6      	bne.n	8004a8c <sp_ecc_verify_256+0x68>
                sp_256_mont_mul_8(u1, u2, p1->z, p256_mod,
 8004afe:	2301      	movs	r3, #1
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <sp_ecc_verify_256+0x130>)
 8004b04:	aa24      	add	r2, sp, #144	; 0x90
 8004b06:	a976      	add	r1, sp, #472	; 0x1d8
 8004b08:	a866      	add	r0, sp, #408	; 0x198
 8004b0a:	4d15      	ldr	r5, [pc, #84]	; (8004b60 <sp_ecc_verify_256+0x13c>)
 8004b0c:	47a8      	blx	r5
                *res = (sp_256_cmp_8(p1->x, u1) == 0);
 8004b0e:	a966      	add	r1, sp, #408	; 0x198
 8004b10:	a804      	add	r0, sp, #16
 8004b12:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <sp_ecc_verify_256+0x140>)
 8004b14:	4798      	blx	r3
 8004b16:	fab0 f080 	clz	r0, r0
 8004b1a:	0940      	lsrs	r0, r0, #5
 8004b1c:	9bef      	ldr	r3, [sp, #956]	; 0x3bc
 8004b1e:	6018      	str	r0, [r3, #0]
    return err;
 8004b20:	e7b4      	b.n	8004a8c <sp_ecc_verify_256+0x68>
            sp_256_from_mp(u2, 8, rm);
 8004b22:	462a      	mov	r2, r5
 8004b24:	2108      	movs	r1, #8
 8004b26:	a876      	add	r0, sp, #472	; 0x1d8
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <sp_ecc_verify_256+0x128>)
 8004b2a:	4798      	blx	r3
            carry = sp_256_add_8(u2, u2, p256_order);
 8004b2c:	4a0e      	ldr	r2, [pc, #56]	; (8004b68 <sp_ecc_verify_256+0x144>)
 8004b2e:	a976      	add	r1, sp, #472	; 0x1d8
 8004b30:	4608      	mov	r0, r1
 8004b32:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <sp_ecc_verify_256+0x148>)
 8004b34:	4798      	blx	r3
            if (carry == 0) {
 8004b36:	2800      	cmp	r0, #0
 8004b38:	d1d3      	bne.n	8004ae2 <sp_ecc_verify_256+0xbe>
                c = sp_256_cmp_8(u2, p256_mod);
 8004b3a:	4906      	ldr	r1, [pc, #24]	; (8004b54 <sp_ecc_verify_256+0x130>)
 8004b3c:	a876      	add	r0, sp, #472	; 0x1d8
 8004b3e:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <sp_ecc_verify_256+0x140>)
 8004b40:	4798      	blx	r3
 8004b42:	4607      	mov	r7, r0
 8004b44:	e7cd      	b.n	8004ae2 <sp_ecc_verify_256+0xbe>
 8004b46:	bf00      	nop
 8004b48:	08003a79 	.word	0x08003a79
 8004b4c:	08003c29 	.word	0x08003c29
 8004b50:	08004845 	.word	0x08004845
 8004b54:	08005474 	.word	0x08005474
 8004b58:	08001f3f 	.word	0x08001f3f
 8004b5c:	080029d5 	.word	0x080029d5
 8004b60:	08002229 	.word	0x08002229
 8004b64:	08002fcd 	.word	0x08002fcd
 8004b68:	080054f4 	.word	0x080054f4
 8004b6c:	08001ecd 	.word	0x08001ecd

08004b70 <wc_ecc_curve_cache_free_spec_item>:
    #define FREE_CURVE_SPECS()
#endif /* ECC_CACHE_CURVE */

static void wc_ecc_curve_cache_free_spec_item(ecc_curve_spec* curve, mp_int* item,
    byte mask)
{
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4604      	mov	r4, r0
 8004b74:	4615      	mov	r5, r2
    if (item) {
 8004b76:	b111      	cbz	r1, 8004b7e <wc_ecc_curve_cache_free_spec_item+0xe>
 8004b78:	4608      	mov	r0, r1
    #ifdef HAVE_WOLF_BIGINT
        wc_bigint_free(&item->raw);
    #endif
        mp_clear(item);
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <wc_ecc_curve_cache_free_spec_item+0x1c>)
 8004b7c:	4798      	blx	r3
    }
    curve->load_mask &= ~mask;
 8004b7e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004b82:	ea23 0205 	bic.w	r2, r3, r5
 8004b86:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
}
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	080013c1 	.word	0x080013c1

08004b90 <wc_ecc_curve_cache_free_spec>:
static void wc_ecc_curve_cache_free_spec(ecc_curve_spec* curve)
{
    if (curve == NULL) {
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d03b      	beq.n	8004c0c <wc_ecc_curve_cache_free_spec+0x7c>
{
 8004b94:	b510      	push	{r4, lr}
 8004b96:	4604      	mov	r4, r0
        return;
    }

    if (curve->load_mask & ECC_CURVE_FIELD_PRIME)
 8004b98:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004b9c:	f013 0f01 	tst.w	r3, #1
 8004ba0:	d117      	bne.n	8004bd2 <wc_ecc_curve_cache_free_spec+0x42>
        wc_ecc_curve_cache_free_spec_item(curve, curve->prime, ECC_CURVE_FIELD_PRIME);
    if (curve->load_mask & ECC_CURVE_FIELD_AF)
 8004ba2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004ba6:	f013 0f02 	tst.w	r3, #2
 8004baa:	d117      	bne.n	8004bdc <wc_ecc_curve_cache_free_spec+0x4c>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Af, ECC_CURVE_FIELD_AF);
#ifdef USE_ECC_B_PARAM
    if (curve->load_mask & ECC_CURVE_FIELD_BF)
        wc_ecc_curve_cache_free_spec_item(curve, curve->Bf, ECC_CURVE_FIELD_BF);
#endif
    if (curve->load_mask & ECC_CURVE_FIELD_ORDER)
 8004bac:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004bb0:	f013 0f08 	tst.w	r3, #8
 8004bb4:	d118      	bne.n	8004be8 <wc_ecc_curve_cache_free_spec+0x58>
        wc_ecc_curve_cache_free_spec_item(curve, curve->order, ECC_CURVE_FIELD_ORDER);
    if (curve->load_mask & ECC_CURVE_FIELD_GX)
 8004bb6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004bba:	f013 0f10 	tst.w	r3, #16
 8004bbe:	d119      	bne.n	8004bf4 <wc_ecc_curve_cache_free_spec+0x64>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gx, ECC_CURVE_FIELD_GX);
    if (curve->load_mask & ECC_CURVE_FIELD_GY)
 8004bc0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004bc4:	f013 0f20 	tst.w	r3, #32
 8004bc8:	d11a      	bne.n	8004c00 <wc_ecc_curve_cache_free_spec+0x70>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gy, ECC_CURVE_FIELD_GY);

    curve->load_mask = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8004bd0:	bd10      	pop	{r4, pc}
        wc_ecc_curve_cache_free_spec_item(curve, curve->prime, ECC_CURVE_FIELD_PRIME);
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	6841      	ldr	r1, [r0, #4]
 8004bd6:	4b0e      	ldr	r3, [pc, #56]	; (8004c10 <wc_ecc_curve_cache_free_spec+0x80>)
 8004bd8:	4798      	blx	r3
 8004bda:	e7e2      	b.n	8004ba2 <wc_ecc_curve_cache_free_spec+0x12>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Af, ECC_CURVE_FIELD_AF);
 8004bdc:	2202      	movs	r2, #2
 8004bde:	68a1      	ldr	r1, [r4, #8]
 8004be0:	4620      	mov	r0, r4
 8004be2:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <wc_ecc_curve_cache_free_spec+0x80>)
 8004be4:	4798      	blx	r3
 8004be6:	e7e1      	b.n	8004bac <wc_ecc_curve_cache_free_spec+0x1c>
        wc_ecc_curve_cache_free_spec_item(curve, curve->order, ECC_CURVE_FIELD_ORDER);
 8004be8:	2208      	movs	r2, #8
 8004bea:	68e1      	ldr	r1, [r4, #12]
 8004bec:	4620      	mov	r0, r4
 8004bee:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <wc_ecc_curve_cache_free_spec+0x80>)
 8004bf0:	4798      	blx	r3
 8004bf2:	e7e0      	b.n	8004bb6 <wc_ecc_curve_cache_free_spec+0x26>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gx, ECC_CURVE_FIELD_GX);
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	6921      	ldr	r1, [r4, #16]
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <wc_ecc_curve_cache_free_spec+0x80>)
 8004bfc:	4798      	blx	r3
 8004bfe:	e7df      	b.n	8004bc0 <wc_ecc_curve_cache_free_spec+0x30>
        wc_ecc_curve_cache_free_spec_item(curve, curve->Gy, ECC_CURVE_FIELD_GY);
 8004c00:	2220      	movs	r2, #32
 8004c02:	6961      	ldr	r1, [r4, #20]
 8004c04:	4620      	mov	r0, r4
 8004c06:	4b02      	ldr	r3, [pc, #8]	; (8004c10 <wc_ecc_curve_cache_free_spec+0x80>)
 8004c08:	4798      	blx	r3
 8004c0a:	e7de      	b.n	8004bca <wc_ecc_curve_cache_free_spec+0x3a>
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	08004b71 	.word	0x08004b71

08004c14 <wc_ecc_curve_free>:

static void wc_ecc_curve_free(ecc_curve_spec* curve)
{
    if (curve) {
 8004c14:	b118      	cbz	r0, 8004c1e <wc_ecc_curve_free+0xa>
{
 8004c16:	b508      	push	{r3, lr}
            wc_ecc_curve_cache_free_spec(curve);
            XFREE(curve, NULL, DYNAMIC_TYPE_ECC);
        }
        #endif
    #else
        wc_ecc_curve_cache_free_spec(curve);
 8004c18:	4b01      	ldr	r3, [pc, #4]	; (8004c20 <wc_ecc_curve_free+0xc>)
 8004c1a:	4798      	blx	r3
    #endif
    }
}
 8004c1c:	bd08      	pop	{r3, pc}
 8004c1e:	4770      	bx	lr
 8004c20:	08004b91 	.word	0x08004b91

08004c24 <wc_ecc_curve_cache_load_item>:

static int wc_ecc_curve_cache_load_item(ecc_curve_spec* curve, const char* src,
    mp_int** dst, byte mask)
{
 8004c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c28:	461f      	mov	r7, r3
    int err;

#ifndef ECC_CACHE_CURVE
    /* get mp_int from temp */
    if (curve->spec_use >= curve->spec_count) {
 8004c2a:	6a05      	ldr	r5, [r0, #32]
 8004c2c:	69c3      	ldr	r3, [r0, #28]
 8004c2e:	429d      	cmp	r5, r3
 8004c30:	d21a      	bcs.n	8004c68 <wc_ecc_curve_cache_load_item+0x44>
 8004c32:	4604      	mov	r4, r0
 8004c34:	4688      	mov	r8, r1
 8004c36:	4616      	mov	r6, r2
        WOLFSSL_MSG("Invalid DECLARE_CURVE_SPECS count");
        return ECC_BAD_ARG_E;
    }
    *dst = &curve->spec_ints[curve->spec_use++];
 8004c38:	6980      	ldr	r0, [r0, #24]
 8004c3a:	1c6b      	adds	r3, r5, #1
 8004c3c:	6223      	str	r3, [r4, #32]
 8004c3e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004c42:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8004c46:	6010      	str	r0, [r2, #0]
#endif

    err = mp_init(*dst);
 8004c48:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <wc_ecc_curve_cache_load_item+0x4c>)
 8004c4a:	4798      	blx	r3
    if (err == MP_OKAY) {
 8004c4c:	b108      	cbz	r0, 8004c52 <wc_ecc_curve_cache_load_item+0x2e>
        if (err == MP_OKAY)
            err = wc_mp_to_bigint(*dst, &(*dst)->raw);
    #endif
    }
    return err;
}
 8004c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        curve->load_mask |= mask;
 8004c52:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004c56:	431f      	orrs	r7, r3
 8004c58:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
        err = mp_read_radix(*dst, src, MP_RADIX_HEX);
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	4641      	mov	r1, r8
 8004c60:	6830      	ldr	r0, [r6, #0]
 8004c62:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <wc_ecc_curve_cache_load_item+0x50>)
 8004c64:	4798      	blx	r3
 8004c66:	e7f2      	b.n	8004c4e <wc_ecc_curve_cache_load_item+0x2a>
        return ECC_BAD_ARG_E;
 8004c68:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8004c6c:	e7ef      	b.n	8004c4e <wc_ecc_curve_cache_load_item+0x2a>
 8004c6e:	bf00      	nop
 8004c70:	080012e5 	.word	0x080012e5
 8004c74:	08001515 	.word	0x08001515

08004c78 <wc_ecc_curve_load>:

static int wc_ecc_curve_load(const ecc_set_type* dp, ecc_curve_spec** pCurve,
    byte load_mask)
{
 8004c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    byte load_items = 0; /* mask of items to load */
#ifdef ECC_CACHE_CURVE
    int x;
#endif

    if (dp == NULL || pCurve == NULL)
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d059      	beq.n	8004d34 <wc_ecc_curve_load+0xbc>
 8004c80:	4607      	mov	r7, r0
 8004c82:	2900      	cmp	r1, #0
 8004c84:	d059      	beq.n	8004d3a <wc_ecc_curve_load+0xc2>
        curve = ecc_curve_spec_cache[x];
    }
    /* return new or cached curve */
    *pCurve = curve;
#else
    curve = *pCurve;
 8004c86:	680e      	ldr	r6, [r1, #0]
#endif /* ECC_CACHE_CURVE */

    /* make sure the curve is initialized */
    if (curve->dp != dp) {
 8004c88:	6833      	ldr	r3, [r6, #0]
 8004c8a:	4283      	cmp	r3, r0
 8004c8c:	d002      	beq.n	8004c94 <wc_ecc_curve_load+0x1c>
        curve->load_mask = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
        curve->order = &curve->order_lcl;
        curve->Gx = &curve->Gx_lcl;
        curve->Gy = &curve->Gy_lcl;
    #endif
    }
    curve->dp = dp; /* set dp info */
 8004c94:	6037      	str	r7, [r6, #0]

    /* determine items to load */
    load_items = (((byte)~(word32)curve->load_mask) & load_mask);
 8004c96:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8004c9a:	ea22 0403 	bic.w	r4, r2, r3
    curve->load_mask |= load_items;
 8004c9e:	4323      	orrs	r3, r4
 8004ca0:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24

    /* load items */
    if (load_items & ECC_CURVE_FIELD_PRIME)
 8004ca4:	f014 0f01 	tst.w	r4, #1
 8004ca8:	d110      	bne.n	8004ccc <wc_ecc_curve_load+0x54>
    int ret = 0;
 8004caa:	2500      	movs	r5, #0
        ret += wc_ecc_curve_cache_load_item(curve, dp->prime, &curve->prime,
            ECC_CURVE_FIELD_PRIME);
    if (load_items & ECC_CURVE_FIELD_AF)
 8004cac:	f014 0f02 	tst.w	r4, #2
 8004cb0:	d114      	bne.n	8004cdc <wc_ecc_curve_load+0x64>
#ifdef USE_ECC_B_PARAM
    if (load_items & ECC_CURVE_FIELD_BF)
        ret += wc_ecc_curve_cache_load_item(curve, dp->Bf, &curve->Bf,
            ECC_CURVE_FIELD_BF);
#endif
    if (load_items & ECC_CURVE_FIELD_ORDER)
 8004cb2:	f014 0f08 	tst.w	r4, #8
 8004cb6:	d11b      	bne.n	8004cf0 <wc_ecc_curve_load+0x78>
        ret += wc_ecc_curve_cache_load_item(curve, dp->order, &curve->order,
            ECC_CURVE_FIELD_ORDER);
    if (load_items & ECC_CURVE_FIELD_GX)
 8004cb8:	f014 0f10 	tst.w	r4, #16
 8004cbc:	d122      	bne.n	8004d04 <wc_ecc_curve_load+0x8c>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gx, &curve->Gx,
            ECC_CURVE_FIELD_GX);
    if (load_items & ECC_CURVE_FIELD_GY)
 8004cbe:	f014 0f20 	tst.w	r4, #32
 8004cc2:	d128      	bne.n	8004d16 <wc_ecc_curve_load+0x9e>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gy, &curve->Gy,
            ECC_CURVE_FIELD_GY);

    /* check for error */
    if (ret != 0) {
 8004cc4:	bb85      	cbnz	r5, 8004d28 <wc_ecc_curve_load+0xb0>
#if defined(ECC_CACHE_CURVE) && !defined(SINGLE_THREADED)
    wc_UnLockMutex(&ecc_curve_cache_mutex);
#endif

    return ret;
}
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret += wc_ecc_curve_cache_load_item(curve, dp->prime, &curve->prime,
 8004ccc:	2301      	movs	r3, #1
 8004cce:	1d32      	adds	r2, r6, #4
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	4d1a      	ldr	r5, [pc, #104]	; (8004d40 <wc_ecc_curve_load+0xc8>)
 8004cd6:	47a8      	blx	r5
 8004cd8:	4605      	mov	r5, r0
 8004cda:	e7e7      	b.n	8004cac <wc_ecc_curve_load+0x34>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Af, &curve->Af,
 8004cdc:	2302      	movs	r3, #2
 8004cde:	f106 0208 	add.w	r2, r6, #8
 8004ce2:	6939      	ldr	r1, [r7, #16]
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004d40 <wc_ecc_curve_load+0xc8>
 8004cea:	47c0      	blx	r8
 8004cec:	4405      	add	r5, r0
 8004cee:	e7e0      	b.n	8004cb2 <wc_ecc_curve_load+0x3a>
        ret += wc_ecc_curve_cache_load_item(curve, dp->order, &curve->order,
 8004cf0:	2308      	movs	r3, #8
 8004cf2:	f106 020c 	add.w	r2, r6, #12
 8004cf6:	69b9      	ldr	r1, [r7, #24]
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8004d40 <wc_ecc_curve_load+0xc8>
 8004cfe:	47c0      	blx	r8
 8004d00:	4405      	add	r5, r0
 8004d02:	e7d9      	b.n	8004cb8 <wc_ecc_curve_load+0x40>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gx, &curve->Gx,
 8004d04:	2310      	movs	r3, #16
 8004d06:	18f2      	adds	r2, r6, r3
 8004d08:	69f9      	ldr	r1, [r7, #28]
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8004d40 <wc_ecc_curve_load+0xc8>
 8004d10:	47c0      	blx	r8
 8004d12:	4405      	add	r5, r0
 8004d14:	e7d3      	b.n	8004cbe <wc_ecc_curve_load+0x46>
        ret += wc_ecc_curve_cache_load_item(curve, dp->Gy, &curve->Gy,
 8004d16:	2320      	movs	r3, #32
 8004d18:	f106 0214 	add.w	r2, r6, #20
 8004d1c:	6a39      	ldr	r1, [r7, #32]
 8004d1e:	4630      	mov	r0, r6
 8004d20:	4c07      	ldr	r4, [pc, #28]	; (8004d40 <wc_ecc_curve_load+0xc8>)
 8004d22:	47a0      	blx	r4
 8004d24:	4405      	add	r5, r0
 8004d26:	e7cd      	b.n	8004cc4 <wc_ecc_curve_load+0x4c>
        wc_ecc_curve_free(curve);
 8004d28:	4630      	mov	r0, r6
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <wc_ecc_curve_load+0xcc>)
 8004d2c:	4798      	blx	r3
        ret = MP_READ_E;
 8004d2e:	f06f 056e 	mvn.w	r5, #110	; 0x6e
 8004d32:	e7c8      	b.n	8004cc6 <wc_ecc_curve_load+0x4e>
        return BAD_FUNC_ARG;
 8004d34:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8004d38:	e7c5      	b.n	8004cc6 <wc_ecc_curve_load+0x4e>
 8004d3a:	f06f 05ac 	mvn.w	r5, #172	; 0xac
 8004d3e:	e7c2      	b.n	8004cc6 <wc_ecc_curve_load+0x4e>
 8004d40:	08004c25 	.word	0x08004c25
 8004d44:	08004c15 	.word	0x08004c15

08004d48 <ecc_make_pub_ex>:
 *
 * returns MP_OKAY on success
 */
static int ecc_make_pub_ex(ecc_key* key, ecc_curve_spec* curveIn,
        ecc_point* pubOut, WC_RNG* rng)
{
 8004d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d4c:	b0f3      	sub	sp, #460	; 0x1cc
 8004d4e:	4604      	mov	r4, r0
 8004d50:	460d      	mov	r5, r1
 8004d52:	4617      	mov	r7, r2
  && !defined(WOLFSSL_SILABS_SE_ACCEL)
#if !defined(WOLFSSL_SP_MATH)
    ecc_point* base = NULL;
#endif
    ecc_point* pub;
    DECLARE_CURVE_SPECS(curve, ECC_CURVE_FIELD_COUNT);
 8004d54:	a804      	add	r0, sp, #16
 8004d56:	9003      	str	r0, [sp, #12]
 8004d58:	2228      	movs	r2, #40	; 0x28
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4b39      	ldr	r3, [pc, #228]	; (8004e44 <ecc_make_pub_ex+0xfc>)
 8004d5e:	4798      	blx	r3
 8004d60:	9b03      	ldr	r3, [sp, #12]
 8004d62:	aa0e      	add	r2, sp, #56	; 0x38
 8004d64:	619a      	str	r2, [r3, #24]
 8004d66:	2205      	movs	r2, #5
 8004d68:	61da      	str	r2, [r3, #28]
#endif /* !WOLFSSL_ATECC508A */

    (void)rng;

    if (key == NULL) {
 8004d6a:	2c00      	cmp	r4, #0
 8004d6c:	d067      	beq.n	8004e3e <ecc_make_pub_ex+0xf6>

#if !defined(WOLFSSL_ATECC508A) && !defined(WOLFSSL_ATECC608A) \
  && !defined(WOLFSSL_SILABS_SE_ACCEL)

    /* if ecc_point passed in then use it as output for public key point */
    if (pubOut != NULL) {
 8004d6e:	b1c7      	cbz	r7, 8004da2 <ecc_make_pub_ex+0x5a>
        pub = pubOut;
 8004d70:	46b8      	mov	r8, r7
        pub = &key->pubkey;
        key->type = ECC_PRIVATEKEY_ONLY;
    }

    /* avoid loading the curve unless it is not passed in */
    if (curveIn != NULL) {
 8004d72:	b1dd      	cbz	r5, 8004dac <ecc_make_pub_ex+0x64>
        curve = curveIn;
 8004d74:	9503      	str	r5, [sp, #12]
    int err = MP_OKAY;
 8004d76:	2600      	movs	r6, #0
            ALLOC_CURVE_SPECS(ECC_CURVE_FIELD_COUNT);
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
        }
    }

    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8004d78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d7c:	bb63      	cbnz	r3, 8004dd8 <ecc_make_pub_ex+0x90>
                                      (mp_cmp(&key->k, curve->order) != MP_LT)))
    {
        err = ECC_PRIV_KEY_E;
 8004d7e:	f06f 06d7 	mvn.w	r6, #215	; 0xd7
        alt_fp_init(pub->y);
        alt_fp_init(pub->z);
    #endif
    }

    if (err != MP_OKAY) {
 8004d82:	2e00      	cmp	r6, #0
 8004d84:	d13c      	bne.n	8004e00 <ecc_make_pub_ex+0xb8>
    }
    else
#ifdef WOLFSSL_HAVE_SP_ECC
#ifndef WOLFSSL_SP_NO_256
    if (key->idx != ECC_CUSTOM_IDX && ecc_sets[key->idx].id == ECC_SECP256R1) {
 8004d86:	6863      	ldr	r3, [r4, #4]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d8c:	d04b      	beq.n	8004e26 <ecc_make_pub_ex+0xde>
 8004d8e:	4a2e      	ldr	r2, [pc, #184]	; (8004e48 <ecc_make_pub_ex+0x100>)
 8004d90:	2134      	movs	r1, #52	; 0x34
 8004d92:	fb01 2303 	mla	r3, r1, r3, r2
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b07      	cmp	r3, #7
 8004d9a:	d029      	beq.n	8004df0 <ecc_make_pub_ex+0xa8>
    }
    else
#endif
#endif
#if defined(WOLFSSL_SP_MATH)
        err = WC_KEY_SIZE_E;
 8004d9c:	f06f 06e9 	mvn.w	r6, #233	; 0xe9
 8004da0:	e02f      	b.n	8004e02 <ecc_make_pub_ex+0xba>
        pub = &key->pubkey;
 8004da2:	46a0      	mov	r8, r4
        key->type = ECC_PRIVATEKEY_ONLY;
 8004da4:	2303      	movs	r3, #3
 8004da6:	f848 3b18 	str.w	r3, [r8], #24
 8004daa:	e7e2      	b.n	8004d72 <ecc_make_pub_ex+0x2a>
            err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ALL);
 8004dac:	223b      	movs	r2, #59	; 0x3b
 8004dae:	a903      	add	r1, sp, #12
 8004db0:	6920      	ldr	r0, [r4, #16]
 8004db2:	4b26      	ldr	r3, [pc, #152]	; (8004e4c <ecc_make_pub_ex+0x104>)
 8004db4:	4798      	blx	r3
    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8004db6:	4606      	mov	r6, r0
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d0dd      	beq.n	8004d78 <ecc_make_pub_ex+0x30>
    if (err == MP_OKAY) {
 8004dbc:	2e00      	cmp	r6, #0
 8004dbe:	d1e0      	bne.n	8004d82 <ecc_make_pub_ex+0x3a>
        err = mp_init_multi(pub->x, pub->y, pub->z, NULL, NULL, NULL);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	f108 02a0 	add.w	r2, r8, #160	; 0xa0
 8004dca:	f108 0150 	add.w	r1, r8, #80	; 0x50
 8004dce:	4640      	mov	r0, r8
 8004dd0:	4e1f      	ldr	r6, [pc, #124]	; (8004e50 <ecc_make_pub_ex+0x108>)
 8004dd2:	47b0      	blx	r6
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	e7d4      	b.n	8004d82 <ecc_make_pub_ex+0x3a>
                                      (mp_cmp(&key->k, curve->order) != MP_LT)))
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	68d9      	ldr	r1, [r3, #12]
 8004ddc:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8004de0:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <ecc_make_pub_ex+0x10c>)
 8004de2:	4798      	blx	r3
    if ((err == MP_OKAY) && (mp_iszero(&key->k) || mp_isneg(&key->k) ||
 8004de4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004de8:	d0e8      	beq.n	8004dbc <ecc_make_pub_ex+0x74>
        err = ECC_PRIV_KEY_E;
 8004dea:	f06f 06d7 	mvn.w	r6, #215	; 0xd7
 8004dee:	e7c8      	b.n	8004d82 <ecc_make_pub_ex+0x3a>
        err = sp_ecc_mulmod_base_256(&key->k, pub, 1, key->heap);
 8004df0:	6963      	ldr	r3, [r4, #20]
 8004df2:	2201      	movs	r2, #1
 8004df4:	4641      	mov	r1, r8
 8004df6:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8004dfa:	4e17      	ldr	r6, [pc, #92]	; (8004e58 <ecc_make_pub_ex+0x110>)
 8004dfc:	47b0      	blx	r6
 8004dfe:	4606      	mov	r6, r0
    if (err == MP_OKAY)
        err = ecc_check_pubkey_order(key, pub, curve->Af, curve->prime,
                curve->order);
#endif /* WOLFSSL_VALIDATE_KEYGEN */

    if (err != MP_OKAY) {
 8004e00:	b14e      	cbz	r6, 8004e16 <ecc_make_pub_ex+0xce>
        /* clean up if failed */
    #ifndef ALT_ECC_SIZE
        mp_clear(pub->x);
 8004e02:	4640      	mov	r0, r8
 8004e04:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004e60 <ecc_make_pub_ex+0x118>
 8004e08:	47c8      	blx	r9
        mp_clear(pub->y);
 8004e0a:	f108 0050 	add.w	r0, r8, #80	; 0x50
 8004e0e:	47c8      	blx	r9
        mp_clear(pub->z);
 8004e10:	f108 00a0 	add.w	r0, r8, #160	; 0xa0
 8004e14:	47c8      	blx	r9
    #endif
    }

    /* free up local curve */
    if (curveIn == NULL) {
 8004e16:	b14d      	cbz	r5, 8004e2c <ecc_make_pub_ex+0xe4>
    (void)curveIn;
    err = NOT_COMPILED_IN;
#endif /* WOLFSSL_ATECC508A || WOLFSSL_SILABS_SE_ACCEL */

    /* change key state if public part is cached */
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d00a      	beq.n	8004e34 <ecc_make_pub_ex+0xec>
        key->type = ECC_PRIVATEKEY;
    }

    return err;
}
 8004e1e:	4630      	mov	r0, r6
 8004e20:	b073      	add	sp, #460	; 0x1cc
 8004e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = WC_KEY_SIZE_E;
 8004e26:	f06f 06e9 	mvn.w	r6, #233	; 0xe9
 8004e2a:	e7ea      	b.n	8004e02 <ecc_make_pub_ex+0xba>
        wc_ecc_curve_free(curve);
 8004e2c:	9803      	ldr	r0, [sp, #12]
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <ecc_make_pub_ex+0x114>)
 8004e30:	4798      	blx	r3
 8004e32:	e7f1      	b.n	8004e18 <ecc_make_pub_ex+0xd0>
    if (key->type == ECC_PRIVATEKEY_ONLY && pubOut == NULL) {
 8004e34:	2f00      	cmp	r7, #0
 8004e36:	d1f2      	bne.n	8004e1e <ecc_make_pub_ex+0xd6>
        key->type = ECC_PRIVATEKEY;
 8004e38:	2302      	movs	r3, #2
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	e7ef      	b.n	8004e1e <ecc_make_pub_ex+0xd6>
        return BAD_FUNC_ARG;
 8004e3e:	f06f 06ac 	mvn.w	r6, #172	; 0xac
 8004e42:	e7ec      	b.n	8004e1e <ecc_make_pub_ex+0xd6>
 8004e44:	08000155 	.word	0x08000155
 8004e48:	08005ae0 	.word	0x08005ae0
 8004e4c:	08004c79 	.word	0x08004c79
 8004e50:	08001301 	.word	0x08001301
 8004e54:	080013e9 	.word	0x080013e9
 8004e58:	080049e5 	.word	0x080049e5
 8004e5c:	08004c15 	.word	0x08004c15
 8004e60:	080013c1 	.word	0x080013c1

08004e64 <wc_ecc_check_r_s_range>:
    return err;
}
#endif /* !NO_ASN */

static int wc_ecc_check_r_s_range(ecc_key* key, mp_int* r, mp_int* s)
{
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	b0a0      	sub	sp, #128	; 0x80
 8004e68:	4604      	mov	r4, r0
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	4616      	mov	r6, r2
    int err;
    DECLARE_CURVE_SPECS(curve, 1);
 8004e6e:	a802      	add	r0, sp, #8
 8004e70:	9001      	str	r0, [sp, #4]
 8004e72:	2228      	movs	r2, #40	; 0x28
 8004e74:	2100      	movs	r1, #0
 8004e76:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <wc_ecc_check_r_s_range+0x7c>)
 8004e78:	4798      	blx	r3
 8004e7a:	9b01      	ldr	r3, [sp, #4]
 8004e7c:	aa0c      	add	r2, sp, #48	; 0x30
 8004e7e:	619a      	str	r2, [r3, #24]
 8004e80:	2201      	movs	r2, #1
 8004e82:	61da      	str	r2, [r3, #28]

    ALLOC_CURVE_SPECS(1);
    err = wc_ecc_curve_load(key->dp, &curve, ECC_CURVE_FIELD_ORDER);
 8004e84:	2208      	movs	r2, #8
 8004e86:	a901      	add	r1, sp, #4
 8004e88:	6920      	ldr	r0, [r4, #16]
 8004e8a:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <wc_ecc_check_r_s_range+0x80>)
 8004e8c:	4798      	blx	r3
    if (err != 0) {
 8004e8e:	4604      	mov	r4, r0
 8004e90:	b9b8      	cbnz	r0, 8004ec2 <wc_ecc_check_r_s_range+0x5e>
        FREE_CURVE_SPECS();
        return err;
    }

    if (mp_iszero(r) || mp_iszero(s)) {
 8004e92:	682b      	ldr	r3, [r5, #0]
 8004e94:	b17b      	cbz	r3, 8004eb6 <wc_ecc_check_r_s_range+0x52>
 8004e96:	6833      	ldr	r3, [r6, #0]
 8004e98:	b913      	cbnz	r3, 8004ea0 <wc_ecc_check_r_s_range+0x3c>
        err = MP_ZERO_E;
 8004e9a:	f06f 0478 	mvn.w	r4, #120	; 0x78
 8004e9e:	e00c      	b.n	8004eba <wc_ecc_check_r_s_range+0x56>
    }
    if ((err == 0) && (mp_cmp(r, curve->order) != MP_LT)) {
 8004ea0:	9b01      	ldr	r3, [sp, #4]
 8004ea2:	68d9      	ldr	r1, [r3, #12]
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <wc_ecc_check_r_s_range+0x84>)
 8004ea8:	4798      	blx	r3
 8004eaa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004eae:	d004      	beq.n	8004eba <wc_ecc_check_r_s_range+0x56>
        err = MP_VAL;
 8004eb0:	f06f 0402 	mvn.w	r4, #2
 8004eb4:	e002      	b.n	8004ebc <wc_ecc_check_r_s_range+0x58>
        err = MP_ZERO_E;
 8004eb6:	f06f 0478 	mvn.w	r4, #120	; 0x78
    }
    if ((err == 0) && (mp_cmp(s, curve->order) != MP_LT)) {
 8004eba:	b12c      	cbz	r4, 8004ec8 <wc_ecc_check_r_s_range+0x64>
        err = MP_VAL;
    }

    wc_ecc_curve_free(curve);
 8004ebc:	9801      	ldr	r0, [sp, #4]
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	; (8004eec <wc_ecc_check_r_s_range+0x88>)
 8004ec0:	4798      	blx	r3
    FREE_CURVE_SPECS();
    return err;
}
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	b020      	add	sp, #128	; 0x80
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
    if ((err == 0) && (mp_cmp(s, curve->order) != MP_LT)) {
 8004ec8:	9b01      	ldr	r3, [sp, #4]
 8004eca:	68d9      	ldr	r1, [r3, #12]
 8004ecc:	4630      	mov	r0, r6
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <wc_ecc_check_r_s_range+0x84>)
 8004ed0:	4798      	blx	r3
 8004ed2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004ed6:	d0f1      	beq.n	8004ebc <wc_ecc_check_r_s_range+0x58>
        err = MP_VAL;
 8004ed8:	f06f 0402 	mvn.w	r4, #2
 8004edc:	e7ee      	b.n	8004ebc <wc_ecc_check_r_s_range+0x58>
 8004ede:	bf00      	nop
 8004ee0:	08000155 	.word	0x08000155
 8004ee4:	08004c79 	.word	0x08004c79
 8004ee8:	080013e9 	.word	0x080013e9
 8004eec:	08004c15 	.word	0x08004c15

08004ef0 <wc_ecc_set_curve>:
    if (keysize <= 0 && curve_id < 0) {
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	dd0a      	ble.n	8004f0a <wc_ecc_set_curve+0x1a>
    if (keysize > ECC_MAXSIZE) {
 8004ef4:	2942      	cmp	r1, #66	; 0x42
 8004ef6:	dc29      	bgt.n	8004f4c <wc_ecc_set_curve+0x5c>
    if (key->idx != ECC_CUSTOM_IDX) {
 8004ef8:	6843      	ldr	r3, [r0, #4]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004efe:	d028      	beq.n	8004f52 <wc_ecc_set_curve+0x62>
{
 8004f00:	b470      	push	{r4, r5, r6}
        key->idx = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	6043      	str	r3, [r0, #4]
        key->dp = NULL;
 8004f06:	6103      	str	r3, [r0, #16]
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8004f08:	e007      	b.n	8004f1a <wc_ecc_set_curve+0x2a>
    if (keysize <= 0 && curve_id < 0) {
 8004f0a:	2a00      	cmp	r2, #0
 8004f0c:	daf2      	bge.n	8004ef4 <wc_ecc_set_curve+0x4>
        return BAD_FUNC_ARG;
 8004f0e:	f06f 00ac 	mvn.w	r0, #172	; 0xac
 8004f12:	4770      	bx	lr
            else if (keysize <= ecc_sets[x].size) {
 8004f14:	428c      	cmp	r4, r1
 8004f16:	da0f      	bge.n	8004f38 <wc_ecc_set_curve+0x48>
        for (x = 0; ecc_sets[x].size != 0; x++) {
 8004f18:	3301      	adds	r3, #1
 8004f1a:	2434      	movs	r4, #52	; 0x34
 8004f1c:	fb04 f403 	mul.w	r4, r4, r3
 8004f20:	4d0e      	ldr	r5, [pc, #56]	; (8004f5c <wc_ecc_set_curve+0x6c>)
 8004f22:	592c      	ldr	r4, [r5, r4]
 8004f24:	b144      	cbz	r4, 8004f38 <wc_ecc_set_curve+0x48>
            if (curve_id > ECC_CURVE_DEF) {
 8004f26:	2a00      	cmp	r2, #0
 8004f28:	ddf4      	ble.n	8004f14 <wc_ecc_set_curve+0x24>
                if (curve_id == ecc_sets[x].id)
 8004f2a:	4e0c      	ldr	r6, [pc, #48]	; (8004f5c <wc_ecc_set_curve+0x6c>)
 8004f2c:	2534      	movs	r5, #52	; 0x34
 8004f2e:	fb05 6503 	mla	r5, r5, r3, r6
 8004f32:	686d      	ldr	r5, [r5, #4]
 8004f34:	4295      	cmp	r5, r2
 8004f36:	d1ef      	bne.n	8004f18 <wc_ecc_set_curve+0x28>
        if (ecc_sets[x].size == 0) {
 8004f38:	b16c      	cbz	r4, 8004f56 <wc_ecc_set_curve+0x66>
        key->idx = x;
 8004f3a:	6043      	str	r3, [r0, #4]
        key->dp  = &ecc_sets[x];
 8004f3c:	4a07      	ldr	r2, [pc, #28]	; (8004f5c <wc_ecc_set_curve+0x6c>)
 8004f3e:	2134      	movs	r1, #52	; 0x34
 8004f40:	fb01 2303 	mla	r3, r1, r3, r2
 8004f44:	6103      	str	r3, [r0, #16]
    return 0;
 8004f46:	2000      	movs	r0, #0
}
 8004f48:	bc70      	pop	{r4, r5, r6}
 8004f4a:	4770      	bx	lr
        return ECC_BAD_ARG_E;
 8004f4c:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 8004f50:	4770      	bx	lr
    return 0;
 8004f52:	2000      	movs	r0, #0
}
 8004f54:	4770      	bx	lr
            return ECC_CURVE_OID_E;
 8004f56:	f06f 00ab 	mvn.w	r0, #171	; 0xab
 8004f5a:	e7f5      	b.n	8004f48 <wc_ecc_set_curve+0x58>
 8004f5c:	08005ae0 	.word	0x08005ae0

08004f60 <wc_ecc_import_raw_private>:
#endif /* !NO_ASN */

#ifdef HAVE_ECC_KEY_IMPORT
static int wc_ecc_import_raw_private(ecc_key* key, const char* qx,
          const char* qy, const char* d, int curve_id, int encType)
{
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	b085      	sub	sp, #20
 8004f66:	9303      	str	r3, [sp, #12]
  defined(WOLFSSL_SILABS_SE_ACCEL)
    word32 keySz = 0;
#endif

    /* if d is NULL, only import as public key using Qx,Qy */
    if (key == NULL || qx == NULL || qy == NULL) {
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d07f      	beq.n	800506c <wc_ecc_import_raw_private+0x10c>
 8004f6c:	460e      	mov	r6, r1
 8004f6e:	4617      	mov	r7, r2
 8004f70:	4605      	mov	r5, r0
 8004f72:	2900      	cmp	r1, #0
 8004f74:	d07d      	beq.n	8005072 <wc_ecc_import_raw_private+0x112>
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	d07e      	beq.n	8005078 <wc_ecc_import_raw_private+0x118>
    key->state = ECC_STATE_NONE;
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	6081      	str	r1, [r0, #8]

    /* make sure required variables are reset */
    wc_ecc_reset(key);

    /* set curve type and index */
    err = wc_ecc_set_curve(key, 0, curve_id);
 8004f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f80:	4b42      	ldr	r3, [pc, #264]	; (800508c <wc_ecc_import_raw_private+0x12c>)
 8004f82:	4798      	blx	r3
    if (err != 0) {
 8004f84:	4604      	mov	r4, r0
 8004f86:	b118      	cbz	r0, 8004f90 <wc_ecc_import_raw_private+0x30>
        mp_clear(key->pubkey.z);
        mp_clear(&key->k);
    }

    return err;
}
 8004f88:	4620      	mov	r0, r4
 8004f8a:	b005      	add	sp, #20
 8004f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = mp_init_multi(&key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
 8004f90:	f505 7984 	add.w	r9, r5, #264	; 0x108
 8004f94:	f105 0818 	add.w	r8, r5, #24
 8004f98:	f105 0b68 	add.w	fp, r5, #104	; 0x68
 8004f9c:	f105 0ab8 	add.w	sl, r5, #184	; 0xb8
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	4653      	mov	r3, sl
 8004fa8:	465a      	mov	r2, fp
 8004faa:	4641      	mov	r1, r8
 8004fac:	4648      	mov	r0, r9
 8004fae:	4c38      	ldr	r4, [pc, #224]	; (8005090 <wc_ecc_import_raw_private+0x130>)
 8004fb0:	47a0      	blx	r4
    if (err != MP_OKAY)
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d163      	bne.n	800507e <wc_ecc_import_raw_private+0x11e>
        if (encType == WC_TYPE_HEX_STR)
 8004fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d018      	beq.n	8004fee <wc_ecc_import_raw_private+0x8e>
                key->dp->size);
 8004fbc:	692b      	ldr	r3, [r5, #16]
            err = mp_read_unsigned_bin(key->pubkey.x, (const byte*)qx,
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	4b33      	ldr	r3, [pc, #204]	; (8005094 <wc_ecc_import_raw_private+0x134>)
 8004fc6:	4798      	blx	r3
 8004fc8:	4604      	mov	r4, r0
        if (mp_iszero(key->pubkey.x)) {
 8004fca:	69ab      	ldr	r3, [r5, #24]
 8004fcc:	b1eb      	cbz	r3, 800500a <wc_ecc_import_raw_private+0xaa>
    if (err == MP_OKAY) {
 8004fce:	b9f4      	cbnz	r4, 800500e <wc_ecc_import_raw_private+0xae>
        if (encType == WC_TYPE_HEX_STR)
 8004fd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d012      	beq.n	8004ffc <wc_ecc_import_raw_private+0x9c>
                key->dp->size);
 8004fd6:	692b      	ldr	r3, [r5, #16]
            err = mp_read_unsigned_bin(key->pubkey.y, (const byte*)qy,
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4639      	mov	r1, r7
 8004fdc:	4658      	mov	r0, fp
 8004fde:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <wc_ecc_import_raw_private+0x134>)
 8004fe0:	4798      	blx	r3
 8004fe2:	4604      	mov	r4, r0
        if (mp_iszero(key->pubkey.y)) {
 8004fe4:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8004fe6:	b993      	cbnz	r3, 800500e <wc_ecc_import_raw_private+0xae>
            err = BAD_FUNC_ARG;
 8004fe8:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8004fec:	e010      	b.n	8005010 <wc_ecc_import_raw_private+0xb0>
            err = mp_read_radix(key->pubkey.x, qx, MP_RADIX_HEX);
 8004fee:	2210      	movs	r2, #16
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4640      	mov	r0, r8
 8004ff4:	4b28      	ldr	r3, [pc, #160]	; (8005098 <wc_ecc_import_raw_private+0x138>)
 8004ff6:	4798      	blx	r3
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	e7e6      	b.n	8004fca <wc_ecc_import_raw_private+0x6a>
            err = mp_read_radix(key->pubkey.y, qy, MP_RADIX_HEX);
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	4639      	mov	r1, r7
 8005000:	4658      	mov	r0, fp
 8005002:	4b25      	ldr	r3, [pc, #148]	; (8005098 <wc_ecc_import_raw_private+0x138>)
 8005004:	4798      	blx	r3
 8005006:	4604      	mov	r4, r0
 8005008:	e7ec      	b.n	8004fe4 <wc_ecc_import_raw_private+0x84>
            err = BAD_FUNC_ARG;
 800500a:	f06f 04ac 	mvn.w	r4, #172	; 0xac
    if (err == MP_OKAY)
 800500e:	b1ec      	cbz	r4, 800504c <wc_ecc_import_raw_private+0xec>
    if (err == MP_OKAY) {
 8005010:	b984      	cbnz	r4, 8005034 <wc_ecc_import_raw_private+0xd4>
        if (d != NULL) {
 8005012:	9b03      	ldr	r3, [sp, #12]
 8005014:	b33b      	cbz	r3, 8005066 <wc_ecc_import_raw_private+0x106>
            key->type = ECC_PRIVATEKEY;
 8005016:	2302      	movs	r3, #2
 8005018:	602b      	str	r3, [r5, #0]
            if (encType == WC_TYPE_HEX_STR)
 800501a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d01b      	beq.n	8005058 <wc_ecc_import_raw_private+0xf8>
                    key->dp->size);
 8005020:	692b      	ldr	r3, [r5, #16]
                err = mp_read_unsigned_bin(&key->k, (const byte*)d,
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	9903      	ldr	r1, [sp, #12]
 8005026:	4648      	mov	r0, r9
 8005028:	4b1a      	ldr	r3, [pc, #104]	; (8005094 <wc_ecc_import_raw_private+0x134>)
 800502a:	4798      	blx	r3
 800502c:	4604      	mov	r4, r0
            if (mp_iszero(&key->k)) {
 800502e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005032:	b33b      	cbz	r3, 8005084 <wc_ecc_import_raw_private+0x124>
    if (err != MP_OKAY) {
 8005034:	2c00      	cmp	r4, #0
 8005036:	d0a7      	beq.n	8004f88 <wc_ecc_import_raw_private+0x28>
        mp_clear(key->pubkey.x);
 8005038:	4640      	mov	r0, r8
 800503a:	4d18      	ldr	r5, [pc, #96]	; (800509c <wc_ecc_import_raw_private+0x13c>)
 800503c:	47a8      	blx	r5
        mp_clear(key->pubkey.y);
 800503e:	4658      	mov	r0, fp
 8005040:	47a8      	blx	r5
        mp_clear(key->pubkey.z);
 8005042:	4650      	mov	r0, sl
 8005044:	47a8      	blx	r5
        mp_clear(&key->k);
 8005046:	4648      	mov	r0, r9
 8005048:	47a8      	blx	r5
 800504a:	e79d      	b.n	8004f88 <wc_ecc_import_raw_private+0x28>
        err = mp_set(key->pubkey.z, 1);
 800504c:	2101      	movs	r1, #1
 800504e:	4650      	mov	r0, sl
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <wc_ecc_import_raw_private+0x140>)
 8005052:	4798      	blx	r3
 8005054:	4604      	mov	r4, r0
 8005056:	e7db      	b.n	8005010 <wc_ecc_import_raw_private+0xb0>
                err = mp_read_radix(&key->k, d, MP_RADIX_HEX);
 8005058:	2210      	movs	r2, #16
 800505a:	9903      	ldr	r1, [sp, #12]
 800505c:	4648      	mov	r0, r9
 800505e:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <wc_ecc_import_raw_private+0x138>)
 8005060:	4798      	blx	r3
 8005062:	4604      	mov	r4, r0
 8005064:	e7e3      	b.n	800502e <wc_ecc_import_raw_private+0xce>
            key->type = ECC_PUBLICKEY;
 8005066:	2301      	movs	r3, #1
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	e7e3      	b.n	8005034 <wc_ecc_import_raw_private+0xd4>
        return BAD_FUNC_ARG;
 800506c:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8005070:	e78a      	b.n	8004f88 <wc_ecc_import_raw_private+0x28>
 8005072:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8005076:	e787      	b.n	8004f88 <wc_ecc_import_raw_private+0x28>
 8005078:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 800507c:	e784      	b.n	8004f88 <wc_ecc_import_raw_private+0x28>
        return MEMORY_E;
 800507e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
 8005082:	e781      	b.n	8004f88 <wc_ecc_import_raw_private+0x28>
                return BAD_FUNC_ARG;
 8005084:	f06f 04ac 	mvn.w	r4, #172	; 0xac
 8005088:	e77e      	b.n	8004f88 <wc_ecc_import_raw_private+0x28>
 800508a:	bf00      	nop
 800508c:	08004ef1 	.word	0x08004ef1
 8005090:	08001301 	.word	0x08001301
 8005094:	08001423 	.word	0x08001423
 8005098:	08001515 	.word	0x08001515
 800509c:	080013c1 	.word	0x080013c1
 80050a0:	0800140d 	.word	0x0800140d

080050a4 <wc_ecc_is_valid_idx>:
{
 80050a4:	4601      	mov	r1, r0
   for (x = 0; ecc_sets[x].size != 0; x++)
 80050a6:	2200      	movs	r2, #0
 80050a8:	2334      	movs	r3, #52	; 0x34
 80050aa:	fb03 f302 	mul.w	r3, r3, r2
 80050ae:	4806      	ldr	r0, [pc, #24]	; (80050c8 <wc_ecc_is_valid_idx+0x24>)
 80050b0:	58c0      	ldr	r0, [r0, r3]
 80050b2:	b928      	cbnz	r0, 80050c0 <wc_ecc_is_valid_idx+0x1c>
   if ((n >= ECC_CUSTOM_IDX) && (n < x)) {
 80050b4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80050b8:	db01      	blt.n	80050be <wc_ecc_is_valid_idx+0x1a>
 80050ba:	428a      	cmp	r2, r1
 80050bc:	dc02      	bgt.n	80050c4 <wc_ecc_is_valid_idx+0x20>
}
 80050be:	4770      	bx	lr
   for (x = 0; ecc_sets[x].size != 0; x++)
 80050c0:	3201      	adds	r2, #1
 80050c2:	e7f1      	b.n	80050a8 <wc_ecc_is_valid_idx+0x4>
      return 1;
 80050c4:	2001      	movs	r0, #1
 80050c6:	e7fa      	b.n	80050be <wc_ecc_is_valid_idx+0x1a>
 80050c8:	08005ae0 	.word	0x08005ae0

080050cc <wc_ecc_init_ex>:
    if (key == NULL) {
 80050cc:	b1d0      	cbz	r0, 8005104 <wc_ecc_init_ex+0x38>
{
 80050ce:	b570      	push	{r4, r5, r6, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	460d      	mov	r5, r1
 80050d4:	4604      	mov	r4, r0
    XMEMSET(key, 0, sizeof(ecc_key));
 80050d6:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 80050da:	2100      	movs	r1, #0
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <wc_ecc_init_ex+0x44>)
 80050de:	4798      	blx	r3
    key->state = ECC_STATE_NONE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60a3      	str	r3, [r4, #8]
    ret = mp_init_multi(&key->k, key->pubkey.x, key->pubkey.y, key->pubkey.z,
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 80050ec:	f104 0268 	add.w	r2, r4, #104	; 0x68
 80050f0:	f104 0118 	add.w	r1, r4, #24
 80050f4:	f504 7084 	add.w	r0, r4, #264	; 0x108
 80050f8:	4e06      	ldr	r6, [pc, #24]	; (8005114 <wc_ecc_init_ex+0x48>)
 80050fa:	47b0      	blx	r6
    if (ret != MP_OKAY) {
 80050fc:	b928      	cbnz	r0, 800510a <wc_ecc_init_ex+0x3e>
    key->heap = heap;
 80050fe:	6165      	str	r5, [r4, #20]
}
 8005100:	b002      	add	sp, #8
 8005102:	bd70      	pop	{r4, r5, r6, pc}
        return BAD_FUNC_ARG;
 8005104:	f06f 00ac 	mvn.w	r0, #172	; 0xac
}
 8005108:	4770      	bx	lr
        return MEMORY_E;
 800510a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800510e:	e7f7      	b.n	8005100 <wc_ecc_init_ex+0x34>
 8005110:	08000155 	.word	0x08000155
 8005114:	08001301 	.word	0x08001301

08005118 <wc_ecc_init>:
{
 8005118:	b508      	push	{r3, lr}
    return wc_ecc_init_ex(key, NULL, INVALID_DEVID);
 800511a:	f06f 0201 	mvn.w	r2, #1
 800511e:	2100      	movs	r1, #0
 8005120:	4b01      	ldr	r3, [pc, #4]	; (8005128 <wc_ecc_init+0x10>)
 8005122:	4798      	blx	r3
}
 8005124:	bd08      	pop	{r3, pc}
 8005126:	bf00      	nop
 8005128:	080050cd 	.word	0x080050cd

0800512c <wc_ecc_verify_hash_ex>:
{
 800512c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005134:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   if (r == NULL || s == NULL || hash == NULL || res == NULL || key == NULL)
 8005136:	2800      	cmp	r0, #0
 8005138:	d04c      	beq.n	80051d4 <wc_ecc_verify_hash_ex+0xa8>
 800513a:	460d      	mov	r5, r1
 800513c:	4616      	mov	r6, r2
 800513e:	4698      	mov	r8, r3
 8005140:	4681      	mov	r9, r0
 8005142:	2900      	cmp	r1, #0
 8005144:	d049      	beq.n	80051da <wc_ecc_verify_hash_ex+0xae>
 8005146:	2a00      	cmp	r2, #0
 8005148:	d04a      	beq.n	80051e0 <wc_ecc_verify_hash_ex+0xb4>
 800514a:	2f00      	cmp	r7, #0
 800514c:	d04b      	beq.n	80051e6 <wc_ecc_verify_hash_ex+0xba>
 800514e:	2c00      	cmp	r4, #0
 8005150:	d04c      	beq.n	80051ec <wc_ecc_verify_hash_ex+0xc0>
   *res = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	603b      	str	r3, [r7, #0]
   if (wc_ecc_is_valid_idx(key->idx) == 0 || key->dp == NULL) {
 8005156:	6860      	ldr	r0, [r4, #4]
 8005158:	4b2c      	ldr	r3, [pc, #176]	; (800520c <wc_ecc_verify_hash_ex+0xe0>)
 800515a:	4798      	blx	r3
 800515c:	2800      	cmp	r0, #0
 800515e:	d048      	beq.n	80051f2 <wc_ecc_verify_hash_ex+0xc6>
 8005160:	6923      	ldr	r3, [r4, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d048      	beq.n	80051f8 <wc_ecc_verify_hash_ex+0xcc>
   err = wc_ecc_check_r_s_range(key, r, s);
 8005166:	462a      	mov	r2, r5
 8005168:	4649      	mov	r1, r9
 800516a:	4620      	mov	r0, r4
 800516c:	4b28      	ldr	r3, [pc, #160]	; (8005210 <wc_ecc_verify_hash_ex+0xe4>)
 800516e:	4798      	blx	r3
   if (err != MP_OKAY) {
 8005170:	b988      	cbnz	r0, 8005196 <wc_ecc_verify_hash_ex+0x6a>
  if (key->type == ECC_PRIVATEKEY_ONLY) {
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d011      	beq.n	800519c <wc_ecc_verify_hash_ex+0x70>
    if (key->idx == ECC_CUSTOM_IDX ||
 8005178:	6863      	ldr	r3, [r4, #4]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800517e:	d03e      	beq.n	80051fe <wc_ecc_verify_hash_ex+0xd2>
            (ecc_sets[key->idx].id != ECC_SECP256R1 &&
 8005180:	4a24      	ldr	r2, [pc, #144]	; (8005214 <wc_ecc_verify_hash_ex+0xe8>)
 8005182:	2134      	movs	r1, #52	; 0x34
 8005184:	fb01 2303 	mla	r3, r1, r3, r2
 8005188:	685b      	ldr	r3, [r3, #4]
    if (key->idx == ECC_CUSTOM_IDX ||
 800518a:	2b07      	cmp	r3, #7
 800518c:	d001      	beq.n	8005192 <wc_ecc_verify_hash_ex+0x66>
            (ecc_sets[key->idx].id != ECC_SECP256R1 &&
 800518e:	2b0f      	cmp	r3, #15
 8005190:	d138      	bne.n	8005204 <wc_ecc_verify_hash_ex+0xd8>
        if (ecc_sets[key->idx].id == ECC_SECP256R1) {
 8005192:	2b07      	cmp	r3, #7
 8005194:	d00c      	beq.n	80051b0 <wc_ecc_verify_hash_ex+0x84>
}
 8005196:	b006      	add	sp, #24
 8005198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      err = ecc_make_pub_ex(key, NULL, NULL, NULL);
 800519c:	2300      	movs	r3, #0
 800519e:	461a      	mov	r2, r3
 80051a0:	4619      	mov	r1, r3
 80051a2:	4620      	mov	r0, r4
 80051a4:	f8df a074 	ldr.w	sl, [pc, #116]	; 800521c <wc_ecc_verify_hash_ex+0xf0>
 80051a8:	47d0      	blx	sl
      if (err != MP_OKAY) {
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d0e4      	beq.n	8005178 <wc_ecc_verify_hash_ex+0x4c>
 80051ae:	e7f2      	b.n	8005196 <wc_ecc_verify_hash_ex+0x6a>
                key->pubkey.y, key->pubkey.z, r, s, res, key->heap);
 80051b0:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
            return sp_ecc_verify_256(hash, hashlen, key->pubkey.x,
 80051b4:	6962      	ldr	r2, [r4, #20]
 80051b6:	9204      	str	r2, [sp, #16]
 80051b8:	9703      	str	r7, [sp, #12]
 80051ba:	9502      	str	r5, [sp, #8]
 80051bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80051c6:	f104 0218 	add.w	r2, r4, #24
 80051ca:	4641      	mov	r1, r8
 80051cc:	4630      	mov	r0, r6
 80051ce:	4c12      	ldr	r4, [pc, #72]	; (8005218 <wc_ecc_verify_hash_ex+0xec>)
 80051d0:	47a0      	blx	r4
 80051d2:	e7e0      	b.n	8005196 <wc_ecc_verify_hash_ex+0x6a>
       return ECC_BAD_ARG_E;
 80051d4:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80051d8:	e7dd      	b.n	8005196 <wc_ecc_verify_hash_ex+0x6a>
 80051da:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80051de:	e7da      	b.n	8005196 <wc_ecc_verify_hash_ex+0x6a>
 80051e0:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80051e4:	e7d7      	b.n	8005196 <wc_ecc_verify_hash_ex+0x6a>
 80051e6:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80051ea:	e7d4      	b.n	8005196 <wc_ecc_verify_hash_ex+0x6a>
 80051ec:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80051f0:	e7d1      	b.n	8005196 <wc_ecc_verify_hash_ex+0x6a>
      return ECC_BAD_ARG_E;
 80051f2:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80051f6:	e7ce      	b.n	8005196 <wc_ecc_verify_hash_ex+0x6a>
 80051f8:	f06f 00a9 	mvn.w	r0, #169	; 0xa9
 80051fc:	e7cb      	b.n	8005196 <wc_ecc_verify_hash_ex+0x6a>
        return WC_KEY_SIZE_E;
 80051fe:	f06f 00e9 	mvn.w	r0, #233	; 0xe9
 8005202:	e7c8      	b.n	8005196 <wc_ecc_verify_hash_ex+0x6a>
 8005204:	f06f 00e9 	mvn.w	r0, #233	; 0xe9
 8005208:	e7c5      	b.n	8005196 <wc_ecc_verify_hash_ex+0x6a>
 800520a:	bf00      	nop
 800520c:	080050a5 	.word	0x080050a5
 8005210:	08004e65 	.word	0x08004e65
 8005214:	08005ae0 	.word	0x08005ae0
 8005218:	08004a25 	.word	0x08004a25
 800521c:	08004d49 	.word	0x08004d49

08005220 <wc_ecc_import_unsigned>:
}

/* Import x, y and optional private (d) as unsigned binary */
int wc_ecc_import_unsigned(ecc_key* key, byte* qx, byte* qy,
                   byte* d, int curve_id)
{
 8005220:	b510      	push	{r4, lr}
 8005222:	b082      	sub	sp, #8
    return wc_ecc_import_raw_private(key, (const char*)qx, (const char*)qy,
 8005224:	2402      	movs	r4, #2
 8005226:	9401      	str	r4, [sp, #4]
 8005228:	9c04      	ldr	r4, [sp, #16]
 800522a:	9400      	str	r4, [sp, #0]
 800522c:	4c01      	ldr	r4, [pc, #4]	; (8005234 <wc_ecc_import_unsigned+0x14>)
 800522e:	47a0      	blx	r4
        (const char*)d, curve_id, WC_TYPE_UNSIGNED_BIN);
}
 8005230:	b002      	add	sp, #8
 8005232:	bd10      	pop	{r4, pc}
 8005234:	08004f61 	.word	0x08004f61

08005238 <__wolfBoot_start_veneer>:
 8005238:	f85f f000 	ldr.w	pc, [pc]	; 800523c <__wolfBoot_start_veneer+0x4>
 800523c:	20000abd 	.word	0x20000abd

08005240 <__wolfBoot_get_partition_state_veneer>:
 8005240:	f85f f000 	ldr.w	pc, [pc]	; 8005244 <__wolfBoot_get_partition_state_veneer+0x4>
 8005244:	200005a5 	.word	0x200005a5

08005248 <__wolfBoot_update_trigger_veneer>:
 8005248:	f85f f000 	ldr.w	pc, [pc]	; 800524c <__wolfBoot_update_trigger_veneer+0x4>
 800524c:	20000645 	.word	0x20000645

08005250 <__hal_flash_unlock_veneer>:
 8005250:	f85f f000 	ldr.w	pc, [pc]	; 8005254 <__hal_flash_unlock_veneer+0x4>
 8005254:	20000175 	.word	0x20000175

08005258 <__wolfBoot_erase_partition_veneer>:
 8005258:	f85f f000 	ldr.w	pc, [pc]	; 800525c <__wolfBoot_erase_partition_veneer+0x4>
 800525c:	200005f1 	.word	0x200005f1

08005260 <__hal_flash_lock_veneer>:
 8005260:	f85f f000 	ldr.w	pc, [pc]	; 8005264 <__hal_flash_lock_veneer+0x4>
 8005264:	200001a1 	.word	0x200001a1

08005268 <wolfboot_magic_trail>:
 8005268:	544f4f42                                BOOT

0800526c <ecc256_pub_key>:
 800526c:	f0c474ed cd19099f 81d3e9f1 0d009588     .t..............
 800527c:	cb6b46b2 f53bab0d 5abe3f33 eda13144     .Fk...;.3?.ZD1..
 800528c:	2b612daa 637f3872 f5874c5e 7a21a12d     .-a+r8.c^L..-.!z
 800529c:	e5b0e9ba 77b682f6 92ce5738 4fd1a785     .......w8W.....O

080052ac <ecc256_pub_key_len>:
 80052ac:	00000040                                @...

080052b0 <K>:
 80052b0:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
 80052c0:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
 80052d0:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
 80052e0:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
 80052f0:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
 8005300:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
 8005310:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
 8005320:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
 8005330:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
 8005340:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
 8005350:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
 8005360:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
 8005370:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
 8005380:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
 8005390:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
 80053a0:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

080053b0 <p256_base>:
 80053b0:	d898c296 f4a13945 2deb33a0 77037d81     ....E9...3.-.}.w
 80053c0:	63a440f2 f8bce6e5 e12c4247 6b17d1f2     .@.c....GB,....k
	...
 80053f0:	37bf51f5 cbb64068 6b315ece 2bce3357     .Q.7h@...^1kW3.+
 8005400:	7c0f9e16 8ee7eb4a fe1a7f9b 4fe342e2     ...|J........B.O
	...
 8005430:	00000001 00000000 00000000 00000000     ................
	...

08005474 <p256_mod>:
 8005474:	ffffffff ffffffff ffffffff 00000000     ................
	...
 800548c:	00000001 ffffffff                       ........

08005494 <p256_mod_minus_2>:
 8005494:	fffffffd ffffffff ffffffff 00000000     ................
	...
 80054ac:	00000001 ffffffff                       ........

080054b4 <p256_norm_mod>:
 80054b4:	00000001 00000000 00000000 ffffffff     ................
 80054c4:	ffffffff ffffffff fffffffe 00000000     ................

080054d4 <p256_norm_order>:
 80054d4:	039cdaaf 0c46353d 58e8617b 43190552     ....=5F.{a.XR..C
	...
 80054ec:	ffffffff 00000000                       ........

080054f4 <p256_order>:
 80054f4:	fc632551 f3b9cac2 a7179e84 bce6faad     Q%c.............
 8005504:	ffffffff ffffffff 00000000 ffffffff     ................

08005514 <p256_order_minus_2>:
 8005514:	fc63254f f3b9cac2 a7179e84 bce6faad     O%c.............
 8005524:	ffffffff ffffffff 00000000 ffffffff     ................

08005534 <p256_table>:
	...
 8005574:	18a9143c 79e730d4 5fedb601 75ba95fc     <....0.y..._...u
 8005584:	77622510 79fb732b a53755c6 18905f76     .%bw+s.y.U7.v_..
 8005594:	ce95560a ddf25357 ba19e45c 8b4ab8e4     .V..WS..\.....J.
 80055a4:	dd21f325 d2e88688 25885d85 8571ff18     %.!......].%..q.
 80055b4:	16a0d2bb 4f922fc5 1a623499 0d5cc16c     ...../.O.4b.l.\.
 80055c4:	57c62c8b 9241cf3a fd1b667f 2f5e6961     .,.W:.A..f..ai^/
 80055d4:	f5a01797 5c15c70b 60956192 3d20b44d     .......\.a.`M. =
 80055e4:	071fdb52 04911b37 8d6f0f7b f648f916     R...7...{.o...H.
 80055f4:	e137bbbc 9e566847 8a6a0bec e434469e     ..7.GhV...j..F4.
 8005604:	79d73463 b1c42761 133d0015 5abe0285     c4.ya'....=....Z
 8005614:	c04c7dab 92aa837c 43260c07 573d9f4c     .}L.|.....&CL.=W
 8005624:	78e6cc37 0c931562 6b6f7383 94bb725b     7..xb....sok[r..
 8005634:	bfe20925 62a8c244 8fdce867 91c19ac3     %...D..bg.......
 8005644:	dd387063 5a96a5d5 21d324f6 61d587d4     cp8....Z.$.!...a
 8005654:	a37173ea e87673a2 53778b65 23848008     .sq..sv.e.wS...#
 8005664:	05bab43e 10f8441e 4621efbe fa11fe12     >....D....!F....
 8005674:	2cb19ffd 1c891f2b b1923c23 01ba8d5b     ...,+...#<..[...
 8005684:	8ac5ca8e b6d03d67 1f13bedc 586eb04c     ....g=......L.nX
 8005694:	27e8ed09 0c35c6e5 1819ede2 1e81a33c     ...'..5.....<...
 80056a4:	56c652fa 278fd6c0 70864f11 19d5ac08     .R.V...'.O.p....
 80056b4:	d2b533d5 62577734 a1bdddc0 673b8af6     .3..4wWb......;g
 80056c4:	a79ec293 577e7c9a c3b266b1 bb6de651     .....|~W.f..Q.m.
 80056d4:	b65259b3 e7e9303a d03a7480 d6a0afd3     .YR.:0...t:.....
 80056e4:	9b3cfc27 c5ac83d1 5d18b99b 60b4619a     '.<........].a.`
 80056f4:	1ae5aa1c bd6a38e1 49e73658 b8b7652b     .....8j.X6.I+e..
 8005704:	ee5f87ed 0b130014 aeebffcd 9d0f27b2     .._..........'..
 8005714:	7a730a55 ca924631 ddbbc83a 9c955b2f     U.sz1F..:.../[..
 8005724:	ac019a71 07c1dfe0 356ec48d 244a566d     q.........n5mVJ$
 8005734:	f4f8b16a 56f8410e c47b266a 97241afe     j....A.Vj&{...$.
 8005744:	6d9c87c1 0a406b8e cd42ab1b 803f3e02     ...m.k@...B..>?.
 8005754:	04dbec69 7f0309a8 3bbad05f a83b85f7     i......._..;..;.
 8005764:	ad8e197f c6097273 5067adc1 c097440e     ....sr....gP.D..
 8005774:	c379ab34 846a56f2 841df8d1 a8ee068b     4.y..Vj.........
 8005784:	176c68ef 20314459 915f1f30 f1af32d5     .hl.YD1 0._..2..
 8005794:	5d75bd50 99c37531 f72f67bc 837cffba     P.u]1u...g/...|.
 80057a4:	48d7723f 0613a418 e2d41c8b 23d0f130     ?r.H........0..#
 80057b4:	d5be5a2b ed93e225 5934f3c6 6fe79983     +Z..%.....4Y...o
 80057c4:	22626ffc 43140926 7990216a 50bbb4d9     .ob"&..Cj!.y...P
 80057d4:	e57ec63e 378191c6 181dcdb2 65422c40     >.~....7....@,Be
 80057e4:	0236e0f6 41a8099b 01fe49c3 2b100118     ..6....A.I.....+
 80057f4:	9b391593 fc68b5c5 598270fc c385f5a2     ..9...h..p.Y....
 8005804:	d19adcbb 7144f3aa 83fbae0c dd558999     ......Dq......U.
 8005814:	74b82ff4 93b88b8e 71e734c9 d2e03c40     ./.t.....4.q@<..
 8005824:	43c0322a 9a7a9eaf 149d6041 e6e4c551     *2.C..z.A`..Q...
 8005834:	80ec21fe 5fe14bfe c255be82 f6ce116a     .!...K._..U.j...
 8005844:	2f4a5d67 98bc5a07 db7e63af fad27148     g]J/.Z...c~.Hq..
 8005854:	29ab05b3 90c0b6ac 4e251ae6 37a9a83c     ...)......%N<..7
 8005864:	c2aade7d 0a7dc875 9f0e1a84 77387de3     }...u.}......}8w
 8005874:	a56c0dd7 1e9ecc49 46086c74 a5cffcd8     ..l.I...tl.F....
 8005884:	f505aece 8f7a1408 bef0c47e b37b85c0     ......z.~.....{.
 8005894:	cc0e6a8f 3596b6e4 6b388f23 fd6d4bbf     .j.....5#.8k.Km.
 80058a4:	c39cef4e aba453fa f9f628d5 9c135ac8     N....S...(...Z..
 80058b4:	95c8f8be 0a1c7294 3bf362bf 2961c480     .....r...b.;..a)
 80058c4:	df63d4ac 9e418403 91ece900 c109f9cb     ..c...A.........
 80058d4:	58945705 c2d095d0 ddeb85c0 b9083d96     .W.X.........=..
 80058e4:	7a40449b 84692b8d 2eee1ee1 9bc3344f     .D@z.+i.....O4..
 80058f4:	42913074 0d5ae356 48a542b1 55491b27     t0.BV.Z..B.H'.IU
 8005904:	b310732a 469ca665 5f1a4cc1 29591d52     *s..e..F.L._R.Y)
 8005914:	b84f983f e76f5b6b 9f5f84e1 be7eef41     ?.O.k[o..._.A.~.
 8005924:	80baa189 1200d496 18ef332c 6376551f     ........,3...Uvc
 8005934:	50434553 52363532 00000031 46464646     SECP256R1...FFFF
 8005944:	46464646 30303030 31303030 30303030     FFFF000000010000
 8005954:	30303030 30303030 30303030 30303030     0000000000000000
 8005964:	30303030 46464646 46464646 46464646     0000FFFFFFFFFFFF
 8005974:	46464646 46464646 46464646 00000000     FFFFFFFFFFFF....
 8005984:	46464646 46464646 30303030 31303030     FFFFFFFF00000001
 8005994:	30303030 30303030 30303030 30303030     0000000000000000
 80059a4:	30303030 30303030 46464646 46464646     00000000FFFFFFFF
 80059b4:	46464646 46464646 46464646 43464646     FFFFFFFFFFFFFFFC
 80059c4:	00000000 36434135 38443533 41334141     ....5AC635D8AA3A
 80059d4:	37453339 42453342 35354442 38393637     93E7B3EBBD557698
 80059e4:	43423638 44313536 30423630 33354343     86BC651D06B0CC53
 80059f4:	36463042 45434233 45334333 32443732     B0F63BCE3C3E27D2
 8005a04:	42343036 00000000 46464646 46464646     604B....FFFFFFFF
 8005a14:	30303030 30303030 46464646 46464646     00000000FFFFFFFF
 8005a24:	46464646 46464646 36454342 44414146     FFFFFFFFBCE6FAAD
 8005a34:	37313741 34384539 39423346 32434143     A7179E84F3B9CAC2
 8005a44:	33364346 31353532 00000000 37314236     FC632551....6B17
 8005a54:	32463144 43323145 37343234 43423846     D1F2E12C4247F8BC
 8005a64:	35453645 34413336 32463034 33303737     E6E563A440F27703
 8005a74:	31384437 42454432 30413333 31413446     7D812DEB33A0F4A1
 8005a84:	35343933 38393844 36393243 00000000     3945D898C296....
 8005a94:	33454634 32453234 41314546 42394637     4FE342E2FE1A7F9B
 8005aa4:	37454538 41344245 46304337 36314539     8EE7EB4A7C0F9E16
 8005ab4:	45434232 37353333 31334236 45434535     2BCE33576B315ECE
 8005ac4:	36424243 38363034 46423733 35463135     CBB6406837BF51F5
 8005ad4:	00000000                                ....

08005ad8 <ecc_oid_secp256r1>:
 8005ad8:	ce48862a 0701033d                       *.H.=...

08005ae0 <ecc_sets>:
 8005ae0:	00000020 00000007 08005934 08005940      .......4Y..@Y..
 8005af0:	08005984 080059c8 08005a0c 08005a50     .Y...Y...Z..PZ..
 8005b00:	08005a94 08005ad8 00000008 0000020e     .Z...Z..........
 8005b10:	00000001 00000000 ffffffff 00000000     ................
	...

Disassembly of section .data:

20000000 <AHB_ENABLE_REG>:
20000000:	40021014                                ...@

20000004 <GPIOA_MODER>:
20000004:	48000000                                ...H

20000008 <GPIOA_ODR>:
20000008:	48000014                                ...H

2000000c <GPIOA_PUPDR>:
2000000c:	4800000c                                ...H

20000010 <GPIOA_IDR>:
20000010:	48000010                                ...H

20000014 <wolfboot_version>:
20000014:	00000000                                ....

20000018 <wolfboot_version>:
20000018:	00000000                                ....

2000001c <flash_set_waitstates>:
{
2000001c:	b082      	sub	sp, #8
2000001e:	9001      	str	r0, [sp, #4]
}
20000020:	bf00      	nop
20000022:	b002      	add	sp, #8
20000024:	4770      	bx	lr

20000026 <flash_wait_complete>:
    while ((FLASH_SR & FLASH_SR_BSY) == FLASH_SR_BSY)
20000026:	bf00      	nop
20000028:	4b04      	ldr	r3, [pc, #16]	; (2000003c <flash_wait_complete+0x16>)
2000002a:	681b      	ldr	r3, [r3, #0]
2000002c:	f003 0301 	and.w	r3, r3, #1
20000030:	2b01      	cmp	r3, #1
20000032:	d0f9      	beq.n	20000028 <flash_wait_complete+0x2>
}
20000034:	bf00      	nop
20000036:	bf00      	nop
20000038:	4770      	bx	lr
2000003a:	bf00      	nop
2000003c:	4002200c 	.word	0x4002200c

20000040 <clear_errors>:
    FLASH_SR |= 0b110101;
20000040:	4b03      	ldr	r3, [pc, #12]	; (20000050 <clear_errors+0x10>)
20000042:	681b      	ldr	r3, [r3, #0]
20000044:	4a02      	ldr	r2, [pc, #8]	; (20000050 <clear_errors+0x10>)
20000046:	f043 0335 	orr.w	r3, r3, #53	; 0x35
2000004a:	6013      	str	r3, [r2, #0]
}
2000004c:	bf00      	nop
2000004e:	4770      	bx	lr
20000050:	4002200c 	.word	0x4002200c

20000054 <hal_flash_write>:
{
20000054:	b500      	push	{lr}
20000056:	b08b      	sub	sp, #44	; 0x2c
20000058:	9003      	str	r0, [sp, #12]
2000005a:	9102      	str	r1, [sp, #8]
2000005c:	9201      	str	r2, [sp, #4]
    int i = 0;
2000005e:	2300      	movs	r3, #0
20000060:	9309      	str	r3, [sp, #36]	; 0x24
    flash_wait_complete();
20000062:	f7ff ffe0 	bl	20000026 <flash_wait_complete>
    clear_errors();
20000066:	f7ff ffeb 	bl	20000040 <clear_errors>
    if (address & 0x01) {
2000006a:	9b03      	ldr	r3, [sp, #12]
2000006c:	f003 0301 	and.w	r3, r3, #1
20000070:	2b00      	cmp	r3, #0
20000072:	d02b      	beq.n	200000cc <hal_flash_write+0x78>
        volatile uint16_t *flash_mem = (volatile uint16_t *)(address - 1);
20000074:	9b03      	ldr	r3, [sp, #12]
20000076:	3b01      	subs	r3, #1
20000078:	9308      	str	r3, [sp, #32]
        uint16_t half_word = (data[0] << 8) | (flash_mem[0] & 0xFF);
2000007a:	9b02      	ldr	r3, [sp, #8]
2000007c:	781b      	ldrb	r3, [r3, #0]
2000007e:	021b      	lsls	r3, r3, #8
20000080:	b21a      	sxth	r2, r3
20000082:	9b08      	ldr	r3, [sp, #32]
20000084:	881b      	ldrh	r3, [r3, #0]
20000086:	b29b      	uxth	r3, r3
20000088:	b21b      	sxth	r3, r3
2000008a:	b2db      	uxtb	r3, r3
2000008c:	b21b      	sxth	r3, r3
2000008e:	4313      	orrs	r3, r2
20000090:	b21b      	sxth	r3, r3
20000092:	f8ad 301e 	strh.w	r3, [sp, #30]
        FLASH_CR |= FLASH_CR_PG;
20000096:	4b36      	ldr	r3, [pc, #216]	; (20000170 <hal_flash_write+0x11c>)
20000098:	681b      	ldr	r3, [r3, #0]
2000009a:	4a35      	ldr	r2, [pc, #212]	; (20000170 <hal_flash_write+0x11c>)
2000009c:	f043 0301 	orr.w	r3, r3, #1
200000a0:	6013      	str	r3, [r2, #0]
        flash_mem[0] = half_word;
200000a2:	9b08      	ldr	r3, [sp, #32]
200000a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
200000a8:	801a      	strh	r2, [r3, #0]
        flash_wait_complete();
200000aa:	f7ff ffbc 	bl	20000026 <flash_wait_complete>
        FLASH_CR &= ~FLASH_CR_PG;
200000ae:	4b30      	ldr	r3, [pc, #192]	; (20000170 <hal_flash_write+0x11c>)
200000b0:	681b      	ldr	r3, [r3, #0]
200000b2:	4a2f      	ldr	r2, [pc, #188]	; (20000170 <hal_flash_write+0x11c>)
200000b4:	f023 0301 	bic.w	r3, r3, #1
200000b8:	6013      	str	r3, [r2, #0]
        data++;
200000ba:	9b02      	ldr	r3, [sp, #8]
200000bc:	3301      	adds	r3, #1
200000be:	9302      	str	r3, [sp, #8]
        len--;
200000c0:	9b01      	ldr	r3, [sp, #4]
200000c2:	3b01      	subs	r3, #1
200000c4:	9301      	str	r3, [sp, #4]
        address += 1;
200000c6:	9b03      	ldr	r3, [sp, #12]
200000c8:	3301      	adds	r3, #1
200000ca:	9303      	str	r3, [sp, #12]
    volatile uint16_t *flash_mem = (volatile uint16_t *)address;
200000cc:	9b03      	ldr	r3, [sp, #12]
200000ce:	9306      	str	r3, [sp, #24]
    const uint16_t *hw_data = (uint16_t *)data;
200000d0:	9b02      	ldr	r3, [sp, #8]
200000d2:	9305      	str	r3, [sp, #20]
    for (; i < (len/2); i++) {
200000d4:	e01a      	b.n	2000010c <hal_flash_write+0xb8>
        FLASH_CR |= FLASH_CR_PG;
200000d6:	4b26      	ldr	r3, [pc, #152]	; (20000170 <hal_flash_write+0x11c>)
200000d8:	681b      	ldr	r3, [r3, #0]
200000da:	4a25      	ldr	r2, [pc, #148]	; (20000170 <hal_flash_write+0x11c>)
200000dc:	f043 0301 	orr.w	r3, r3, #1
200000e0:	6013      	str	r3, [r2, #0]
        flash_mem[i] = hw_data[i];
200000e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
200000e4:	005b      	lsls	r3, r3, #1
200000e6:	9a05      	ldr	r2, [sp, #20]
200000e8:	441a      	add	r2, r3
200000ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
200000ec:	005b      	lsls	r3, r3, #1
200000ee:	9906      	ldr	r1, [sp, #24]
200000f0:	440b      	add	r3, r1
200000f2:	8812      	ldrh	r2, [r2, #0]
200000f4:	801a      	strh	r2, [r3, #0]
        flash_wait_complete();
200000f6:	f7ff ff96 	bl	20000026 <flash_wait_complete>
        FLASH_CR &= ~FLASH_CR_PG;
200000fa:	4b1d      	ldr	r3, [pc, #116]	; (20000170 <hal_flash_write+0x11c>)
200000fc:	681b      	ldr	r3, [r3, #0]
200000fe:	4a1c      	ldr	r2, [pc, #112]	; (20000170 <hal_flash_write+0x11c>)
20000100:	f023 0301 	bic.w	r3, r3, #1
20000104:	6013      	str	r3, [r2, #0]
    for (; i < (len/2); i++) {
20000106:	9b09      	ldr	r3, [sp, #36]	; 0x24
20000108:	3301      	adds	r3, #1
2000010a:	9309      	str	r3, [sp, #36]	; 0x24
2000010c:	9b01      	ldr	r3, [sp, #4]
2000010e:	0fda      	lsrs	r2, r3, #31
20000110:	4413      	add	r3, r2
20000112:	105b      	asrs	r3, r3, #1
20000114:	461a      	mov	r2, r3
20000116:	9b09      	ldr	r3, [sp, #36]	; 0x24
20000118:	4293      	cmp	r3, r2
2000011a:	dbdc      	blt.n	200000d6 <hal_flash_write+0x82>
    if (len & 1) {
2000011c:	9b01      	ldr	r3, [sp, #4]
2000011e:	f003 0301 	and.w	r3, r3, #1
20000122:	2b00      	cmp	r3, #0
20000124:	d01e      	beq.n	20000164 <hal_flash_write+0x110>
        FLASH_CR |= FLASH_CR_PG;
20000126:	4b12      	ldr	r3, [pc, #72]	; (20000170 <hal_flash_write+0x11c>)
20000128:	681b      	ldr	r3, [r3, #0]
2000012a:	4a11      	ldr	r2, [pc, #68]	; (20000170 <hal_flash_write+0x11c>)
2000012c:	f043 0301 	orr.w	r3, r3, #1
20000130:	6013      	str	r3, [r2, #0]
        volatile uint16_t half_word = hw_data[i] & 0xFF;
20000132:	9b09      	ldr	r3, [sp, #36]	; 0x24
20000134:	005b      	lsls	r3, r3, #1
20000136:	9a05      	ldr	r2, [sp, #20]
20000138:	4413      	add	r3, r2
2000013a:	881b      	ldrh	r3, [r3, #0]
2000013c:	b2db      	uxtb	r3, r3
2000013e:	b29b      	uxth	r3, r3
20000140:	f8ad 3012 	strh.w	r3, [sp, #18]
        flash_mem[i] = (uint16_t)(half_word);
20000144:	9b09      	ldr	r3, [sp, #36]	; 0x24
20000146:	005b      	lsls	r3, r3, #1
20000148:	9a06      	ldr	r2, [sp, #24]
2000014a:	4413      	add	r3, r2
2000014c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
20000150:	b292      	uxth	r2, r2
20000152:	801a      	strh	r2, [r3, #0]
        flash_wait_complete();
20000154:	f7ff ff67 	bl	20000026 <flash_wait_complete>
        FLASH_CR &= ~FLASH_CR_PG;
20000158:	4b05      	ldr	r3, [pc, #20]	; (20000170 <hal_flash_write+0x11c>)
2000015a:	681b      	ldr	r3, [r3, #0]
2000015c:	4a04      	ldr	r2, [pc, #16]	; (20000170 <hal_flash_write+0x11c>)
2000015e:	f023 0301 	bic.w	r3, r3, #1
20000162:	6013      	str	r3, [r2, #0]
    return 0;
20000164:	2300      	movs	r3, #0
}
20000166:	4618      	mov	r0, r3
20000168:	b00b      	add	sp, #44	; 0x2c
2000016a:	f85d fb04 	ldr.w	pc, [sp], #4
2000016e:	bf00      	nop
20000170:	40022010 	.word	0x40022010

20000174 <hal_flash_unlock>:
    if (FLASH_CR & FLASH_CR_LOCK) {
20000174:	4b06      	ldr	r3, [pc, #24]	; (20000190 <hal_flash_unlock+0x1c>)
20000176:	681b      	ldr	r3, [r3, #0]
20000178:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000017c:	2b00      	cmp	r3, #0
2000017e:	d005      	beq.n	2000018c <hal_flash_unlock+0x18>
        FLASH_KEYR = FLASH_KEY1;
20000180:	4b04      	ldr	r3, [pc, #16]	; (20000194 <hal_flash_unlock+0x20>)
20000182:	4a05      	ldr	r2, [pc, #20]	; (20000198 <hal_flash_unlock+0x24>)
20000184:	601a      	str	r2, [r3, #0]
        FLASH_KEYR = FLASH_KEY2;
20000186:	4b03      	ldr	r3, [pc, #12]	; (20000194 <hal_flash_unlock+0x20>)
20000188:	4a04      	ldr	r2, [pc, #16]	; (2000019c <hal_flash_unlock+0x28>)
2000018a:	601a      	str	r2, [r3, #0]
}
2000018c:	bf00      	nop
2000018e:	4770      	bx	lr
20000190:	40022010 	.word	0x40022010
20000194:	40022004 	.word	0x40022004
20000198:	45670123 	.word	0x45670123
2000019c:	cdef89ab 	.word	0xcdef89ab

200001a0 <hal_flash_lock>:
    FLASH_CR |= FLASH_CR_LOCK;
200001a0:	4b03      	ldr	r3, [pc, #12]	; (200001b0 <hal_flash_lock+0x10>)
200001a2:	681b      	ldr	r3, [r3, #0]
200001a4:	4a02      	ldr	r2, [pc, #8]	; (200001b0 <hal_flash_lock+0x10>)
200001a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
200001aa:	6013      	str	r3, [r2, #0]
}
200001ac:	bf00      	nop
200001ae:	4770      	bx	lr
200001b0:	40022010 	.word	0x40022010

200001b4 <flash_erase_page>:
{
200001b4:	b500      	push	{lr}
200001b6:	b085      	sub	sp, #20
200001b8:	9001      	str	r0, [sp, #4]
    uint32_t addr = page*2048;
200001ba:	9b01      	ldr	r3, [sp, #4]
200001bc:	02db      	lsls	r3, r3, #11
200001be:	9303      	str	r3, [sp, #12]
    if (addr < FLASH_OFFSET)
200001c0:	9b03      	ldr	r3, [sp, #12]
200001c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
200001c6:	d203      	bcs.n	200001d0 <flash_erase_page+0x1c>
        addr += FLASH_OFFSET;
200001c8:	9b03      	ldr	r3, [sp, #12]
200001ca:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
200001ce:	9303      	str	r3, [sp, #12]
    flash_wait_complete();
200001d0:	f7ff ff29 	bl	20000026 <flash_wait_complete>
    FLASH_CR |= FLASH_CR_PER;
200001d4:	4b13      	ldr	r3, [pc, #76]	; (20000224 <flash_erase_page+0x70>)
200001d6:	681b      	ldr	r3, [r3, #0]
200001d8:	4a12      	ldr	r2, [pc, #72]	; (20000224 <flash_erase_page+0x70>)
200001da:	f043 0302 	orr.w	r3, r3, #2
200001de:	6013      	str	r3, [r2, #0]
    FLASH_AR = addr;
200001e0:	4a11      	ldr	r2, [pc, #68]	; (20000228 <flash_erase_page+0x74>)
200001e2:	9b03      	ldr	r3, [sp, #12]
200001e4:	6013      	str	r3, [r2, #0]
    FLASH_CR |= FLASH_CR_STRT;
200001e6:	4b0f      	ldr	r3, [pc, #60]	; (20000224 <flash_erase_page+0x70>)
200001e8:	681b      	ldr	r3, [r3, #0]
200001ea:	4a0e      	ldr	r2, [pc, #56]	; (20000224 <flash_erase_page+0x70>)
200001ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
200001f0:	6013      	str	r3, [r2, #0]
    flash_wait_complete();
200001f2:	f7ff ff18 	bl	20000026 <flash_wait_complete>
    while (!(FLASH_SR & (FLASH_SR_EOP)));
200001f6:	bf00      	nop
200001f8:	4b0c      	ldr	r3, [pc, #48]	; (2000022c <flash_erase_page+0x78>)
200001fa:	681b      	ldr	r3, [r3, #0]
200001fc:	f003 0320 	and.w	r3, r3, #32
20000200:	2b00      	cmp	r3, #0
20000202:	d0f9      	beq.n	200001f8 <flash_erase_page+0x44>
    FLASH_SR |= FLASH_SR_EOP;
20000204:	4b09      	ldr	r3, [pc, #36]	; (2000022c <flash_erase_page+0x78>)
20000206:	681b      	ldr	r3, [r3, #0]
20000208:	4a08      	ldr	r2, [pc, #32]	; (2000022c <flash_erase_page+0x78>)
2000020a:	f043 0320 	orr.w	r3, r3, #32
2000020e:	6013      	str	r3, [r2, #0]
    FLASH_CR &= ~FLASH_CR_PER;
20000210:	4b04      	ldr	r3, [pc, #16]	; (20000224 <flash_erase_page+0x70>)
20000212:	681b      	ldr	r3, [r3, #0]
20000214:	4a03      	ldr	r2, [pc, #12]	; (20000224 <flash_erase_page+0x70>)
20000216:	f023 0302 	bic.w	r3, r3, #2
2000021a:	6013      	str	r3, [r2, #0]
}
2000021c:	bf00      	nop
2000021e:	b005      	add	sp, #20
20000220:	f85d fb04 	ldr.w	pc, [sp], #4
20000224:	40022010 	.word	0x40022010
20000228:	40022014 	.word	0x40022014
2000022c:	4002200c 	.word	0x4002200c

20000230 <hal_flash_erase>:
{
20000230:	b500      	push	{lr}
20000232:	b087      	sub	sp, #28
20000234:	9001      	str	r0, [sp, #4]
20000236:	9100      	str	r1, [sp, #0]
    int start = -1, end = -1;
20000238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2000023c:	9305      	str	r3, [sp, #20]
2000023e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20000242:	9304      	str	r3, [sp, #16]
    if (len == 0)
20000244:	9b00      	ldr	r3, [sp, #0]
20000246:	2b00      	cmp	r3, #0
20000248:	d102      	bne.n	20000250 <hal_flash_erase+0x20>
        return -1;
2000024a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2000024e:	e053      	b.n	200002f8 <hal_flash_erase+0xc8>
    if (address >= FLASH_OFFSET)
20000250:	9b01      	ldr	r3, [sp, #4]
20000252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
20000256:	d303      	bcc.n	20000260 <hal_flash_erase+0x30>
        address -= FLASH_OFFSET;
20000258:	9b01      	ldr	r3, [sp, #4]
2000025a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
2000025e:	9301      	str	r3, [sp, #4]
    end_address = address + len - 1;
20000260:	9a00      	ldr	r2, [sp, #0]
20000262:	9b01      	ldr	r3, [sp, #4]
20000264:	4413      	add	r3, r2
20000266:	3b01      	subs	r3, #1
20000268:	9302      	str	r3, [sp, #8]
    for (i = 0; i < 255; i++)
2000026a:	2300      	movs	r3, #0
2000026c:	9303      	str	r3, [sp, #12]
2000026e:	e026      	b.n	200002be <hal_flash_erase+0x8e>
        if ((address >= (2048*i)) && (address < (2048*(i+1)))) {
20000270:	9b03      	ldr	r3, [sp, #12]
20000272:	02db      	lsls	r3, r3, #11
20000274:	461a      	mov	r2, r3
20000276:	9b01      	ldr	r3, [sp, #4]
20000278:	4293      	cmp	r3, r2
2000027a:	d308      	bcc.n	2000028e <hal_flash_erase+0x5e>
2000027c:	9b03      	ldr	r3, [sp, #12]
2000027e:	3301      	adds	r3, #1
20000280:	02db      	lsls	r3, r3, #11
20000282:	461a      	mov	r2, r3
20000284:	9b01      	ldr	r3, [sp, #4]
20000286:	4293      	cmp	r3, r2
20000288:	d201      	bcs.n	2000028e <hal_flash_erase+0x5e>
            start = i;
2000028a:	9b03      	ldr	r3, [sp, #12]
2000028c:	9305      	str	r3, [sp, #20]
        if ((end_address >= (2048*i)) && (end_address < (2048*(i+1)))) {
2000028e:	9b03      	ldr	r3, [sp, #12]
20000290:	02db      	lsls	r3, r3, #11
20000292:	461a      	mov	r2, r3
20000294:	9b02      	ldr	r3, [sp, #8]
20000296:	4293      	cmp	r3, r2
20000298:	d308      	bcc.n	200002ac <hal_flash_erase+0x7c>
2000029a:	9b03      	ldr	r3, [sp, #12]
2000029c:	3301      	adds	r3, #1
2000029e:	02db      	lsls	r3, r3, #11
200002a0:	461a      	mov	r2, r3
200002a2:	9b02      	ldr	r3, [sp, #8]
200002a4:	4293      	cmp	r3, r2
200002a6:	d201      	bcs.n	200002ac <hal_flash_erase+0x7c>
            end = i;
200002a8:	9b03      	ldr	r3, [sp, #12]
200002aa:	9304      	str	r3, [sp, #16]
        if (start > 0 && end > 0)
200002ac:	9b05      	ldr	r3, [sp, #20]
200002ae:	2b00      	cmp	r3, #0
200002b0:	dd02      	ble.n	200002b8 <hal_flash_erase+0x88>
200002b2:	9b04      	ldr	r3, [sp, #16]
200002b4:	2b00      	cmp	r3, #0
200002b6:	dc06      	bgt.n	200002c6 <hal_flash_erase+0x96>
    for (i = 0; i < 255; i++)
200002b8:	9b03      	ldr	r3, [sp, #12]
200002ba:	3301      	adds	r3, #1
200002bc:	9303      	str	r3, [sp, #12]
200002be:	9b03      	ldr	r3, [sp, #12]
200002c0:	2bfe      	cmp	r3, #254	; 0xfe
200002c2:	ddd5      	ble.n	20000270 <hal_flash_erase+0x40>
200002c4:	e000      	b.n	200002c8 <hal_flash_erase+0x98>
            break;
200002c6:	bf00      	nop
    if (start < 0 || end < 0)
200002c8:	9b05      	ldr	r3, [sp, #20]
200002ca:	2b00      	cmp	r3, #0
200002cc:	db02      	blt.n	200002d4 <hal_flash_erase+0xa4>
200002ce:	9b04      	ldr	r3, [sp, #16]
200002d0:	2b00      	cmp	r3, #0
200002d2:	da02      	bge.n	200002da <hal_flash_erase+0xaa>
        return -1;
200002d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200002d8:	e00e      	b.n	200002f8 <hal_flash_erase+0xc8>
    for (i = start; i <= end; i++)
200002da:	9b05      	ldr	r3, [sp, #20]
200002dc:	9303      	str	r3, [sp, #12]
200002de:	e006      	b.n	200002ee <hal_flash_erase+0xbe>
        flash_erase_page(i);
200002e0:	9b03      	ldr	r3, [sp, #12]
200002e2:	4618      	mov	r0, r3
200002e4:	f7ff ff66 	bl	200001b4 <flash_erase_page>
    for (i = start; i <= end; i++)
200002e8:	9b03      	ldr	r3, [sp, #12]
200002ea:	3301      	adds	r3, #1
200002ec:	9303      	str	r3, [sp, #12]
200002ee:	9a03      	ldr	r2, [sp, #12]
200002f0:	9b04      	ldr	r3, [sp, #16]
200002f2:	429a      	cmp	r2, r3
200002f4:	ddf4      	ble.n	200002e0 <hal_flash_erase+0xb0>
    return 0;
200002f6:	2300      	movs	r3, #0
}
200002f8:	4618      	mov	r0, r3
200002fa:	b007      	add	sp, #28
200002fc:	f85d fb04 	ldr.w	pc, [sp], #4

20000300 <get_trailer_at>:
{
20000300:	b082      	sub	sp, #8
20000302:	4603      	mov	r3, r0
20000304:	9100      	str	r1, [sp, #0]
20000306:	f88d 3007 	strb.w	r3, [sp, #7]
    if (part == PART_BOOT)
2000030a:	f89d 3007 	ldrb.w	r3, [sp, #7]
2000030e:	2b00      	cmp	r3, #0
20000310:	d103      	bne.n	2000031a <get_trailer_at+0x1a>
        return (void *)(PART_BOOT_ENDFLAGS - (sizeof(uint32_t) + at));
20000312:	9a00      	ldr	r2, [sp, #0]
20000314:	4b07      	ldr	r3, [pc, #28]	; (20000334 <get_trailer_at+0x34>)
20000316:	1a9b      	subs	r3, r3, r2
20000318:	e008      	b.n	2000032c <get_trailer_at+0x2c>
    else if (part == PART_UPDATE) {
2000031a:	f89d 3007 	ldrb.w	r3, [sp, #7]
2000031e:	2b01      	cmp	r3, #1
20000320:	d103      	bne.n	2000032a <get_trailer_at+0x2a>
        return (void *)(PART_UPDATE_ENDFLAGS - (sizeof(uint32_t) + at));
20000322:	9a00      	ldr	r2, [sp, #0]
20000324:	4b04      	ldr	r3, [pc, #16]	; (20000338 <get_trailer_at+0x38>)
20000326:	1a9b      	subs	r3, r3, r2
20000328:	e000      	b.n	2000032c <get_trailer_at+0x2c>
        return NULL;
2000032a:	2300      	movs	r3, #0
}
2000032c:	4618      	mov	r0, r3
2000032e:	b002      	add	sp, #8
20000330:	4770      	bx	lr
20000332:	bf00      	nop
20000334:	0800fffc 	.word	0x0800fffc
20000338:	08017ffc 	.word	0x08017ffc

2000033c <set_trailer_at>:
{
2000033c:	b500      	push	{lr}
2000033e:	b083      	sub	sp, #12
20000340:	4603      	mov	r3, r0
20000342:	9100      	str	r1, [sp, #0]
20000344:	f88d 3007 	strb.w	r3, [sp, #7]
20000348:	4613      	mov	r3, r2
2000034a:	f88d 3006 	strb.w	r3, [sp, #6]
    if (part == PART_BOOT) {
2000034e:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000352:	2b00      	cmp	r3, #0
20000354:	d109      	bne.n	2000036a <set_trailer_at+0x2e>
        hal_trailer_write(PART_BOOT_ENDFLAGS - (sizeof(uint32_t) + at), val);
20000356:	9a00      	ldr	r2, [sp, #0]
20000358:	4b0c      	ldr	r3, [pc, #48]	; (2000038c <set_trailer_at+0x50>)
2000035a:	1a9b      	subs	r3, r3, r2
2000035c:	f10d 0106 	add.w	r1, sp, #6
20000360:	2201      	movs	r2, #1
20000362:	4618      	mov	r0, r3
20000364:	f7ff fe76 	bl	20000054 <hal_flash_write>
}
20000368:	e00c      	b.n	20000384 <set_trailer_at+0x48>
    else if (part == PART_UPDATE) {
2000036a:	f89d 3007 	ldrb.w	r3, [sp, #7]
2000036e:	2b01      	cmp	r3, #1
20000370:	d108      	bne.n	20000384 <set_trailer_at+0x48>
        hal_trailer_write(PART_UPDATE_ENDFLAGS - (sizeof(uint32_t) + at), val);
20000372:	9a00      	ldr	r2, [sp, #0]
20000374:	4b06      	ldr	r3, [pc, #24]	; (20000390 <set_trailer_at+0x54>)
20000376:	1a9b      	subs	r3, r3, r2
20000378:	f10d 0106 	add.w	r1, sp, #6
2000037c:	2201      	movs	r2, #1
2000037e:	4618      	mov	r0, r3
20000380:	f7ff fe68 	bl	20000054 <hal_flash_write>
}
20000384:	bf00      	nop
20000386:	b003      	add	sp, #12
20000388:	f85d fb04 	ldr.w	pc, [sp], #4
2000038c:	0800fffc 	.word	0x0800fffc
20000390:	08017ffc 	.word	0x08017ffc

20000394 <set_partition_magic>:
{
20000394:	b500      	push	{lr}
20000396:	b083      	sub	sp, #12
20000398:	4603      	mov	r3, r0
2000039a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (part == PART_BOOT) {
2000039e:	f89d 3007 	ldrb.w	r3, [sp, #7]
200003a2:	2b00      	cmp	r3, #0
200003a4:	d105      	bne.n	200003b2 <set_partition_magic+0x1e>
        hal_set_partition_magic(PART_BOOT_ENDFLAGS - sizeof(uint32_t));
200003a6:	2204      	movs	r2, #4
200003a8:	4908      	ldr	r1, [pc, #32]	; (200003cc <set_partition_magic+0x38>)
200003aa:	4809      	ldr	r0, [pc, #36]	; (200003d0 <set_partition_magic+0x3c>)
200003ac:	f7ff fe52 	bl	20000054 <hal_flash_write>
}
200003b0:	e008      	b.n	200003c4 <set_partition_magic+0x30>
    else if (part == PART_UPDATE) {
200003b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
200003b6:	2b01      	cmp	r3, #1
200003b8:	d104      	bne.n	200003c4 <set_partition_magic+0x30>
        hal_set_partition_magic(PART_UPDATE_ENDFLAGS - sizeof(uint32_t));
200003ba:	2204      	movs	r2, #4
200003bc:	4903      	ldr	r1, [pc, #12]	; (200003cc <set_partition_magic+0x38>)
200003be:	4805      	ldr	r0, [pc, #20]	; (200003d4 <set_partition_magic+0x40>)
200003c0:	f7ff fe48 	bl	20000054 <hal_flash_write>
}
200003c4:	bf00      	nop
200003c6:	b003      	add	sp, #12
200003c8:	f85d fb04 	ldr.w	pc, [sp], #4
200003cc:	08005268 	.word	0x08005268
200003d0:	0800fffc 	.word	0x0800fffc
200003d4:	08017ffc 	.word	0x08017ffc

200003d8 <get_partition_magic>:
{
200003d8:	b500      	push	{lr}
200003da:	b083      	sub	sp, #12
200003dc:	4603      	mov	r3, r0
200003de:	f88d 3007 	strb.w	r3, [sp, #7]
    return (uint32_t *)get_trailer_at(part, 0);
200003e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
200003e6:	2100      	movs	r1, #0
200003e8:	4618      	mov	r0, r3
200003ea:	f7ff ff89 	bl	20000300 <get_trailer_at>
200003ee:	4603      	mov	r3, r0
}
200003f0:	4618      	mov	r0, r3
200003f2:	b003      	add	sp, #12
200003f4:	f85d fb04 	ldr.w	pc, [sp], #4

200003f8 <get_partition_state>:
{
200003f8:	b500      	push	{lr}
200003fa:	b083      	sub	sp, #12
200003fc:	4603      	mov	r3, r0
200003fe:	f88d 3007 	strb.w	r3, [sp, #7]
    return (uint8_t *)get_trailer_at(part, 1);
20000402:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000406:	2101      	movs	r1, #1
20000408:	4618      	mov	r0, r3
2000040a:	f7ff ff79 	bl	20000300 <get_trailer_at>
2000040e:	4603      	mov	r3, r0
}
20000410:	4618      	mov	r0, r3
20000412:	b003      	add	sp, #12
20000414:	f85d fb04 	ldr.w	pc, [sp], #4

20000418 <set_partition_state>:
{
20000418:	b500      	push	{lr}
2000041a:	b083      	sub	sp, #12
2000041c:	4603      	mov	r3, r0
2000041e:	460a      	mov	r2, r1
20000420:	f88d 3007 	strb.w	r3, [sp, #7]
20000424:	4613      	mov	r3, r2
20000426:	f88d 3006 	strb.w	r3, [sp, #6]
    set_trailer_at(part, 1, val);
2000042a:	f89d 2006 	ldrb.w	r2, [sp, #6]
2000042e:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000432:	2101      	movs	r1, #1
20000434:	4618      	mov	r0, r3
20000436:	f7ff ff81 	bl	2000033c <set_trailer_at>
}
2000043a:	bf00      	nop
2000043c:	b003      	add	sp, #12
2000043e:	f85d fb04 	ldr.w	pc, [sp], #4

20000442 <set_update_sector_flags>:
{
20000442:	b500      	push	{lr}
20000444:	b083      	sub	sp, #12
20000446:	9001      	str	r0, [sp, #4]
20000448:	460b      	mov	r3, r1
2000044a:	f88d 3003 	strb.w	r3, [sp, #3]
    set_trailer_at(PART_UPDATE, 2 + pos, val);
2000044e:	9b01      	ldr	r3, [sp, #4]
20000450:	3302      	adds	r3, #2
20000452:	f89d 2003 	ldrb.w	r2, [sp, #3]
20000456:	4619      	mov	r1, r3
20000458:	2001      	movs	r0, #1
2000045a:	f7ff ff6f 	bl	2000033c <set_trailer_at>
}
2000045e:	bf00      	nop
20000460:	b003      	add	sp, #12
20000462:	f85d fb04 	ldr.w	pc, [sp], #4

20000466 <get_update_sector_flags>:
{
20000466:	b500      	push	{lr}
20000468:	b083      	sub	sp, #12
2000046a:	9001      	str	r0, [sp, #4]
    return (uint8_t *)get_trailer_at(PART_UPDATE, 2 + pos);
2000046c:	9b01      	ldr	r3, [sp, #4]
2000046e:	3302      	adds	r3, #2
20000470:	4619      	mov	r1, r3
20000472:	2001      	movs	r0, #1
20000474:	f7ff ff44 	bl	20000300 <get_trailer_at>
20000478:	4603      	mov	r3, r0
}
2000047a:	4618      	mov	r0, r3
2000047c:	b003      	add	sp, #12
2000047e:	f85d fb04 	ldr.w	pc, [sp], #4

20000482 <wolfBoot_set_partition_state>:
{
20000482:	b500      	push	{lr}
20000484:	b085      	sub	sp, #20
20000486:	4603      	mov	r3, r0
20000488:	460a      	mov	r2, r1
2000048a:	f88d 3007 	strb.w	r3, [sp, #7]
2000048e:	4613      	mov	r3, r2
20000490:	f88d 3006 	strb.w	r3, [sp, #6]
    magic = get_partition_magic(part);
20000494:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000498:	4618      	mov	r0, r3
2000049a:	f7ff ff9d 	bl	200003d8 <get_partition_magic>
2000049e:	9003      	str	r0, [sp, #12]
    if (*magic != WOLFBOOT_MAGIC_TRAIL)
200004a0:	9b03      	ldr	r3, [sp, #12]
200004a2:	681b      	ldr	r3, [r3, #0]
200004a4:	4a10      	ldr	r2, [pc, #64]	; (200004e8 <wolfBoot_set_partition_state+0x66>)
200004a6:	4293      	cmp	r3, r2
200004a8:	d004      	beq.n	200004b4 <wolfBoot_set_partition_state+0x32>
        set_partition_magic(part);
200004aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
200004ae:	4618      	mov	r0, r3
200004b0:	f7ff ff70 	bl	20000394 <set_partition_magic>
    state = get_partition_state(part);
200004b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
200004b8:	4618      	mov	r0, r3
200004ba:	f7ff ff9d 	bl	200003f8 <get_partition_state>
200004be:	9002      	str	r0, [sp, #8]
    if (*state != newst)
200004c0:	9b02      	ldr	r3, [sp, #8]
200004c2:	781b      	ldrb	r3, [r3, #0]
200004c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
200004c8:	429a      	cmp	r2, r3
200004ca:	d007      	beq.n	200004dc <wolfBoot_set_partition_state+0x5a>
        set_partition_state(part, newst);
200004cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
200004d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
200004d4:	4611      	mov	r1, r2
200004d6:	4618      	mov	r0, r3
200004d8:	f7ff ff9e 	bl	20000418 <set_partition_state>
    return 0;
200004dc:	2300      	movs	r3, #0
}
200004de:	4618      	mov	r0, r3
200004e0:	b005      	add	sp, #20
200004e2:	f85d fb04 	ldr.w	pc, [sp], #4
200004e6:	bf00      	nop
200004e8:	544f4f42 	.word	0x544f4f42

200004ec <wolfBoot_set_update_sector_flag>:
{
200004ec:	b500      	push	{lr}
200004ee:	b087      	sub	sp, #28
200004f0:	4603      	mov	r3, r0
200004f2:	460a      	mov	r2, r1
200004f4:	f8ad 3006 	strh.w	r3, [sp, #6]
200004f8:	4613      	mov	r3, r2
200004fa:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8_t pos = sector >> 1;
200004fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
20000502:	085b      	lsrs	r3, r3, #1
20000504:	b29b      	uxth	r3, r3
20000506:	f88d 3016 	strb.w	r3, [sp, #22]
    magic = get_partition_magic(PART_UPDATE);
2000050a:	2001      	movs	r0, #1
2000050c:	f7ff ff64 	bl	200003d8 <get_partition_magic>
20000510:	9004      	str	r0, [sp, #16]
    if (*magic != wolfboot_magic_trail)
20000512:	9b04      	ldr	r3, [sp, #16]
20000514:	681b      	ldr	r3, [r3, #0]
20000516:	4a22      	ldr	r2, [pc, #136]	; (200005a0 <wolfBoot_set_update_sector_flag+0xb4>)
20000518:	4293      	cmp	r3, r2
2000051a:	d002      	beq.n	20000522 <wolfBoot_set_update_sector_flag+0x36>
        set_partition_magic(PART_UPDATE);
2000051c:	2001      	movs	r0, #1
2000051e:	f7ff ff39 	bl	20000394 <set_partition_magic>
    flags = get_update_sector_flags(pos);
20000522:	f89d 3016 	ldrb.w	r3, [sp, #22]
20000526:	4618      	mov	r0, r3
20000528:	f7ff ff9d 	bl	20000466 <get_update_sector_flags>
2000052c:	9003      	str	r0, [sp, #12]
    if (sector == (pos << 1))
2000052e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
20000532:	f89d 3016 	ldrb.w	r3, [sp, #22]
20000536:	005b      	lsls	r3, r3, #1
20000538:	429a      	cmp	r2, r3
2000053a:	d10f      	bne.n	2000055c <wolfBoot_set_update_sector_flag+0x70>
        fl_value = (*flags & 0xF0) | (newflag & 0x0F);
2000053c:	9b03      	ldr	r3, [sp, #12]
2000053e:	781b      	ldrb	r3, [r3, #0]
20000540:	b25b      	sxtb	r3, r3
20000542:	f023 030f 	bic.w	r3, r3, #15
20000546:	b25a      	sxtb	r2, r3
20000548:	f99d 3005 	ldrsb.w	r3, [sp, #5]
2000054c:	f003 030f 	and.w	r3, r3, #15
20000550:	b25b      	sxtb	r3, r3
20000552:	4313      	orrs	r3, r2
20000554:	b25b      	sxtb	r3, r3
20000556:	f88d 3017 	strb.w	r3, [sp, #23]
2000055a:	e00d      	b.n	20000578 <wolfBoot_set_update_sector_flag+0x8c>
        fl_value = ((newflag & 0x0F) << 4) | (*flags & 0x0F);
2000055c:	f89d 3005 	ldrb.w	r3, [sp, #5]
20000560:	011b      	lsls	r3, r3, #4
20000562:	b25a      	sxtb	r2, r3
20000564:	9b03      	ldr	r3, [sp, #12]
20000566:	781b      	ldrb	r3, [r3, #0]
20000568:	b25b      	sxtb	r3, r3
2000056a:	f003 030f 	and.w	r3, r3, #15
2000056e:	b25b      	sxtb	r3, r3
20000570:	4313      	orrs	r3, r2
20000572:	b25b      	sxtb	r3, r3
20000574:	f88d 3017 	strb.w	r3, [sp, #23]
    if (fl_value != *flags)
20000578:	9b03      	ldr	r3, [sp, #12]
2000057a:	781b      	ldrb	r3, [r3, #0]
2000057c:	f89d 2017 	ldrb.w	r2, [sp, #23]
20000580:	429a      	cmp	r2, r3
20000582:	d007      	beq.n	20000594 <wolfBoot_set_update_sector_flag+0xa8>
        set_update_sector_flags(pos, fl_value);
20000584:	f89d 3016 	ldrb.w	r3, [sp, #22]
20000588:	f89d 2017 	ldrb.w	r2, [sp, #23]
2000058c:	4611      	mov	r1, r2
2000058e:	4618      	mov	r0, r3
20000590:	f7ff ff57 	bl	20000442 <set_update_sector_flags>
    return 0;
20000594:	2300      	movs	r3, #0
}
20000596:	4618      	mov	r0, r3
20000598:	b007      	add	sp, #28
2000059a:	f85d fb04 	ldr.w	pc, [sp], #4
2000059e:	bf00      	nop
200005a0:	544f4f42 	.word	0x544f4f42

200005a4 <wolfBoot_get_partition_state>:
{
200005a4:	b500      	push	{lr}
200005a6:	b085      	sub	sp, #20
200005a8:	4603      	mov	r3, r0
200005aa:	9100      	str	r1, [sp, #0]
200005ac:	f88d 3007 	strb.w	r3, [sp, #7]
    magic = get_partition_magic(part);
200005b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
200005b4:	4618      	mov	r0, r3
200005b6:	f7ff ff0f 	bl	200003d8 <get_partition_magic>
200005ba:	9003      	str	r0, [sp, #12]
    if (*magic != WOLFBOOT_MAGIC_TRAIL)
200005bc:	9b03      	ldr	r3, [sp, #12]
200005be:	681b      	ldr	r3, [r3, #0]
200005c0:	4a0a      	ldr	r2, [pc, #40]	; (200005ec <wolfBoot_get_partition_state+0x48>)
200005c2:	4293      	cmp	r3, r2
200005c4:	d002      	beq.n	200005cc <wolfBoot_get_partition_state+0x28>
        return -1;
200005c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200005ca:	e00a      	b.n	200005e2 <wolfBoot_get_partition_state+0x3e>
    state = get_partition_state(part);
200005cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
200005d0:	4618      	mov	r0, r3
200005d2:	f7ff ff11 	bl	200003f8 <get_partition_state>
200005d6:	9002      	str	r0, [sp, #8]
    *st = *state;
200005d8:	9b02      	ldr	r3, [sp, #8]
200005da:	781a      	ldrb	r2, [r3, #0]
200005dc:	9b00      	ldr	r3, [sp, #0]
200005de:	701a      	strb	r2, [r3, #0]
    return 0;
200005e0:	2300      	movs	r3, #0
}
200005e2:	4618      	mov	r0, r3
200005e4:	b005      	add	sp, #20
200005e6:	f85d fb04 	ldr.w	pc, [sp], #4
200005ea:	bf00      	nop
200005ec:	544f4f42 	.word	0x544f4f42

200005f0 <wolfBoot_erase_partition>:
{
200005f0:	b500      	push	{lr}
200005f2:	b083      	sub	sp, #12
200005f4:	4603      	mov	r3, r0
200005f6:	f88d 3007 	strb.w	r3, [sp, #7]
    if (part == PART_BOOT) {
200005fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
200005fe:	2b00      	cmp	r3, #0
20000600:	d104      	bne.n	2000060c <wolfBoot_erase_partition+0x1c>
            hal_flash_erase(WOLFBOOT_PARTITION_BOOT_ADDRESS, WOLFBOOT_PARTITION_SIZE);
20000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
20000606:	480c      	ldr	r0, [pc, #48]	; (20000638 <wolfBoot_erase_partition+0x48>)
20000608:	f7ff fe12 	bl	20000230 <hal_flash_erase>
    if (part == PART_UPDATE) {
2000060c:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000610:	2b01      	cmp	r3, #1
20000612:	d104      	bne.n	2000061e <wolfBoot_erase_partition+0x2e>
            hal_flash_erase(WOLFBOOT_PARTITION_UPDATE_ADDRESS, WOLFBOOT_PARTITION_SIZE);
20000614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
20000618:	4808      	ldr	r0, [pc, #32]	; (2000063c <wolfBoot_erase_partition+0x4c>)
2000061a:	f7ff fe09 	bl	20000230 <hal_flash_erase>
    if (part == PART_SWAP) {
2000061e:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000622:	2b02      	cmp	r3, #2
20000624:	d104      	bne.n	20000630 <wolfBoot_erase_partition+0x40>
            hal_flash_erase(WOLFBOOT_PARTITION_SWAP_ADDRESS, WOLFBOOT_SECTOR_SIZE);
20000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
2000062a:	4805      	ldr	r0, [pc, #20]	; (20000640 <wolfBoot_erase_partition+0x50>)
2000062c:	f7ff fe00 	bl	20000230 <hal_flash_erase>
}
20000630:	bf00      	nop
20000632:	b003      	add	sp, #12
20000634:	f85d fb04 	ldr.w	pc, [sp], #4
20000638:	08008000 	.word	0x08008000
2000063c:	08010000 	.word	0x08010000
20000640:	08018000 	.word	0x08018000

20000644 <wolfBoot_update_trigger>:
{
20000644:	b500      	push	{lr}
20000646:	b083      	sub	sp, #12
    uint8_t st = IMG_STATE_UPDATING;
20000648:	2370      	movs	r3, #112	; 0x70
2000064a:	f88d 3007 	strb.w	r3, [sp, #7]
        hal_flash_unlock();
2000064e:	f7ff fd91 	bl	20000174 <hal_flash_unlock>
        wolfBoot_set_partition_state(PART_UPDATE, st);
20000652:	f89d 3007 	ldrb.w	r3, [sp, #7]
20000656:	4619      	mov	r1, r3
20000658:	2001      	movs	r0, #1
2000065a:	f7ff ff12 	bl	20000482 <wolfBoot_set_partition_state>
        hal_flash_lock();
2000065e:	f7ff fd9f 	bl	200001a0 <hal_flash_lock>
}
20000662:	bf00      	nop
20000664:	b003      	add	sp, #12
20000666:	f85d fb04 	ldr.w	pc, [sp], #4

2000066a <wolfBoot_success>:
{
2000066a:	b500      	push	{lr}
2000066c:	b083      	sub	sp, #12
    uint8_t st = IMG_STATE_SUCCESS;
2000066e:	2300      	movs	r3, #0
20000670:	f88d 3007 	strb.w	r3, [sp, #7]
        hal_flash_unlock();
20000674:	f7ff fd7e 	bl	20000174 <hal_flash_unlock>
        wolfBoot_set_partition_state(PART_BOOT, st);
20000678:	f89d 3007 	ldrb.w	r3, [sp, #7]
2000067c:	4619      	mov	r1, r3
2000067e:	2000      	movs	r0, #0
20000680:	f7ff feff 	bl	20000482 <wolfBoot_set_partition_state>
        hal_flash_lock();
20000684:	f7ff fd8c 	bl	200001a0 <hal_flash_lock>
}
20000688:	bf00      	nop
2000068a:	b003      	add	sp, #12
2000068c:	f85d fb04 	ldr.w	pc, [sp], #4

20000690 <mpu_off>:
    mpu_is_on = 0;
20000690:	4b03      	ldr	r3, [pc, #12]	; (200006a0 <mpu_off+0x10>)
20000692:	2200      	movs	r2, #0
20000694:	601a      	str	r2, [r3, #0]
    MPU_CTRL = 0;
20000696:	4b03      	ldr	r3, [pc, #12]	; (200006a4 <mpu_off+0x14>)
20000698:	2200      	movs	r2, #0
2000069a:	601a      	str	r2, [r3, #0]
}
2000069c:	bf00      	nop
2000069e:	4770      	bx	lr
200006a0:	20000c00 	.word	0x20000c00
200006a4:	e000ed94 	.word	0xe000ed94

200006a8 <do_boot>:
{
200006a8:	b500      	push	{lr}
200006aa:	b083      	sub	sp, #12
200006ac:	9001      	str	r0, [sp, #4]
    mpu_off();
200006ae:	f7ff ffef 	bl	20000690 <mpu_off>
    asm volatile("cpsid i");
200006b2:	b672      	cpsid	i
    VTOR = ((uint32_t)app_offset);
200006b4:	4a0c      	ldr	r2, [pc, #48]	; (200006e8 <do_boot+0x40>)
200006b6:	9b01      	ldr	r3, [sp, #4]
200006b8:	6013      	str	r3, [r2, #0]
    app_end_stack = (*((uint32_t *)(app_offset)));
200006ba:	9b01      	ldr	r3, [sp, #4]
200006bc:	681b      	ldr	r3, [r3, #0]
200006be:	4a0b      	ldr	r2, [pc, #44]	; (200006ec <do_boot+0x44>)
200006c0:	6013      	str	r3, [r2, #0]
    app_entry = (void *)(*((uint32_t *)(app_offset + 1)));
200006c2:	9b01      	ldr	r3, [sp, #4]
200006c4:	3304      	adds	r3, #4
200006c6:	681b      	ldr	r3, [r3, #0]
200006c8:	461a      	mov	r2, r3
200006ca:	4b09      	ldr	r3, [pc, #36]	; (200006f0 <do_boot+0x48>)
200006cc:	601a      	str	r2, [r3, #0]
    asm volatile("msr msp, %0" ::"r"(app_end_stack));
200006ce:	4b07      	ldr	r3, [pc, #28]	; (200006ec <do_boot+0x44>)
200006d0:	681b      	ldr	r3, [r3, #0]
200006d2:	f383 8808 	msr	MSP, r3
    asm volatile("cpsie i");
200006d6:	b662      	cpsie	i
    asm volatile("mov pc, %0" ::"r"(app_entry));
200006d8:	4b05      	ldr	r3, [pc, #20]	; (200006f0 <do_boot+0x48>)
200006da:	681b      	ldr	r3, [r3, #0]
200006dc:	469f      	mov	pc, r3
}
200006de:	bf00      	nop
200006e0:	b003      	add	sp, #12
200006e2:	f85d fb04 	ldr.w	pc, [sp], #4
200006e6:	bf00      	nop
200006e8:	e000ed08 	.word	0xe000ed08
200006ec:	20000c08 	.word	0x20000c08
200006f0:	20000c04 	.word	0x20000c04

200006f4 <arch_reboot>:
void RAMFUNCTION arch_reboot(void)
{
#ifdef CORTEX_R5
    SYSECR = ECR_RESET;
#else
    AIRCR = AIRCR_SYSRESETREQ | AIRCR_VKEY;
200006f4:	4b01      	ldr	r3, [pc, #4]	; (200006fc <arch_reboot+0x8>)
200006f6:	4a02      	ldr	r2, [pc, #8]	; (20000700 <arch_reboot+0xc>)
200006f8:	601a      	str	r2, [r3, #0]
#endif
    while(1)
200006fa:	e7fe      	b.n	200006fa <arch_reboot+0x6>
200006fc:	e000ed0c 	.word	0xe000ed0c
20000700:	05fa0004 	.word	0x05fa0004

20000704 <wolfBoot_erase_bootloader>:
{
20000704:	b500      	push	{lr}
20000706:	b083      	sub	sp, #12
    uint32_t *start = (uint32_t *)&_start_text;
20000708:	4b08      	ldr	r3, [pc, #32]	; (2000072c <wolfBoot_erase_bootloader+0x28>)
2000070a:	9301      	str	r3, [sp, #4]
    uint32_t len = WOLFBOOT_PARTITION_BOOT_ADDRESS - (uint32_t)start;
2000070c:	9b01      	ldr	r3, [sp, #4]
2000070e:	f1c3 6300 	rsb	r3, r3, #134217728	; 0x8000000
20000712:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
20000716:	9300      	str	r3, [sp, #0]
    hal_flash_erase((uint32_t)start, len);
20000718:	9b01      	ldr	r3, [sp, #4]
2000071a:	9a00      	ldr	r2, [sp, #0]
2000071c:	4611      	mov	r1, r2
2000071e:	4618      	mov	r0, r3
20000720:	f7ff fd86 	bl	20000230 <hal_flash_erase>
}
20000724:	bf00      	nop
20000726:	b003      	add	sp, #12
20000728:	f85d fb04 	ldr.w	pc, [sp], #4
2000072c:	08000000 	.word	0x08000000

20000730 <wolfBoot_self_update>:
{
20000730:	b500      	push	{lr}
20000732:	b087      	sub	sp, #28
20000734:	9001      	str	r0, [sp, #4]
    uint32_t pos = 0;
20000736:	2300      	movs	r3, #0
20000738:	9305      	str	r3, [sp, #20]
    uint32_t src_offset = IMAGE_HEADER_SIZE;
2000073a:	f44f 7380 	mov.w	r3, #256	; 0x100
2000073e:	9304      	str	r3, [sp, #16]
    hal_flash_unlock();
20000740:	f7ff fd18 	bl	20000174 <hal_flash_unlock>
    wolfBoot_erase_bootloader();
20000744:	f7ff ffde 	bl	20000704 <wolfBoot_erase_bootloader>
    while (pos < src->fw_size) {
20000748:	e01c      	b.n	20000784 <wolfBoot_self_update+0x54>
        if (src_offset + pos < (src->fw_size + IMAGE_HEADER_SIZE + FLASHBUFFER_SIZE))  {
2000074a:	9a04      	ldr	r2, [sp, #16]
2000074c:	9b05      	ldr	r3, [sp, #20]
2000074e:	441a      	add	r2, r3
20000750:	9b01      	ldr	r3, [sp, #4]
20000752:	691b      	ldr	r3, [r3, #16]
20000754:	f503 7300 	add.w	r3, r3, #512	; 0x200
20000758:	429a      	cmp	r2, r3
2000075a:	d20f      	bcs.n	2000077c <wolfBoot_self_update+0x4c>
            uint8_t *orig = (uint8_t*)(src->hdr + src_offset + pos);
2000075c:	9b01      	ldr	r3, [sp, #4]
2000075e:	681a      	ldr	r2, [r3, #0]
20000760:	9904      	ldr	r1, [sp, #16]
20000762:	9b05      	ldr	r3, [sp, #20]
20000764:	440b      	add	r3, r1
20000766:	4413      	add	r3, r2
20000768:	9303      	str	r3, [sp, #12]
            hal_flash_write(pos + (uint32_t)&_start_text, orig, FLASHBUFFER_SIZE);
2000076a:	4a0d      	ldr	r2, [pc, #52]	; (200007a0 <wolfBoot_self_update+0x70>)
2000076c:	9b05      	ldr	r3, [sp, #20]
2000076e:	4413      	add	r3, r2
20000770:	f44f 7280 	mov.w	r2, #256	; 0x100
20000774:	9903      	ldr	r1, [sp, #12]
20000776:	4618      	mov	r0, r3
20000778:	f7ff fc6c 	bl	20000054 <hal_flash_write>
        pos += FLASHBUFFER_SIZE;
2000077c:	9b05      	ldr	r3, [sp, #20]
2000077e:	f503 7380 	add.w	r3, r3, #256	; 0x100
20000782:	9305      	str	r3, [sp, #20]
    while (pos < src->fw_size) {
20000784:	9b01      	ldr	r3, [sp, #4]
20000786:	691b      	ldr	r3, [r3, #16]
20000788:	9a05      	ldr	r2, [sp, #20]
2000078a:	429a      	cmp	r2, r3
2000078c:	d3dd      	bcc.n	2000074a <wolfBoot_self_update+0x1a>
    hal_flash_lock();
2000078e:	f7ff fd07 	bl	200001a0 <hal_flash_lock>
    arch_reboot();
20000792:	f7ff ffaf 	bl	200006f4 <arch_reboot>
}
20000796:	bf00      	nop
20000798:	b007      	add	sp, #28
2000079a:	f85d fb04 	ldr.w	pc, [sp], #4
2000079e:	bf00      	nop
200007a0:	08000000 	.word	0x08000000

200007a4 <wolfBoot_copy_sector>:
#endif /* RAM_CODE for self_update */

static int RAMFUNCTION wolfBoot_copy_sector(struct wolfBoot_image *src, struct wolfBoot_image *dst, uint32_t sector)
{
200007a4:	b500      	push	{lr}
200007a6:	b089      	sub	sp, #36	; 0x24
200007a8:	9003      	str	r0, [sp, #12]
200007aa:	9102      	str	r1, [sp, #8]
200007ac:	9201      	str	r2, [sp, #4]
    uint32_t pos = 0;
200007ae:	2300      	movs	r3, #0
200007b0:	9307      	str	r3, [sp, #28]
    uint32_t src_sector_offset = (sector * WOLFBOOT_SECTOR_SIZE);
200007b2:	9b01      	ldr	r3, [sp, #4]
200007b4:	02db      	lsls	r3, r3, #11
200007b6:	9306      	str	r3, [sp, #24]
    uint32_t dst_sector_offset = (sector * WOLFBOOT_SECTOR_SIZE);
200007b8:	9b01      	ldr	r3, [sp, #4]
200007ba:	02db      	lsls	r3, r3, #11
200007bc:	9305      	str	r3, [sp, #20]
    uint8_t key[ENCRYPT_KEY_SIZE];
    uint8_t nonce[ENCRYPT_NONCE_SIZE];
    uint32_t iv_counter;
#endif

    if (src == dst)
200007be:	9a03      	ldr	r2, [sp, #12]
200007c0:	9b02      	ldr	r3, [sp, #8]
200007c2:	429a      	cmp	r2, r3
200007c4:	d101      	bne.n	200007ca <wolfBoot_copy_sector+0x26>
        return 0;
200007c6:	2300      	movs	r3, #0
200007c8:	e03c      	b.n	20000844 <wolfBoot_copy_sector+0xa0>

    if (src->part == PART_SWAP)
200007ca:	9b03      	ldr	r3, [sp, #12]
200007cc:	7d1b      	ldrb	r3, [r3, #20]
200007ce:	2b02      	cmp	r3, #2
200007d0:	d101      	bne.n	200007d6 <wolfBoot_copy_sector+0x32>
        src_sector_offset = 0;
200007d2:	2300      	movs	r3, #0
200007d4:	9306      	str	r3, [sp, #24]
    if (dst->part == PART_SWAP)
200007d6:	9b02      	ldr	r3, [sp, #8]
200007d8:	7d1b      	ldrb	r3, [r3, #20]
200007da:	2b02      	cmp	r3, #2
200007dc:	d101      	bne.n	200007e2 <wolfBoot_copy_sector+0x3e>
        dst_sector_offset = 0;
200007de:	2300      	movs	r3, #0
200007e0:	9305      	str	r3, [sp, #20]
            pos += FLASHBUFFER_SIZE;
        }
        return pos;
    }
#endif
    wb_flash_erase(dst, dst_sector_offset, WOLFBOOT_SECTOR_SIZE);
200007e2:	9b02      	ldr	r3, [sp, #8]
200007e4:	681b      	ldr	r3, [r3, #0]
200007e6:	461a      	mov	r2, r3
200007e8:	9b05      	ldr	r3, [sp, #20]
200007ea:	4413      	add	r3, r2
200007ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
200007f0:	4618      	mov	r0, r3
200007f2:	f7ff fd1d 	bl	20000230 <hal_flash_erase>
    while (pos < WOLFBOOT_SECTOR_SIZE) {
200007f6:	e020      	b.n	2000083a <wolfBoot_copy_sector+0x96>
        if (src_sector_offset + pos < (src->fw_size + IMAGE_HEADER_SIZE + FLASHBUFFER_SIZE))  {
200007f8:	9a06      	ldr	r2, [sp, #24]
200007fa:	9b07      	ldr	r3, [sp, #28]
200007fc:	441a      	add	r2, r3
200007fe:	9b03      	ldr	r3, [sp, #12]
20000800:	691b      	ldr	r3, [r3, #16]
20000802:	f503 7300 	add.w	r3, r3, #512	; 0x200
20000806:	429a      	cmp	r2, r3
20000808:	d213      	bcs.n	20000832 <wolfBoot_copy_sector+0x8e>
            uint8_t *orig = (uint8_t*)(src->hdr + src_sector_offset + pos);
2000080a:	9b03      	ldr	r3, [sp, #12]
2000080c:	681a      	ldr	r2, [r3, #0]
2000080e:	9906      	ldr	r1, [sp, #24]
20000810:	9b07      	ldr	r3, [sp, #28]
20000812:	440b      	add	r3, r1
20000814:	4413      	add	r3, r2
20000816:	9304      	str	r3, [sp, #16]
            wb_flash_write(dst, dst_sector_offset + pos, orig, FLASHBUFFER_SIZE);
20000818:	9b02      	ldr	r3, [sp, #8]
2000081a:	681b      	ldr	r3, [r3, #0]
2000081c:	461a      	mov	r2, r3
2000081e:	9b05      	ldr	r3, [sp, #20]
20000820:	441a      	add	r2, r3
20000822:	9b07      	ldr	r3, [sp, #28]
20000824:	4413      	add	r3, r2
20000826:	f44f 7280 	mov.w	r2, #256	; 0x100
2000082a:	9904      	ldr	r1, [sp, #16]
2000082c:	4618      	mov	r0, r3
2000082e:	f7ff fc11 	bl	20000054 <hal_flash_write>
        }
        pos += FLASHBUFFER_SIZE;
20000832:	9b07      	ldr	r3, [sp, #28]
20000834:	f503 7380 	add.w	r3, r3, #256	; 0x100
20000838:	9307      	str	r3, [sp, #28]
    while (pos < WOLFBOOT_SECTOR_SIZE) {
2000083a:	9b07      	ldr	r3, [sp, #28]
2000083c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20000840:	d3da      	bcc.n	200007f8 <wolfBoot_copy_sector+0x54>
    }
    return pos;
20000842:	9b07      	ldr	r3, [sp, #28]
}
20000844:	4618      	mov	r0, r3
20000846:	b009      	add	sp, #36	; 0x24
20000848:	f85d fb04 	ldr.w	pc, [sp], #4

2000084c <wolfBoot_update>:
#ifdef WOLFBOOT_ARMORED
#    pragma GCC push_options
#    pragma GCC optimize("O0")
#endif
static int RAMFUNCTION wolfBoot_update(int fallback_allowed)
{
2000084c:	b510      	push	{r4, lr}
2000084e:	b09c      	sub	sp, #112	; 0x70
20000850:	9001      	str	r0, [sp, #4]
    uint32_t total_size = 0;
20000852:	2300      	movs	r3, #0
20000854:	931b      	str	r3, [sp, #108]	; 0x6c
    const uint32_t sector_size = WOLFBOOT_SECTOR_SIZE;
20000856:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000085a:	9319      	str	r3, [sp, #100]	; 0x64
    uint32_t sector = 0;
2000085c:	2300      	movs	r3, #0
2000085e:	931a      	str	r3, [sp, #104]	; 0x68
    uint8_t key[ENCRYPT_KEY_SIZE];
    uint8_t nonce[ENCRYPT_NONCE_SIZE];
#endif

    /* No Safety check on open: we might be in the middle of a broken update */
    wolfBoot_open_image(&update, PART_UPDATE);
20000860:	ab09      	add	r3, sp, #36	; 0x24
20000862:	2101      	movs	r1, #1
20000864:	4618      	mov	r0, r3
20000866:	f000 f997 	bl	20000b98 <__wolfBoot_open_image_veneer>
    wolfBoot_open_image(&boot, PART_BOOT);
2000086a:	ab0f      	add	r3, sp, #60	; 0x3c
2000086c:	2100      	movs	r1, #0
2000086e:	4618      	mov	r0, r3
20000870:	f000 f992 	bl	20000b98 <__wolfBoot_open_image_veneer>
    wolfBoot_open_image(&swap, PART_SWAP);
20000874:	ab03      	add	r3, sp, #12
20000876:	2102      	movs	r1, #2
20000878:	4618      	mov	r0, r3
2000087a:	f000 f98d 	bl	20000b98 <__wolfBoot_open_image_veneer>


    /* Use biggest size for the swap */
    total_size = boot.fw_size + IMAGE_HEADER_SIZE;
2000087e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
20000880:	f503 7380 	add.w	r3, r3, #256	; 0x100
20000884:	931b      	str	r3, [sp, #108]	; 0x6c
    if ((update.fw_size + IMAGE_HEADER_SIZE) > total_size)
20000886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
20000888:	f503 7380 	add.w	r3, r3, #256	; 0x100
2000088c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
2000088e:	429a      	cmp	r2, r3
20000890:	d203      	bcs.n	2000089a <wolfBoot_update+0x4e>
            total_size = update.fw_size + IMAGE_HEADER_SIZE;
20000892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
20000894:	f503 7380 	add.w	r3, r3, #256	; 0x100
20000898:	931b      	str	r3, [sp, #108]	; 0x6c

    if (total_size <= IMAGE_HEADER_SIZE)
2000089a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
2000089c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
200008a0:	d802      	bhi.n	200008a8 <wolfBoot_update+0x5c>
        return -1;
200008a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200008a6:	e106      	b.n	20000ab6 <wolfBoot_update+0x26a>
    /* In case this is a new update, do the required
     * checks on the firmware update
     * before starting the swap
     */

    update_type = wolfBoot_get_image_type(PART_UPDATE);
200008a8:	2001      	movs	r0, #1
200008aa:	f000 f979 	bl	20000ba0 <__wolfBoot_get_image_type_veneer>
200008ae:	4603      	mov	r3, r0
200008b0:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62


    /* Check the first sector to detect interrupted update */
    if ((wolfBoot_get_update_sector_flag(0, &flag) < 0) || (flag == SECT_FLAG_NEW))
200008b4:	f10d 0357 	add.w	r3, sp, #87	; 0x57
200008b8:	4619      	mov	r1, r3
200008ba:	2000      	movs	r0, #0
200008bc:	f000 f964 	bl	20000b88 <__wolfBoot_get_update_sector_flag_veneer>
200008c0:	4603      	mov	r3, r0
200008c2:	2b00      	cmp	r3, #0
200008c4:	db03      	blt.n	200008ce <wolfBoot_update+0x82>
200008c6:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
200008ca:	2b0f      	cmp	r3, #15
200008cc:	d132      	bne.n	20000934 <wolfBoot_update+0xe8>
    {
        if (((update_type & 0x000F) != HDR_IMG_TYPE_APP) || ((update_type & 0xFF00) != HDR_IMG_TYPE_AUTH))
200008ce:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
200008d2:	f003 030f 	and.w	r3, r3, #15
200008d6:	2b01      	cmp	r3, #1
200008d8:	d106      	bne.n	200008e8 <wolfBoot_update+0x9c>
200008da:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
200008de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
200008e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
200008e6:	d002      	beq.n	200008ee <wolfBoot_update+0xa2>
            return -1;
200008e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200008ec:	e0e3      	b.n	20000ab6 <wolfBoot_update+0x26a>
        if (!update.hdr_ok || (wolfBoot_verify_integrity(&update) < 0)) {
200008ee:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
200008f2:	f003 0301 	and.w	r3, r3, #1
200008f6:	b2db      	uxtb	r3, r3
200008f8:	2b00      	cmp	r3, #0
200008fa:	d006      	beq.n	2000090a <wolfBoot_update+0xbe>
200008fc:	ab09      	add	r3, sp, #36	; 0x24
200008fe:	4618      	mov	r0, r3
20000900:	f000 f946 	bl	20000b90 <__wolfBoot_verify_integrity_veneer>
20000904:	4603      	mov	r3, r0
20000906:	2b00      	cmp	r3, #0
20000908:	da02      	bge.n	20000910 <wolfBoot_update+0xc4>
                // || (wolfBoot_verify_authenticity(&update) < 0)) {
            return -1;
2000090a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2000090e:	e0d2      	b.n	20000ab6 <wolfBoot_update+0x26a>
        }
#ifdef WOLFBOOT_ARMORED
        // PART_SANITY_CHECK(&update);
#endif
        trigger_high();
20000910:	f000 f94a 	bl	20000ba8 <__trigger_high_veneer>
#ifndef WOLFBOOT_ARMORED
    #ifndef ALLOW_DOWNGRADE
            if ( !fallback_allowed &&
20000914:	9b01      	ldr	r3, [sp, #4]
20000916:	2b00      	cmp	r3, #0
20000918:	d10c      	bne.n	20000934 <wolfBoot_update+0xe8>
                    (wolfBoot_update_firmware_version() <= wolfBoot_current_firmware_version()) ) {
2000091a:	2001      	movs	r0, #1
2000091c:	f000 f958 	bl	20000bd0 <__wolfBoot_get_image_version_veneer>
20000920:	4604      	mov	r4, r0
20000922:	2000      	movs	r0, #0
20000924:	f000 f954 	bl	20000bd0 <__wolfBoot_get_image_version_veneer>
20000928:	4603      	mov	r3, r0
            if ( !fallback_allowed &&
2000092a:	429c      	cmp	r4, r3
2000092c:	d802      	bhi.n	20000934 <wolfBoot_update+0xe8>
                        return -1;
2000092e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20000932:	e0c0      	b.n	20000ab6 <wolfBoot_update+0x26a>
    if ((update_type & 0x00F0) == HDR_IMG_TYPE_DIFF) {
        return wolfBoot_delta_update(&boot, &update, &swap, fallback_allowed);
    }
#endif

    trigger_low();
20000934:	f000 f948 	bl	20000bc8 <__trigger_low_veneer>
    hal_flash_unlock();
20000938:	f7ff fc1c 	bl	20000174 <hal_flash_unlock>
#ifndef DISABLE_BACKUP
    /* Interruptible swap
     * The status is saved in the sector flags of the update partition.
     * If something goes wrong, the operation will be resumed upon reboot.
     */
    while ((sector * sector_size) < total_size) {
2000093c:	e07e      	b.n	20000a3c <wolfBoot_update+0x1f0>
        if ((wolfBoot_get_update_sector_flag(sector, &flag) != 0) || (flag == SECT_FLAG_NEW)) {
2000093e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000940:	b29b      	uxth	r3, r3
20000942:	f10d 0257 	add.w	r2, sp, #87	; 0x57
20000946:	4611      	mov	r1, r2
20000948:	4618      	mov	r0, r3
2000094a:	f000 f91d 	bl	20000b88 <__wolfBoot_get_update_sector_flag_veneer>
2000094e:	4603      	mov	r3, r0
20000950:	2b00      	cmp	r3, #0
20000952:	d103      	bne.n	2000095c <wolfBoot_update+0x110>
20000954:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
20000958:	2b0f      	cmp	r3, #15
2000095a:	d118      	bne.n	2000098e <wolfBoot_update+0x142>
           flag = SECT_FLAG_SWAPPING;
2000095c:	2307      	movs	r3, #7
2000095e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
           wolfBoot_copy_sector(&update, &swap, sector);
20000962:	a903      	add	r1, sp, #12
20000964:	ab09      	add	r3, sp, #36	; 0x24
20000966:	9a1a      	ldr	r2, [sp, #104]	; 0x68
20000968:	4618      	mov	r0, r3
2000096a:	f7ff ff1b 	bl	200007a4 <wolfBoot_copy_sector>
           if (((sector + 1) * sector_size) < WOLFBOOT_PARTITION_SIZE)
2000096e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000970:	3301      	adds	r3, #1
20000972:	9a19      	ldr	r2, [sp, #100]	; 0x64
20000974:	fb02 f303 	mul.w	r3, r2, r3
20000978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000097c:	d207      	bcs.n	2000098e <wolfBoot_update+0x142>
               wolfBoot_set_update_sector_flag(sector, flag);
2000097e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000980:	b29b      	uxth	r3, r3
20000982:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
20000986:	4611      	mov	r1, r2
20000988:	4618      	mov	r0, r3
2000098a:	f7ff fdaf 	bl	200004ec <wolfBoot_set_update_sector_flag>
        }
        if (flag == SECT_FLAG_SWAPPING) {
2000098e:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
20000992:	2b07      	cmp	r3, #7
20000994:	d125      	bne.n	200009e2 <wolfBoot_update+0x196>
            uint32_t size = total_size - (sector * sector_size);
20000996:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000998:	9a19      	ldr	r2, [sp, #100]	; 0x64
2000099a:	fb02 f303 	mul.w	r3, r2, r3
2000099e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
200009a0:	1ad3      	subs	r3, r2, r3
200009a2:	9317      	str	r3, [sp, #92]	; 0x5c
            if (size > sector_size)
200009a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
200009a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
200009a8:	429a      	cmp	r2, r3
200009aa:	d901      	bls.n	200009b0 <wolfBoot_update+0x164>
                size = sector_size;
200009ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
200009ae:	9317      	str	r3, [sp, #92]	; 0x5c
            flag = SECT_FLAG_BACKUP;
200009b0:	2303      	movs	r3, #3
200009b2:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            wolfBoot_copy_sector(&boot, &update, sector);
200009b6:	a909      	add	r1, sp, #36	; 0x24
200009b8:	ab0f      	add	r3, sp, #60	; 0x3c
200009ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
200009bc:	4618      	mov	r0, r3
200009be:	f7ff fef1 	bl	200007a4 <wolfBoot_copy_sector>
           if (((sector + 1) * sector_size) < WOLFBOOT_PARTITION_SIZE)
200009c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
200009c4:	3301      	adds	r3, #1
200009c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
200009c8:	fb02 f303 	mul.w	r3, r2, r3
200009cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200009d0:	d207      	bcs.n	200009e2 <wolfBoot_update+0x196>
                wolfBoot_set_update_sector_flag(sector, flag);
200009d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
200009d4:	b29b      	uxth	r3, r3
200009d6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
200009da:	4611      	mov	r1, r2
200009dc:	4618      	mov	r0, r3
200009de:	f7ff fd85 	bl	200004ec <wolfBoot_set_update_sector_flag>
        }
        if (flag == SECT_FLAG_BACKUP) {
200009e2:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
200009e6:	2b03      	cmp	r3, #3
200009e8:	d125      	bne.n	20000a36 <wolfBoot_update+0x1ea>
            uint32_t size = total_size - (sector * sector_size);
200009ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
200009ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
200009ee:	fb02 f303 	mul.w	r3, r2, r3
200009f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
200009f4:	1ad3      	subs	r3, r2, r3
200009f6:	9316      	str	r3, [sp, #88]	; 0x58
            if (size > sector_size)
200009f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
200009fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
200009fc:	429a      	cmp	r2, r3
200009fe:	d901      	bls.n	20000a04 <wolfBoot_update+0x1b8>
                size = sector_size;
20000a00:	9b19      	ldr	r3, [sp, #100]	; 0x64
20000a02:	9316      	str	r3, [sp, #88]	; 0x58
            flag = SECT_FLAG_UPDATED;
20000a04:	2300      	movs	r3, #0
20000a06:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            wolfBoot_copy_sector(&swap, &boot, sector);
20000a0a:	a90f      	add	r1, sp, #60	; 0x3c
20000a0c:	ab03      	add	r3, sp, #12
20000a0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
20000a10:	4618      	mov	r0, r3
20000a12:	f7ff fec7 	bl	200007a4 <wolfBoot_copy_sector>
            if (((sector + 1) * sector_size) < WOLFBOOT_PARTITION_SIZE)
20000a16:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000a18:	3301      	adds	r3, #1
20000a1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
20000a1c:	fb02 f303 	mul.w	r3, r2, r3
20000a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000a24:	d207      	bcs.n	20000a36 <wolfBoot_update+0x1ea>
                wolfBoot_set_update_sector_flag(sector, flag);
20000a26:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000a28:	b29b      	uxth	r3, r3
20000a2a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
20000a2e:	4611      	mov	r1, r2
20000a30:	4618      	mov	r0, r3
20000a32:	f7ff fd5b 	bl	200004ec <wolfBoot_set_update_sector_flag>
        }
        sector++;
20000a36:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000a38:	3301      	adds	r3, #1
20000a3a:	931a      	str	r3, [sp, #104]	; 0x68
    while ((sector * sector_size) < total_size) {
20000a3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000a3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
20000a40:	fb02 f303 	mul.w	r3, r2, r3
20000a44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
20000a46:	429a      	cmp	r2, r3
20000a48:	f63f af79 	bhi.w	2000093e <wolfBoot_update+0xf2>
    }
    while((sector * sector_size) < WOLFBOOT_PARTITION_SIZE) {
20000a4c:	e01a      	b.n	20000a84 <wolfBoot_update+0x238>
        wb_flash_erase(&boot, sector * sector_size, sector_size);
20000a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
20000a50:	4619      	mov	r1, r3
20000a52:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000a54:	9a19      	ldr	r2, [sp, #100]	; 0x64
20000a56:	fb02 f303 	mul.w	r3, r2, r3
20000a5a:	440b      	add	r3, r1
20000a5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
20000a5e:	4611      	mov	r1, r2
20000a60:	4618      	mov	r0, r3
20000a62:	f7ff fbe5 	bl	20000230 <hal_flash_erase>
        wb_flash_erase(&update, sector * sector_size, sector_size);
20000a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
20000a68:	4619      	mov	r1, r3
20000a6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000a6c:	9a19      	ldr	r2, [sp, #100]	; 0x64
20000a6e:	fb02 f303 	mul.w	r3, r2, r3
20000a72:	440b      	add	r3, r1
20000a74:	9a19      	ldr	r2, [sp, #100]	; 0x64
20000a76:	4611      	mov	r1, r2
20000a78:	4618      	mov	r0, r3
20000a7a:	f7ff fbd9 	bl	20000230 <hal_flash_erase>
        sector++;
20000a7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000a80:	3301      	adds	r3, #1
20000a82:	931a      	str	r3, [sp, #104]	; 0x68
    while((sector * sector_size) < WOLFBOOT_PARTITION_SIZE) {
20000a84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
20000a86:	9a19      	ldr	r2, [sp, #100]	; 0x64
20000a88:	fb02 f303 	mul.w	r3, r2, r3
20000a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20000a90:	d3dd      	bcc.n	20000a4e <wolfBoot_update+0x202>
    }
    wb_flash_erase(&swap, 0, WOLFBOOT_SECTOR_SIZE);
20000a92:	9b03      	ldr	r3, [sp, #12]
20000a94:	f44f 6100 	mov.w	r1, #2048	; 0x800
20000a98:	4618      	mov	r0, r3
20000a9a:	f7ff fbc9 	bl	20000230 <hal_flash_erase>
    st = IMG_STATE_TESTING;
20000a9e:	2310      	movs	r3, #16
20000aa0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    wolfBoot_set_partition_state(PART_BOOT, st);
20000aa4:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
20000aa8:	4619      	mov	r1, r3
20000aaa:	2000      	movs	r0, #0
20000aac:	f7ff fce9 	bl	20000482 <wolfBoot_set_partition_state>
#endif

#ifdef EXT_FLASH
    ext_flash_lock();
#endif
    hal_flash_lock();
20000ab0:	f7ff fb76 	bl	200001a0 <hal_flash_lock>

/* Save the encryption key after swapping */
#ifdef EXT_ENCRYPTED
    wolfBoot_set_encrypt_key(key, nonce);
#endif
    return 0;
20000ab4:	2300      	movs	r3, #0
}
20000ab6:	4618      	mov	r0, r3
20000ab8:	b01c      	add	sp, #112	; 0x70
20000aba:	bd10      	pop	{r4, pc}

20000abc <wolfBoot_start>:

void RAMFUNCTION wolfBoot_start(void)
{
20000abc:	b500      	push	{lr}
20000abe:	b089      	sub	sp, #36	; 0x24
    uint8_t st;
    struct wolfBoot_image boot;

#ifdef RAM_CODE
    wolfBoot_check_self_update();
20000ac0:	f000 f87a 	bl	20000bb8 <__wolfBoot_check_self_update_veneer>
            }
        }
    }
bad_goto_usage:
#else
    if ((wolfBoot_get_partition_state(PART_BOOT, &st) == 0) && (st == IMG_STATE_TESTING)) {
20000ac4:	f10d 031f 	add.w	r3, sp, #31
20000ac8:	4619      	mov	r1, r3
20000aca:	2000      	movs	r0, #0
20000acc:	f7ff fd6a 	bl	200005a4 <wolfBoot_get_partition_state>
20000ad0:	4603      	mov	r3, r0
20000ad2:	2b00      	cmp	r3, #0
20000ad4:	d109      	bne.n	20000aea <wolfBoot_start+0x2e>
20000ad6:	f89d 301f 	ldrb.w	r3, [sp, #31]
20000ada:	2b10      	cmp	r3, #16
20000adc:	d105      	bne.n	20000aea <wolfBoot_start+0x2e>
        wolfBoot_update_trigger();
20000ade:	f7ff fdb1 	bl	20000644 <wolfBoot_update_trigger>
        wolfBoot_update(1);
20000ae2:	2001      	movs	r0, #1
20000ae4:	f7ff feb2 	bl	2000084c <wolfBoot_update>
20000ae8:	e011      	b.n	20000b0e <wolfBoot_start+0x52>
    } else if ((wolfBoot_get_partition_state(PART_UPDATE, &st) == 0) && (st == IMG_STATE_UPDATING)) {
20000aea:	f10d 031f 	add.w	r3, sp, #31
20000aee:	4619      	mov	r1, r3
20000af0:	2001      	movs	r0, #1
20000af2:	f7ff fd57 	bl	200005a4 <wolfBoot_get_partition_state>
20000af6:	4603      	mov	r3, r0
20000af8:	2b00      	cmp	r3, #0
20000afa:	d108      	bne.n	20000b0e <wolfBoot_start+0x52>
20000afc:	f89d 301f 	ldrb.w	r3, [sp, #31]
20000b00:	2b70      	cmp	r3, #112	; 0x70
20000b02:	d104      	bne.n	20000b0e <wolfBoot_start+0x52>
    /* Check for new updates in the UPDATE partition */
        wolfBoot_update(0);
20000b04:	2000      	movs	r0, #0
20000b06:	f7ff fea1 	bl	2000084c <wolfBoot_update>
        trigger_low();
20000b0a:	f000 f85d 	bl	20000bc8 <__trigger_low_veneer>
    }
#endif
    if ((wolfBoot_open_image(&boot, PART_BOOT) < 0)
20000b0e:	ab01      	add	r3, sp, #4
20000b10:	2100      	movs	r1, #0
20000b12:	4618      	mov	r0, r3
20000b14:	f000 f840 	bl	20000b98 <__wolfBoot_open_image_veneer>
20000b18:	4603      	mov	r3, r0
20000b1a:	2b00      	cmp	r3, #0
20000b1c:	db06      	blt.n	20000b2c <wolfBoot_start+0x70>
            || (wolfBoot_verify_integrity(&boot) < 0)
20000b1e:	ab01      	add	r3, sp, #4
20000b20:	4618      	mov	r0, r3
20000b22:	f000 f835 	bl	20000b90 <__wolfBoot_verify_integrity_veneer>
20000b26:	4603      	mov	r3, r0
20000b28:	2b00      	cmp	r3, #0
20000b2a:	da20      	bge.n	20000b6e <wolfBoot_start+0xb2>
            // || (wolfBoot_verify_authenticity(&boot) < 0)
            ) {
        if (likely(wolfBoot_update(1) < 0)) {
20000b2c:	2001      	movs	r0, #1
20000b2e:	f7ff fe8d 	bl	2000084c <wolfBoot_update>
20000b32:	4603      	mov	r3, r0
20000b34:	2b00      	cmp	r3, #0
20000b36:	da02      	bge.n	20000b3e <wolfBoot_start+0x82>
            /* panic: no boot option available. */
                // trigger_low();
            wolfBoot_panic();
20000b38:	f000 f84e 	bl	20000bd8 <__wolfBoot_panic_veneer>
20000b3c:	e017      	b.n	20000b6e <wolfBoot_start+0xb2>
        } else {
            /* Emergency update successful, try to re-open boot image */
            if (likely(((wolfBoot_open_image(&boot, PART_BOOT) < 0) ||
20000b3e:	ab01      	add	r3, sp, #4
20000b40:	2100      	movs	r1, #0
20000b42:	4618      	mov	r0, r3
20000b44:	f000 f828 	bl	20000b98 <__wolfBoot_open_image_veneer>
20000b48:	4603      	mov	r3, r0
20000b4a:	2b00      	cmp	r3, #0
20000b4c:	db0d      	blt.n	20000b6a <wolfBoot_start+0xae>
20000b4e:	ab01      	add	r3, sp, #4
20000b50:	4618      	mov	r0, r3
20000b52:	f000 f81d 	bl	20000b90 <__wolfBoot_verify_integrity_veneer>
20000b56:	4603      	mov	r3, r0
20000b58:	2b00      	cmp	r3, #0
20000b5a:	db06      	blt.n	20000b6a <wolfBoot_start+0xae>
20000b5c:	ab01      	add	r3, sp, #4
20000b5e:	4618      	mov	r0, r3
20000b60:	f000 f82e 	bl	20000bc0 <__wolfBoot_verify_authenticity_veneer>
20000b64:	4603      	mov	r3, r0
20000b66:	2b00      	cmp	r3, #0
20000b68:	da01      	bge.n	20000b6e <wolfBoot_start+0xb2>
                    (wolfBoot_verify_integrity(&boot) < 0)  ||
                    (wolfBoot_verify_authenticity(&boot) < 0)))) {
                /* panic: something went wrong after the emergency update */
                // trigger_low();
                wolfBoot_panic();
20000b6a:	f000 f835 	bl	20000bd8 <__wolfBoot_panic_veneer>
            }
        }
    }
    trigger_low();
20000b6e:	f000 f82b 	bl	20000bc8 <__trigger_low_veneer>
#ifdef WOLFBOOT_ARMORED
    // PART_SANITY_CHECK(&boot);
#endif
    hal_prepare_boot();
20000b72:	f000 f81d 	bl	20000bb0 <__hal_prepare_boot_veneer>
    do_boot((void *)boot.fw_base);
20000b76:	9b04      	ldr	r3, [sp, #16]
20000b78:	4618      	mov	r0, r3
20000b7a:	f7ff fd95 	bl	200006a8 <do_boot>
}
20000b7e:	bf00      	nop
20000b80:	b009      	add	sp, #36	; 0x24
20000b82:	f85d fb04 	ldr.w	pc, [sp], #4
20000b86:	bf00      	nop

20000b88 <__wolfBoot_get_update_sector_flag_veneer>:
20000b88:	f85f f000 	ldr.w	pc, [pc]	; 20000b8c <__wolfBoot_get_update_sector_flag_veneer+0x4>
20000b8c:	08000739 	.word	0x08000739

20000b90 <__wolfBoot_verify_integrity_veneer>:
20000b90:	f85f f000 	ldr.w	pc, [pc]	; 20000b94 <__wolfBoot_verify_integrity_veneer+0x4>
20000b94:	080005cd 	.word	0x080005cd

20000b98 <__wolfBoot_open_image_veneer>:
20000b98:	f85f f000 	ldr.w	pc, [pc]	; 20000b9c <__wolfBoot_open_image_veneer+0x4>
20000b9c:	080004d9 	.word	0x080004d9

20000ba0 <__wolfBoot_get_image_type_veneer>:
20000ba0:	f85f f000 	ldr.w	pc, [pc]	; 20000ba4 <__wolfBoot_get_image_type_veneer+0x4>
20000ba4:	08000951 	.word	0x08000951

20000ba8 <__trigger_high_veneer>:
20000ba8:	f85f f000 	ldr.w	pc, [pc]	; 20000bac <__trigger_high_veneer+0x4>
20000bac:	0800005d 	.word	0x0800005d

20000bb0 <__hal_prepare_boot_veneer>:
20000bb0:	f85f f000 	ldr.w	pc, [pc]	; 20000bb4 <__hal_prepare_boot_veneer+0x4>
20000bb4:	0800012d 	.word	0x0800012d

20000bb8 <__wolfBoot_check_self_update_veneer>:
20000bb8:	f85f f000 	ldr.w	pc, [pc]	; 20000bbc <__wolfBoot_check_self_update_veneer+0x4>
20000bbc:	08000bc1 	.word	0x08000bc1

20000bc0 <__wolfBoot_verify_authenticity_veneer>:
20000bc0:	f85f f000 	ldr.w	pc, [pc]	; 20000bc4 <__wolfBoot_verify_authenticity_veneer+0x4>
20000bc4:	08000641 	.word	0x08000641

20000bc8 <__trigger_low_veneer>:
20000bc8:	f85f f000 	ldr.w	pc, [pc]	; 20000bcc <__trigger_low_veneer+0x4>
20000bcc:	08000075 	.word	0x08000075

20000bd0 <__wolfBoot_get_image_version_veneer>:
20000bd0:	f85f f000 	ldr.w	pc, [pc]	; 20000bd4 <__wolfBoot_get_image_version_veneer+0x4>
20000bd4:	08000911 	.word	0x08000911

20000bd8 <__wolfBoot_panic_veneer>:
20000bd8:	f85f f000 	ldr.w	pc, [pc]	; 20000bdc <__wolfBoot_panic_veneer+0x4>
20000bdc:	08000bbf 	.word	0x08000bbf
